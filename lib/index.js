import { createRequire as __WEBPACK_EXTERNAL_createRequire } from "module";
/******/ var __webpack_modules__ = ({

/***/ 7351:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.issue = exports.issueCommand = void 0;
const os = __importStar(__nccwpck_require__(2037));
const utils_1 = __nccwpck_require__(5278);
/**
 * Commands
 *
 * Command Format:
 *   ::name key=value,key=value::message
 *
 * Examples:
 *   ::warning::This is the message
 *   ::set-env name=MY_VAR::some value
 */
function issueCommand(command, properties, message) {
    const cmd = new Command(command, properties, message);
    process.stdout.write(cmd.toString() + os.EOL);
}
exports.issueCommand = issueCommand;
function issue(name, message = '') {
    issueCommand(name, {}, message);
}
exports.issue = issue;
const CMD_STRING = '::';
class Command {
    constructor(command, properties, message) {
        if (!command) {
            command = 'missing.command';
        }
        this.command = command;
        this.properties = properties;
        this.message = message;
    }
    toString() {
        let cmdStr = CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
            cmdStr += ' ';
            let first = true;
            for (const key in this.properties) {
                if (this.properties.hasOwnProperty(key)) {
                    const val = this.properties[key];
                    if (val) {
                        if (first) {
                            first = false;
                        }
                        else {
                            cmdStr += ',';
                        }
                        cmdStr += `${key}=${escapeProperty(val)}`;
                    }
                }
            }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
        return cmdStr;
    }
}
function escapeData(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A');
}
function escapeProperty(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A')
        .replace(/:/g, '%3A')
        .replace(/,/g, '%2C');
}
//# sourceMappingURL=command.js.map

/***/ }),

/***/ 2186:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
const command_1 = __nccwpck_require__(7351);
const file_command_1 = __nccwpck_require__(717);
const utils_1 = __nccwpck_require__(5278);
const os = __importStar(__nccwpck_require__(2037));
const path = __importStar(__nccwpck_require__(1017));
const oidc_utils_1 = __nccwpck_require__(8041);
/**
 * The code to exit an action
 */
var ExitCode;
(function (ExitCode) {
    /**
     * A code indicating that the action was successful
     */
    ExitCode[ExitCode["Success"] = 0] = "Success";
    /**
     * A code indicating that the action was a failure
     */
    ExitCode[ExitCode["Failure"] = 1] = "Failure";
})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));
//-----------------------------------------------------------------------
// Variables
//-----------------------------------------------------------------------
/**
 * Sets env variable for this action and future actions in the job
 * @param name the name of the variable to set
 * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function exportVariable(name, val) {
    const convertedVal = utils_1.toCommandValue(val);
    process.env[name] = convertedVal;
    const filePath = process.env['GITHUB_ENV'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('ENV', file_command_1.prepareKeyValueMessage(name, val));
    }
    command_1.issueCommand('set-env', { name }, convertedVal);
}
exports.exportVariable = exportVariable;
/**
 * Registers a secret which will get masked from logs
 * @param secret value of the secret
 */
function setSecret(secret) {
    command_1.issueCommand('add-mask', {}, secret);
}
exports.setSecret = setSecret;
/**
 * Prepends inputPath to the PATH (for this action and future actions)
 * @param inputPath
 */
function addPath(inputPath) {
    const filePath = process.env['GITHUB_PATH'] || '';
    if (filePath) {
        file_command_1.issueFileCommand('PATH', inputPath);
    }
    else {
        command_1.issueCommand('add-path', {}, inputPath);
    }
    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;
}
exports.addPath = addPath;
/**
 * Gets the value of an input.
 * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.
 * Returns an empty string if the value is not defined.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string
 */
function getInput(name, options) {
    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';
    if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
    }
    if (options && options.trimWhitespace === false) {
        return val;
    }
    return val.trim();
}
exports.getInput = getInput;
/**
 * Gets the values of an multiline input.  Each value is also trimmed.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string[]
 *
 */
function getMultilineInput(name, options) {
    const inputs = getInput(name, options)
        .split('\n')
        .filter(x => x !== '');
    if (options && options.trimWhitespace === false) {
        return inputs;
    }
    return inputs.map(input => input.trim());
}
exports.getMultilineInput = getMultilineInput;
/**
 * Gets the input value of the boolean type in the YAML 1.2 "core schema" specification.
 * Support boolean input list: `true | True | TRUE | false | False | FALSE` .
 * The return value is also in boolean type.
 * ref: https://yaml.org/spec/1.2/spec.html#id2804923
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   boolean
 */
function getBooleanInput(name, options) {
    const trueValue = ['true', 'True', 'TRUE'];
    const falseValue = ['false', 'False', 'FALSE'];
    const val = getInput(name, options);
    if (trueValue.includes(val))
        return true;
    if (falseValue.includes(val))
        return false;
    throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}\n` +
        `Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
}
exports.getBooleanInput = getBooleanInput;
/**
 * Sets the value of an output.
 *
 * @param     name     name of the output to set
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function setOutput(name, value) {
    const filePath = process.env['GITHUB_OUTPUT'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('OUTPUT', file_command_1.prepareKeyValueMessage(name, value));
    }
    process.stdout.write(os.EOL);
    command_1.issueCommand('set-output', { name }, utils_1.toCommandValue(value));
}
exports.setOutput = setOutput;
/**
 * Enables or disables the echoing of commands into stdout for the rest of the step.
 * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.
 *
 */
function setCommandEcho(enabled) {
    command_1.issue('echo', enabled ? 'on' : 'off');
}
exports.setCommandEcho = setCommandEcho;
//-----------------------------------------------------------------------
// Results
//-----------------------------------------------------------------------
/**
 * Sets the action status to failed.
 * When the action exits it will be with an exit code of 1
 * @param message add error issue message
 */
function setFailed(message) {
    process.exitCode = ExitCode.Failure;
    error(message);
}
exports.setFailed = setFailed;
//-----------------------------------------------------------------------
// Logging Commands
//-----------------------------------------------------------------------
/**
 * Gets whether Actions Step Debug is on or not
 */
function isDebug() {
    return process.env['RUNNER_DEBUG'] === '1';
}
exports.isDebug = isDebug;
/**
 * Writes debug message to user log
 * @param message debug message
 */
function debug(message) {
    command_1.issueCommand('debug', {}, message);
}
exports.debug = debug;
/**
 * Adds an error issue
 * @param message error issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function error(message, properties = {}) {
    command_1.issueCommand('error', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.error = error;
/**
 * Adds a warning issue
 * @param message warning issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function warning(message, properties = {}) {
    command_1.issueCommand('warning', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.warning = warning;
/**
 * Adds a notice issue
 * @param message notice issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function notice(message, properties = {}) {
    command_1.issueCommand('notice', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.notice = notice;
/**
 * Writes info to log with console.log.
 * @param message info message
 */
function info(message) {
    process.stdout.write(message + os.EOL);
}
exports.info = info;
/**
 * Begin an output group.
 *
 * Output until the next `groupEnd` will be foldable in this group
 *
 * @param name The name of the output group
 */
function startGroup(name) {
    command_1.issue('group', name);
}
exports.startGroup = startGroup;
/**
 * End an output group.
 */
function endGroup() {
    command_1.issue('endgroup');
}
exports.endGroup = endGroup;
/**
 * Wrap an asynchronous function call in a group.
 *
 * Returns the same type as the function itself.
 *
 * @param name The name of the group
 * @param fn The function to wrap in the group
 */
function group(name, fn) {
    return __awaiter(this, void 0, void 0, function* () {
        startGroup(name);
        let result;
        try {
            result = yield fn();
        }
        finally {
            endGroup();
        }
        return result;
    });
}
exports.group = group;
//-----------------------------------------------------------------------
// Wrapper action state
//-----------------------------------------------------------------------
/**
 * Saves state for current action, the state can only be retrieved by this action's post job execution.
 *
 * @param     name     name of the state to store
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function saveState(name, value) {
    const filePath = process.env['GITHUB_STATE'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('STATE', file_command_1.prepareKeyValueMessage(name, value));
    }
    command_1.issueCommand('save-state', { name }, utils_1.toCommandValue(value));
}
exports.saveState = saveState;
/**
 * Gets the value of an state set by this action's main execution.
 *
 * @param     name     name of the state to get
 * @returns   string
 */
function getState(name) {
    return process.env[`STATE_${name}`] || '';
}
exports.getState = getState;
function getIDToken(aud) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield oidc_utils_1.OidcClient.getIDToken(aud);
    });
}
exports.getIDToken = getIDToken;
/**
 * Summary exports
 */
var summary_1 = __nccwpck_require__(1327);
Object.defineProperty(exports, "summary", ({ enumerable: true, get: function () { return summary_1.summary; } }));
/**
 * @deprecated use core.summary
 */
var summary_2 = __nccwpck_require__(1327);
Object.defineProperty(exports, "markdownSummary", ({ enumerable: true, get: function () { return summary_2.markdownSummary; } }));
/**
 * Path exports
 */
var path_utils_1 = __nccwpck_require__(2981);
Object.defineProperty(exports, "toPosixPath", ({ enumerable: true, get: function () { return path_utils_1.toPosixPath; } }));
Object.defineProperty(exports, "toWin32Path", ({ enumerable: true, get: function () { return path_utils_1.toWin32Path; } }));
Object.defineProperty(exports, "toPlatformPath", ({ enumerable: true, get: function () { return path_utils_1.toPlatformPath; } }));
//# sourceMappingURL=core.js.map

/***/ }),

/***/ 717:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


// For internal use, subject to change.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.prepareKeyValueMessage = exports.issueFileCommand = void 0;
// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
const fs = __importStar(__nccwpck_require__(7147));
const os = __importStar(__nccwpck_require__(2037));
const uuid_1 = __nccwpck_require__(5840);
const utils_1 = __nccwpck_require__(5278);
function issueFileCommand(command, message) {
    const filePath = process.env[`GITHUB_${command}`];
    if (!filePath) {
        throw new Error(`Unable to find environment variable for file command ${command}`);
    }
    if (!fs.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`);
    }
    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {
        encoding: 'utf8'
    });
}
exports.issueFileCommand = issueFileCommand;
function prepareKeyValueMessage(key, value) {
    const delimiter = `ghadelimiter_${uuid_1.v4()}`;
    const convertedValue = utils_1.toCommandValue(value);
    // These should realistically never happen, but just in case someone finds a
    // way to exploit uuid generation let's not allow keys or values that contain
    // the delimiter.
    if (key.includes(delimiter)) {
        throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
    }
    if (convertedValue.includes(delimiter)) {
        throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
    }
    return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;
}
exports.prepareKeyValueMessage = prepareKeyValueMessage;
//# sourceMappingURL=file-command.js.map

/***/ }),

/***/ 8041:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OidcClient = void 0;
const http_client_1 = __nccwpck_require__(6255);
const auth_1 = __nccwpck_require__(5526);
const core_1 = __nccwpck_require__(2186);
class OidcClient {
    static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
            allowRetries: allowRetry,
            maxRetries: maxRetry
        };
        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);
    }
    static getRequestToken() {
        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];
        if (!token) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');
        }
        return token;
    }
    static getIDTokenUrl() {
        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];
        if (!runtimeUrl) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');
        }
        return runtimeUrl;
    }
    static getCall(id_token_url) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const httpclient = OidcClient.createHttpClient();
            const res = yield httpclient
                .getJson(id_token_url)
                .catch(error => {
                throw new Error(`Failed to get ID Token. \n 
        Error Code : ${error.statusCode}\n 
        Error Message: ${error.message}`);
            });
            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
            if (!id_token) {
                throw new Error('Response json body do not have ID Token field');
            }
            return id_token;
        });
    }
    static getIDToken(audience) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // New ID Token is requested from action service
                let id_token_url = OidcClient.getIDTokenUrl();
                if (audience) {
                    const encodedAudience = encodeURIComponent(audience);
                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;
                }
                core_1.debug(`ID token url is ${id_token_url}`);
                const id_token = yield OidcClient.getCall(id_token_url);
                core_1.setSecret(id_token);
                return id_token;
            }
            catch (error) {
                throw new Error(`Error message: ${error.message}`);
            }
        });
    }
}
exports.OidcClient = OidcClient;
//# sourceMappingURL=oidc-utils.js.map

/***/ }),

/***/ 2981:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;
const path = __importStar(__nccwpck_require__(1017));
/**
 * toPosixPath converts the given path to the posix form. On Windows, \\ will be
 * replaced with /.
 *
 * @param pth. Path to transform.
 * @return string Posix path.
 */
function toPosixPath(pth) {
    return pth.replace(/[\\]/g, '/');
}
exports.toPosixPath = toPosixPath;
/**
 * toWin32Path converts the given path to the win32 form. On Linux, / will be
 * replaced with \\.
 *
 * @param pth. Path to transform.
 * @return string Win32 path.
 */
function toWin32Path(pth) {
    return pth.replace(/[/]/g, '\\');
}
exports.toWin32Path = toWin32Path;
/**
 * toPlatformPath converts the given path to a platform-specific path. It does
 * this by replacing instances of / and \ with the platform-specific path
 * separator.
 *
 * @param pth The path to platformize.
 * @return string The platform-specific path.
 */
function toPlatformPath(pth) {
    return pth.replace(/[/\\]/g, path.sep);
}
exports.toPlatformPath = toPlatformPath;
//# sourceMappingURL=path-utils.js.map

/***/ }),

/***/ 1327:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
const os_1 = __nccwpck_require__(2037);
const fs_1 = __nccwpck_require__(7147);
const { access, appendFile, writeFile } = fs_1.promises;
exports.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';
exports.SUMMARY_DOCS_URL = 'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';
class Summary {
    constructor() {
        this._buffer = '';
    }
    /**
     * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
     * Also checks r/w permissions.
     *
     * @returns step summary file path
     */
    filePath() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._filePath) {
                return this._filePath;
            }
            const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
            if (!pathFromEnv) {
                throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
            }
            try {
                yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
            }
            catch (_a) {
                throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
            }
            this._filePath = pathFromEnv;
            return this._filePath;
        });
    }
    /**
     * Wraps content in an HTML tag, adding any HTML attributes
     *
     * @param {string} tag HTML tag to wrap
     * @param {string | null} content content within the tag
     * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
     *
     * @returns {string} content wrapped in HTML element
     */
    wrap(tag, content, attrs = {}) {
        const htmlAttrs = Object.entries(attrs)
            .map(([key, value]) => ` ${key}="${value}"`)
            .join('');
        if (!content) {
            return `<${tag}${htmlAttrs}>`;
        }
        return `<${tag}${htmlAttrs}>${content}</${tag}>`;
    }
    /**
     * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
     *
     * @param {SummaryWriteOptions} [options] (optional) options for write operation
     *
     * @returns {Promise<Summary>} summary instance
     */
    write(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
            const filePath = yield this.filePath();
            const writeFunc = overwrite ? writeFile : appendFile;
            yield writeFunc(filePath, this._buffer, { encoding: 'utf8' });
            return this.emptyBuffer();
        });
    }
    /**
     * Clears the summary buffer and wipes the summary file
     *
     * @returns {Summary} summary instance
     */
    clear() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.emptyBuffer().write({ overwrite: true });
        });
    }
    /**
     * Returns the current summary buffer as a string
     *
     * @returns {string} string of summary buffer
     */
    stringify() {
        return this._buffer;
    }
    /**
     * If the summary buffer is empty
     *
     * @returns {boolen} true if the buffer is empty
     */
    isEmptyBuffer() {
        return this._buffer.length === 0;
    }
    /**
     * Resets the summary buffer without writing to summary file
     *
     * @returns {Summary} summary instance
     */
    emptyBuffer() {
        this._buffer = '';
        return this;
    }
    /**
     * Adds raw text to the summary buffer
     *
     * @param {string} text content to add
     * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
     *
     * @returns {Summary} summary instance
     */
    addRaw(text, addEOL = false) {
        this._buffer += text;
        return addEOL ? this.addEOL() : this;
    }
    /**
     * Adds the operating system-specific end-of-line marker to the buffer
     *
     * @returns {Summary} summary instance
     */
    addEOL() {
        return this.addRaw(os_1.EOL);
    }
    /**
     * Adds an HTML codeblock to the summary buffer
     *
     * @param {string} code content to render within fenced code block
     * @param {string} lang (optional) language to syntax highlight code
     *
     * @returns {Summary} summary instance
     */
    addCodeBlock(code, lang) {
        const attrs = Object.assign({}, (lang && { lang }));
        const element = this.wrap('pre', this.wrap('code', code), attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML list to the summary buffer
     *
     * @param {string[]} items list of items to render
     * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
     *
     * @returns {Summary} summary instance
     */
    addList(items, ordered = false) {
        const tag = ordered ? 'ol' : 'ul';
        const listItems = items.map(item => this.wrap('li', item)).join('');
        const element = this.wrap(tag, listItems);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML table to the summary buffer
     *
     * @param {SummaryTableCell[]} rows table rows
     *
     * @returns {Summary} summary instance
     */
    addTable(rows) {
        const tableBody = rows
            .map(row => {
            const cells = row
                .map(cell => {
                if (typeof cell === 'string') {
                    return this.wrap('td', cell);
                }
                const { header, data, colspan, rowspan } = cell;
                const tag = header ? 'th' : 'td';
                const attrs = Object.assign(Object.assign({}, (colspan && { colspan })), (rowspan && { rowspan }));
                return this.wrap(tag, data, attrs);
            })
                .join('');
            return this.wrap('tr', cells);
        })
            .join('');
        const element = this.wrap('table', tableBody);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds a collapsable HTML details element to the summary buffer
     *
     * @param {string} label text for the closed state
     * @param {string} content collapsable content
     *
     * @returns {Summary} summary instance
     */
    addDetails(label, content) {
        const element = this.wrap('details', this.wrap('summary', label) + content);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML image tag to the summary buffer
     *
     * @param {string} src path to the image you to embed
     * @param {string} alt text description of the image
     * @param {SummaryImageOptions} options (optional) addition image attributes
     *
     * @returns {Summary} summary instance
     */
    addImage(src, alt, options) {
        const { width, height } = options || {};
        const attrs = Object.assign(Object.assign({}, (width && { width })), (height && { height }));
        const element = this.wrap('img', null, Object.assign({ src, alt }, attrs));
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML section heading element
     *
     * @param {string} text heading text
     * @param {number | string} [level=1] (optional) the heading level, default: 1
     *
     * @returns {Summary} summary instance
     */
    addHeading(text, level) {
        const tag = `h${level}`;
        const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag)
            ? tag
            : 'h1';
        const element = this.wrap(allowedTag, text);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML thematic break (<hr>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addSeparator() {
        const element = this.wrap('hr', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML line break (<br>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addBreak() {
        const element = this.wrap('br', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML blockquote to the summary buffer
     *
     * @param {string} text quote text
     * @param {string} cite (optional) citation url
     *
     * @returns {Summary} summary instance
     */
    addQuote(text, cite) {
        const attrs = Object.assign({}, (cite && { cite }));
        const element = this.wrap('blockquote', text, attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML anchor tag to the summary buffer
     *
     * @param {string} text link text/content
     * @param {string} href hyperlink
     *
     * @returns {Summary} summary instance
     */
    addLink(text, href) {
        const element = this.wrap('a', text, { href });
        return this.addRaw(element).addEOL();
    }
}
const _summary = new Summary();
/**
 * @deprecated use `core.summary`
 */
exports.markdownSummary = _summary;
exports.summary = _summary;
//# sourceMappingURL=summary.js.map

/***/ }),

/***/ 5278:
/***/ ((__unused_webpack_module, exports) => {


// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toCommandProperties = exports.toCommandValue = void 0;
/**
 * Sanitizes an input into a string so it can be passed into issueCommand safely
 * @param input input to sanitize into a string
 */
function toCommandValue(input) {
    if (input === null || input === undefined) {
        return '';
    }
    else if (typeof input === 'string' || input instanceof String) {
        return input;
    }
    return JSON.stringify(input);
}
exports.toCommandValue = toCommandValue;
/**
 *
 * @param annotationProperties
 * @returns The command properties to send with the actual annotation command
 * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646
 */
function toCommandProperties(annotationProperties) {
    if (!Object.keys(annotationProperties).length) {
        return {};
    }
    return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn
    };
}
exports.toCommandProperties = toCommandProperties;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 5526:
/***/ (function(__unused_webpack_module, exports) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;
class BasicCredentialHandler {
    constructor(username, password) {
        this.username = username;
        this.password = password;
    }
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BasicCredentialHandler = BasicCredentialHandler;
class BearerCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Bearer ${this.token}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BearerCredentialHandler = BearerCredentialHandler;
class PersonalAccessTokenCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
//# sourceMappingURL=auth.js.map

/***/ }),

/***/ 6255:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


/* eslint-disable @typescript-eslint/no-explicit-any */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;
const http = __importStar(__nccwpck_require__(3685));
const https = __importStar(__nccwpck_require__(5687));
const pm = __importStar(__nccwpck_require__(9835));
const tunnel = __importStar(__nccwpck_require__(4294));
const undici_1 = __nccwpck_require__(1773);
var HttpCodes;
(function (HttpCodes) {
    HttpCodes[HttpCodes["OK"] = 200] = "OK";
    HttpCodes[HttpCodes["MultipleChoices"] = 300] = "MultipleChoices";
    HttpCodes[HttpCodes["MovedPermanently"] = 301] = "MovedPermanently";
    HttpCodes[HttpCodes["ResourceMoved"] = 302] = "ResourceMoved";
    HttpCodes[HttpCodes["SeeOther"] = 303] = "SeeOther";
    HttpCodes[HttpCodes["NotModified"] = 304] = "NotModified";
    HttpCodes[HttpCodes["UseProxy"] = 305] = "UseProxy";
    HttpCodes[HttpCodes["SwitchProxy"] = 306] = "SwitchProxy";
    HttpCodes[HttpCodes["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    HttpCodes[HttpCodes["PermanentRedirect"] = 308] = "PermanentRedirect";
    HttpCodes[HttpCodes["BadRequest"] = 400] = "BadRequest";
    HttpCodes[HttpCodes["Unauthorized"] = 401] = "Unauthorized";
    HttpCodes[HttpCodes["PaymentRequired"] = 402] = "PaymentRequired";
    HttpCodes[HttpCodes["Forbidden"] = 403] = "Forbidden";
    HttpCodes[HttpCodes["NotFound"] = 404] = "NotFound";
    HttpCodes[HttpCodes["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    HttpCodes[HttpCodes["NotAcceptable"] = 406] = "NotAcceptable";
    HttpCodes[HttpCodes["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
    HttpCodes[HttpCodes["RequestTimeout"] = 408] = "RequestTimeout";
    HttpCodes[HttpCodes["Conflict"] = 409] = "Conflict";
    HttpCodes[HttpCodes["Gone"] = 410] = "Gone";
    HttpCodes[HttpCodes["TooManyRequests"] = 429] = "TooManyRequests";
    HttpCodes[HttpCodes["InternalServerError"] = 500] = "InternalServerError";
    HttpCodes[HttpCodes["NotImplemented"] = 501] = "NotImplemented";
    HttpCodes[HttpCodes["BadGateway"] = 502] = "BadGateway";
    HttpCodes[HttpCodes["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    HttpCodes[HttpCodes["GatewayTimeout"] = 504] = "GatewayTimeout";
})(HttpCodes || (exports.HttpCodes = HttpCodes = {}));
var Headers;
(function (Headers) {
    Headers["Accept"] = "accept";
    Headers["ContentType"] = "content-type";
})(Headers || (exports.Headers = Headers = {}));
var MediaTypes;
(function (MediaTypes) {
    MediaTypes["ApplicationJson"] = "application/json";
})(MediaTypes || (exports.MediaTypes = MediaTypes = {}));
/**
 * Returns the proxy URL, depending upon the supplied url and proxy environment variables.
 * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
 */
function getProxyUrl(serverUrl) {
    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
    return proxyUrl ? proxyUrl.href : '';
}
exports.getProxyUrl = getProxyUrl;
const HttpRedirectCodes = [
    HttpCodes.MovedPermanently,
    HttpCodes.ResourceMoved,
    HttpCodes.SeeOther,
    HttpCodes.TemporaryRedirect,
    HttpCodes.PermanentRedirect
];
const HttpResponseRetryCodes = [
    HttpCodes.BadGateway,
    HttpCodes.ServiceUnavailable,
    HttpCodes.GatewayTimeout
];
const RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];
const ExponentialBackoffCeiling = 10;
const ExponentialBackoffTimeSlice = 5;
class HttpClientError extends Error {
    constructor(message, statusCode) {
        super(message);
        this.name = 'HttpClientError';
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, HttpClientError.prototype);
    }
}
exports.HttpClientError = HttpClientError;
class HttpClientResponse {
    constructor(message) {
        this.message = message;
    }
    readBody() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                let output = Buffer.alloc(0);
                this.message.on('data', (chunk) => {
                    output = Buffer.concat([output, chunk]);
                });
                this.message.on('end', () => {
                    resolve(output.toString());
                });
            }));
        });
    }
    readBodyBuffer() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                const chunks = [];
                this.message.on('data', (chunk) => {
                    chunks.push(chunk);
                });
                this.message.on('end', () => {
                    resolve(Buffer.concat(chunks));
                });
            }));
        });
    }
}
exports.HttpClientResponse = HttpClientResponse;
function isHttps(requestUrl) {
    const parsedUrl = new URL(requestUrl);
    return parsedUrl.protocol === 'https:';
}
exports.isHttps = isHttps;
class HttpClient {
    constructor(userAgent, handlers, requestOptions) {
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
            if (requestOptions.ignoreSslError != null) {
                this._ignoreSslError = requestOptions.ignoreSslError;
            }
            this._socketTimeout = requestOptions.socketTimeout;
            if (requestOptions.allowRedirects != null) {
                this._allowRedirects = requestOptions.allowRedirects;
            }
            if (requestOptions.allowRedirectDowngrade != null) {
                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
            }
            if (requestOptions.maxRedirects != null) {
                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
            }
            if (requestOptions.keepAlive != null) {
                this._keepAlive = requestOptions.keepAlive;
            }
            if (requestOptions.allowRetries != null) {
                this._allowRetries = requestOptions.allowRetries;
            }
            if (requestOptions.maxRetries != null) {
                this._maxRetries = requestOptions.maxRetries;
            }
        }
    }
    options(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});
        });
    }
    get(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('GET', requestUrl, null, additionalHeaders || {});
        });
    }
    del(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('DELETE', requestUrl, null, additionalHeaders || {});
        });
    }
    post(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('POST', requestUrl, data, additionalHeaders || {});
        });
    }
    patch(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PATCH', requestUrl, data, additionalHeaders || {});
        });
    }
    put(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PUT', requestUrl, data, additionalHeaders || {});
        });
    }
    head(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('HEAD', requestUrl, null, additionalHeaders || {});
        });
    }
    sendStream(verb, requestUrl, stream, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(verb, requestUrl, stream, additionalHeaders);
        });
    }
    /**
     * Gets a typed object from an endpoint
     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
     */
    getJson(requestUrl, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            const res = yield this.get(requestUrl, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    postJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.post(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    putJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.put(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    patchJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.patch(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    /**
     * Makes a raw http request.
     * All other methods such as get, post, patch, and request ultimately call this.
     * Prefer get, del, post and patch
     */
    request(verb, requestUrl, data, headers) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._disposed) {
                throw new Error('Client has already been disposed.');
            }
            const parsedUrl = new URL(requestUrl);
            let info = this._prepareRequest(verb, parsedUrl, headers);
            // Only perform retries on reads since writes may not be idempotent.
            const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb)
                ? this._maxRetries + 1
                : 1;
            let numTries = 0;
            let response;
            do {
                response = yield this.requestRaw(info, data);
                // Check if it's an authentication challenge
                if (response &&
                    response.message &&
                    response.message.statusCode === HttpCodes.Unauthorized) {
                    let authenticationHandler;
                    for (const handler of this.handlers) {
                        if (handler.canHandleAuthentication(response)) {
                            authenticationHandler = handler;
                            break;
                        }
                    }
                    if (authenticationHandler) {
                        return authenticationHandler.handleAuthentication(this, info, data);
                    }
                    else {
                        // We have received an unauthorized response but have no handlers to handle it.
                        // Let the response return to the caller.
                        return response;
                    }
                }
                let redirectsRemaining = this._maxRedirects;
                while (response.message.statusCode &&
                    HttpRedirectCodes.includes(response.message.statusCode) &&
                    this._allowRedirects &&
                    redirectsRemaining > 0) {
                    const redirectUrl = response.message.headers['location'];
                    if (!redirectUrl) {
                        // if there's no location to redirect to, we won't
                        break;
                    }
                    const parsedRedirectUrl = new URL(redirectUrl);
                    if (parsedUrl.protocol === 'https:' &&
                        parsedUrl.protocol !== parsedRedirectUrl.protocol &&
                        !this._allowRedirectDowngrade) {
                        throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');
                    }
                    // we need to finish reading the response before reassigning response
                    // which will leak the open socket.
                    yield response.readBody();
                    // strip authorization header if redirected to a different hostname
                    if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                        for (const header in headers) {
                            // header names are case insensitive
                            if (header.toLowerCase() === 'authorization') {
                                delete headers[header];
                            }
                        }
                    }
                    // let's make the request with the new redirectUrl
                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);
                    response = yield this.requestRaw(info, data);
                    redirectsRemaining--;
                }
                if (!response.message.statusCode ||
                    !HttpResponseRetryCodes.includes(response.message.statusCode)) {
                    // If not a retry code, return immediately instead of retrying
                    return response;
                }
                numTries += 1;
                if (numTries < maxTries) {
                    yield response.readBody();
                    yield this._performExponentialBackoff(numTries);
                }
            } while (numTries < maxTries);
            return response;
        });
    }
    /**
     * Needs to be called if keepAlive is set to true in request options.
     */
    dispose() {
        if (this._agent) {
            this._agent.destroy();
        }
        this._disposed = true;
    }
    /**
     * Raw request.
     * @param info
     * @param data
     */
    requestRaw(info, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                function callbackForResult(err, res) {
                    if (err) {
                        reject(err);
                    }
                    else if (!res) {
                        // If `err` is not passed, then `res` must be passed.
                        reject(new Error('Unknown error'));
                    }
                    else {
                        resolve(res);
                    }
                }
                this.requestRawWithCallback(info, data, callbackForResult);
            });
        });
    }
    /**
     * Raw request with callback.
     * @param info
     * @param data
     * @param onResult
     */
    requestRawWithCallback(info, data, onResult) {
        if (typeof data === 'string') {
            if (!info.options.headers) {
                info.options.headers = {};
            }
            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');
        }
        let callbackCalled = false;
        function handleResult(err, res) {
            if (!callbackCalled) {
                callbackCalled = true;
                onResult(err, res);
            }
        }
        const req = info.httpModule.request(info.options, (msg) => {
            const res = new HttpClientResponse(msg);
            handleResult(undefined, res);
        });
        let socket;
        req.on('socket', sock => {
            socket = sock;
        });
        // If we ever get disconnected, we want the socket to timeout eventually
        req.setTimeout(this._socketTimeout || 3 * 60000, () => {
            if (socket) {
                socket.end();
            }
            handleResult(new Error(`Request timeout: ${info.options.path}`));
        });
        req.on('error', function (err) {
            // err has statusCode property
            // res should have headers
            handleResult(err);
        });
        if (data && typeof data === 'string') {
            req.write(data, 'utf8');
        }
        if (data && typeof data !== 'string') {
            data.on('close', function () {
                req.end();
            });
            data.pipe(req);
        }
        else {
            req.end();
        }
    }
    /**
     * Gets an http agent. This function is useful when you need an http agent that handles
     * routing through a proxy server - depending upon the url and proxy environment variables.
     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
     */
    getAgent(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
    }
    getAgentDispatcher(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (!useProxy) {
            return;
        }
        return this._getProxyAgentDispatcher(parsedUrl, proxyUrl);
    }
    _prepareRequest(method, requestUrl, headers) {
        const info = {};
        info.parsedUrl = requestUrl;
        const usingSsl = info.parsedUrl.protocol === 'https:';
        info.httpModule = usingSsl ? https : http;
        const defaultPort = usingSsl ? 443 : 80;
        info.options = {};
        info.options.host = info.parsedUrl.hostname;
        info.options.port = info.parsedUrl.port
            ? parseInt(info.parsedUrl.port)
            : defaultPort;
        info.options.path =
            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');
        info.options.method = method;
        info.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) {
            info.options.headers['user-agent'] = this.userAgent;
        }
        info.options.agent = this._getAgent(info.parsedUrl);
        // gives handlers an opportunity to participate
        if (this.handlers) {
            for (const handler of this.handlers) {
                handler.prepareRequest(info.options);
            }
        }
        return info;
    }
    _mergeHeaders(headers) {
        if (this.requestOptions && this.requestOptions.headers) {
            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));
        }
        return lowercaseKeys(headers || {});
    }
    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) {
            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
        }
        return additionalHeaders[header] || clientHeader || _default;
    }
    _getAgent(parsedUrl) {
        let agent;
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) {
            agent = this._proxyAgent;
        }
        if (!useProxy) {
            agent = this._agent;
        }
        // if agent is already assigned use that agent.
        if (agent) {
            return agent;
        }
        const usingSsl = parsedUrl.protocol === 'https:';
        let maxSockets = 100;
        if (this.requestOptions) {
            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
        }
        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.
        if (proxyUrl && proxyUrl.hostname) {
            const agentOptions = {
                maxSockets,
                keepAlive: this._keepAlive,
                proxy: Object.assign(Object.assign({}, ((proxyUrl.username || proxyUrl.password) && {
                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
                })), { host: proxyUrl.hostname, port: proxyUrl.port })
            };
            let tunnelAgent;
            const overHttps = proxyUrl.protocol === 'https:';
            if (usingSsl) {
                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
            }
            else {
                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
            }
            agent = tunnelAgent(agentOptions);
            this._proxyAgent = agent;
        }
        // if tunneling agent isn't assigned create a new agent
        if (!agent) {
            const options = { keepAlive: this._keepAlive, maxSockets };
            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
            this._agent = agent;
        }
        if (usingSsl && this._ignoreSslError) {
            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
            // we have to cast it to any and change it directly
            agent.options = Object.assign(agent.options || {}, {
                rejectUnauthorized: false
            });
        }
        return agent;
    }
    _getProxyAgentDispatcher(parsedUrl, proxyUrl) {
        let proxyAgent;
        if (this._keepAlive) {
            proxyAgent = this._proxyAgentDispatcher;
        }
        // if agent is already assigned use that agent.
        if (proxyAgent) {
            return proxyAgent;
        }
        const usingSsl = parsedUrl.protocol === 'https:';
        proxyAgent = new undici_1.ProxyAgent(Object.assign({ uri: proxyUrl.href, pipelining: !this._keepAlive ? 0 : 1 }, ((proxyUrl.username || proxyUrl.password) && {
            token: `Basic ${Buffer.from(`${proxyUrl.username}:${proxyUrl.password}`).toString('base64')}`
        })));
        this._proxyAgentDispatcher = proxyAgent;
        if (usingSsl && this._ignoreSslError) {
            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
            // we have to cast it to any and change it directly
            proxyAgent.options = Object.assign(proxyAgent.options.requestTls || {}, {
                rejectUnauthorized: false
            });
        }
        return proxyAgent;
    }
    _performExponentialBackoff(retryNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
            const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
            return new Promise(resolve => setTimeout(() => resolve(), ms));
        });
    }
    _processResponse(res, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                const statusCode = res.message.statusCode || 0;
                const response = {
                    statusCode,
                    result: null,
                    headers: {}
                };
                // not found leads to null obj returned
                if (statusCode === HttpCodes.NotFound) {
                    resolve(response);
                }
                // get the result from the body
                function dateTimeDeserializer(key, value) {
                    if (typeof value === 'string') {
                        const a = new Date(value);
                        if (!isNaN(a.valueOf())) {
                            return a;
                        }
                    }
                    return value;
                }
                let obj;
                let contents;
                try {
                    contents = yield res.readBody();
                    if (contents && contents.length > 0) {
                        if (options && options.deserializeDates) {
                            obj = JSON.parse(contents, dateTimeDeserializer);
                        }
                        else {
                            obj = JSON.parse(contents);
                        }
                        response.result = obj;
                    }
                    response.headers = res.message.headers;
                }
                catch (err) {
                    // Invalid resource (contents not json);  leaving result obj null
                }
                // note that 3xx redirects are handled by the http layer.
                if (statusCode > 299) {
                    let msg;
                    // if exception/error in body, attempt to get better error
                    if (obj && obj.message) {
                        msg = obj.message;
                    }
                    else if (contents && contents.length > 0) {
                        // it may be the case that the exception is in the body message as string
                        msg = contents;
                    }
                    else {
                        msg = `Failed request: (${statusCode})`;
                    }
                    const err = new HttpClientError(msg, statusCode);
                    err.result = response.result;
                    reject(err);
                }
                else {
                    resolve(response);
                }
            }));
        });
    }
}
exports.HttpClient = HttpClient;
const lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 9835:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.checkBypass = exports.getProxyUrl = void 0;
function getProxyUrl(reqUrl) {
    const usingSsl = reqUrl.protocol === 'https:';
    if (checkBypass(reqUrl)) {
        return undefined;
    }
    const proxyVar = (() => {
        if (usingSsl) {
            return process.env['https_proxy'] || process.env['HTTPS_PROXY'];
        }
        else {
            return process.env['http_proxy'] || process.env['HTTP_PROXY'];
        }
    })();
    if (proxyVar) {
        try {
            return new DecodedURL(proxyVar);
        }
        catch (_a) {
            if (!proxyVar.startsWith('http://') && !proxyVar.startsWith('https://'))
                return new DecodedURL(`http://${proxyVar}`);
        }
    }
    else {
        return undefined;
    }
}
exports.getProxyUrl = getProxyUrl;
function checkBypass(reqUrl) {
    if (!reqUrl.hostname) {
        return false;
    }
    const reqHost = reqUrl.hostname;
    if (isLoopbackAddress(reqHost)) {
        return true;
    }
    const noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';
    if (!noProxy) {
        return false;
    }
    // Determine the request port
    let reqPort;
    if (reqUrl.port) {
        reqPort = Number(reqUrl.port);
    }
    else if (reqUrl.protocol === 'http:') {
        reqPort = 80;
    }
    else if (reqUrl.protocol === 'https:') {
        reqPort = 443;
    }
    // Format the request hostname and hostname with port
    const upperReqHosts = [reqUrl.hostname.toUpperCase()];
    if (typeof reqPort === 'number') {
        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
    }
    // Compare request host against noproxy
    for (const upperNoProxyItem of noProxy
        .split(',')
        .map(x => x.trim().toUpperCase())
        .filter(x => x)) {
        if (upperNoProxyItem === '*' ||
            upperReqHosts.some(x => x === upperNoProxyItem ||
                x.endsWith(`.${upperNoProxyItem}`) ||
                (upperNoProxyItem.startsWith('.') &&
                    x.endsWith(`${upperNoProxyItem}`)))) {
            return true;
        }
    }
    return false;
}
exports.checkBypass = checkBypass;
function isLoopbackAddress(host) {
    const hostLower = host.toLowerCase();
    return (hostLower === 'localhost' ||
        hostLower.startsWith('127.') ||
        hostLower.startsWith('[::1]') ||
        hostLower.startsWith('[0:0:0:0:0:0:0:1]'));
}
class DecodedURL extends URL {
    constructor(url, base) {
        super(url, base);
        this._decodedUsername = decodeURIComponent(super.username);
        this._decodedPassword = decodeURIComponent(super.password);
    }
    get username() {
        return this._decodedUsername;
    }
    get password() {
        return this._decodedPassword;
    }
}
//# sourceMappingURL=proxy.js.map

/***/ }),

/***/ 4294:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports = __nccwpck_require__(4219);


/***/ }),

/***/ 4219:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var net = __nccwpck_require__(1808);
var tls = __nccwpck_require__(4404);
var http = __nccwpck_require__(3685);
var https = __nccwpck_require__(5687);
var events = __nccwpck_require__(2361);
var assert = __nccwpck_require__(9491);
var util = __nccwpck_require__(3837);


exports.httpOverHttp = httpOverHttp;
exports.httpsOverHttp = httpsOverHttp;
exports.httpOverHttps = httpOverHttps;
exports.httpsOverHttps = httpsOverHttps;


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  return agent;
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  return agent;
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}


function TunnelingAgent(options) {
  var self = this;
  self.options = options || {};
  self.proxyOptions = self.options.proxy || {};
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;
  self.requests = [];
  self.sockets = [];

  self.on('free', function onFree(socket, host, port, localAddress) {
    var options = toOptions(host, port, localAddress);
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i];
      if (pending.host === options.host && pending.port === options.port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1);
        pending.request.onSocket(socket);
        return;
      }
    }
    socket.destroy();
    self.removeSocket(socket);
  });
}
util.inherits(TunnelingAgent, events.EventEmitter);

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
  var self = this;
  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push(options);
    return;
  }

  // If we are under maxSockets create a new one.
  self.createSocket(options, function(socket) {
    socket.on('free', onFree);
    socket.on('close', onCloseOrRemove);
    socket.on('agentRemove', onCloseOrRemove);
    req.onSocket(socket);

    function onFree() {
      self.emit('free', socket, options);
    }

    function onCloseOrRemove(err) {
      self.removeSocket(socket);
      socket.removeListener('free', onFree);
      socket.removeListener('close', onCloseOrRemove);
      socket.removeListener('agentRemove', onCloseOrRemove);
    }
  });
};

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this;
  var placeholder = {};
  self.sockets.push(placeholder);

  var connectOptions = mergeOptions({}, self.proxyOptions, {
    method: 'CONNECT',
    path: options.host + ':' + options.port,
    agent: false,
    headers: {
      host: options.host + ':' + options.port
    }
  });
  if (options.localAddress) {
    connectOptions.localAddress = options.localAddress;
  }
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {};
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64');
  }

  debug('making CONNECT request');
  var connectReq = self.request(connectOptions);
  connectReq.useChunkedEncodingByDefault = false; // for v0.6
  connectReq.once('response', onResponse); // for v0.6
  connectReq.once('upgrade', onUpgrade);   // for v0.6
  connectReq.once('connect', onConnect);   // for v0.7 or later
  connectReq.once('error', onError);
  connectReq.end();

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true;
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head);
    });
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners();
    socket.removeAllListeners();

    if (res.statusCode !== 200) {
      debug('tunneling socket could not be established, statusCode=%d',
        res.statusCode);
      socket.destroy();
      var error = new Error('tunneling socket could not be established, ' +
        'statusCode=' + res.statusCode);
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    if (head.length > 0) {
      debug('got illegal response body from proxy');
      socket.destroy();
      var error = new Error('got illegal response body from proxy');
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    debug('tunneling connection has established');
    self.sockets[self.sockets.indexOf(placeholder)] = socket;
    return cb(socket);
  }

  function onError(cause) {
    connectReq.removeAllListeners();

    debug('tunneling socket could not be established, cause=%s\n',
          cause.message, cause.stack);
    var error = new Error('tunneling socket could not be established, ' +
                          'cause=' + cause.message);
    error.code = 'ECONNRESET';
    options.request.emit('error', error);
    self.removeSocket(placeholder);
  }
};

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) {
    return;
  }
  this.sockets.splice(pos, 1);

  var pending = this.requests.shift();
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket);
    });
  }
};

function createSecureSocket(options, cb) {
  var self = this;
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    var hostHeader = options.request.getHeader('host');
    var tlsOptions = mergeOptions({}, self.options, {
      socket: socket,
      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host
    });

    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, tlsOptions);
    self.sockets[self.sockets.indexOf(socket)] = secureSocket;
    cb(secureSocket);
  });
}


function toOptions(host, port, localAddress) {
  if (typeof host === 'string') { // since v0.10
    return {
      host: host,
      port: port,
      localAddress: localAddress
    };
  }
  return host; // for v0.11 or later
}

function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i];
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides);
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j];
        if (overrides[k] !== undefined) {
          target[k] = overrides[k];
        }
      }
    }
  }
  return target;
}


var debug;
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments);
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0];
    } else {
      args.unshift('TUNNEL:');
    }
    console.error.apply(console, args);
  }
} else {
  debug = function() {};
}
exports.debug = debug; // for test


/***/ }),

/***/ 1773:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const Client = __nccwpck_require__(3598)
const Dispatcher = __nccwpck_require__(412)
const errors = __nccwpck_require__(8045)
const Pool = __nccwpck_require__(4634)
const BalancedPool = __nccwpck_require__(7931)
const Agent = __nccwpck_require__(7890)
const util = __nccwpck_require__(3983)
const { InvalidArgumentError } = errors
const api = __nccwpck_require__(4059)
const buildConnector = __nccwpck_require__(2067)
const MockClient = __nccwpck_require__(8687)
const MockAgent = __nccwpck_require__(6771)
const MockPool = __nccwpck_require__(6193)
const mockErrors = __nccwpck_require__(888)
const ProxyAgent = __nccwpck_require__(7858)
const RetryHandler = __nccwpck_require__(2286)
const { getGlobalDispatcher, setGlobalDispatcher } = __nccwpck_require__(1892)
const DecoratorHandler = __nccwpck_require__(6930)
const RedirectHandler = __nccwpck_require__(2860)
const createRedirectInterceptor = __nccwpck_require__(8861)

let hasCrypto
try {
  __nccwpck_require__(6113)
  hasCrypto = true
} catch {
  hasCrypto = false
}

Object.assign(Dispatcher.prototype, api)

module.exports.Dispatcher = Dispatcher
module.exports.Client = Client
module.exports.Pool = Pool
module.exports.BalancedPool = BalancedPool
module.exports.Agent = Agent
module.exports.ProxyAgent = ProxyAgent
module.exports.RetryHandler = RetryHandler

module.exports.DecoratorHandler = DecoratorHandler
module.exports.RedirectHandler = RedirectHandler
module.exports.createRedirectInterceptor = createRedirectInterceptor

module.exports.buildConnector = buildConnector
module.exports.errors = errors

function makeDispatcher (fn) {
  return (url, opts, handler) => {
    if (typeof opts === 'function') {
      handler = opts
      opts = null
    }

    if (!url || (typeof url !== 'string' && typeof url !== 'object' && !(url instanceof URL))) {
      throw new InvalidArgumentError('invalid url')
    }

    if (opts != null && typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    if (opts && opts.path != null) {
      if (typeof opts.path !== 'string') {
        throw new InvalidArgumentError('invalid opts.path')
      }

      let path = opts.path
      if (!opts.path.startsWith('/')) {
        path = `/${path}`
      }

      url = new URL(util.parseOrigin(url).origin + path)
    } else {
      if (!opts) {
        opts = typeof url === 'object' ? url : {}
      }

      url = util.parseURL(url)
    }

    const { agent, dispatcher = getGlobalDispatcher() } = opts

    if (agent) {
      throw new InvalidArgumentError('unsupported opts.agent. Did you mean opts.client?')
    }

    return fn.call(dispatcher, {
      ...opts,
      origin: url.origin,
      path: url.search ? `${url.pathname}${url.search}` : url.pathname,
      method: opts.method || (opts.body ? 'PUT' : 'GET')
    }, handler)
  }
}

module.exports.setGlobalDispatcher = setGlobalDispatcher
module.exports.getGlobalDispatcher = getGlobalDispatcher

if (util.nodeMajor > 16 || (util.nodeMajor === 16 && util.nodeMinor >= 8)) {
  let fetchImpl = null
  module.exports.fetch = async function fetch (resource) {
    if (!fetchImpl) {
      fetchImpl = (__nccwpck_require__(4881).fetch)
    }

    try {
      return await fetchImpl(...arguments)
    } catch (err) {
      if (typeof err === 'object') {
        Error.captureStackTrace(err, this)
      }

      throw err
    }
  }
  module.exports.Headers = __nccwpck_require__(554).Headers
  module.exports.Response = __nccwpck_require__(7823).Response
  module.exports.Request = __nccwpck_require__(8359).Request
  module.exports.FormData = __nccwpck_require__(2015).FormData
  module.exports.File = __nccwpck_require__(8511).File
  module.exports.FileReader = __nccwpck_require__(1446).FileReader

  const { setGlobalOrigin, getGlobalOrigin } = __nccwpck_require__(1246)

  module.exports.setGlobalOrigin = setGlobalOrigin
  module.exports.getGlobalOrigin = getGlobalOrigin

  const { CacheStorage } = __nccwpck_require__(7907)
  const { kConstruct } = __nccwpck_require__(9174)

  // Cache & CacheStorage are tightly coupled with fetch. Even if it may run
  // in an older version of Node, it doesn't have any use without fetch.
  module.exports.caches = new CacheStorage(kConstruct)
}

if (util.nodeMajor >= 16) {
  const { deleteCookie, getCookies, getSetCookies, setCookie } = __nccwpck_require__(1724)

  module.exports.deleteCookie = deleteCookie
  module.exports.getCookies = getCookies
  module.exports.getSetCookies = getSetCookies
  module.exports.setCookie = setCookie

  const { parseMIMEType, serializeAMimeType } = __nccwpck_require__(685)

  module.exports.parseMIMEType = parseMIMEType
  module.exports.serializeAMimeType = serializeAMimeType
}

if (util.nodeMajor >= 18 && hasCrypto) {
  const { WebSocket } = __nccwpck_require__(4284)

  module.exports.WebSocket = WebSocket
}

module.exports.request = makeDispatcher(api.request)
module.exports.stream = makeDispatcher(api.stream)
module.exports.pipeline = makeDispatcher(api.pipeline)
module.exports.connect = makeDispatcher(api.connect)
module.exports.upgrade = makeDispatcher(api.upgrade)

module.exports.MockClient = MockClient
module.exports.MockPool = MockPool
module.exports.MockAgent = MockAgent
module.exports.mockErrors = mockErrors


/***/ }),

/***/ 7890:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { InvalidArgumentError } = __nccwpck_require__(8045)
const { kClients, kRunning, kClose, kDestroy, kDispatch, kInterceptors } = __nccwpck_require__(2785)
const DispatcherBase = __nccwpck_require__(4839)
const Pool = __nccwpck_require__(4634)
const Client = __nccwpck_require__(3598)
const util = __nccwpck_require__(3983)
const createRedirectInterceptor = __nccwpck_require__(8861)
const { WeakRef, FinalizationRegistry } = __nccwpck_require__(6436)()

const kOnConnect = Symbol('onConnect')
const kOnDisconnect = Symbol('onDisconnect')
const kOnConnectionError = Symbol('onConnectionError')
const kMaxRedirections = Symbol('maxRedirections')
const kOnDrain = Symbol('onDrain')
const kFactory = Symbol('factory')
const kFinalizer = Symbol('finalizer')
const kOptions = Symbol('options')

function defaultFactory (origin, opts) {
  return opts && opts.connections === 1
    ? new Client(origin, opts)
    : new Pool(origin, opts)
}

class Agent extends DispatcherBase {
  constructor ({ factory = defaultFactory, maxRedirections = 0, connect, ...options } = {}) {
    super()

    if (typeof factory !== 'function') {
      throw new InvalidArgumentError('factory must be a function.')
    }

    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {
      throw new InvalidArgumentError('connect must be a function or an object')
    }

    if (!Number.isInteger(maxRedirections) || maxRedirections < 0) {
      throw new InvalidArgumentError('maxRedirections must be a positive number')
    }

    if (connect && typeof connect !== 'function') {
      connect = { ...connect }
    }

    this[kInterceptors] = options.interceptors && options.interceptors.Agent && Array.isArray(options.interceptors.Agent)
      ? options.interceptors.Agent
      : [createRedirectInterceptor({ maxRedirections })]

    this[kOptions] = { ...util.deepClone(options), connect }
    this[kOptions].interceptors = options.interceptors
      ? { ...options.interceptors }
      : undefined
    this[kMaxRedirections] = maxRedirections
    this[kFactory] = factory
    this[kClients] = new Map()
    this[kFinalizer] = new FinalizationRegistry(/* istanbul ignore next: gc is undeterministic */ key => {
      const ref = this[kClients].get(key)
      if (ref !== undefined && ref.deref() === undefined) {
        this[kClients].delete(key)
      }
    })

    const agent = this

    this[kOnDrain] = (origin, targets) => {
      agent.emit('drain', origin, [agent, ...targets])
    }

    this[kOnConnect] = (origin, targets) => {
      agent.emit('connect', origin, [agent, ...targets])
    }

    this[kOnDisconnect] = (origin, targets, err) => {
      agent.emit('disconnect', origin, [agent, ...targets], err)
    }

    this[kOnConnectionError] = (origin, targets, err) => {
      agent.emit('connectionError', origin, [agent, ...targets], err)
    }
  }

  get [kRunning] () {
    let ret = 0
    for (const ref of this[kClients].values()) {
      const client = ref.deref()
      /* istanbul ignore next: gc is undeterministic */
      if (client) {
        ret += client[kRunning]
      }
    }
    return ret
  }

  [kDispatch] (opts, handler) {
    let key
    if (opts.origin && (typeof opts.origin === 'string' || opts.origin instanceof URL)) {
      key = String(opts.origin)
    } else {
      throw new InvalidArgumentError('opts.origin must be a non-empty string or URL.')
    }

    const ref = this[kClients].get(key)

    let dispatcher = ref ? ref.deref() : null
    if (!dispatcher) {
      dispatcher = this[kFactory](opts.origin, this[kOptions])
        .on('drain', this[kOnDrain])
        .on('connect', this[kOnConnect])
        .on('disconnect', this[kOnDisconnect])
        .on('connectionError', this[kOnConnectionError])

      this[kClients].set(key, new WeakRef(dispatcher))
      this[kFinalizer].register(dispatcher, key)
    }

    return dispatcher.dispatch(opts, handler)
  }

  async [kClose] () {
    const closePromises = []
    for (const ref of this[kClients].values()) {
      const client = ref.deref()
      /* istanbul ignore else: gc is undeterministic */
      if (client) {
        closePromises.push(client.close())
      }
    }

    await Promise.all(closePromises)
  }

  async [kDestroy] (err) {
    const destroyPromises = []
    for (const ref of this[kClients].values()) {
      const client = ref.deref()
      /* istanbul ignore else: gc is undeterministic */
      if (client) {
        destroyPromises.push(client.destroy(err))
      }
    }

    await Promise.all(destroyPromises)
  }
}

module.exports = Agent


/***/ }),

/***/ 7032:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const { addAbortListener } = __nccwpck_require__(3983)
const { RequestAbortedError } = __nccwpck_require__(8045)

const kListener = Symbol('kListener')
const kSignal = Symbol('kSignal')

function abort (self) {
  if (self.abort) {
    self.abort()
  } else {
    self.onError(new RequestAbortedError())
  }
}

function addSignal (self, signal) {
  self[kSignal] = null
  self[kListener] = null

  if (!signal) {
    return
  }

  if (signal.aborted) {
    abort(self)
    return
  }

  self[kSignal] = signal
  self[kListener] = () => {
    abort(self)
  }

  addAbortListener(self[kSignal], self[kListener])
}

function removeSignal (self) {
  if (!self[kSignal]) {
    return
  }

  if ('removeEventListener' in self[kSignal]) {
    self[kSignal].removeEventListener('abort', self[kListener])
  } else {
    self[kSignal].removeListener('abort', self[kListener])
  }

  self[kSignal] = null
  self[kListener] = null
}

module.exports = {
  addSignal,
  removeSignal
}


/***/ }),

/***/ 9744:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { AsyncResource } = __nccwpck_require__(852)
const { InvalidArgumentError, RequestAbortedError, SocketError } = __nccwpck_require__(8045)
const util = __nccwpck_require__(3983)
const { addSignal, removeSignal } = __nccwpck_require__(7032)

class ConnectHandler extends AsyncResource {
  constructor (opts, callback) {
    if (!opts || typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    if (typeof callback !== 'function') {
      throw new InvalidArgumentError('invalid callback')
    }

    const { signal, opaque, responseHeaders } = opts

    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
    }

    super('UNDICI_CONNECT')

    this.opaque = opaque || null
    this.responseHeaders = responseHeaders || null
    this.callback = callback
    this.abort = null

    addSignal(this, signal)
  }

  onConnect (abort, context) {
    if (!this.callback) {
      throw new RequestAbortedError()
    }

    this.abort = abort
    this.context = context
  }

  onHeaders () {
    throw new SocketError('bad connect', null)
  }

  onUpgrade (statusCode, rawHeaders, socket) {
    const { callback, opaque, context } = this

    removeSignal(this)

    this.callback = null

    let headers = rawHeaders
    // Indicates is an HTTP2Session
    if (headers != null) {
      headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)
    }

    this.runInAsyncScope(callback, null, null, {
      statusCode,
      headers,
      socket,
      opaque,
      context
    })
  }

  onError (err) {
    const { callback, opaque } = this

    removeSignal(this)

    if (callback) {
      this.callback = null
      queueMicrotask(() => {
        this.runInAsyncScope(callback, null, err, { opaque })
      })
    }
  }
}

function connect (opts, callback) {
  if (callback === undefined) {
    return new Promise((resolve, reject) => {
      connect.call(this, opts, (err, data) => {
        return err ? reject(err) : resolve(data)
      })
    })
  }

  try {
    const connectHandler = new ConnectHandler(opts, callback)
    this.dispatch({ ...opts, method: 'CONNECT' }, connectHandler)
  } catch (err) {
    if (typeof callback !== 'function') {
      throw err
    }
    const opaque = opts && opts.opaque
    queueMicrotask(() => callback(err, { opaque }))
  }
}

module.exports = connect


/***/ }),

/***/ 8752:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const {
  Readable,
  Duplex,
  PassThrough
} = __nccwpck_require__(2781)
const {
  InvalidArgumentError,
  InvalidReturnValueError,
  RequestAbortedError
} = __nccwpck_require__(8045)
const util = __nccwpck_require__(3983)
const { AsyncResource } = __nccwpck_require__(852)
const { addSignal, removeSignal } = __nccwpck_require__(7032)
const assert = __nccwpck_require__(9491)

const kResume = Symbol('resume')

class PipelineRequest extends Readable {
  constructor () {
    super({ autoDestroy: true })

    this[kResume] = null
  }

  _read () {
    const { [kResume]: resume } = this

    if (resume) {
      this[kResume] = null
      resume()
    }
  }

  _destroy (err, callback) {
    this._read()

    callback(err)
  }
}

class PipelineResponse extends Readable {
  constructor (resume) {
    super({ autoDestroy: true })
    this[kResume] = resume
  }

  _read () {
    this[kResume]()
  }

  _destroy (err, callback) {
    if (!err && !this._readableState.endEmitted) {
      err = new RequestAbortedError()
    }

    callback(err)
  }
}

class PipelineHandler extends AsyncResource {
  constructor (opts, handler) {
    if (!opts || typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    if (typeof handler !== 'function') {
      throw new InvalidArgumentError('invalid handler')
    }

    const { signal, method, opaque, onInfo, responseHeaders } = opts

    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
    }

    if (method === 'CONNECT') {
      throw new InvalidArgumentError('invalid method')
    }

    if (onInfo && typeof onInfo !== 'function') {
      throw new InvalidArgumentError('invalid onInfo callback')
    }

    super('UNDICI_PIPELINE')

    this.opaque = opaque || null
    this.responseHeaders = responseHeaders || null
    this.handler = handler
    this.abort = null
    this.context = null
    this.onInfo = onInfo || null

    this.req = new PipelineRequest().on('error', util.nop)

    this.ret = new Duplex({
      readableObjectMode: opts.objectMode,
      autoDestroy: true,
      read: () => {
        const { body } = this

        if (body && body.resume) {
          body.resume()
        }
      },
      write: (chunk, encoding, callback) => {
        const { req } = this

        if (req.push(chunk, encoding) || req._readableState.destroyed) {
          callback()
        } else {
          req[kResume] = callback
        }
      },
      destroy: (err, callback) => {
        const { body, req, res, ret, abort } = this

        if (!err && !ret._readableState.endEmitted) {
          err = new RequestAbortedError()
        }

        if (abort && err) {
          abort()
        }

        util.destroy(body, err)
        util.destroy(req, err)
        util.destroy(res, err)

        removeSignal(this)

        callback(err)
      }
    }).on('prefinish', () => {
      const { req } = this

      // Node < 15 does not call _final in same tick.
      req.push(null)
    })

    this.res = null

    addSignal(this, signal)
  }

  onConnect (abort, context) {
    const { ret, res } = this

    assert(!res, 'pipeline cannot be retried')

    if (ret.destroyed) {
      throw new RequestAbortedError()
    }

    this.abort = abort
    this.context = context
  }

  onHeaders (statusCode, rawHeaders, resume) {
    const { opaque, handler, context } = this

    if (statusCode < 200) {
      if (this.onInfo) {
        const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)
        this.onInfo({ statusCode, headers })
      }
      return
    }

    this.res = new PipelineResponse(resume)

    let body
    try {
      this.handler = null
      const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)
      body = this.runInAsyncScope(handler, null, {
        statusCode,
        headers,
        opaque,
        body: this.res,
        context
      })
    } catch (err) {
      this.res.on('error', util.nop)
      throw err
    }

    if (!body || typeof body.on !== 'function') {
      throw new InvalidReturnValueError('expected Readable')
    }

    body
      .on('data', (chunk) => {
        const { ret, body } = this

        if (!ret.push(chunk) && body.pause) {
          body.pause()
        }
      })
      .on('error', (err) => {
        const { ret } = this

        util.destroy(ret, err)
      })
      .on('end', () => {
        const { ret } = this

        ret.push(null)
      })
      .on('close', () => {
        const { ret } = this

        if (!ret._readableState.ended) {
          util.destroy(ret, new RequestAbortedError())
        }
      })

    this.body = body
  }

  onData (chunk) {
    const { res } = this
    return res.push(chunk)
  }

  onComplete (trailers) {
    const { res } = this
    res.push(null)
  }

  onError (err) {
    const { ret } = this
    this.handler = null
    util.destroy(ret, err)
  }
}

function pipeline (opts, handler) {
  try {
    const pipelineHandler = new PipelineHandler(opts, handler)
    this.dispatch({ ...opts, body: pipelineHandler.req }, pipelineHandler)
    return pipelineHandler.ret
  } catch (err) {
    return new PassThrough().destroy(err)
  }
}

module.exports = pipeline


/***/ }),

/***/ 5448:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const Readable = __nccwpck_require__(3858)
const {
  InvalidArgumentError,
  RequestAbortedError
} = __nccwpck_require__(8045)
const util = __nccwpck_require__(3983)
const { getResolveErrorBodyCallback } = __nccwpck_require__(7474)
const { AsyncResource } = __nccwpck_require__(852)
const { addSignal, removeSignal } = __nccwpck_require__(7032)

class RequestHandler extends AsyncResource {
  constructor (opts, callback) {
    if (!opts || typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError, highWaterMark } = opts

    try {
      if (typeof callback !== 'function') {
        throw new InvalidArgumentError('invalid callback')
      }

      if (highWaterMark && (typeof highWaterMark !== 'number' || highWaterMark < 0)) {
        throw new InvalidArgumentError('invalid highWaterMark')
      }

      if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
        throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
      }

      if (method === 'CONNECT') {
        throw new InvalidArgumentError('invalid method')
      }

      if (onInfo && typeof onInfo !== 'function') {
        throw new InvalidArgumentError('invalid onInfo callback')
      }

      super('UNDICI_REQUEST')
    } catch (err) {
      if (util.isStream(body)) {
        util.destroy(body.on('error', util.nop), err)
      }
      throw err
    }

    this.responseHeaders = responseHeaders || null
    this.opaque = opaque || null
    this.callback = callback
    this.res = null
    this.abort = null
    this.body = body
    this.trailers = {}
    this.context = null
    this.onInfo = onInfo || null
    this.throwOnError = throwOnError
    this.highWaterMark = highWaterMark

    if (util.isStream(body)) {
      body.on('error', (err) => {
        this.onError(err)
      })
    }

    addSignal(this, signal)
  }

  onConnect (abort, context) {
    if (!this.callback) {
      throw new RequestAbortedError()
    }

    this.abort = abort
    this.context = context
  }

  onHeaders (statusCode, rawHeaders, resume, statusMessage) {
    const { callback, opaque, abort, context, responseHeaders, highWaterMark } = this

    const headers = responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)

    if (statusCode < 200) {
      if (this.onInfo) {
        this.onInfo({ statusCode, headers })
      }
      return
    }

    const parsedHeaders = responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers
    const contentType = parsedHeaders['content-type']
    const body = new Readable({ resume, abort, contentType, highWaterMark })

    this.callback = null
    this.res = body
    if (callback !== null) {
      if (this.throwOnError && statusCode >= 400) {
        this.runInAsyncScope(getResolveErrorBodyCallback, null,
          { callback, body, contentType, statusCode, statusMessage, headers }
        )
      } else {
        this.runInAsyncScope(callback, null, null, {
          statusCode,
          headers,
          trailers: this.trailers,
          opaque,
          body,
          context
        })
      }
    }
  }

  onData (chunk) {
    const { res } = this
    return res.push(chunk)
  }

  onComplete (trailers) {
    const { res } = this

    removeSignal(this)

    util.parseHeaders(trailers, this.trailers)

    res.push(null)
  }

  onError (err) {
    const { res, callback, body, opaque } = this

    removeSignal(this)

    if (callback) {
      // TODO: Does this need queueMicrotask?
      this.callback = null
      queueMicrotask(() => {
        this.runInAsyncScope(callback, null, err, { opaque })
      })
    }

    if (res) {
      this.res = null
      // Ensure all queued handlers are invoked before destroying res.
      queueMicrotask(() => {
        util.destroy(res, err)
      })
    }

    if (body) {
      this.body = null
      util.destroy(body, err)
    }
  }
}

function request (opts, callback) {
  if (callback === undefined) {
    return new Promise((resolve, reject) => {
      request.call(this, opts, (err, data) => {
        return err ? reject(err) : resolve(data)
      })
    })
  }

  try {
    this.dispatch(opts, new RequestHandler(opts, callback))
  } catch (err) {
    if (typeof callback !== 'function') {
      throw err
    }
    const opaque = opts && opts.opaque
    queueMicrotask(() => callback(err, { opaque }))
  }
}

module.exports = request
module.exports.RequestHandler = RequestHandler


/***/ }),

/***/ 5395:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { finished, PassThrough } = __nccwpck_require__(2781)
const {
  InvalidArgumentError,
  InvalidReturnValueError,
  RequestAbortedError
} = __nccwpck_require__(8045)
const util = __nccwpck_require__(3983)
const { getResolveErrorBodyCallback } = __nccwpck_require__(7474)
const { AsyncResource } = __nccwpck_require__(852)
const { addSignal, removeSignal } = __nccwpck_require__(7032)

class StreamHandler extends AsyncResource {
  constructor (opts, factory, callback) {
    if (!opts || typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError } = opts

    try {
      if (typeof callback !== 'function') {
        throw new InvalidArgumentError('invalid callback')
      }

      if (typeof factory !== 'function') {
        throw new InvalidArgumentError('invalid factory')
      }

      if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
        throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
      }

      if (method === 'CONNECT') {
        throw new InvalidArgumentError('invalid method')
      }

      if (onInfo && typeof onInfo !== 'function') {
        throw new InvalidArgumentError('invalid onInfo callback')
      }

      super('UNDICI_STREAM')
    } catch (err) {
      if (util.isStream(body)) {
        util.destroy(body.on('error', util.nop), err)
      }
      throw err
    }

    this.responseHeaders = responseHeaders || null
    this.opaque = opaque || null
    this.factory = factory
    this.callback = callback
    this.res = null
    this.abort = null
    this.context = null
    this.trailers = null
    this.body = body
    this.onInfo = onInfo || null
    this.throwOnError = throwOnError || false

    if (util.isStream(body)) {
      body.on('error', (err) => {
        this.onError(err)
      })
    }

    addSignal(this, signal)
  }

  onConnect (abort, context) {
    if (!this.callback) {
      throw new RequestAbortedError()
    }

    this.abort = abort
    this.context = context
  }

  onHeaders (statusCode, rawHeaders, resume, statusMessage) {
    const { factory, opaque, context, callback, responseHeaders } = this

    const headers = responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)

    if (statusCode < 200) {
      if (this.onInfo) {
        this.onInfo({ statusCode, headers })
      }
      return
    }

    this.factory = null

    let res

    if (this.throwOnError && statusCode >= 400) {
      const parsedHeaders = responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers
      const contentType = parsedHeaders['content-type']
      res = new PassThrough()

      this.callback = null
      this.runInAsyncScope(getResolveErrorBodyCallback, null,
        { callback, body: res, contentType, statusCode, statusMessage, headers }
      )
    } else {
      if (factory === null) {
        return
      }

      res = this.runInAsyncScope(factory, null, {
        statusCode,
        headers,
        opaque,
        context
      })

      if (
        !res ||
        typeof res.write !== 'function' ||
        typeof res.end !== 'function' ||
        typeof res.on !== 'function'
      ) {
        throw new InvalidReturnValueError('expected Writable')
      }

      // TODO: Avoid finished. It registers an unnecessary amount of listeners.
      finished(res, { readable: false }, (err) => {
        const { callback, res, opaque, trailers, abort } = this

        this.res = null
        if (err || !res.readable) {
          util.destroy(res, err)
        }

        this.callback = null
        this.runInAsyncScope(callback, null, err || null, { opaque, trailers })

        if (err) {
          abort()
        }
      })
    }

    res.on('drain', resume)

    this.res = res

    const needDrain = res.writableNeedDrain !== undefined
      ? res.writableNeedDrain
      : res._writableState && res._writableState.needDrain

    return needDrain !== true
  }

  onData (chunk) {
    const { res } = this

    return res ? res.write(chunk) : true
  }

  onComplete (trailers) {
    const { res } = this

    removeSignal(this)

    if (!res) {
      return
    }

    this.trailers = util.parseHeaders(trailers)

    res.end()
  }

  onError (err) {
    const { res, callback, opaque, body } = this

    removeSignal(this)

    this.factory = null

    if (res) {
      this.res = null
      util.destroy(res, err)
    } else if (callback) {
      this.callback = null
      queueMicrotask(() => {
        this.runInAsyncScope(callback, null, err, { opaque })
      })
    }

    if (body) {
      this.body = null
      util.destroy(body, err)
    }
  }
}

function stream (opts, factory, callback) {
  if (callback === undefined) {
    return new Promise((resolve, reject) => {
      stream.call(this, opts, factory, (err, data) => {
        return err ? reject(err) : resolve(data)
      })
    })
  }

  try {
    this.dispatch(opts, new StreamHandler(opts, factory, callback))
  } catch (err) {
    if (typeof callback !== 'function') {
      throw err
    }
    const opaque = opts && opts.opaque
    queueMicrotask(() => callback(err, { opaque }))
  }
}

module.exports = stream


/***/ }),

/***/ 6923:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { InvalidArgumentError, RequestAbortedError, SocketError } = __nccwpck_require__(8045)
const { AsyncResource } = __nccwpck_require__(852)
const util = __nccwpck_require__(3983)
const { addSignal, removeSignal } = __nccwpck_require__(7032)
const assert = __nccwpck_require__(9491)

class UpgradeHandler extends AsyncResource {
  constructor (opts, callback) {
    if (!opts || typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    if (typeof callback !== 'function') {
      throw new InvalidArgumentError('invalid callback')
    }

    const { signal, opaque, responseHeaders } = opts

    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
    }

    super('UNDICI_UPGRADE')

    this.responseHeaders = responseHeaders || null
    this.opaque = opaque || null
    this.callback = callback
    this.abort = null
    this.context = null

    addSignal(this, signal)
  }

  onConnect (abort, context) {
    if (!this.callback) {
      throw new RequestAbortedError()
    }

    this.abort = abort
    this.context = null
  }

  onHeaders () {
    throw new SocketError('bad upgrade', null)
  }

  onUpgrade (statusCode, rawHeaders, socket) {
    const { callback, opaque, context } = this

    assert.strictEqual(statusCode, 101)

    removeSignal(this)

    this.callback = null
    const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)
    this.runInAsyncScope(callback, null, null, {
      headers,
      socket,
      opaque,
      context
    })
  }

  onError (err) {
    const { callback, opaque } = this

    removeSignal(this)

    if (callback) {
      this.callback = null
      queueMicrotask(() => {
        this.runInAsyncScope(callback, null, err, { opaque })
      })
    }
  }
}

function upgrade (opts, callback) {
  if (callback === undefined) {
    return new Promise((resolve, reject) => {
      upgrade.call(this, opts, (err, data) => {
        return err ? reject(err) : resolve(data)
      })
    })
  }

  try {
    const upgradeHandler = new UpgradeHandler(opts, callback)
    this.dispatch({
      ...opts,
      method: opts.method || 'GET',
      upgrade: opts.protocol || 'Websocket'
    }, upgradeHandler)
  } catch (err) {
    if (typeof callback !== 'function') {
      throw err
    }
    const opaque = opts && opts.opaque
    queueMicrotask(() => callback(err, { opaque }))
  }
}

module.exports = upgrade


/***/ }),

/***/ 4059:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



module.exports.request = __nccwpck_require__(5448)
module.exports.stream = __nccwpck_require__(5395)
module.exports.pipeline = __nccwpck_require__(8752)
module.exports.upgrade = __nccwpck_require__(6923)
module.exports.connect = __nccwpck_require__(9744)


/***/ }),

/***/ 3858:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

// Ported from https://github.com/nodejs/undici/pull/907



const assert = __nccwpck_require__(9491)
const { Readable } = __nccwpck_require__(2781)
const { RequestAbortedError, NotSupportedError, InvalidArgumentError } = __nccwpck_require__(8045)
const util = __nccwpck_require__(3983)
const { ReadableStreamFrom, toUSVString } = __nccwpck_require__(3983)

let Blob

const kConsume = Symbol('kConsume')
const kReading = Symbol('kReading')
const kBody = Symbol('kBody')
const kAbort = Symbol('abort')
const kContentType = Symbol('kContentType')

const noop = () => {}

module.exports = class BodyReadable extends Readable {
  constructor ({
    resume,
    abort,
    contentType = '',
    highWaterMark = 64 * 1024 // Same as nodejs fs streams.
  }) {
    super({
      autoDestroy: true,
      read: resume,
      highWaterMark
    })

    this._readableState.dataEmitted = false

    this[kAbort] = abort
    this[kConsume] = null
    this[kBody] = null
    this[kContentType] = contentType

    // Is stream being consumed through Readable API?
    // This is an optimization so that we avoid checking
    // for 'data' and 'readable' listeners in the hot path
    // inside push().
    this[kReading] = false
  }

  destroy (err) {
    if (this.destroyed) {
      // Node < 16
      return this
    }

    if (!err && !this._readableState.endEmitted) {
      err = new RequestAbortedError()
    }

    if (err) {
      this[kAbort]()
    }

    return super.destroy(err)
  }

  emit (ev, ...args) {
    if (ev === 'data') {
      // Node < 16.7
      this._readableState.dataEmitted = true
    } else if (ev === 'error') {
      // Node < 16
      this._readableState.errorEmitted = true
    }
    return super.emit(ev, ...args)
  }

  on (ev, ...args) {
    if (ev === 'data' || ev === 'readable') {
      this[kReading] = true
    }
    return super.on(ev, ...args)
  }

  addListener (ev, ...args) {
    return this.on(ev, ...args)
  }

  off (ev, ...args) {
    const ret = super.off(ev, ...args)
    if (ev === 'data' || ev === 'readable') {
      this[kReading] = (
        this.listenerCount('data') > 0 ||
        this.listenerCount('readable') > 0
      )
    }
    return ret
  }

  removeListener (ev, ...args) {
    return this.off(ev, ...args)
  }

  push (chunk) {
    if (this[kConsume] && chunk !== null && this.readableLength === 0) {
      consumePush(this[kConsume], chunk)
      return this[kReading] ? super.push(chunk) : true
    }
    return super.push(chunk)
  }

  // https://fetch.spec.whatwg.org/#dom-body-text
  async text () {
    return consume(this, 'text')
  }

  // https://fetch.spec.whatwg.org/#dom-body-json
  async json () {
    return consume(this, 'json')
  }

  // https://fetch.spec.whatwg.org/#dom-body-blob
  async blob () {
    return consume(this, 'blob')
  }

  // https://fetch.spec.whatwg.org/#dom-body-arraybuffer
  async arrayBuffer () {
    return consume(this, 'arrayBuffer')
  }

  // https://fetch.spec.whatwg.org/#dom-body-formdata
  async formData () {
    // TODO: Implement.
    throw new NotSupportedError()
  }

  // https://fetch.spec.whatwg.org/#dom-body-bodyused
  get bodyUsed () {
    return util.isDisturbed(this)
  }

  // https://fetch.spec.whatwg.org/#dom-body-body
  get body () {
    if (!this[kBody]) {
      this[kBody] = ReadableStreamFrom(this)
      if (this[kConsume]) {
        // TODO: Is this the best way to force a lock?
        this[kBody].getReader() // Ensure stream is locked.
        assert(this[kBody].locked)
      }
    }
    return this[kBody]
  }

  dump (opts) {
    let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144
    const signal = opts && opts.signal

    if (signal) {
      try {
        if (typeof signal !== 'object' || !('aborted' in signal)) {
          throw new InvalidArgumentError('signal must be an AbortSignal')
        }
        util.throwIfAborted(signal)
      } catch (err) {
        return Promise.reject(err)
      }
    }

    if (this.closed) {
      return Promise.resolve(null)
    }

    return new Promise((resolve, reject) => {
      const signalListenerCleanup = signal
        ? util.addAbortListener(signal, () => {
          this.destroy()
        })
        : noop

      this
        .on('close', function () {
          signalListenerCleanup()
          if (signal && signal.aborted) {
            reject(signal.reason || Object.assign(new Error('The operation was aborted'), { name: 'AbortError' }))
          } else {
            resolve(null)
          }
        })
        .on('error', noop)
        .on('data', function (chunk) {
          limit -= chunk.length
          if (limit <= 0) {
            this.destroy()
          }
        })
        .resume()
    })
  }
}

// https://streams.spec.whatwg.org/#readablestream-locked
function isLocked (self) {
  // Consume is an implicit lock.
  return (self[kBody] && self[kBody].locked === true) || self[kConsume]
}

// https://fetch.spec.whatwg.org/#body-unusable
function isUnusable (self) {
  return util.isDisturbed(self) || isLocked(self)
}

async function consume (stream, type) {
  if (isUnusable(stream)) {
    throw new TypeError('unusable')
  }

  assert(!stream[kConsume])

  return new Promise((resolve, reject) => {
    stream[kConsume] = {
      type,
      stream,
      resolve,
      reject,
      length: 0,
      body: []
    }

    stream
      .on('error', function (err) {
        consumeFinish(this[kConsume], err)
      })
      .on('close', function () {
        if (this[kConsume].body !== null) {
          consumeFinish(this[kConsume], new RequestAbortedError())
        }
      })

    process.nextTick(consumeStart, stream[kConsume])
  })
}

function consumeStart (consume) {
  if (consume.body === null) {
    return
  }

  const { _readableState: state } = consume.stream

  for (const chunk of state.buffer) {
    consumePush(consume, chunk)
  }

  if (state.endEmitted) {
    consumeEnd(this[kConsume])
  } else {
    consume.stream.on('end', function () {
      consumeEnd(this[kConsume])
    })
  }

  consume.stream.resume()

  while (consume.stream.read() != null) {
    // Loop
  }
}

function consumeEnd (consume) {
  const { type, body, resolve, stream, length } = consume

  try {
    if (type === 'text') {
      resolve(toUSVString(Buffer.concat(body)))
    } else if (type === 'json') {
      resolve(JSON.parse(Buffer.concat(body)))
    } else if (type === 'arrayBuffer') {
      const dst = new Uint8Array(length)

      let pos = 0
      for (const buf of body) {
        dst.set(buf, pos)
        pos += buf.byteLength
      }

      resolve(dst.buffer)
    } else if (type === 'blob') {
      if (!Blob) {
        Blob = (__nccwpck_require__(4300).Blob)
      }
      resolve(new Blob(body, { type: stream[kContentType] }))
    }

    consumeFinish(consume)
  } catch (err) {
    stream.destroy(err)
  }
}

function consumePush (consume, chunk) {
  consume.length += chunk.length
  consume.body.push(chunk)
}

function consumeFinish (consume, err) {
  if (consume.body === null) {
    return
  }

  if (err) {
    consume.reject(err)
  } else {
    consume.resolve()
  }

  consume.type = null
  consume.stream = null
  consume.resolve = null
  consume.reject = null
  consume.length = 0
  consume.body = null
}


/***/ }),

/***/ 7474:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const assert = __nccwpck_require__(9491)
const {
  ResponseStatusCodeError
} = __nccwpck_require__(8045)
const { toUSVString } = __nccwpck_require__(3983)

async function getResolveErrorBodyCallback ({ callback, body, contentType, statusCode, statusMessage, headers }) {
  assert(body)

  let chunks = []
  let limit = 0

  for await (const chunk of body) {
    chunks.push(chunk)
    limit += chunk.length
    if (limit > 128 * 1024) {
      chunks = null
      break
    }
  }

  if (statusCode === 204 || !contentType || !chunks) {
    process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers))
    return
  }

  try {
    if (contentType.startsWith('application/json')) {
      const payload = JSON.parse(toUSVString(Buffer.concat(chunks)))
      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers, payload))
      return
    }

    if (contentType.startsWith('text/')) {
      const payload = toUSVString(Buffer.concat(chunks))
      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers, payload))
      return
    }
  } catch (err) {
    // Process in a fallback if error
  }

  process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers))
}

module.exports = { getResolveErrorBodyCallback }


/***/ }),

/***/ 7931:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const {
  BalancedPoolMissingUpstreamError,
  InvalidArgumentError
} = __nccwpck_require__(8045)
const {
  PoolBase,
  kClients,
  kNeedDrain,
  kAddClient,
  kRemoveClient,
  kGetDispatcher
} = __nccwpck_require__(3198)
const Pool = __nccwpck_require__(4634)
const { kUrl, kInterceptors } = __nccwpck_require__(2785)
const { parseOrigin } = __nccwpck_require__(3983)
const kFactory = Symbol('factory')

const kOptions = Symbol('options')
const kGreatestCommonDivisor = Symbol('kGreatestCommonDivisor')
const kCurrentWeight = Symbol('kCurrentWeight')
const kIndex = Symbol('kIndex')
const kWeight = Symbol('kWeight')
const kMaxWeightPerServer = Symbol('kMaxWeightPerServer')
const kErrorPenalty = Symbol('kErrorPenalty')

function getGreatestCommonDivisor (a, b) {
  if (b === 0) return a
  return getGreatestCommonDivisor(b, a % b)
}

function defaultFactory (origin, opts) {
  return new Pool(origin, opts)
}

class BalancedPool extends PoolBase {
  constructor (upstreams = [], { factory = defaultFactory, ...opts } = {}) {
    super()

    this[kOptions] = opts
    this[kIndex] = -1
    this[kCurrentWeight] = 0

    this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100
    this[kErrorPenalty] = this[kOptions].errorPenalty || 15

    if (!Array.isArray(upstreams)) {
      upstreams = [upstreams]
    }

    if (typeof factory !== 'function') {
      throw new InvalidArgumentError('factory must be a function.')
    }

    this[kInterceptors] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool)
      ? opts.interceptors.BalancedPool
      : []
    this[kFactory] = factory

    for (const upstream of upstreams) {
      this.addUpstream(upstream)
    }
    this._updateBalancedPoolStats()
  }

  addUpstream (upstream) {
    const upstreamOrigin = parseOrigin(upstream).origin

    if (this[kClients].find((pool) => (
      pool[kUrl].origin === upstreamOrigin &&
      pool.closed !== true &&
      pool.destroyed !== true
    ))) {
      return this
    }
    const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]))

    this[kAddClient](pool)
    pool.on('connect', () => {
      pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty])
    })

    pool.on('connectionError', () => {
      pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty])
      this._updateBalancedPoolStats()
    })

    pool.on('disconnect', (...args) => {
      const err = args[2]
      if (err && err.code === 'UND_ERR_SOCKET') {
        // decrease the weight of the pool.
        pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty])
        this._updateBalancedPoolStats()
      }
    })

    for (const client of this[kClients]) {
      client[kWeight] = this[kMaxWeightPerServer]
    }

    this._updateBalancedPoolStats()

    return this
  }

  _updateBalancedPoolStats () {
    this[kGreatestCommonDivisor] = this[kClients].map(p => p[kWeight]).reduce(getGreatestCommonDivisor, 0)
  }

  removeUpstream (upstream) {
    const upstreamOrigin = parseOrigin(upstream).origin

    const pool = this[kClients].find((pool) => (
      pool[kUrl].origin === upstreamOrigin &&
      pool.closed !== true &&
      pool.destroyed !== true
    ))

    if (pool) {
      this[kRemoveClient](pool)
    }

    return this
  }

  get upstreams () {
    return this[kClients]
      .filter(dispatcher => dispatcher.closed !== true && dispatcher.destroyed !== true)
      .map((p) => p[kUrl].origin)
  }

  [kGetDispatcher] () {
    // We validate that pools is greater than 0,
    // otherwise we would have to wait until an upstream
    // is added, which might never happen.
    if (this[kClients].length === 0) {
      throw new BalancedPoolMissingUpstreamError()
    }

    const dispatcher = this[kClients].find(dispatcher => (
      !dispatcher[kNeedDrain] &&
      dispatcher.closed !== true &&
      dispatcher.destroyed !== true
    ))

    if (!dispatcher) {
      return
    }

    const allClientsBusy = this[kClients].map(pool => pool[kNeedDrain]).reduce((a, b) => a && b, true)

    if (allClientsBusy) {
      return
    }

    let counter = 0

    let maxWeightIndex = this[kClients].findIndex(pool => !pool[kNeedDrain])

    while (counter++ < this[kClients].length) {
      this[kIndex] = (this[kIndex] + 1) % this[kClients].length
      const pool = this[kClients][this[kIndex]]

      // find pool index with the largest weight
      if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {
        maxWeightIndex = this[kIndex]
      }

      // decrease the current weight every `this[kClients].length`.
      if (this[kIndex] === 0) {
        // Set the current weight to the next lower weight.
        this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor]

        if (this[kCurrentWeight] <= 0) {
          this[kCurrentWeight] = this[kMaxWeightPerServer]
        }
      }
      if (pool[kWeight] >= this[kCurrentWeight] && (!pool[kNeedDrain])) {
        return pool
      }
    }

    this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight]
    this[kIndex] = maxWeightIndex
    return this[kClients][maxWeightIndex]
  }
}

module.exports = BalancedPool


/***/ }),

/***/ 6101:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { kConstruct } = __nccwpck_require__(9174)
const { urlEquals, fieldValues: getFieldValues } = __nccwpck_require__(2396)
const { kEnumerableProperty, isDisturbed } = __nccwpck_require__(3983)
const { kHeadersList } = __nccwpck_require__(2785)
const { webidl } = __nccwpck_require__(1744)
const { Response, cloneResponse } = __nccwpck_require__(7823)
const { Request } = __nccwpck_require__(8359)
const { kState, kHeaders, kGuard, kRealm } = __nccwpck_require__(5861)
const { fetching } = __nccwpck_require__(4881)
const { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } = __nccwpck_require__(2538)
const assert = __nccwpck_require__(9491)
const { getGlobalDispatcher } = __nccwpck_require__(1892)

/**
 * @see https://w3c.github.io/ServiceWorker/#dfn-cache-batch-operation
 * @typedef {Object} CacheBatchOperation
 * @property {'delete' | 'put'} type
 * @property {any} request
 * @property {any} response
 * @property {import('../../types/cache').CacheQueryOptions} options
 */

/**
 * @see https://w3c.github.io/ServiceWorker/#dfn-request-response-list
 * @typedef {[any, any][]} requestResponseList
 */

class Cache {
  /**
   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list
   * @type {requestResponseList}
   */
  #relevantRequestResponseList

  constructor () {
    if (arguments[0] !== kConstruct) {
      webidl.illegalConstructor()
    }

    this.#relevantRequestResponseList = arguments[1]
  }

  async match (request, options = {}) {
    webidl.brandCheck(this, Cache)
    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.match' })

    request = webidl.converters.RequestInfo(request)
    options = webidl.converters.CacheQueryOptions(options)

    const p = await this.matchAll(request, options)

    if (p.length === 0) {
      return
    }

    return p[0]
  }

  async matchAll (request = undefined, options = {}) {
    webidl.brandCheck(this, Cache)

    if (request !== undefined) request = webidl.converters.RequestInfo(request)
    options = webidl.converters.CacheQueryOptions(options)

    // 1.
    let r = null

    // 2.
    if (request !== undefined) {
      if (request instanceof Request) {
        // 2.1.1
        r = request[kState]

        // 2.1.2
        if (r.method !== 'GET' && !options.ignoreMethod) {
          return []
        }
      } else if (typeof request === 'string') {
        // 2.2.1
        r = new Request(request)[kState]
      }
    }

    // 5.
    // 5.1
    const responses = []

    // 5.2
    if (request === undefined) {
      // 5.2.1
      for (const requestResponse of this.#relevantRequestResponseList) {
        responses.push(requestResponse[1])
      }
    } else { // 5.3
      // 5.3.1
      const requestResponses = this.#queryCache(r, options)

      // 5.3.2
      for (const requestResponse of requestResponses) {
        responses.push(requestResponse[1])
      }
    }

    // 5.4
    // We don't implement CORs so we don't need to loop over the responses, yay!

    // 5.5.1
    const responseList = []

    // 5.5.2
    for (const response of responses) {
      // 5.5.2.1
      const responseObject = new Response(response.body?.source ?? null)
      const body = responseObject[kState].body
      responseObject[kState] = response
      responseObject[kState].body = body
      responseObject[kHeaders][kHeadersList] = response.headersList
      responseObject[kHeaders][kGuard] = 'immutable'

      responseList.push(responseObject)
    }

    // 6.
    return Object.freeze(responseList)
  }

  async add (request) {
    webidl.brandCheck(this, Cache)
    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.add' })

    request = webidl.converters.RequestInfo(request)

    // 1.
    const requests = [request]

    // 2.
    const responseArrayPromise = this.addAll(requests)

    // 3.
    return await responseArrayPromise
  }

  async addAll (requests) {
    webidl.brandCheck(this, Cache)
    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.addAll' })

    requests = webidl.converters['sequence<RequestInfo>'](requests)

    // 1.
    const responsePromises = []

    // 2.
    const requestList = []

    // 3.
    for (const request of requests) {
      if (typeof request === 'string') {
        continue
      }

      // 3.1
      const r = request[kState]

      // 3.2
      if (!urlIsHttpHttpsScheme(r.url) || r.method !== 'GET') {
        throw webidl.errors.exception({
          header: 'Cache.addAll',
          message: 'Expected http/s scheme when method is not GET.'
        })
      }
    }

    // 4.
    /** @type {ReturnType<typeof fetching>[]} */
    const fetchControllers = []

    // 5.
    for (const request of requests) {
      // 5.1
      const r = new Request(request)[kState]

      // 5.2
      if (!urlIsHttpHttpsScheme(r.url)) {
        throw webidl.errors.exception({
          header: 'Cache.addAll',
          message: 'Expected http/s scheme.'
        })
      }

      // 5.4
      r.initiator = 'fetch'
      r.destination = 'subresource'

      // 5.5
      requestList.push(r)

      // 5.6
      const responsePromise = createDeferredPromise()

      // 5.7
      fetchControllers.push(fetching({
        request: r,
        dispatcher: getGlobalDispatcher(),
        processResponse (response) {
          // 1.
          if (response.type === 'error' || response.status === 206 || response.status < 200 || response.status > 299) {
            responsePromise.reject(webidl.errors.exception({
              header: 'Cache.addAll',
              message: 'Received an invalid status code or the request failed.'
            }))
          } else if (response.headersList.contains('vary')) { // 2.
            // 2.1
            const fieldValues = getFieldValues(response.headersList.get('vary'))

            // 2.2
            for (const fieldValue of fieldValues) {
              // 2.2.1
              if (fieldValue === '*') {
                responsePromise.reject(webidl.errors.exception({
                  header: 'Cache.addAll',
                  message: 'invalid vary field value'
                }))

                for (const controller of fetchControllers) {
                  controller.abort()
                }

                return
              }
            }
          }
        },
        processResponseEndOfBody (response) {
          // 1.
          if (response.aborted) {
            responsePromise.reject(new DOMException('aborted', 'AbortError'))
            return
          }

          // 2.
          responsePromise.resolve(response)
        }
      }))

      // 5.8
      responsePromises.push(responsePromise.promise)
    }

    // 6.
    const p = Promise.all(responsePromises)

    // 7.
    const responses = await p

    // 7.1
    const operations = []

    // 7.2
    let index = 0

    // 7.3
    for (const response of responses) {
      // 7.3.1
      /** @type {CacheBatchOperation} */
      const operation = {
        type: 'put', // 7.3.2
        request: requestList[index], // 7.3.3
        response // 7.3.4
      }

      operations.push(operation) // 7.3.5

      index++ // 7.3.6
    }

    // 7.5
    const cacheJobPromise = createDeferredPromise()

    // 7.6.1
    let errorData = null

    // 7.6.2
    try {
      this.#batchCacheOperations(operations)
    } catch (e) {
      errorData = e
    }

    // 7.6.3
    queueMicrotask(() => {
      // 7.6.3.1
      if (errorData === null) {
        cacheJobPromise.resolve(undefined)
      } else {
        // 7.6.3.2
        cacheJobPromise.reject(errorData)
      }
    })

    // 7.7
    return cacheJobPromise.promise
  }

  async put (request, response) {
    webidl.brandCheck(this, Cache)
    webidl.argumentLengthCheck(arguments, 2, { header: 'Cache.put' })

    request = webidl.converters.RequestInfo(request)
    response = webidl.converters.Response(response)

    // 1.
    let innerRequest = null

    // 2.
    if (request instanceof Request) {
      innerRequest = request[kState]
    } else { // 3.
      innerRequest = new Request(request)[kState]
    }

    // 4.
    if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== 'GET') {
      throw webidl.errors.exception({
        header: 'Cache.put',
        message: 'Expected an http/s scheme when method is not GET'
      })
    }

    // 5.
    const innerResponse = response[kState]

    // 6.
    if (innerResponse.status === 206) {
      throw webidl.errors.exception({
        header: 'Cache.put',
        message: 'Got 206 status'
      })
    }

    // 7.
    if (innerResponse.headersList.contains('vary')) {
      // 7.1.
      const fieldValues = getFieldValues(innerResponse.headersList.get('vary'))

      // 7.2.
      for (const fieldValue of fieldValues) {
        // 7.2.1
        if (fieldValue === '*') {
          throw webidl.errors.exception({
            header: 'Cache.put',
            message: 'Got * vary field value'
          })
        }
      }
    }

    // 8.
    if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) {
      throw webidl.errors.exception({
        header: 'Cache.put',
        message: 'Response body is locked or disturbed'
      })
    }

    // 9.
    const clonedResponse = cloneResponse(innerResponse)

    // 10.
    const bodyReadPromise = createDeferredPromise()

    // 11.
    if (innerResponse.body != null) {
      // 11.1
      const stream = innerResponse.body.stream

      // 11.2
      const reader = stream.getReader()

      // 11.3
      readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject)
    } else {
      bodyReadPromise.resolve(undefined)
    }

    // 12.
    /** @type {CacheBatchOperation[]} */
    const operations = []

    // 13.
    /** @type {CacheBatchOperation} */
    const operation = {
      type: 'put', // 14.
      request: innerRequest, // 15.
      response: clonedResponse // 16.
    }

    // 17.
    operations.push(operation)

    // 19.
    const bytes = await bodyReadPromise.promise

    if (clonedResponse.body != null) {
      clonedResponse.body.source = bytes
    }

    // 19.1
    const cacheJobPromise = createDeferredPromise()

    // 19.2.1
    let errorData = null

    // 19.2.2
    try {
      this.#batchCacheOperations(operations)
    } catch (e) {
      errorData = e
    }

    // 19.2.3
    queueMicrotask(() => {
      // 19.2.3.1
      if (errorData === null) {
        cacheJobPromise.resolve()
      } else { // 19.2.3.2
        cacheJobPromise.reject(errorData)
      }
    })

    return cacheJobPromise.promise
  }

  async delete (request, options = {}) {
    webidl.brandCheck(this, Cache)
    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.delete' })

    request = webidl.converters.RequestInfo(request)
    options = webidl.converters.CacheQueryOptions(options)

    /**
     * @type {Request}
     */
    let r = null

    if (request instanceof Request) {
      r = request[kState]

      if (r.method !== 'GET' && !options.ignoreMethod) {
        return false
      }
    } else {
      assert(typeof request === 'string')

      r = new Request(request)[kState]
    }

    /** @type {CacheBatchOperation[]} */
    const operations = []

    /** @type {CacheBatchOperation} */
    const operation = {
      type: 'delete',
      request: r,
      options
    }

    operations.push(operation)

    const cacheJobPromise = createDeferredPromise()

    let errorData = null
    let requestResponses

    try {
      requestResponses = this.#batchCacheOperations(operations)
    } catch (e) {
      errorData = e
    }

    queueMicrotask(() => {
      if (errorData === null) {
        cacheJobPromise.resolve(!!requestResponses?.length)
      } else {
        cacheJobPromise.reject(errorData)
      }
    })

    return cacheJobPromise.promise
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys
   * @param {any} request
   * @param {import('../../types/cache').CacheQueryOptions} options
   * @returns {readonly Request[]}
   */
  async keys (request = undefined, options = {}) {
    webidl.brandCheck(this, Cache)

    if (request !== undefined) request = webidl.converters.RequestInfo(request)
    options = webidl.converters.CacheQueryOptions(options)

    // 1.
    let r = null

    // 2.
    if (request !== undefined) {
      // 2.1
      if (request instanceof Request) {
        // 2.1.1
        r = request[kState]

        // 2.1.2
        if (r.method !== 'GET' && !options.ignoreMethod) {
          return []
        }
      } else if (typeof request === 'string') { // 2.2
        r = new Request(request)[kState]
      }
    }

    // 4.
    const promise = createDeferredPromise()

    // 5.
    // 5.1
    const requests = []

    // 5.2
    if (request === undefined) {
      // 5.2.1
      for (const requestResponse of this.#relevantRequestResponseList) {
        // 5.2.1.1
        requests.push(requestResponse[0])
      }
    } else { // 5.3
      // 5.3.1
      const requestResponses = this.#queryCache(r, options)

      // 5.3.2
      for (const requestResponse of requestResponses) {
        // 5.3.2.1
        requests.push(requestResponse[0])
      }
    }

    // 5.4
    queueMicrotask(() => {
      // 5.4.1
      const requestList = []

      // 5.4.2
      for (const request of requests) {
        const requestObject = new Request('https://a')
        requestObject[kState] = request
        requestObject[kHeaders][kHeadersList] = request.headersList
        requestObject[kHeaders][kGuard] = 'immutable'
        requestObject[kRealm] = request.client

        // 5.4.2.1
        requestList.push(requestObject)
      }

      // 5.4.3
      promise.resolve(Object.freeze(requestList))
    })

    return promise.promise
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm
   * @param {CacheBatchOperation[]} operations
   * @returns {requestResponseList}
   */
  #batchCacheOperations (operations) {
    // 1.
    const cache = this.#relevantRequestResponseList

    // 2.
    const backupCache = [...cache]

    // 3.
    const addedItems = []

    // 4.1
    const resultList = []

    try {
      // 4.2
      for (const operation of operations) {
        // 4.2.1
        if (operation.type !== 'delete' && operation.type !== 'put') {
          throw webidl.errors.exception({
            header: 'Cache.#batchCacheOperations',
            message: 'operation type does not match "delete" or "put"'
          })
        }

        // 4.2.2
        if (operation.type === 'delete' && operation.response != null) {
          throw webidl.errors.exception({
            header: 'Cache.#batchCacheOperations',
            message: 'delete operation should not have an associated response'
          })
        }

        // 4.2.3
        if (this.#queryCache(operation.request, operation.options, addedItems).length) {
          throw new DOMException('???', 'InvalidStateError')
        }

        // 4.2.4
        let requestResponses

        // 4.2.5
        if (operation.type === 'delete') {
          // 4.2.5.1
          requestResponses = this.#queryCache(operation.request, operation.options)

          // TODO: the spec is wrong, this is needed to pass WPTs
          if (requestResponses.length === 0) {
            return []
          }

          // 4.2.5.2
          for (const requestResponse of requestResponses) {
            const idx = cache.indexOf(requestResponse)
            assert(idx !== -1)

            // 4.2.5.2.1
            cache.splice(idx, 1)
          }
        } else if (operation.type === 'put') { // 4.2.6
          // 4.2.6.1
          if (operation.response == null) {
            throw webidl.errors.exception({
              header: 'Cache.#batchCacheOperations',
              message: 'put operation should have an associated response'
            })
          }

          // 4.2.6.2
          const r = operation.request

          // 4.2.6.3
          if (!urlIsHttpHttpsScheme(r.url)) {
            throw webidl.errors.exception({
              header: 'Cache.#batchCacheOperations',
              message: 'expected http or https scheme'
            })
          }

          // 4.2.6.4
          if (r.method !== 'GET') {
            throw webidl.errors.exception({
              header: 'Cache.#batchCacheOperations',
              message: 'not get method'
            })
          }

          // 4.2.6.5
          if (operation.options != null) {
            throw webidl.errors.exception({
              header: 'Cache.#batchCacheOperations',
              message: 'options must not be defined'
            })
          }

          // 4.2.6.6
          requestResponses = this.#queryCache(operation.request)

          // 4.2.6.7
          for (const requestResponse of requestResponses) {
            const idx = cache.indexOf(requestResponse)
            assert(idx !== -1)

            // 4.2.6.7.1
            cache.splice(idx, 1)
          }

          // 4.2.6.8
          cache.push([operation.request, operation.response])

          // 4.2.6.10
          addedItems.push([operation.request, operation.response])
        }

        // 4.2.7
        resultList.push([operation.request, operation.response])
      }

      // 4.3
      return resultList
    } catch (e) { // 5.
      // 5.1
      this.#relevantRequestResponseList.length = 0

      // 5.2
      this.#relevantRequestResponseList = backupCache

      // 5.3
      throw e
    }
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#query-cache
   * @param {any} requestQuery
   * @param {import('../../types/cache').CacheQueryOptions} options
   * @param {requestResponseList} targetStorage
   * @returns {requestResponseList}
   */
  #queryCache (requestQuery, options, targetStorage) {
    /** @type {requestResponseList} */
    const resultList = []

    const storage = targetStorage ?? this.#relevantRequestResponseList

    for (const requestResponse of storage) {
      const [cachedRequest, cachedResponse] = requestResponse
      if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) {
        resultList.push(requestResponse)
      }
    }

    return resultList
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm
   * @param {any} requestQuery
   * @param {any} request
   * @param {any | null} response
   * @param {import('../../types/cache').CacheQueryOptions | undefined} options
   * @returns {boolean}
   */
  #requestMatchesCachedItem (requestQuery, request, response = null, options) {
    // if (options?.ignoreMethod === false && request.method === 'GET') {
    //   return false
    // }

    const queryURL = new URL(requestQuery.url)

    const cachedURL = new URL(request.url)

    if (options?.ignoreSearch) {
      cachedURL.search = ''

      queryURL.search = ''
    }

    if (!urlEquals(queryURL, cachedURL, true)) {
      return false
    }

    if (
      response == null ||
      options?.ignoreVary ||
      !response.headersList.contains('vary')
    ) {
      return true
    }

    const fieldValues = getFieldValues(response.headersList.get('vary'))

    for (const fieldValue of fieldValues) {
      if (fieldValue === '*') {
        return false
      }

      const requestValue = request.headersList.get(fieldValue)
      const queryValue = requestQuery.headersList.get(fieldValue)

      // If one has the header and the other doesn't, or one has
      // a different value than the other, return false
      if (requestValue !== queryValue) {
        return false
      }
    }

    return true
  }
}

Object.defineProperties(Cache.prototype, {
  [Symbol.toStringTag]: {
    value: 'Cache',
    configurable: true
  },
  match: kEnumerableProperty,
  matchAll: kEnumerableProperty,
  add: kEnumerableProperty,
  addAll: kEnumerableProperty,
  put: kEnumerableProperty,
  delete: kEnumerableProperty,
  keys: kEnumerableProperty
})

const cacheQueryOptionConverters = [
  {
    key: 'ignoreSearch',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'ignoreMethod',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'ignoreVary',
    converter: webidl.converters.boolean,
    defaultValue: false
  }
]

webidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters)

webidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([
  ...cacheQueryOptionConverters,
  {
    key: 'cacheName',
    converter: webidl.converters.DOMString
  }
])

webidl.converters.Response = webidl.interfaceConverter(Response)

webidl.converters['sequence<RequestInfo>'] = webidl.sequenceConverter(
  webidl.converters.RequestInfo
)

module.exports = {
  Cache
}


/***/ }),

/***/ 7907:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { kConstruct } = __nccwpck_require__(9174)
const { Cache } = __nccwpck_require__(6101)
const { webidl } = __nccwpck_require__(1744)
const { kEnumerableProperty } = __nccwpck_require__(3983)

class CacheStorage {
  /**
   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map
   * @type {Map<string, import('./cache').requestResponseList}
   */
  #caches = new Map()

  constructor () {
    if (arguments[0] !== kConstruct) {
      webidl.illegalConstructor()
    }
  }

  async match (request, options = {}) {
    webidl.brandCheck(this, CacheStorage)
    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.match' })

    request = webidl.converters.RequestInfo(request)
    options = webidl.converters.MultiCacheQueryOptions(options)

    // 1.
    if (options.cacheName != null) {
      // 1.1.1.1
      if (this.#caches.has(options.cacheName)) {
        // 1.1.1.1.1
        const cacheList = this.#caches.get(options.cacheName)
        const cache = new Cache(kConstruct, cacheList)

        return await cache.match(request, options)
      }
    } else { // 2.
      // 2.2
      for (const cacheList of this.#caches.values()) {
        const cache = new Cache(kConstruct, cacheList)

        // 2.2.1.2
        const response = await cache.match(request, options)

        if (response !== undefined) {
          return response
        }
      }
    }
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#cache-storage-has
   * @param {string} cacheName
   * @returns {Promise<boolean>}
   */
  async has (cacheName) {
    webidl.brandCheck(this, CacheStorage)
    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.has' })

    cacheName = webidl.converters.DOMString(cacheName)

    // 2.1.1
    // 2.2
    return this.#caches.has(cacheName)
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open
   * @param {string} cacheName
   * @returns {Promise<Cache>}
   */
  async open (cacheName) {
    webidl.brandCheck(this, CacheStorage)
    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.open' })

    cacheName = webidl.converters.DOMString(cacheName)

    // 2.1
    if (this.#caches.has(cacheName)) {
      // await caches.open('v1') !== await caches.open('v1')

      // 2.1.1
      const cache = this.#caches.get(cacheName)

      // 2.1.1.1
      return new Cache(kConstruct, cache)
    }

    // 2.2
    const cache = []

    // 2.3
    this.#caches.set(cacheName, cache)

    // 2.4
    return new Cache(kConstruct, cache)
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete
   * @param {string} cacheName
   * @returns {Promise<boolean>}
   */
  async delete (cacheName) {
    webidl.brandCheck(this, CacheStorage)
    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.delete' })

    cacheName = webidl.converters.DOMString(cacheName)

    return this.#caches.delete(cacheName)
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys
   * @returns {string[]}
   */
  async keys () {
    webidl.brandCheck(this, CacheStorage)

    // 2.1
    const keys = this.#caches.keys()

    // 2.2
    return [...keys]
  }
}

Object.defineProperties(CacheStorage.prototype, {
  [Symbol.toStringTag]: {
    value: 'CacheStorage',
    configurable: true
  },
  match: kEnumerableProperty,
  has: kEnumerableProperty,
  open: kEnumerableProperty,
  delete: kEnumerableProperty,
  keys: kEnumerableProperty
})

module.exports = {
  CacheStorage
}


/***/ }),

/***/ 9174:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



module.exports = {
  kConstruct: (__nccwpck_require__(2785).kConstruct)
}


/***/ }),

/***/ 2396:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const assert = __nccwpck_require__(9491)
const { URLSerializer } = __nccwpck_require__(685)
const { isValidHeaderName } = __nccwpck_require__(2538)

/**
 * @see https://url.spec.whatwg.org/#concept-url-equals
 * @param {URL} A
 * @param {URL} B
 * @param {boolean | undefined} excludeFragment
 * @returns {boolean}
 */
function urlEquals (A, B, excludeFragment = false) {
  const serializedA = URLSerializer(A, excludeFragment)

  const serializedB = URLSerializer(B, excludeFragment)

  return serializedA === serializedB
}

/**
 * @see https://github.com/chromium/chromium/blob/694d20d134cb553d8d89e5500b9148012b1ba299/content/browser/cache_storage/cache_storage_cache.cc#L260-L262
 * @param {string} header
 */
function fieldValues (header) {
  assert(header !== null)

  const values = []

  for (let value of header.split(',')) {
    value = value.trim()

    if (!value.length) {
      continue
    } else if (!isValidHeaderName(value)) {
      continue
    }

    values.push(value)
  }

  return values
}

module.exports = {
  urlEquals,
  fieldValues
}


/***/ }),

/***/ 3598:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

// @ts-check



/* global WebAssembly */

const assert = __nccwpck_require__(9491)
const net = __nccwpck_require__(1808)
const http = __nccwpck_require__(3685)
const { pipeline } = __nccwpck_require__(2781)
const util = __nccwpck_require__(3983)
const timers = __nccwpck_require__(9459)
const Request = __nccwpck_require__(2905)
const DispatcherBase = __nccwpck_require__(4839)
const {
  RequestContentLengthMismatchError,
  ResponseContentLengthMismatchError,
  InvalidArgumentError,
  RequestAbortedError,
  HeadersTimeoutError,
  HeadersOverflowError,
  SocketError,
  InformationalError,
  BodyTimeoutError,
  HTTPParserError,
  ResponseExceededMaxSizeError,
  ClientDestroyedError
} = __nccwpck_require__(8045)
const buildConnector = __nccwpck_require__(2067)
const {
  kUrl,
  kReset,
  kServerName,
  kClient,
  kBusy,
  kParser,
  kConnect,
  kBlocking,
  kResuming,
  kRunning,
  kPending,
  kSize,
  kWriting,
  kQueue,
  kConnected,
  kConnecting,
  kNeedDrain,
  kNoRef,
  kKeepAliveDefaultTimeout,
  kHostHeader,
  kPendingIdx,
  kRunningIdx,
  kError,
  kPipelining,
  kSocket,
  kKeepAliveTimeoutValue,
  kMaxHeadersSize,
  kKeepAliveMaxTimeout,
  kKeepAliveTimeoutThreshold,
  kHeadersTimeout,
  kBodyTimeout,
  kStrictContentLength,
  kConnector,
  kMaxRedirections,
  kMaxRequests,
  kCounter,
  kClose,
  kDestroy,
  kDispatch,
  kInterceptors,
  kLocalAddress,
  kMaxResponseSize,
  kHTTPConnVersion,
  // HTTP2
  kHost,
  kHTTP2Session,
  kHTTP2SessionState,
  kHTTP2BuildRequest,
  kHTTP2CopyHeaders,
  kHTTP1BuildRequest
} = __nccwpck_require__(2785)

/** @type {import('http2')} */
let http2
try {
  http2 = __nccwpck_require__(5158)
} catch {
  // @ts-ignore
  http2 = { constants: {} }
}

const {
  constants: {
    HTTP2_HEADER_AUTHORITY,
    HTTP2_HEADER_METHOD,
    HTTP2_HEADER_PATH,
    HTTP2_HEADER_SCHEME,
    HTTP2_HEADER_CONTENT_LENGTH,
    HTTP2_HEADER_EXPECT,
    HTTP2_HEADER_STATUS
  }
} = http2

// Experimental
let h2ExperimentalWarned = false

const FastBuffer = Buffer[Symbol.species]

const kClosedResolve = Symbol('kClosedResolve')

const channels = {}

try {
  const diagnosticsChannel = __nccwpck_require__(7643)
  channels.sendHeaders = diagnosticsChannel.channel('undici:client:sendHeaders')
  channels.beforeConnect = diagnosticsChannel.channel('undici:client:beforeConnect')
  channels.connectError = diagnosticsChannel.channel('undici:client:connectError')
  channels.connected = diagnosticsChannel.channel('undici:client:connected')
} catch {
  channels.sendHeaders = { hasSubscribers: false }
  channels.beforeConnect = { hasSubscribers: false }
  channels.connectError = { hasSubscribers: false }
  channels.connected = { hasSubscribers: false }
}

/**
 * @type {import('../types/client').default}
 */
class Client extends DispatcherBase {
  /**
   *
   * @param {string|URL} url
   * @param {import('../types/client').Client.Options} options
   */
  constructor (url, {
    interceptors,
    maxHeaderSize,
    headersTimeout,
    socketTimeout,
    requestTimeout,
    connectTimeout,
    bodyTimeout,
    idleTimeout,
    keepAlive,
    keepAliveTimeout,
    maxKeepAliveTimeout,
    keepAliveMaxTimeout,
    keepAliveTimeoutThreshold,
    socketPath,
    pipelining,
    tls,
    strictContentLength,
    maxCachedSessions,
    maxRedirections,
    connect,
    maxRequestsPerClient,
    localAddress,
    maxResponseSize,
    autoSelectFamily,
    autoSelectFamilyAttemptTimeout,
    // h2
    allowH2,
    maxConcurrentStreams
  } = {}) {
    super()

    if (keepAlive !== undefined) {
      throw new InvalidArgumentError('unsupported keepAlive, use pipelining=0 instead')
    }

    if (socketTimeout !== undefined) {
      throw new InvalidArgumentError('unsupported socketTimeout, use headersTimeout & bodyTimeout instead')
    }

    if (requestTimeout !== undefined) {
      throw new InvalidArgumentError('unsupported requestTimeout, use headersTimeout & bodyTimeout instead')
    }

    if (idleTimeout !== undefined) {
      throw new InvalidArgumentError('unsupported idleTimeout, use keepAliveTimeout instead')
    }

    if (maxKeepAliveTimeout !== undefined) {
      throw new InvalidArgumentError('unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead')
    }

    if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {
      throw new InvalidArgumentError('invalid maxHeaderSize')
    }

    if (socketPath != null && typeof socketPath !== 'string') {
      throw new InvalidArgumentError('invalid socketPath')
    }

    if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) {
      throw new InvalidArgumentError('invalid connectTimeout')
    }

    if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) {
      throw new InvalidArgumentError('invalid keepAliveTimeout')
    }

    if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {
      throw new InvalidArgumentError('invalid keepAliveMaxTimeout')
    }

    if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {
      throw new InvalidArgumentError('invalid keepAliveTimeoutThreshold')
    }

    if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) {
      throw new InvalidArgumentError('headersTimeout must be a positive integer or zero')
    }

    if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) {
      throw new InvalidArgumentError('bodyTimeout must be a positive integer or zero')
    }

    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {
      throw new InvalidArgumentError('connect must be a function or an object')
    }

    if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
      throw new InvalidArgumentError('maxRedirections must be a positive number')
    }

    if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) {
      throw new InvalidArgumentError('maxRequestsPerClient must be a positive number')
    }

    if (localAddress != null && (typeof localAddress !== 'string' || net.isIP(localAddress) === 0)) {
      throw new InvalidArgumentError('localAddress must be valid string IP address')
    }

    if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) {
      throw new InvalidArgumentError('maxResponseSize must be a positive number')
    }

    if (
      autoSelectFamilyAttemptTimeout != null &&
      (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)
    ) {
      throw new InvalidArgumentError('autoSelectFamilyAttemptTimeout must be a positive number')
    }

    // h2
    if (allowH2 != null && typeof allowH2 !== 'boolean') {
      throw new InvalidArgumentError('allowH2 must be a valid boolean value')
    }

    if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== 'number' || maxConcurrentStreams < 1)) {
      throw new InvalidArgumentError('maxConcurrentStreams must be a possitive integer, greater than 0')
    }

    if (typeof connect !== 'function') {
      connect = buildConnector({
        ...tls,
        maxCachedSessions,
        allowH2,
        socketPath,
        timeout: connectTimeout,
        ...(util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : undefined),
        ...connect
      })
    }

    this[kInterceptors] = interceptors && interceptors.Client && Array.isArray(interceptors.Client)
      ? interceptors.Client
      : [createRedirectInterceptor({ maxRedirections })]
    this[kUrl] = util.parseOrigin(url)
    this[kConnector] = connect
    this[kSocket] = null
    this[kPipelining] = pipelining != null ? pipelining : 1
    this[kMaxHeadersSize] = maxHeaderSize || http.maxHeaderSize
    this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout
    this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 600e3 : keepAliveMaxTimeout
    this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold
    this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout]
    this[kServerName] = null
    this[kLocalAddress] = localAddress != null ? localAddress : null
    this[kResuming] = 0 // 0, idle, 1, scheduled, 2 resuming
    this[kNeedDrain] = 0 // 0, idle, 1, scheduled, 2 resuming
    this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ''}\r\n`
    this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 300e3
    this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 300e3
    this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength
    this[kMaxRedirections] = maxRedirections
    this[kMaxRequests] = maxRequestsPerClient
    this[kClosedResolve] = null
    this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1
    this[kHTTPConnVersion] = 'h1'

    // HTTP/2
    this[kHTTP2Session] = null
    this[kHTTP2SessionState] = !allowH2
      ? null
      : {
        // streams: null, // Fixed queue of streams - For future support of `push`
          openStreams: 0, // Keep track of them to decide wether or not unref the session
          maxConcurrentStreams: maxConcurrentStreams != null ? maxConcurrentStreams : 100 // Max peerConcurrentStreams for a Node h2 server
        }
    this[kHost] = `${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ''}`

    // kQueue is built up of 3 sections separated by
    // the kRunningIdx and kPendingIdx indices.
    // |   complete   |   running   |   pending   |
    //                ^ kRunningIdx ^ kPendingIdx ^ kQueue.length
    // kRunningIdx points to the first running element.
    // kPendingIdx points to the first pending element.
    // This implements a fast queue with an amortized
    // time of O(1).

    this[kQueue] = []
    this[kRunningIdx] = 0
    this[kPendingIdx] = 0
  }

  get pipelining () {
    return this[kPipelining]
  }

  set pipelining (value) {
    this[kPipelining] = value
    resume(this, true)
  }

  get [kPending] () {
    return this[kQueue].length - this[kPendingIdx]
  }

  get [kRunning] () {
    return this[kPendingIdx] - this[kRunningIdx]
  }

  get [kSize] () {
    return this[kQueue].length - this[kRunningIdx]
  }

  get [kConnected] () {
    return !!this[kSocket] && !this[kConnecting] && !this[kSocket].destroyed
  }

  get [kBusy] () {
    const socket = this[kSocket]
    return (
      (socket && (socket[kReset] || socket[kWriting] || socket[kBlocking])) ||
      (this[kSize] >= (this[kPipelining] || 1)) ||
      this[kPending] > 0
    )
  }

  /* istanbul ignore: only used for test */
  [kConnect] (cb) {
    connect(this)
    this.once('connect', cb)
  }

  [kDispatch] (opts, handler) {
    const origin = opts.origin || this[kUrl].origin

    const request = this[kHTTPConnVersion] === 'h2'
      ? Request[kHTTP2BuildRequest](origin, opts, handler)
      : Request[kHTTP1BuildRequest](origin, opts, handler)

    this[kQueue].push(request)
    if (this[kResuming]) {
      // Do nothing.
    } else if (util.bodyLength(request.body) == null && util.isIterable(request.body)) {
      // Wait a tick in case stream/iterator is ended in the same tick.
      this[kResuming] = 1
      process.nextTick(resume, this)
    } else {
      resume(this, true)
    }

    if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {
      this[kNeedDrain] = 2
    }

    return this[kNeedDrain] < 2
  }

  async [kClose] () {
    // TODO: for H2 we need to gracefully flush the remaining enqueued
    // request and close each stream.
    return new Promise((resolve) => {
      if (!this[kSize]) {
        resolve(null)
      } else {
        this[kClosedResolve] = resolve
      }
    })
  }

  async [kDestroy] (err) {
    return new Promise((resolve) => {
      const requests = this[kQueue].splice(this[kPendingIdx])
      for (let i = 0; i < requests.length; i++) {
        const request = requests[i]
        errorRequest(this, request, err)
      }

      const callback = () => {
        if (this[kClosedResolve]) {
          // TODO (fix): Should we error here with ClientDestroyedError?
          this[kClosedResolve]()
          this[kClosedResolve] = null
        }
        resolve()
      }

      if (this[kHTTP2Session] != null) {
        util.destroy(this[kHTTP2Session], err)
        this[kHTTP2Session] = null
        this[kHTTP2SessionState] = null
      }

      if (!this[kSocket]) {
        queueMicrotask(callback)
      } else {
        util.destroy(this[kSocket].on('close', callback), err)
      }

      resume(this)
    })
  }
}

function onHttp2SessionError (err) {
  assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID')

  this[kSocket][kError] = err

  onError(this[kClient], err)
}

function onHttp2FrameError (type, code, id) {
  const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`)

  if (id === 0) {
    this[kSocket][kError] = err
    onError(this[kClient], err)
  }
}

function onHttp2SessionEnd () {
  util.destroy(this, new SocketError('other side closed'))
  util.destroy(this[kSocket], new SocketError('other side closed'))
}

function onHTTP2GoAway (code) {
  const client = this[kClient]
  const err = new InformationalError(`HTTP/2: "GOAWAY" frame received with code ${code}`)
  client[kSocket] = null
  client[kHTTP2Session] = null

  if (client.destroyed) {
    assert(this[kPending] === 0)

    // Fail entire queue.
    const requests = client[kQueue].splice(client[kRunningIdx])
    for (let i = 0; i < requests.length; i++) {
      const request = requests[i]
      errorRequest(this, request, err)
    }
  } else if (client[kRunning] > 0) {
    // Fail head of pipeline.
    const request = client[kQueue][client[kRunningIdx]]
    client[kQueue][client[kRunningIdx]++] = null

    errorRequest(client, request, err)
  }

  client[kPendingIdx] = client[kRunningIdx]

  assert(client[kRunning] === 0)

  client.emit('disconnect',
    client[kUrl],
    [client],
    err
  )

  resume(client)
}

const constants = __nccwpck_require__(953)
const createRedirectInterceptor = __nccwpck_require__(8861)
const EMPTY_BUF = Buffer.alloc(0)

async function lazyllhttp () {
  const llhttpWasmData = process.env.JEST_WORKER_ID ? __nccwpck_require__(1145) : undefined

  let mod
  try {
    mod = await WebAssembly.compile(Buffer.from(__nccwpck_require__(5627), 'base64'))
  } catch (e) {
    /* istanbul ignore next */

    // We could check if the error was caused by the simd option not
    // being enabled, but the occurring of this other error
    // * https://github.com/emscripten-core/emscripten/issues/11495
    // got me to remove that check to avoid breaking Node 12.
    mod = await WebAssembly.compile(Buffer.from(llhttpWasmData || __nccwpck_require__(1145), 'base64'))
  }

  return await WebAssembly.instantiate(mod, {
    env: {
      /* eslint-disable camelcase */

      wasm_on_url: (p, at, len) => {
        /* istanbul ignore next */
        return 0
      },
      wasm_on_status: (p, at, len) => {
        assert.strictEqual(currentParser.ptr, p)
        const start = at - currentBufferPtr + currentBufferRef.byteOffset
        return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len)) || 0
      },
      wasm_on_message_begin: (p) => {
        assert.strictEqual(currentParser.ptr, p)
        return currentParser.onMessageBegin() || 0
      },
      wasm_on_header_field: (p, at, len) => {
        assert.strictEqual(currentParser.ptr, p)
        const start = at - currentBufferPtr + currentBufferRef.byteOffset
        return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len)) || 0
      },
      wasm_on_header_value: (p, at, len) => {
        assert.strictEqual(currentParser.ptr, p)
        const start = at - currentBufferPtr + currentBufferRef.byteOffset
        return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len)) || 0
      },
      wasm_on_headers_complete: (p, statusCode, upgrade, shouldKeepAlive) => {
        assert.strictEqual(currentParser.ptr, p)
        return currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0
      },
      wasm_on_body: (p, at, len) => {
        assert.strictEqual(currentParser.ptr, p)
        const start = at - currentBufferPtr + currentBufferRef.byteOffset
        return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len)) || 0
      },
      wasm_on_message_complete: (p) => {
        assert.strictEqual(currentParser.ptr, p)
        return currentParser.onMessageComplete() || 0
      }

      /* eslint-enable camelcase */
    }
  })
}

let llhttpInstance = null
let llhttpPromise = lazyllhttp()
llhttpPromise.catch()

let currentParser = null
let currentBufferRef = null
let currentBufferSize = 0
let currentBufferPtr = null

const TIMEOUT_HEADERS = 1
const TIMEOUT_BODY = 2
const TIMEOUT_IDLE = 3

class Parser {
  constructor (client, socket, { exports }) {
    assert(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0)

    this.llhttp = exports
    this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE)
    this.client = client
    this.socket = socket
    this.timeout = null
    this.timeoutValue = null
    this.timeoutType = null
    this.statusCode = null
    this.statusText = ''
    this.upgrade = false
    this.headers = []
    this.headersSize = 0
    this.headersMaxSize = client[kMaxHeadersSize]
    this.shouldKeepAlive = false
    this.paused = false
    this.resume = this.resume.bind(this)

    this.bytesRead = 0

    this.keepAlive = ''
    this.contentLength = ''
    this.connection = ''
    this.maxResponseSize = client[kMaxResponseSize]
  }

  setTimeout (value, type) {
    this.timeoutType = type
    if (value !== this.timeoutValue) {
      timers.clearTimeout(this.timeout)
      if (value) {
        this.timeout = timers.setTimeout(onParserTimeout, value, this)
        // istanbul ignore else: only for jest
        if (this.timeout.unref) {
          this.timeout.unref()
        }
      } else {
        this.timeout = null
      }
      this.timeoutValue = value
    } else if (this.timeout) {
      // istanbul ignore else: only for jest
      if (this.timeout.refresh) {
        this.timeout.refresh()
      }
    }
  }

  resume () {
    if (this.socket.destroyed || !this.paused) {
      return
    }

    assert(this.ptr != null)
    assert(currentParser == null)

    this.llhttp.llhttp_resume(this.ptr)

    assert(this.timeoutType === TIMEOUT_BODY)
    if (this.timeout) {
      // istanbul ignore else: only for jest
      if (this.timeout.refresh) {
        this.timeout.refresh()
      }
    }

    this.paused = false
    this.execute(this.socket.read() || EMPTY_BUF) // Flush parser.
    this.readMore()
  }

  readMore () {
    while (!this.paused && this.ptr) {
      const chunk = this.socket.read()
      if (chunk === null) {
        break
      }
      this.execute(chunk)
    }
  }

  execute (data) {
    assert(this.ptr != null)
    assert(currentParser == null)
    assert(!this.paused)

    const { socket, llhttp } = this

    if (data.length > currentBufferSize) {
      if (currentBufferPtr) {
        llhttp.free(currentBufferPtr)
      }
      currentBufferSize = Math.ceil(data.length / 4096) * 4096
      currentBufferPtr = llhttp.malloc(currentBufferSize)
    }

    new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data)

    // Call `execute` on the wasm parser.
    // We pass the `llhttp_parser` pointer address, the pointer address of buffer view data,
    // and finally the length of bytes to parse.
    // The return value is an error code or `constants.ERROR.OK`.
    try {
      let ret

      try {
        currentBufferRef = data
        currentParser = this
        ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length)
        /* eslint-disable-next-line no-useless-catch */
      } catch (err) {
        /* istanbul ignore next: difficult to make a test case for */
        throw err
      } finally {
        currentParser = null
        currentBufferRef = null
      }

      const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr

      if (ret === constants.ERROR.PAUSED_UPGRADE) {
        this.onUpgrade(data.slice(offset))
      } else if (ret === constants.ERROR.PAUSED) {
        this.paused = true
        socket.unshift(data.slice(offset))
      } else if (ret !== constants.ERROR.OK) {
        const ptr = llhttp.llhttp_get_error_reason(this.ptr)
        let message = ''
        /* istanbul ignore else: difficult to make a test case for */
        if (ptr) {
          const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0)
          message =
            'Response does not match the HTTP/1.1 protocol (' +
            Buffer.from(llhttp.memory.buffer, ptr, len).toString() +
            ')'
        }
        throw new HTTPParserError(message, constants.ERROR[ret], data.slice(offset))
      }
    } catch (err) {
      util.destroy(socket, err)
    }
  }

  destroy () {
    assert(this.ptr != null)
    assert(currentParser == null)

    this.llhttp.llhttp_free(this.ptr)
    this.ptr = null

    timers.clearTimeout(this.timeout)
    this.timeout = null
    this.timeoutValue = null
    this.timeoutType = null

    this.paused = false
  }

  onStatus (buf) {
    this.statusText = buf.toString()
  }

  onMessageBegin () {
    const { socket, client } = this

    /* istanbul ignore next: difficult to make a test case for */
    if (socket.destroyed) {
      return -1
    }

    const request = client[kQueue][client[kRunningIdx]]
    if (!request) {
      return -1
    }
  }

  onHeaderField (buf) {
    const len = this.headers.length

    if ((len & 1) === 0) {
      this.headers.push(buf)
    } else {
      this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf])
    }

    this.trackHeader(buf.length)
  }

  onHeaderValue (buf) {
    let len = this.headers.length

    if ((len & 1) === 1) {
      this.headers.push(buf)
      len += 1
    } else {
      this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf])
    }

    const key = this.headers[len - 2]
    if (key.length === 10 && key.toString().toLowerCase() === 'keep-alive') {
      this.keepAlive += buf.toString()
    } else if (key.length === 10 && key.toString().toLowerCase() === 'connection') {
      this.connection += buf.toString()
    } else if (key.length === 14 && key.toString().toLowerCase() === 'content-length') {
      this.contentLength += buf.toString()
    }

    this.trackHeader(buf.length)
  }

  trackHeader (len) {
    this.headersSize += len
    if (this.headersSize >= this.headersMaxSize) {
      util.destroy(this.socket, new HeadersOverflowError())
    }
  }

  onUpgrade (head) {
    const { upgrade, client, socket, headers, statusCode } = this

    assert(upgrade)

    const request = client[kQueue][client[kRunningIdx]]
    assert(request)

    assert(!socket.destroyed)
    assert(socket === client[kSocket])
    assert(!this.paused)
    assert(request.upgrade || request.method === 'CONNECT')

    this.statusCode = null
    this.statusText = ''
    this.shouldKeepAlive = null

    assert(this.headers.length % 2 === 0)
    this.headers = []
    this.headersSize = 0

    socket.unshift(head)

    socket[kParser].destroy()
    socket[kParser] = null

    socket[kClient] = null
    socket[kError] = null
    socket
      .removeListener('error', onSocketError)
      .removeListener('readable', onSocketReadable)
      .removeListener('end', onSocketEnd)
      .removeListener('close', onSocketClose)

    client[kSocket] = null
    client[kQueue][client[kRunningIdx]++] = null
    client.emit('disconnect', client[kUrl], [client], new InformationalError('upgrade'))

    try {
      request.onUpgrade(statusCode, headers, socket)
    } catch (err) {
      util.destroy(socket, err)
    }

    resume(client)
  }

  onHeadersComplete (statusCode, upgrade, shouldKeepAlive) {
    const { client, socket, headers, statusText } = this

    /* istanbul ignore next: difficult to make a test case for */
    if (socket.destroyed) {
      return -1
    }

    const request = client[kQueue][client[kRunningIdx]]

    /* istanbul ignore next: difficult to make a test case for */
    if (!request) {
      return -1
    }

    assert(!this.upgrade)
    assert(this.statusCode < 200)

    if (statusCode === 100) {
      util.destroy(socket, new SocketError('bad response', util.getSocketInfo(socket)))
      return -1
    }

    /* this can only happen if server is misbehaving */
    if (upgrade && !request.upgrade) {
      util.destroy(socket, new SocketError('bad upgrade', util.getSocketInfo(socket)))
      return -1
    }

    assert.strictEqual(this.timeoutType, TIMEOUT_HEADERS)

    this.statusCode = statusCode
    this.shouldKeepAlive = (
      shouldKeepAlive ||
      // Override llhttp value which does not allow keepAlive for HEAD.
      (request.method === 'HEAD' && !socket[kReset] && this.connection.toLowerCase() === 'keep-alive')
    )

    if (this.statusCode >= 200) {
      const bodyTimeout = request.bodyTimeout != null
        ? request.bodyTimeout
        : client[kBodyTimeout]
      this.setTimeout(bodyTimeout, TIMEOUT_BODY)
    } else if (this.timeout) {
      // istanbul ignore else: only for jest
      if (this.timeout.refresh) {
        this.timeout.refresh()
      }
    }

    if (request.method === 'CONNECT') {
      assert(client[kRunning] === 1)
      this.upgrade = true
      return 2
    }

    if (upgrade) {
      assert(client[kRunning] === 1)
      this.upgrade = true
      return 2
    }

    assert(this.headers.length % 2 === 0)
    this.headers = []
    this.headersSize = 0

    if (this.shouldKeepAlive && client[kPipelining]) {
      const keepAliveTimeout = this.keepAlive ? util.parseKeepAliveTimeout(this.keepAlive) : null

      if (keepAliveTimeout != null) {
        const timeout = Math.min(
          keepAliveTimeout - client[kKeepAliveTimeoutThreshold],
          client[kKeepAliveMaxTimeout]
        )
        if (timeout <= 0) {
          socket[kReset] = true
        } else {
          client[kKeepAliveTimeoutValue] = timeout
        }
      } else {
        client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout]
      }
    } else {
      // Stop more requests from being dispatched.
      socket[kReset] = true
    }

    const pause = request.onHeaders(statusCode, headers, this.resume, statusText) === false

    if (request.aborted) {
      return -1
    }

    if (request.method === 'HEAD') {
      return 1
    }

    if (statusCode < 200) {
      return 1
    }

    if (socket[kBlocking]) {
      socket[kBlocking] = false
      resume(client)
    }

    return pause ? constants.ERROR.PAUSED : 0
  }

  onBody (buf) {
    const { client, socket, statusCode, maxResponseSize } = this

    if (socket.destroyed) {
      return -1
    }

    const request = client[kQueue][client[kRunningIdx]]
    assert(request)

    assert.strictEqual(this.timeoutType, TIMEOUT_BODY)
    if (this.timeout) {
      // istanbul ignore else: only for jest
      if (this.timeout.refresh) {
        this.timeout.refresh()
      }
    }

    assert(statusCode >= 200)

    if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {
      util.destroy(socket, new ResponseExceededMaxSizeError())
      return -1
    }

    this.bytesRead += buf.length

    if (request.onData(buf) === false) {
      return constants.ERROR.PAUSED
    }
  }

  onMessageComplete () {
    const { client, socket, statusCode, upgrade, headers, contentLength, bytesRead, shouldKeepAlive } = this

    if (socket.destroyed && (!statusCode || shouldKeepAlive)) {
      return -1
    }

    if (upgrade) {
      return
    }

    const request = client[kQueue][client[kRunningIdx]]
    assert(request)

    assert(statusCode >= 100)

    this.statusCode = null
    this.statusText = ''
    this.bytesRead = 0
    this.contentLength = ''
    this.keepAlive = ''
    this.connection = ''

    assert(this.headers.length % 2 === 0)
    this.headers = []
    this.headersSize = 0

    if (statusCode < 200) {
      return
    }

    /* istanbul ignore next: should be handled by llhttp? */
    if (request.method !== 'HEAD' && contentLength && bytesRead !== parseInt(contentLength, 10)) {
      util.destroy(socket, new ResponseContentLengthMismatchError())
      return -1
    }

    request.onComplete(headers)

    client[kQueue][client[kRunningIdx]++] = null

    if (socket[kWriting]) {
      assert.strictEqual(client[kRunning], 0)
      // Response completed before request.
      util.destroy(socket, new InformationalError('reset'))
      return constants.ERROR.PAUSED
    } else if (!shouldKeepAlive) {
      util.destroy(socket, new InformationalError('reset'))
      return constants.ERROR.PAUSED
    } else if (socket[kReset] && client[kRunning] === 0) {
      // Destroy socket once all requests have completed.
      // The request at the tail of the pipeline is the one
      // that requested reset and no further requests should
      // have been queued since then.
      util.destroy(socket, new InformationalError('reset'))
      return constants.ERROR.PAUSED
    } else if (client[kPipelining] === 1) {
      // We must wait a full event loop cycle to reuse this socket to make sure
      // that non-spec compliant servers are not closing the connection even if they
      // said they won't.
      setImmediate(resume, client)
    } else {
      resume(client)
    }
  }
}

function onParserTimeout (parser) {
  const { socket, timeoutType, client } = parser

  /* istanbul ignore else */
  if (timeoutType === TIMEOUT_HEADERS) {
    if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning] > 1) {
      assert(!parser.paused, 'cannot be paused while waiting for headers')
      util.destroy(socket, new HeadersTimeoutError())
    }
  } else if (timeoutType === TIMEOUT_BODY) {
    if (!parser.paused) {
      util.destroy(socket, new BodyTimeoutError())
    }
  } else if (timeoutType === TIMEOUT_IDLE) {
    assert(client[kRunning] === 0 && client[kKeepAliveTimeoutValue])
    util.destroy(socket, new InformationalError('socket idle timeout'))
  }
}

function onSocketReadable () {
  const { [kParser]: parser } = this
  if (parser) {
    parser.readMore()
  }
}

function onSocketError (err) {
  const { [kClient]: client, [kParser]: parser } = this

  assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID')

  if (client[kHTTPConnVersion] !== 'h2') {
    // On Mac OS, we get an ECONNRESET even if there is a full body to be forwarded
    // to the user.
    if (err.code === 'ECONNRESET' && parser.statusCode && !parser.shouldKeepAlive) {
      // We treat all incoming data so for as a valid response.
      parser.onMessageComplete()
      return
    }
  }

  this[kError] = err

  onError(this[kClient], err)
}

function onError (client, err) {
  if (
    client[kRunning] === 0 &&
    err.code !== 'UND_ERR_INFO' &&
    err.code !== 'UND_ERR_SOCKET'
  ) {
    // Error is not caused by running request and not a recoverable
    // socket error.

    assert(client[kPendingIdx] === client[kRunningIdx])

    const requests = client[kQueue].splice(client[kRunningIdx])
    for (let i = 0; i < requests.length; i++) {
      const request = requests[i]
      errorRequest(client, request, err)
    }
    assert(client[kSize] === 0)
  }
}

function onSocketEnd () {
  const { [kParser]: parser, [kClient]: client } = this

  if (client[kHTTPConnVersion] !== 'h2') {
    if (parser.statusCode && !parser.shouldKeepAlive) {
      // We treat all incoming data so far as a valid response.
      parser.onMessageComplete()
      return
    }
  }

  util.destroy(this, new SocketError('other side closed', util.getSocketInfo(this)))
}

function onSocketClose () {
  const { [kClient]: client, [kParser]: parser } = this

  if (client[kHTTPConnVersion] === 'h1' && parser) {
    if (!this[kError] && parser.statusCode && !parser.shouldKeepAlive) {
      // We treat all incoming data so far as a valid response.
      parser.onMessageComplete()
    }

    this[kParser].destroy()
    this[kParser] = null
  }

  const err = this[kError] || new SocketError('closed', util.getSocketInfo(this))

  client[kSocket] = null

  if (client.destroyed) {
    assert(client[kPending] === 0)

    // Fail entire queue.
    const requests = client[kQueue].splice(client[kRunningIdx])
    for (let i = 0; i < requests.length; i++) {
      const request = requests[i]
      errorRequest(client, request, err)
    }
  } else if (client[kRunning] > 0 && err.code !== 'UND_ERR_INFO') {
    // Fail head of pipeline.
    const request = client[kQueue][client[kRunningIdx]]
    client[kQueue][client[kRunningIdx]++] = null

    errorRequest(client, request, err)
  }

  client[kPendingIdx] = client[kRunningIdx]

  assert(client[kRunning] === 0)

  client.emit('disconnect', client[kUrl], [client], err)

  resume(client)
}

async function connect (client) {
  assert(!client[kConnecting])
  assert(!client[kSocket])

  let { host, hostname, protocol, port } = client[kUrl]

  // Resolve ipv6
  if (hostname[0] === '[') {
    const idx = hostname.indexOf(']')

    assert(idx !== -1)
    const ip = hostname.substring(1, idx)

    assert(net.isIP(ip))
    hostname = ip
  }

  client[kConnecting] = true

  if (channels.beforeConnect.hasSubscribers) {
    channels.beforeConnect.publish({
      connectParams: {
        host,
        hostname,
        protocol,
        port,
        servername: client[kServerName],
        localAddress: client[kLocalAddress]
      },
      connector: client[kConnector]
    })
  }

  try {
    const socket = await new Promise((resolve, reject) => {
      client[kConnector]({
        host,
        hostname,
        protocol,
        port,
        servername: client[kServerName],
        localAddress: client[kLocalAddress]
      }, (err, socket) => {
        if (err) {
          reject(err)
        } else {
          resolve(socket)
        }
      })
    })

    if (client.destroyed) {
      util.destroy(socket.on('error', () => {}), new ClientDestroyedError())
      return
    }

    client[kConnecting] = false

    assert(socket)

    const isH2 = socket.alpnProtocol === 'h2'
    if (isH2) {
      if (!h2ExperimentalWarned) {
        h2ExperimentalWarned = true
        process.emitWarning('H2 support is experimental, expect them to change at any time.', {
          code: 'UNDICI-H2'
        })
      }

      const session = http2.connect(client[kUrl], {
        createConnection: () => socket,
        peerMaxConcurrentStreams: client[kHTTP2SessionState].maxConcurrentStreams
      })

      client[kHTTPConnVersion] = 'h2'
      session[kClient] = client
      session[kSocket] = socket
      session.on('error', onHttp2SessionError)
      session.on('frameError', onHttp2FrameError)
      session.on('end', onHttp2SessionEnd)
      session.on('goaway', onHTTP2GoAway)
      session.on('close', onSocketClose)
      session.unref()

      client[kHTTP2Session] = session
      socket[kHTTP2Session] = session
    } else {
      if (!llhttpInstance) {
        llhttpInstance = await llhttpPromise
        llhttpPromise = null
      }

      socket[kNoRef] = false
      socket[kWriting] = false
      socket[kReset] = false
      socket[kBlocking] = false
      socket[kParser] = new Parser(client, socket, llhttpInstance)
    }

    socket[kCounter] = 0
    socket[kMaxRequests] = client[kMaxRequests]
    socket[kClient] = client
    socket[kError] = null

    socket
      .on('error', onSocketError)
      .on('readable', onSocketReadable)
      .on('end', onSocketEnd)
      .on('close', onSocketClose)

    client[kSocket] = socket

    if (channels.connected.hasSubscribers) {
      channels.connected.publish({
        connectParams: {
          host,
          hostname,
          protocol,
          port,
          servername: client[kServerName],
          localAddress: client[kLocalAddress]
        },
        connector: client[kConnector],
        socket
      })
    }
    client.emit('connect', client[kUrl], [client])
  } catch (err) {
    if (client.destroyed) {
      return
    }

    client[kConnecting] = false

    if (channels.connectError.hasSubscribers) {
      channels.connectError.publish({
        connectParams: {
          host,
          hostname,
          protocol,
          port,
          servername: client[kServerName],
          localAddress: client[kLocalAddress]
        },
        connector: client[kConnector],
        error: err
      })
    }

    if (err.code === 'ERR_TLS_CERT_ALTNAME_INVALID') {
      assert(client[kRunning] === 0)
      while (client[kPending] > 0 && client[kQueue][client[kPendingIdx]].servername === client[kServerName]) {
        const request = client[kQueue][client[kPendingIdx]++]
        errorRequest(client, request, err)
      }
    } else {
      onError(client, err)
    }

    client.emit('connectionError', client[kUrl], [client], err)
  }

  resume(client)
}

function emitDrain (client) {
  client[kNeedDrain] = 0
  client.emit('drain', client[kUrl], [client])
}

function resume (client, sync) {
  if (client[kResuming] === 2) {
    return
  }

  client[kResuming] = 2

  _resume(client, sync)
  client[kResuming] = 0

  if (client[kRunningIdx] > 256) {
    client[kQueue].splice(0, client[kRunningIdx])
    client[kPendingIdx] -= client[kRunningIdx]
    client[kRunningIdx] = 0
  }
}

function _resume (client, sync) {
  while (true) {
    if (client.destroyed) {
      assert(client[kPending] === 0)
      return
    }

    if (client[kClosedResolve] && !client[kSize]) {
      client[kClosedResolve]()
      client[kClosedResolve] = null
      return
    }

    const socket = client[kSocket]

    if (socket && !socket.destroyed && socket.alpnProtocol !== 'h2') {
      if (client[kSize] === 0) {
        if (!socket[kNoRef] && socket.unref) {
          socket.unref()
          socket[kNoRef] = true
        }
      } else if (socket[kNoRef] && socket.ref) {
        socket.ref()
        socket[kNoRef] = false
      }

      if (client[kSize] === 0) {
        if (socket[kParser].timeoutType !== TIMEOUT_IDLE) {
          socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_IDLE)
        }
      } else if (client[kRunning] > 0 && socket[kParser].statusCode < 200) {
        if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {
          const request = client[kQueue][client[kRunningIdx]]
          const headersTimeout = request.headersTimeout != null
            ? request.headersTimeout
            : client[kHeadersTimeout]
          socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS)
        }
      }
    }

    if (client[kBusy]) {
      client[kNeedDrain] = 2
    } else if (client[kNeedDrain] === 2) {
      if (sync) {
        client[kNeedDrain] = 1
        process.nextTick(emitDrain, client)
      } else {
        emitDrain(client)
      }
      continue
    }

    if (client[kPending] === 0) {
      return
    }

    if (client[kRunning] >= (client[kPipelining] || 1)) {
      return
    }

    const request = client[kQueue][client[kPendingIdx]]

    if (client[kUrl].protocol === 'https:' && client[kServerName] !== request.servername) {
      if (client[kRunning] > 0) {
        return
      }

      client[kServerName] = request.servername

      if (socket && socket.servername !== request.servername) {
        util.destroy(socket, new InformationalError('servername changed'))
        return
      }
    }

    if (client[kConnecting]) {
      return
    }

    if (!socket && !client[kHTTP2Session]) {
      connect(client)
      return
    }

    if (socket.destroyed || socket[kWriting] || socket[kReset] || socket[kBlocking]) {
      return
    }

    if (client[kRunning] > 0 && !request.idempotent) {
      // Non-idempotent request cannot be retried.
      // Ensure that no other requests are inflight and
      // could cause failure.
      return
    }

    if (client[kRunning] > 0 && (request.upgrade || request.method === 'CONNECT')) {
      // Don't dispatch an upgrade until all preceding requests have completed.
      // A misbehaving server might upgrade the connection before all pipelined
      // request has completed.
      return
    }

    if (client[kRunning] > 0 && util.bodyLength(request.body) !== 0 &&
      (util.isStream(request.body) || util.isAsyncIterable(request.body))) {
      // Request with stream or iterator body can error while other requests
      // are inflight and indirectly error those as well.
      // Ensure this doesn't happen by waiting for inflight
      // to complete before dispatching.

      // Request with stream or iterator body cannot be retried.
      // Ensure that no other requests are inflight and
      // could cause failure.
      return
    }

    if (!request.aborted && write(client, request)) {
      client[kPendingIdx]++
    } else {
      client[kQueue].splice(client[kPendingIdx], 1)
    }
  }
}

// https://www.rfc-editor.org/rfc/rfc7230#section-3.3.2
function shouldSendContentLength (method) {
  return method !== 'GET' && method !== 'HEAD' && method !== 'OPTIONS' && method !== 'TRACE' && method !== 'CONNECT'
}

function write (client, request) {
  if (client[kHTTPConnVersion] === 'h2') {
    writeH2(client, client[kHTTP2Session], request)
    return
  }

  const { body, method, path, host, upgrade, headers, blocking, reset } = request

  // https://tools.ietf.org/html/rfc7231#section-4.3.1
  // https://tools.ietf.org/html/rfc7231#section-4.3.2
  // https://tools.ietf.org/html/rfc7231#section-4.3.5

  // Sending a payload body on a request that does not
  // expect it can cause undefined behavior on some
  // servers and corrupt connection state. Do not
  // re-use the connection for further requests.

  const expectsPayload = (
    method === 'PUT' ||
    method === 'POST' ||
    method === 'PATCH'
  )

  if (body && typeof body.read === 'function') {
    // Try to read EOF in order to get length.
    body.read(0)
  }

  const bodyLength = util.bodyLength(body)

  let contentLength = bodyLength

  if (contentLength === null) {
    contentLength = request.contentLength
  }

  if (contentLength === 0 && !expectsPayload) {
    // https://tools.ietf.org/html/rfc7230#section-3.3.2
    // A user agent SHOULD NOT send a Content-Length header field when
    // the request message does not contain a payload body and the method
    // semantics do not anticipate such a body.

    contentLength = null
  }

  // https://github.com/nodejs/undici/issues/2046
  // A user agent may send a Content-Length header with 0 value, this should be allowed.
  if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength !== null && request.contentLength !== contentLength) {
    if (client[kStrictContentLength]) {
      errorRequest(client, request, new RequestContentLengthMismatchError())
      return false
    }

    process.emitWarning(new RequestContentLengthMismatchError())
  }

  const socket = client[kSocket]

  try {
    request.onConnect((err) => {
      if (request.aborted || request.completed) {
        return
      }

      errorRequest(client, request, err || new RequestAbortedError())

      util.destroy(socket, new InformationalError('aborted'))
    })
  } catch (err) {
    errorRequest(client, request, err)
  }

  if (request.aborted) {
    return false
  }

  if (method === 'HEAD') {
    // https://github.com/mcollina/undici/issues/258
    // Close after a HEAD request to interop with misbehaving servers
    // that may send a body in the response.

    socket[kReset] = true
  }

  if (upgrade || method === 'CONNECT') {
    // On CONNECT or upgrade, block pipeline from dispatching further
    // requests on this connection.

    socket[kReset] = true
  }

  if (reset != null) {
    socket[kReset] = reset
  }

  if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) {
    socket[kReset] = true
  }

  if (blocking) {
    socket[kBlocking] = true
  }

  let header = `${method} ${path} HTTP/1.1\r\n`

  if (typeof host === 'string') {
    header += `host: ${host}\r\n`
  } else {
    header += client[kHostHeader]
  }

  if (upgrade) {
    header += `connection: upgrade\r\nupgrade: ${upgrade}\r\n`
  } else if (client[kPipelining] && !socket[kReset]) {
    header += 'connection: keep-alive\r\n'
  } else {
    header += 'connection: close\r\n'
  }

  if (headers) {
    header += headers
  }

  if (channels.sendHeaders.hasSubscribers) {
    channels.sendHeaders.publish({ request, headers: header, socket })
  }

  /* istanbul ignore else: assertion */
  if (!body || bodyLength === 0) {
    if (contentLength === 0) {
      socket.write(`${header}content-length: 0\r\n\r\n`, 'latin1')
    } else {
      assert(contentLength === null, 'no body must not have content length')
      socket.write(`${header}\r\n`, 'latin1')
    }
    request.onRequestSent()
  } else if (util.isBuffer(body)) {
    assert(contentLength === body.byteLength, 'buffer body must have content length')

    socket.cork()
    socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, 'latin1')
    socket.write(body)
    socket.uncork()
    request.onBodySent(body)
    request.onRequestSent()
    if (!expectsPayload) {
      socket[kReset] = true
    }
  } else if (util.isBlobLike(body)) {
    if (typeof body.stream === 'function') {
      writeIterable({ body: body.stream(), client, request, socket, contentLength, header, expectsPayload })
    } else {
      writeBlob({ body, client, request, socket, contentLength, header, expectsPayload })
    }
  } else if (util.isStream(body)) {
    writeStream({ body, client, request, socket, contentLength, header, expectsPayload })
  } else if (util.isIterable(body)) {
    writeIterable({ body, client, request, socket, contentLength, header, expectsPayload })
  } else {
    assert(false)
  }

  return true
}

function writeH2 (client, session, request) {
  const { body, method, path, host, upgrade, expectContinue, signal, headers: reqHeaders } = request

  let headers
  if (typeof reqHeaders === 'string') headers = Request[kHTTP2CopyHeaders](reqHeaders.trim())
  else headers = reqHeaders

  if (upgrade) {
    errorRequest(client, request, new Error('Upgrade not supported for H2'))
    return false
  }

  try {
    // TODO(HTTP/2): Should we call onConnect immediately or on stream ready event?
    request.onConnect((err) => {
      if (request.aborted || request.completed) {
        return
      }

      errorRequest(client, request, err || new RequestAbortedError())
    })
  } catch (err) {
    errorRequest(client, request, err)
  }

  if (request.aborted) {
    return false
  }

  /** @type {import('node:http2').ClientHttp2Stream} */
  let stream
  const h2State = client[kHTTP2SessionState]

  headers[HTTP2_HEADER_AUTHORITY] = host || client[kHost]
  headers[HTTP2_HEADER_METHOD] = method

  if (method === 'CONNECT') {
    session.ref()
    // we are already connected, streams are pending, first request
    // will create a new stream. We trigger a request to create the stream and wait until
    // `ready` event is triggered
    // We disabled endStream to allow the user to write to the stream
    stream = session.request(headers, { endStream: false, signal })

    if (stream.id && !stream.pending) {
      request.onUpgrade(null, null, stream)
      ++h2State.openStreams
    } else {
      stream.once('ready', () => {
        request.onUpgrade(null, null, stream)
        ++h2State.openStreams
      })
    }

    stream.once('close', () => {
      h2State.openStreams -= 1
      // TODO(HTTP/2): unref only if current streams count is 0
      if (h2State.openStreams === 0) session.unref()
    })

    return true
  }

  // https://tools.ietf.org/html/rfc7540#section-8.3
  // :path and :scheme headers must be omited when sending CONNECT

  headers[HTTP2_HEADER_PATH] = path
  headers[HTTP2_HEADER_SCHEME] = 'https'

  // https://tools.ietf.org/html/rfc7231#section-4.3.1
  // https://tools.ietf.org/html/rfc7231#section-4.3.2
  // https://tools.ietf.org/html/rfc7231#section-4.3.5

  // Sending a payload body on a request that does not
  // expect it can cause undefined behavior on some
  // servers and corrupt connection state. Do not
  // re-use the connection for further requests.

  const expectsPayload = (
    method === 'PUT' ||
    method === 'POST' ||
    method === 'PATCH'
  )

  if (body && typeof body.read === 'function') {
    // Try to read EOF in order to get length.
    body.read(0)
  }

  let contentLength = util.bodyLength(body)

  if (contentLength == null) {
    contentLength = request.contentLength
  }

  if (contentLength === 0 || !expectsPayload) {
    // https://tools.ietf.org/html/rfc7230#section-3.3.2
    // A user agent SHOULD NOT send a Content-Length header field when
    // the request message does not contain a payload body and the method
    // semantics do not anticipate such a body.

    contentLength = null
  }

  // https://github.com/nodejs/undici/issues/2046
  // A user agent may send a Content-Length header with 0 value, this should be allowed.
  if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength != null && request.contentLength !== contentLength) {
    if (client[kStrictContentLength]) {
      errorRequest(client, request, new RequestContentLengthMismatchError())
      return false
    }

    process.emitWarning(new RequestContentLengthMismatchError())
  }

  if (contentLength != null) {
    assert(body, 'no body must not have content length')
    headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`
  }

  session.ref()

  const shouldEndStream = method === 'GET' || method === 'HEAD'
  if (expectContinue) {
    headers[HTTP2_HEADER_EXPECT] = '100-continue'
    stream = session.request(headers, { endStream: shouldEndStream, signal })

    stream.once('continue', writeBodyH2)
  } else {
    stream = session.request(headers, {
      endStream: shouldEndStream,
      signal
    })
    writeBodyH2()
  }

  // Increment counter as we have new several streams open
  ++h2State.openStreams

  stream.once('response', headers => {
    const { [HTTP2_HEADER_STATUS]: statusCode, ...realHeaders } = headers

    if (request.onHeaders(Number(statusCode), realHeaders, stream.resume.bind(stream), '') === false) {
      stream.pause()
    }
  })

  stream.once('end', () => {
    request.onComplete([])
  })

  stream.on('data', (chunk) => {
    if (request.onData(chunk) === false) {
      stream.pause()
    }
  })

  stream.once('close', () => {
    h2State.openStreams -= 1
    // TODO(HTTP/2): unref only if current streams count is 0
    if (h2State.openStreams === 0) {
      session.unref()
    }
  })

  stream.once('error', function (err) {
    if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
      h2State.streams -= 1
      util.destroy(stream, err)
    }
  })

  stream.once('frameError', (type, code) => {
    const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`)
    errorRequest(client, request, err)

    if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
      h2State.streams -= 1
      util.destroy(stream, err)
    }
  })

  // stream.on('aborted', () => {
  //   // TODO(HTTP/2): Support aborted
  // })

  // stream.on('timeout', () => {
  //   // TODO(HTTP/2): Support timeout
  // })

  // stream.on('push', headers => {
  //   // TODO(HTTP/2): Suppor push
  // })

  // stream.on('trailers', headers => {
  //   // TODO(HTTP/2): Support trailers
  // })

  return true

  function writeBodyH2 () {
    /* istanbul ignore else: assertion */
    if (!body) {
      request.onRequestSent()
    } else if (util.isBuffer(body)) {
      assert(contentLength === body.byteLength, 'buffer body must have content length')
      stream.cork()
      stream.write(body)
      stream.uncork()
      stream.end()
      request.onBodySent(body)
      request.onRequestSent()
    } else if (util.isBlobLike(body)) {
      if (typeof body.stream === 'function') {
        writeIterable({
          client,
          request,
          contentLength,
          h2stream: stream,
          expectsPayload,
          body: body.stream(),
          socket: client[kSocket],
          header: ''
        })
      } else {
        writeBlob({
          body,
          client,
          request,
          contentLength,
          expectsPayload,
          h2stream: stream,
          header: '',
          socket: client[kSocket]
        })
      }
    } else if (util.isStream(body)) {
      writeStream({
        body,
        client,
        request,
        contentLength,
        expectsPayload,
        socket: client[kSocket],
        h2stream: stream,
        header: ''
      })
    } else if (util.isIterable(body)) {
      writeIterable({
        body,
        client,
        request,
        contentLength,
        expectsPayload,
        header: '',
        h2stream: stream,
        socket: client[kSocket]
      })
    } else {
      assert(false)
    }
  }
}

function writeStream ({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
  assert(contentLength !== 0 || client[kRunning] === 0, 'stream body cannot be pipelined')

  if (client[kHTTPConnVersion] === 'h2') {
    // For HTTP/2, is enough to pipe the stream
    const pipe = pipeline(
      body,
      h2stream,
      (err) => {
        if (err) {
          util.destroy(body, err)
          util.destroy(h2stream, err)
        } else {
          request.onRequestSent()
        }
      }
    )

    pipe.on('data', onPipeData)
    pipe.once('end', () => {
      pipe.removeListener('data', onPipeData)
      util.destroy(pipe)
    })

    function onPipeData (chunk) {
      request.onBodySent(chunk)
    }

    return
  }

  let finished = false

  const writer = new AsyncWriter({ socket, request, contentLength, client, expectsPayload, header })

  const onData = function (chunk) {
    if (finished) {
      return
    }

    try {
      if (!writer.write(chunk) && this.pause) {
        this.pause()
      }
    } catch (err) {
      util.destroy(this, err)
    }
  }
  const onDrain = function () {
    if (finished) {
      return
    }

    if (body.resume) {
      body.resume()
    }
  }
  const onAbort = function () {
    if (finished) {
      return
    }
    const err = new RequestAbortedError()
    queueMicrotask(() => onFinished(err))
  }
  const onFinished = function (err) {
    if (finished) {
      return
    }

    finished = true

    assert(socket.destroyed || (socket[kWriting] && client[kRunning] <= 1))

    socket
      .off('drain', onDrain)
      .off('error', onFinished)

    body
      .removeListener('data', onData)
      .removeListener('end', onFinished)
      .removeListener('error', onFinished)
      .removeListener('close', onAbort)

    if (!err) {
      try {
        writer.end()
      } catch (er) {
        err = er
      }
    }

    writer.destroy(err)

    if (err && (err.code !== 'UND_ERR_INFO' || err.message !== 'reset')) {
      util.destroy(body, err)
    } else {
      util.destroy(body)
    }
  }

  body
    .on('data', onData)
    .on('end', onFinished)
    .on('error', onFinished)
    .on('close', onAbort)

  if (body.resume) {
    body.resume()
  }

  socket
    .on('drain', onDrain)
    .on('error', onFinished)
}

async function writeBlob ({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
  assert(contentLength === body.size, 'blob body must have content length')

  const isH2 = client[kHTTPConnVersion] === 'h2'
  try {
    if (contentLength != null && contentLength !== body.size) {
      throw new RequestContentLengthMismatchError()
    }

    const buffer = Buffer.from(await body.arrayBuffer())

    if (isH2) {
      h2stream.cork()
      h2stream.write(buffer)
      h2stream.uncork()
    } else {
      socket.cork()
      socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, 'latin1')
      socket.write(buffer)
      socket.uncork()
    }

    request.onBodySent(buffer)
    request.onRequestSent()

    if (!expectsPayload) {
      socket[kReset] = true
    }

    resume(client)
  } catch (err) {
    util.destroy(isH2 ? h2stream : socket, err)
  }
}

async function writeIterable ({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
  assert(contentLength !== 0 || client[kRunning] === 0, 'iterator body cannot be pipelined')

  let callback = null
  function onDrain () {
    if (callback) {
      const cb = callback
      callback = null
      cb()
    }
  }

  const waitForDrain = () => new Promise((resolve, reject) => {
    assert(callback === null)

    if (socket[kError]) {
      reject(socket[kError])
    } else {
      callback = resolve
    }
  })

  if (client[kHTTPConnVersion] === 'h2') {
    h2stream
      .on('close', onDrain)
      .on('drain', onDrain)

    try {
      // It's up to the user to somehow abort the async iterable.
      for await (const chunk of body) {
        if (socket[kError]) {
          throw socket[kError]
        }

        const res = h2stream.write(chunk)
        request.onBodySent(chunk)
        if (!res) {
          await waitForDrain()
        }
      }
    } catch (err) {
      h2stream.destroy(err)
    } finally {
      request.onRequestSent()
      h2stream.end()
      h2stream
        .off('close', onDrain)
        .off('drain', onDrain)
    }

    return
  }

  socket
    .on('close', onDrain)
    .on('drain', onDrain)

  const writer = new AsyncWriter({ socket, request, contentLength, client, expectsPayload, header })
  try {
    // It's up to the user to somehow abort the async iterable.
    for await (const chunk of body) {
      if (socket[kError]) {
        throw socket[kError]
      }

      if (!writer.write(chunk)) {
        await waitForDrain()
      }
    }

    writer.end()
  } catch (err) {
    writer.destroy(err)
  } finally {
    socket
      .off('close', onDrain)
      .off('drain', onDrain)
  }
}

class AsyncWriter {
  constructor ({ socket, request, contentLength, client, expectsPayload, header }) {
    this.socket = socket
    this.request = request
    this.contentLength = contentLength
    this.client = client
    this.bytesWritten = 0
    this.expectsPayload = expectsPayload
    this.header = header

    socket[kWriting] = true
  }

  write (chunk) {
    const { socket, request, contentLength, client, bytesWritten, expectsPayload, header } = this

    if (socket[kError]) {
      throw socket[kError]
    }

    if (socket.destroyed) {
      return false
    }

    const len = Buffer.byteLength(chunk)
    if (!len) {
      return true
    }

    // We should defer writing chunks.
    if (contentLength !== null && bytesWritten + len > contentLength) {
      if (client[kStrictContentLength]) {
        throw new RequestContentLengthMismatchError()
      }

      process.emitWarning(new RequestContentLengthMismatchError())
    }

    socket.cork()

    if (bytesWritten === 0) {
      if (!expectsPayload) {
        socket[kReset] = true
      }

      if (contentLength === null) {
        socket.write(`${header}transfer-encoding: chunked\r\n`, 'latin1')
      } else {
        socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, 'latin1')
      }
    }

    if (contentLength === null) {
      socket.write(`\r\n${len.toString(16)}\r\n`, 'latin1')
    }

    this.bytesWritten += len

    const ret = socket.write(chunk)

    socket.uncork()

    request.onBodySent(chunk)

    if (!ret) {
      if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
        // istanbul ignore else: only for jest
        if (socket[kParser].timeout.refresh) {
          socket[kParser].timeout.refresh()
        }
      }
    }

    return ret
  }

  end () {
    const { socket, contentLength, client, bytesWritten, expectsPayload, header, request } = this
    request.onRequestSent()

    socket[kWriting] = false

    if (socket[kError]) {
      throw socket[kError]
    }

    if (socket.destroyed) {
      return
    }

    if (bytesWritten === 0) {
      if (expectsPayload) {
        // https://tools.ietf.org/html/rfc7230#section-3.3.2
        // A user agent SHOULD send a Content-Length in a request message when
        // no Transfer-Encoding is sent and the request method defines a meaning
        // for an enclosed payload body.

        socket.write(`${header}content-length: 0\r\n\r\n`, 'latin1')
      } else {
        socket.write(`${header}\r\n`, 'latin1')
      }
    } else if (contentLength === null) {
      socket.write('\r\n0\r\n\r\n', 'latin1')
    }

    if (contentLength !== null && bytesWritten !== contentLength) {
      if (client[kStrictContentLength]) {
        throw new RequestContentLengthMismatchError()
      } else {
        process.emitWarning(new RequestContentLengthMismatchError())
      }
    }

    if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
      // istanbul ignore else: only for jest
      if (socket[kParser].timeout.refresh) {
        socket[kParser].timeout.refresh()
      }
    }

    resume(client)
  }

  destroy (err) {
    const { socket, client } = this

    socket[kWriting] = false

    if (err) {
      assert(client[kRunning] <= 1, 'pipeline should only contain this request')
      util.destroy(socket, err)
    }
  }
}

function errorRequest (client, request, err) {
  try {
    request.onError(err)
    assert(request.aborted)
  } catch (err) {
    client.emit('error', err)
  }
}

module.exports = Client


/***/ }),

/***/ 6436:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



/* istanbul ignore file: only for Node 12 */

const { kConnected, kSize } = __nccwpck_require__(2785)

class CompatWeakRef {
  constructor (value) {
    this.value = value
  }

  deref () {
    return this.value[kConnected] === 0 && this.value[kSize] === 0
      ? undefined
      : this.value
  }
}

class CompatFinalizer {
  constructor (finalizer) {
    this.finalizer = finalizer
  }

  register (dispatcher, key) {
    if (dispatcher.on) {
      dispatcher.on('disconnect', () => {
        if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {
          this.finalizer(key)
        }
      })
    }
  }
}

module.exports = function () {
  // FIXME: remove workaround when the Node bug is fixed
  // https://github.com/nodejs/node/issues/49344#issuecomment-1741776308
  if (process.env.NODE_V8_COVERAGE) {
    return {
      WeakRef: CompatWeakRef,
      FinalizationRegistry: CompatFinalizer
    }
  }
  return {
    WeakRef: global.WeakRef || CompatWeakRef,
    FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer
  }
}


/***/ }),

/***/ 663:
/***/ ((module) => {



// https://wicg.github.io/cookie-store/#cookie-maximum-attribute-value-size
const maxAttributeValueSize = 1024

// https://wicg.github.io/cookie-store/#cookie-maximum-name-value-pair-size
const maxNameValuePairSize = 4096

module.exports = {
  maxAttributeValueSize,
  maxNameValuePairSize
}


/***/ }),

/***/ 1724:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { parseSetCookie } = __nccwpck_require__(4408)
const { stringify, getHeadersList } = __nccwpck_require__(3121)
const { webidl } = __nccwpck_require__(1744)
const { Headers } = __nccwpck_require__(554)

/**
 * @typedef {Object} Cookie
 * @property {string} name
 * @property {string} value
 * @property {Date|number|undefined} expires
 * @property {number|undefined} maxAge
 * @property {string|undefined} domain
 * @property {string|undefined} path
 * @property {boolean|undefined} secure
 * @property {boolean|undefined} httpOnly
 * @property {'Strict'|'Lax'|'None'} sameSite
 * @property {string[]} unparsed
 */

/**
 * @param {Headers} headers
 * @returns {Record<string, string>}
 */
function getCookies (headers) {
  webidl.argumentLengthCheck(arguments, 1, { header: 'getCookies' })

  webidl.brandCheck(headers, Headers, { strict: false })

  const cookie = headers.get('cookie')
  const out = {}

  if (!cookie) {
    return out
  }

  for (const piece of cookie.split(';')) {
    const [name, ...value] = piece.split('=')

    out[name.trim()] = value.join('=')
  }

  return out
}

/**
 * @param {Headers} headers
 * @param {string} name
 * @param {{ path?: string, domain?: string }|undefined} attributes
 * @returns {void}
 */
function deleteCookie (headers, name, attributes) {
  webidl.argumentLengthCheck(arguments, 2, { header: 'deleteCookie' })

  webidl.brandCheck(headers, Headers, { strict: false })

  name = webidl.converters.DOMString(name)
  attributes = webidl.converters.DeleteCookieAttributes(attributes)

  // Matches behavior of
  // https://github.com/denoland/deno_std/blob/63827b16330b82489a04614027c33b7904e08be5/http/cookie.ts#L278
  setCookie(headers, {
    name,
    value: '',
    expires: new Date(0),
    ...attributes
  })
}

/**
 * @param {Headers} headers
 * @returns {Cookie[]}
 */
function getSetCookies (headers) {
  webidl.argumentLengthCheck(arguments, 1, { header: 'getSetCookies' })

  webidl.brandCheck(headers, Headers, { strict: false })

  const cookies = getHeadersList(headers).cookies

  if (!cookies) {
    return []
  }

  // In older versions of undici, cookies is a list of name:value.
  return cookies.map((pair) => parseSetCookie(Array.isArray(pair) ? pair[1] : pair))
}

/**
 * @param {Headers} headers
 * @param {Cookie} cookie
 * @returns {void}
 */
function setCookie (headers, cookie) {
  webidl.argumentLengthCheck(arguments, 2, { header: 'setCookie' })

  webidl.brandCheck(headers, Headers, { strict: false })

  cookie = webidl.converters.Cookie(cookie)

  const str = stringify(cookie)

  if (str) {
    headers.append('Set-Cookie', stringify(cookie))
  }
}

webidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([
  {
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: 'path',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: 'domain',
    defaultValue: null
  }
])

webidl.converters.Cookie = webidl.dictionaryConverter([
  {
    converter: webidl.converters.DOMString,
    key: 'name'
  },
  {
    converter: webidl.converters.DOMString,
    key: 'value'
  },
  {
    converter: webidl.nullableConverter((value) => {
      if (typeof value === 'number') {
        return webidl.converters['unsigned long long'](value)
      }

      return new Date(value)
    }),
    key: 'expires',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters['long long']),
    key: 'maxAge',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: 'domain',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: 'path',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters.boolean),
    key: 'secure',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters.boolean),
    key: 'httpOnly',
    defaultValue: null
  },
  {
    converter: webidl.converters.USVString,
    key: 'sameSite',
    allowedValues: ['Strict', 'Lax', 'None']
  },
  {
    converter: webidl.sequenceConverter(webidl.converters.DOMString),
    key: 'unparsed',
    defaultValue: []
  }
])

module.exports = {
  getCookies,
  deleteCookie,
  getSetCookies,
  setCookie
}


/***/ }),

/***/ 4408:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { maxNameValuePairSize, maxAttributeValueSize } = __nccwpck_require__(663)
const { isCTLExcludingHtab } = __nccwpck_require__(3121)
const { collectASequenceOfCodePointsFast } = __nccwpck_require__(685)
const assert = __nccwpck_require__(9491)

/**
 * @description Parses the field-value attributes of a set-cookie header string.
 * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
 * @param {string} header
 * @returns if the header is invalid, null will be returned
 */
function parseSetCookie (header) {
  // 1. If the set-cookie-string contains a %x00-08 / %x0A-1F / %x7F
  //    character (CTL characters excluding HTAB): Abort these steps and
  //    ignore the set-cookie-string entirely.
  if (isCTLExcludingHtab(header)) {
    return null
  }

  let nameValuePair = ''
  let unparsedAttributes = ''
  let name = ''
  let value = ''

  // 2. If the set-cookie-string contains a %x3B (";") character:
  if (header.includes(';')) {
    // 1. The name-value-pair string consists of the characters up to,
    //    but not including, the first %x3B (";"), and the unparsed-
    //    attributes consist of the remainder of the set-cookie-string
    //    (including the %x3B (";") in question).
    const position = { position: 0 }

    nameValuePair = collectASequenceOfCodePointsFast(';', header, position)
    unparsedAttributes = header.slice(position.position)
  } else {
    // Otherwise:

    // 1. The name-value-pair string consists of all the characters
    //    contained in the set-cookie-string, and the unparsed-
    //    attributes is the empty string.
    nameValuePair = header
  }

  // 3. If the name-value-pair string lacks a %x3D ("=") character, then
  //    the name string is empty, and the value string is the value of
  //    name-value-pair.
  if (!nameValuePair.includes('=')) {
    value = nameValuePair
  } else {
    //    Otherwise, the name string consists of the characters up to, but
    //    not including, the first %x3D ("=") character, and the (possibly
    //    empty) value string consists of the characters after the first
    //    %x3D ("=") character.
    const position = { position: 0 }
    name = collectASequenceOfCodePointsFast(
      '=',
      nameValuePair,
      position
    )
    value = nameValuePair.slice(position.position + 1)
  }

  // 4. Remove any leading or trailing WSP characters from the name
  //    string and the value string.
  name = name.trim()
  value = value.trim()

  // 5. If the sum of the lengths of the name string and the value string
  //    is more than 4096 octets, abort these steps and ignore the set-
  //    cookie-string entirely.
  if (name.length + value.length > maxNameValuePairSize) {
    return null
  }

  // 6. The cookie-name is the name string, and the cookie-value is the
  //    value string.
  return {
    name, value, ...parseUnparsedAttributes(unparsedAttributes)
  }
}

/**
 * Parses the remaining attributes of a set-cookie header
 * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
 * @param {string} unparsedAttributes
 * @param {[Object.<string, unknown>]={}} cookieAttributeList
 */
function parseUnparsedAttributes (unparsedAttributes, cookieAttributeList = {}) {
  // 1. If the unparsed-attributes string is empty, skip the rest of
  //    these steps.
  if (unparsedAttributes.length === 0) {
    return cookieAttributeList
  }

  // 2. Discard the first character of the unparsed-attributes (which
  //    will be a %x3B (";") character).
  assert(unparsedAttributes[0] === ';')
  unparsedAttributes = unparsedAttributes.slice(1)

  let cookieAv = ''

  // 3. If the remaining unparsed-attributes contains a %x3B (";")
  //    character:
  if (unparsedAttributes.includes(';')) {
    // 1. Consume the characters of the unparsed-attributes up to, but
    //    not including, the first %x3B (";") character.
    cookieAv = collectASequenceOfCodePointsFast(
      ';',
      unparsedAttributes,
      { position: 0 }
    )
    unparsedAttributes = unparsedAttributes.slice(cookieAv.length)
  } else {
    // Otherwise:

    // 1. Consume the remainder of the unparsed-attributes.
    cookieAv = unparsedAttributes
    unparsedAttributes = ''
  }

  // Let the cookie-av string be the characters consumed in this step.

  let attributeName = ''
  let attributeValue = ''

  // 4. If the cookie-av string contains a %x3D ("=") character:
  if (cookieAv.includes('=')) {
    // 1. The (possibly empty) attribute-name string consists of the
    //    characters up to, but not including, the first %x3D ("=")
    //    character, and the (possibly empty) attribute-value string
    //    consists of the characters after the first %x3D ("=")
    //    character.
    const position = { position: 0 }

    attributeName = collectASequenceOfCodePointsFast(
      '=',
      cookieAv,
      position
    )
    attributeValue = cookieAv.slice(position.position + 1)
  } else {
    // Otherwise:

    // 1. The attribute-name string consists of the entire cookie-av
    //    string, and the attribute-value string is empty.
    attributeName = cookieAv
  }

  // 5. Remove any leading or trailing WSP characters from the attribute-
  //    name string and the attribute-value string.
  attributeName = attributeName.trim()
  attributeValue = attributeValue.trim()

  // 6. If the attribute-value is longer than 1024 octets, ignore the
  //    cookie-av string and return to Step 1 of this algorithm.
  if (attributeValue.length > maxAttributeValueSize) {
    return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)
  }

  // 7. Process the attribute-name and attribute-value according to the
  //    requirements in the following subsections.  (Notice that
  //    attributes with unrecognized attribute-names are ignored.)
  const attributeNameLowercase = attributeName.toLowerCase()

  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.1
  // If the attribute-name case-insensitively matches the string
  // "Expires", the user agent MUST process the cookie-av as follows.
  if (attributeNameLowercase === 'expires') {
    // 1. Let the expiry-time be the result of parsing the attribute-value
    //    as cookie-date (see Section 5.1.1).
    const expiryTime = new Date(attributeValue)

    // 2. If the attribute-value failed to parse as a cookie date, ignore
    //    the cookie-av.

    cookieAttributeList.expires = expiryTime
  } else if (attributeNameLowercase === 'max-age') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.2
    // If the attribute-name case-insensitively matches the string "Max-
    // Age", the user agent MUST process the cookie-av as follows.

    // 1. If the first character of the attribute-value is not a DIGIT or a
    //    "-" character, ignore the cookie-av.
    const charCode = attributeValue.charCodeAt(0)

    if ((charCode < 48 || charCode > 57) && attributeValue[0] !== '-') {
      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)
    }

    // 2. If the remainder of attribute-value contains a non-DIGIT
    //    character, ignore the cookie-av.
    if (!/^\d+$/.test(attributeValue)) {
      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)
    }

    // 3. Let delta-seconds be the attribute-value converted to an integer.
    const deltaSeconds = Number(attributeValue)

    // 4. Let cookie-age-limit be the maximum age of the cookie (which
    //    SHOULD be 400 days or less, see Section 4.1.2.2).

    // 5. Set delta-seconds to the smaller of its present value and cookie-
    //    age-limit.
    // deltaSeconds = Math.min(deltaSeconds * 1000, maxExpiresMs)

    // 6. If delta-seconds is less than or equal to zero (0), let expiry-
    //    time be the earliest representable date and time.  Otherwise, let
    //    the expiry-time be the current date and time plus delta-seconds
    //    seconds.
    // const expiryTime = deltaSeconds <= 0 ? Date.now() : Date.now() + deltaSeconds

    // 7. Append an attribute to the cookie-attribute-list with an
    //    attribute-name of Max-Age and an attribute-value of expiry-time.
    cookieAttributeList.maxAge = deltaSeconds
  } else if (attributeNameLowercase === 'domain') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.3
    // If the attribute-name case-insensitively matches the string "Domain",
    // the user agent MUST process the cookie-av as follows.

    // 1. Let cookie-domain be the attribute-value.
    let cookieDomain = attributeValue

    // 2. If cookie-domain starts with %x2E ("."), let cookie-domain be
    //    cookie-domain without its leading %x2E (".").
    if (cookieDomain[0] === '.') {
      cookieDomain = cookieDomain.slice(1)
    }

    // 3. Convert the cookie-domain to lower case.
    cookieDomain = cookieDomain.toLowerCase()

    // 4. Append an attribute to the cookie-attribute-list with an
    //    attribute-name of Domain and an attribute-value of cookie-domain.
    cookieAttributeList.domain = cookieDomain
  } else if (attributeNameLowercase === 'path') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.4
    // If the attribute-name case-insensitively matches the string "Path",
    // the user agent MUST process the cookie-av as follows.

    // 1. If the attribute-value is empty or if the first character of the
    //    attribute-value is not %x2F ("/"):
    let cookiePath = ''
    if (attributeValue.length === 0 || attributeValue[0] !== '/') {
      // 1. Let cookie-path be the default-path.
      cookiePath = '/'
    } else {
      // Otherwise:

      // 1. Let cookie-path be the attribute-value.
      cookiePath = attributeValue
    }

    // 2. Append an attribute to the cookie-attribute-list with an
    //    attribute-name of Path and an attribute-value of cookie-path.
    cookieAttributeList.path = cookiePath
  } else if (attributeNameLowercase === 'secure') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.5
    // If the attribute-name case-insensitively matches the string "Secure",
    // the user agent MUST append an attribute to the cookie-attribute-list
    // with an attribute-name of Secure and an empty attribute-value.

    cookieAttributeList.secure = true
  } else if (attributeNameLowercase === 'httponly') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.6
    // If the attribute-name case-insensitively matches the string
    // "HttpOnly", the user agent MUST append an attribute to the cookie-
    // attribute-list with an attribute-name of HttpOnly and an empty
    // attribute-value.

    cookieAttributeList.httpOnly = true
  } else if (attributeNameLowercase === 'samesite') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.7
    // If the attribute-name case-insensitively matches the string
    // "SameSite", the user agent MUST process the cookie-av as follows:

    // 1. Let enforcement be "Default".
    let enforcement = 'Default'

    const attributeValueLowercase = attributeValue.toLowerCase()
    // 2. If cookie-av's attribute-value is a case-insensitive match for
    //    "None", set enforcement to "None".
    if (attributeValueLowercase.includes('none')) {
      enforcement = 'None'
    }

    // 3. If cookie-av's attribute-value is a case-insensitive match for
    //    "Strict", set enforcement to "Strict".
    if (attributeValueLowercase.includes('strict')) {
      enforcement = 'Strict'
    }

    // 4. If cookie-av's attribute-value is a case-insensitive match for
    //    "Lax", set enforcement to "Lax".
    if (attributeValueLowercase.includes('lax')) {
      enforcement = 'Lax'
    }

    // 5. Append an attribute to the cookie-attribute-list with an
    //    attribute-name of "SameSite" and an attribute-value of
    //    enforcement.
    cookieAttributeList.sameSite = enforcement
  } else {
    cookieAttributeList.unparsed ??= []

    cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`)
  }

  // 8. Return to Step 1 of this algorithm.
  return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)
}

module.exports = {
  parseSetCookie,
  parseUnparsedAttributes
}


/***/ }),

/***/ 3121:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const assert = __nccwpck_require__(9491)
const { kHeadersList } = __nccwpck_require__(2785)

function isCTLExcludingHtab (value) {
  if (value.length === 0) {
    return false
  }

  for (const char of value) {
    const code = char.charCodeAt(0)

    if (
      (code >= 0x00 || code <= 0x08) ||
      (code >= 0x0A || code <= 0x1F) ||
      code === 0x7F
    ) {
      return false
    }
  }
}

/**
 CHAR           = <any US-ASCII character (octets 0 - 127)>
 token          = 1*<any CHAR except CTLs or separators>
 separators     = "(" | ")" | "<" | ">" | "@"
                | "," | ";" | ":" | "\" | <">
                | "/" | "[" | "]" | "?" | "="
                | "{" | "}" | SP | HT
 * @param {string} name
 */
function validateCookieName (name) {
  for (const char of name) {
    const code = char.charCodeAt(0)

    if (
      (code <= 0x20 || code > 0x7F) ||
      char === '(' ||
      char === ')' ||
      char === '>' ||
      char === '<' ||
      char === '@' ||
      char === ',' ||
      char === ';' ||
      char === ':' ||
      char === '\\' ||
      char === '"' ||
      char === '/' ||
      char === '[' ||
      char === ']' ||
      char === '?' ||
      char === '=' ||
      char === '{' ||
      char === '}'
    ) {
      throw new Error('Invalid cookie name')
    }
  }
}

/**
 cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
 cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
                       ; US-ASCII characters excluding CTLs,
                       ; whitespace DQUOTE, comma, semicolon,
                       ; and backslash
 * @param {string} value
 */
function validateCookieValue (value) {
  for (const char of value) {
    const code = char.charCodeAt(0)

    if (
      code < 0x21 || // exclude CTLs (0-31)
      code === 0x22 ||
      code === 0x2C ||
      code === 0x3B ||
      code === 0x5C ||
      code > 0x7E // non-ascii
    ) {
      throw new Error('Invalid header value')
    }
  }
}

/**
 * path-value        = <any CHAR except CTLs or ";">
 * @param {string} path
 */
function validateCookiePath (path) {
  for (const char of path) {
    const code = char.charCodeAt(0)

    if (code < 0x21 || char === ';') {
      throw new Error('Invalid cookie path')
    }
  }
}

/**
 * I have no idea why these values aren't allowed to be honest,
 * but Deno tests these. - Khafra
 * @param {string} domain
 */
function validateCookieDomain (domain) {
  if (
    domain.startsWith('-') ||
    domain.endsWith('.') ||
    domain.endsWith('-')
  ) {
    throw new Error('Invalid cookie domain')
  }
}

/**
 * @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1
 * @param {number|Date} date
  IMF-fixdate  = day-name "," SP date1 SP time-of-day SP GMT
  ; fixed length/zone/capitalization subset of the format
  ; see Section 3.3 of [RFC5322]

  day-name     = %x4D.6F.6E ; "Mon", case-sensitive
              / %x54.75.65 ; "Tue", case-sensitive
              / %x57.65.64 ; "Wed", case-sensitive
              / %x54.68.75 ; "Thu", case-sensitive
              / %x46.72.69 ; "Fri", case-sensitive
              / %x53.61.74 ; "Sat", case-sensitive
              / %x53.75.6E ; "Sun", case-sensitive
  date1        = day SP month SP year
                  ; e.g., 02 Jun 1982

  day          = 2DIGIT
  month        = %x4A.61.6E ; "Jan", case-sensitive
              / %x46.65.62 ; "Feb", case-sensitive
              / %x4D.61.72 ; "Mar", case-sensitive
              / %x41.70.72 ; "Apr", case-sensitive
              / %x4D.61.79 ; "May", case-sensitive
              / %x4A.75.6E ; "Jun", case-sensitive
              / %x4A.75.6C ; "Jul", case-sensitive
              / %x41.75.67 ; "Aug", case-sensitive
              / %x53.65.70 ; "Sep", case-sensitive
              / %x4F.63.74 ; "Oct", case-sensitive
              / %x4E.6F.76 ; "Nov", case-sensitive
              / %x44.65.63 ; "Dec", case-sensitive
  year         = 4DIGIT

  GMT          = %x47.4D.54 ; "GMT", case-sensitive

  time-of-day  = hour ":" minute ":" second
              ; 00:00:00 - 23:59:60 (leap second)

  hour         = 2DIGIT
  minute       = 2DIGIT
  second       = 2DIGIT
 */
function toIMFDate (date) {
  if (typeof date === 'number') {
    date = new Date(date)
  }

  const days = [
    'Sun', 'Mon', 'Tue', 'Wed',
    'Thu', 'Fri', 'Sat'
  ]

  const months = [
    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
  ]

  const dayName = days[date.getUTCDay()]
  const day = date.getUTCDate().toString().padStart(2, '0')
  const month = months[date.getUTCMonth()]
  const year = date.getUTCFullYear()
  const hour = date.getUTCHours().toString().padStart(2, '0')
  const minute = date.getUTCMinutes().toString().padStart(2, '0')
  const second = date.getUTCSeconds().toString().padStart(2, '0')

  return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`
}

/**
 max-age-av        = "Max-Age=" non-zero-digit *DIGIT
                       ; In practice, both expires-av and max-age-av
                       ; are limited to dates representable by the
                       ; user agent.
 * @param {number} maxAge
 */
function validateCookieMaxAge (maxAge) {
  if (maxAge < 0) {
    throw new Error('Invalid cookie max-age')
  }
}

/**
 * @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1
 * @param {import('./index').Cookie} cookie
 */
function stringify (cookie) {
  if (cookie.name.length === 0) {
    return null
  }

  validateCookieName(cookie.name)
  validateCookieValue(cookie.value)

  const out = [`${cookie.name}=${cookie.value}`]

  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.1
  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.2
  if (cookie.name.startsWith('__Secure-')) {
    cookie.secure = true
  }

  if (cookie.name.startsWith('__Host-')) {
    cookie.secure = true
    cookie.domain = null
    cookie.path = '/'
  }

  if (cookie.secure) {
    out.push('Secure')
  }

  if (cookie.httpOnly) {
    out.push('HttpOnly')
  }

  if (typeof cookie.maxAge === 'number') {
    validateCookieMaxAge(cookie.maxAge)
    out.push(`Max-Age=${cookie.maxAge}`)
  }

  if (cookie.domain) {
    validateCookieDomain(cookie.domain)
    out.push(`Domain=${cookie.domain}`)
  }

  if (cookie.path) {
    validateCookiePath(cookie.path)
    out.push(`Path=${cookie.path}`)
  }

  if (cookie.expires && cookie.expires.toString() !== 'Invalid Date') {
    out.push(`Expires=${toIMFDate(cookie.expires)}`)
  }

  if (cookie.sameSite) {
    out.push(`SameSite=${cookie.sameSite}`)
  }

  for (const part of cookie.unparsed) {
    if (!part.includes('=')) {
      throw new Error('Invalid unparsed')
    }

    const [key, ...value] = part.split('=')

    out.push(`${key.trim()}=${value.join('=')}`)
  }

  return out.join('; ')
}

let kHeadersListNode

function getHeadersList (headers) {
  if (headers[kHeadersList]) {
    return headers[kHeadersList]
  }

  if (!kHeadersListNode) {
    kHeadersListNode = Object.getOwnPropertySymbols(headers).find(
      (symbol) => symbol.description === 'headers list'
    )

    assert(kHeadersListNode, 'Headers cannot be parsed')
  }

  const headersList = headers[kHeadersListNode]
  assert(headersList)

  return headersList
}

module.exports = {
  isCTLExcludingHtab,
  stringify,
  getHeadersList
}


/***/ }),

/***/ 2067:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const net = __nccwpck_require__(1808)
const assert = __nccwpck_require__(9491)
const util = __nccwpck_require__(3983)
const { InvalidArgumentError, ConnectTimeoutError } = __nccwpck_require__(8045)

let tls // include tls conditionally since it is not always available

// TODO: session re-use does not wait for the first
// connection to resolve the session and might therefore
// resolve the same servername multiple times even when
// re-use is enabled.

let SessionCache
// FIXME: remove workaround when the Node bug is fixed
// https://github.com/nodejs/node/issues/49344#issuecomment-1741776308
if (global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) {
  SessionCache = class WeakSessionCache {
    constructor (maxCachedSessions) {
      this._maxCachedSessions = maxCachedSessions
      this._sessionCache = new Map()
      this._sessionRegistry = new global.FinalizationRegistry((key) => {
        if (this._sessionCache.size < this._maxCachedSessions) {
          return
        }

        const ref = this._sessionCache.get(key)
        if (ref !== undefined && ref.deref() === undefined) {
          this._sessionCache.delete(key)
        }
      })
    }

    get (sessionKey) {
      const ref = this._sessionCache.get(sessionKey)
      return ref ? ref.deref() : null
    }

    set (sessionKey, session) {
      if (this._maxCachedSessions === 0) {
        return
      }

      this._sessionCache.set(sessionKey, new WeakRef(session))
      this._sessionRegistry.register(session, sessionKey)
    }
  }
} else {
  SessionCache = class SimpleSessionCache {
    constructor (maxCachedSessions) {
      this._maxCachedSessions = maxCachedSessions
      this._sessionCache = new Map()
    }

    get (sessionKey) {
      return this._sessionCache.get(sessionKey)
    }

    set (sessionKey, session) {
      if (this._maxCachedSessions === 0) {
        return
      }

      if (this._sessionCache.size >= this._maxCachedSessions) {
        // remove the oldest session
        const { value: oldestKey } = this._sessionCache.keys().next()
        this._sessionCache.delete(oldestKey)
      }

      this._sessionCache.set(sessionKey, session)
    }
  }
}

function buildConnector ({ allowH2, maxCachedSessions, socketPath, timeout, ...opts }) {
  if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) {
    throw new InvalidArgumentError('maxCachedSessions must be a positive integer or zero')
  }

  const options = { path: socketPath, ...opts }
  const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions)
  timeout = timeout == null ? 10e3 : timeout
  allowH2 = allowH2 != null ? allowH2 : false
  return function connect ({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {
    let socket
    if (protocol === 'https:') {
      if (!tls) {
        tls = __nccwpck_require__(4404)
      }
      servername = servername || options.servername || util.getServerName(host) || null

      const sessionKey = servername || hostname
      const session = sessionCache.get(sessionKey) || null

      assert(sessionKey)

      socket = tls.connect({
        highWaterMark: 16384, // TLS in node can't have bigger HWM anyway...
        ...options,
        servername,
        session,
        localAddress,
        // TODO(HTTP/2): Add support for h2c
        ALPNProtocols: allowH2 ? ['http/1.1', 'h2'] : ['http/1.1'],
        socket: httpSocket, // upgrade socket connection
        port: port || 443,
        host: hostname
      })

      socket
        .on('session', function (session) {
          // TODO (fix): Can a session become invalid once established? Don't think so?
          sessionCache.set(sessionKey, session)
        })
    } else {
      assert(!httpSocket, 'httpSocket can only be sent on TLS update')
      socket = net.connect({
        highWaterMark: 64 * 1024, // Same as nodejs fs streams.
        ...options,
        localAddress,
        port: port || 80,
        host: hostname
      })
    }

    // Set TCP keep alive options on the socket here instead of in connect() for the case of assigning the socket
    if (options.keepAlive == null || options.keepAlive) {
      const keepAliveInitialDelay = options.keepAliveInitialDelay === undefined ? 60e3 : options.keepAliveInitialDelay
      socket.setKeepAlive(true, keepAliveInitialDelay)
    }

    const cancelTimeout = setupTimeout(() => onConnectTimeout(socket), timeout)

    socket
      .setNoDelay(true)
      .once(protocol === 'https:' ? 'secureConnect' : 'connect', function () {
        cancelTimeout()

        if (callback) {
          const cb = callback
          callback = null
          cb(null, this)
        }
      })
      .on('error', function (err) {
        cancelTimeout()

        if (callback) {
          const cb = callback
          callback = null
          cb(err)
        }
      })

    return socket
  }
}

function setupTimeout (onConnectTimeout, timeout) {
  if (!timeout) {
    return () => {}
  }

  let s1 = null
  let s2 = null
  const timeoutId = setTimeout(() => {
    // setImmediate is added to make sure that we priotorise socket error events over timeouts
    s1 = setImmediate(() => {
      if (process.platform === 'win32') {
        // Windows needs an extra setImmediate probably due to implementation differences in the socket logic
        s2 = setImmediate(() => onConnectTimeout())
      } else {
        onConnectTimeout()
      }
    })
  }, timeout)
  return () => {
    clearTimeout(timeoutId)
    clearImmediate(s1)
    clearImmediate(s2)
  }
}

function onConnectTimeout (socket) {
  util.destroy(socket, new ConnectTimeoutError())
}

module.exports = buildConnector


/***/ }),

/***/ 4462:
/***/ ((module) => {



/** @type {Record<string, string | undefined>} */
const headerNameLowerCasedRecord = {}

// https://developer.mozilla.org/docs/Web/HTTP/Headers
const wellknownHeaderNames = [
  'Accept',
  'Accept-Encoding',
  'Accept-Language',
  'Accept-Ranges',
  'Access-Control-Allow-Credentials',
  'Access-Control-Allow-Headers',
  'Access-Control-Allow-Methods',
  'Access-Control-Allow-Origin',
  'Access-Control-Expose-Headers',
  'Access-Control-Max-Age',
  'Access-Control-Request-Headers',
  'Access-Control-Request-Method',
  'Age',
  'Allow',
  'Alt-Svc',
  'Alt-Used',
  'Authorization',
  'Cache-Control',
  'Clear-Site-Data',
  'Connection',
  'Content-Disposition',
  'Content-Encoding',
  'Content-Language',
  'Content-Length',
  'Content-Location',
  'Content-Range',
  'Content-Security-Policy',
  'Content-Security-Policy-Report-Only',
  'Content-Type',
  'Cookie',
  'Cross-Origin-Embedder-Policy',
  'Cross-Origin-Opener-Policy',
  'Cross-Origin-Resource-Policy',
  'Date',
  'Device-Memory',
  'Downlink',
  'ECT',
  'ETag',
  'Expect',
  'Expect-CT',
  'Expires',
  'Forwarded',
  'From',
  'Host',
  'If-Match',
  'If-Modified-Since',
  'If-None-Match',
  'If-Range',
  'If-Unmodified-Since',
  'Keep-Alive',
  'Last-Modified',
  'Link',
  'Location',
  'Max-Forwards',
  'Origin',
  'Permissions-Policy',
  'Pragma',
  'Proxy-Authenticate',
  'Proxy-Authorization',
  'RTT',
  'Range',
  'Referer',
  'Referrer-Policy',
  'Refresh',
  'Retry-After',
  'Sec-WebSocket-Accept',
  'Sec-WebSocket-Extensions',
  'Sec-WebSocket-Key',
  'Sec-WebSocket-Protocol',
  'Sec-WebSocket-Version',
  'Server',
  'Server-Timing',
  'Service-Worker-Allowed',
  'Service-Worker-Navigation-Preload',
  'Set-Cookie',
  'SourceMap',
  'Strict-Transport-Security',
  'Supports-Loading-Mode',
  'TE',
  'Timing-Allow-Origin',
  'Trailer',
  'Transfer-Encoding',
  'Upgrade',
  'Upgrade-Insecure-Requests',
  'User-Agent',
  'Vary',
  'Via',
  'WWW-Authenticate',
  'X-Content-Type-Options',
  'X-DNS-Prefetch-Control',
  'X-Frame-Options',
  'X-Permitted-Cross-Domain-Policies',
  'X-Powered-By',
  'X-Requested-With',
  'X-XSS-Protection'
]

for (let i = 0; i < wellknownHeaderNames.length; ++i) {
  const key = wellknownHeaderNames[i]
  const lowerCasedKey = key.toLowerCase()
  headerNameLowerCasedRecord[key] = headerNameLowerCasedRecord[lowerCasedKey] =
    lowerCasedKey
}

// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.
Object.setPrototypeOf(headerNameLowerCasedRecord, null)

module.exports = {
  wellknownHeaderNames,
  headerNameLowerCasedRecord
}


/***/ }),

/***/ 8045:
/***/ ((module) => {



class UndiciError extends Error {
  constructor (message) {
    super(message)
    this.name = 'UndiciError'
    this.code = 'UND_ERR'
  }
}

class ConnectTimeoutError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, ConnectTimeoutError)
    this.name = 'ConnectTimeoutError'
    this.message = message || 'Connect Timeout Error'
    this.code = 'UND_ERR_CONNECT_TIMEOUT'
  }
}

class HeadersTimeoutError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, HeadersTimeoutError)
    this.name = 'HeadersTimeoutError'
    this.message = message || 'Headers Timeout Error'
    this.code = 'UND_ERR_HEADERS_TIMEOUT'
  }
}

class HeadersOverflowError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, HeadersOverflowError)
    this.name = 'HeadersOverflowError'
    this.message = message || 'Headers Overflow Error'
    this.code = 'UND_ERR_HEADERS_OVERFLOW'
  }
}

class BodyTimeoutError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, BodyTimeoutError)
    this.name = 'BodyTimeoutError'
    this.message = message || 'Body Timeout Error'
    this.code = 'UND_ERR_BODY_TIMEOUT'
  }
}

class ResponseStatusCodeError extends UndiciError {
  constructor (message, statusCode, headers, body) {
    super(message)
    Error.captureStackTrace(this, ResponseStatusCodeError)
    this.name = 'ResponseStatusCodeError'
    this.message = message || 'Response Status Code Error'
    this.code = 'UND_ERR_RESPONSE_STATUS_CODE'
    this.body = body
    this.status = statusCode
    this.statusCode = statusCode
    this.headers = headers
  }
}

class InvalidArgumentError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, InvalidArgumentError)
    this.name = 'InvalidArgumentError'
    this.message = message || 'Invalid Argument Error'
    this.code = 'UND_ERR_INVALID_ARG'
  }
}

class InvalidReturnValueError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, InvalidReturnValueError)
    this.name = 'InvalidReturnValueError'
    this.message = message || 'Invalid Return Value Error'
    this.code = 'UND_ERR_INVALID_RETURN_VALUE'
  }
}

class RequestAbortedError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, RequestAbortedError)
    this.name = 'AbortError'
    this.message = message || 'Request aborted'
    this.code = 'UND_ERR_ABORTED'
  }
}

class InformationalError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, InformationalError)
    this.name = 'InformationalError'
    this.message = message || 'Request information'
    this.code = 'UND_ERR_INFO'
  }
}

class RequestContentLengthMismatchError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, RequestContentLengthMismatchError)
    this.name = 'RequestContentLengthMismatchError'
    this.message = message || 'Request body length does not match content-length header'
    this.code = 'UND_ERR_REQ_CONTENT_LENGTH_MISMATCH'
  }
}

class ResponseContentLengthMismatchError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, ResponseContentLengthMismatchError)
    this.name = 'ResponseContentLengthMismatchError'
    this.message = message || 'Response body length does not match content-length header'
    this.code = 'UND_ERR_RES_CONTENT_LENGTH_MISMATCH'
  }
}

class ClientDestroyedError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, ClientDestroyedError)
    this.name = 'ClientDestroyedError'
    this.message = message || 'The client is destroyed'
    this.code = 'UND_ERR_DESTROYED'
  }
}

class ClientClosedError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, ClientClosedError)
    this.name = 'ClientClosedError'
    this.message = message || 'The client is closed'
    this.code = 'UND_ERR_CLOSED'
  }
}

class SocketError extends UndiciError {
  constructor (message, socket) {
    super(message)
    Error.captureStackTrace(this, SocketError)
    this.name = 'SocketError'
    this.message = message || 'Socket error'
    this.code = 'UND_ERR_SOCKET'
    this.socket = socket
  }
}

class NotSupportedError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, NotSupportedError)
    this.name = 'NotSupportedError'
    this.message = message || 'Not supported error'
    this.code = 'UND_ERR_NOT_SUPPORTED'
  }
}

class BalancedPoolMissingUpstreamError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, NotSupportedError)
    this.name = 'MissingUpstreamError'
    this.message = message || 'No upstream has been added to the BalancedPool'
    this.code = 'UND_ERR_BPL_MISSING_UPSTREAM'
  }
}

class HTTPParserError extends Error {
  constructor (message, code, data) {
    super(message)
    Error.captureStackTrace(this, HTTPParserError)
    this.name = 'HTTPParserError'
    this.code = code ? `HPE_${code}` : undefined
    this.data = data ? data.toString() : undefined
  }
}

class ResponseExceededMaxSizeError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, ResponseExceededMaxSizeError)
    this.name = 'ResponseExceededMaxSizeError'
    this.message = message || 'Response content exceeded max size'
    this.code = 'UND_ERR_RES_EXCEEDED_MAX_SIZE'
  }
}

class RequestRetryError extends UndiciError {
  constructor (message, code, { headers, data }) {
    super(message)
    Error.captureStackTrace(this, RequestRetryError)
    this.name = 'RequestRetryError'
    this.message = message || 'Request retry error'
    this.code = 'UND_ERR_REQ_RETRY'
    this.statusCode = code
    this.data = data
    this.headers = headers
  }
}

module.exports = {
  HTTPParserError,
  UndiciError,
  HeadersTimeoutError,
  HeadersOverflowError,
  BodyTimeoutError,
  RequestContentLengthMismatchError,
  ConnectTimeoutError,
  ResponseStatusCodeError,
  InvalidArgumentError,
  InvalidReturnValueError,
  RequestAbortedError,
  ClientDestroyedError,
  ClientClosedError,
  InformationalError,
  SocketError,
  NotSupportedError,
  ResponseContentLengthMismatchError,
  BalancedPoolMissingUpstreamError,
  ResponseExceededMaxSizeError,
  RequestRetryError
}


/***/ }),

/***/ 2905:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const {
  InvalidArgumentError,
  NotSupportedError
} = __nccwpck_require__(8045)
const assert = __nccwpck_require__(9491)
const { kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest } = __nccwpck_require__(2785)
const util = __nccwpck_require__(3983)

// tokenRegExp and headerCharRegex have been lifted from
// https://github.com/nodejs/node/blob/main/lib/_http_common.js

/**
 * Verifies that the given val is a valid HTTP token
 * per the rules defined in RFC 7230
 * See https://tools.ietf.org/html/rfc7230#section-3.2.6
 */
const tokenRegExp = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/

/**
 * Matches if val contains an invalid field-vchar
 *  field-value    = *( field-content / obs-fold )
 *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]
 *  field-vchar    = VCHAR / obs-text
 */
const headerCharRegex = /[^\t\x20-\x7e\x80-\xff]/

// Verifies that a given path is valid does not contain control chars \x00 to \x20
const invalidPathRegex = /[^\u0021-\u00ff]/

const kHandler = Symbol('handler')

const channels = {}

let extractBody

try {
  const diagnosticsChannel = __nccwpck_require__(7643)
  channels.create = diagnosticsChannel.channel('undici:request:create')
  channels.bodySent = diagnosticsChannel.channel('undici:request:bodySent')
  channels.headers = diagnosticsChannel.channel('undici:request:headers')
  channels.trailers = diagnosticsChannel.channel('undici:request:trailers')
  channels.error = diagnosticsChannel.channel('undici:request:error')
} catch {
  channels.create = { hasSubscribers: false }
  channels.bodySent = { hasSubscribers: false }
  channels.headers = { hasSubscribers: false }
  channels.trailers = { hasSubscribers: false }
  channels.error = { hasSubscribers: false }
}

class Request {
  constructor (origin, {
    path,
    method,
    body,
    headers,
    query,
    idempotent,
    blocking,
    upgrade,
    headersTimeout,
    bodyTimeout,
    reset,
    throwOnError,
    expectContinue
  }, handler) {
    if (typeof path !== 'string') {
      throw new InvalidArgumentError('path must be a string')
    } else if (
      path[0] !== '/' &&
      !(path.startsWith('http://') || path.startsWith('https://')) &&
      method !== 'CONNECT'
    ) {
      throw new InvalidArgumentError('path must be an absolute URL or start with a slash')
    } else if (invalidPathRegex.exec(path) !== null) {
      throw new InvalidArgumentError('invalid request path')
    }

    if (typeof method !== 'string') {
      throw new InvalidArgumentError('method must be a string')
    } else if (tokenRegExp.exec(method) === null) {
      throw new InvalidArgumentError('invalid request method')
    }

    if (upgrade && typeof upgrade !== 'string') {
      throw new InvalidArgumentError('upgrade must be a string')
    }

    if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) {
      throw new InvalidArgumentError('invalid headersTimeout')
    }

    if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) {
      throw new InvalidArgumentError('invalid bodyTimeout')
    }

    if (reset != null && typeof reset !== 'boolean') {
      throw new InvalidArgumentError('invalid reset')
    }

    if (expectContinue != null && typeof expectContinue !== 'boolean') {
      throw new InvalidArgumentError('invalid expectContinue')
    }

    this.headersTimeout = headersTimeout

    this.bodyTimeout = bodyTimeout

    this.throwOnError = throwOnError === true

    this.method = method

    this.abort = null

    if (body == null) {
      this.body = null
    } else if (util.isStream(body)) {
      this.body = body

      const rState = this.body._readableState
      if (!rState || !rState.autoDestroy) {
        this.endHandler = function autoDestroy () {
          util.destroy(this)
        }
        this.body.on('end', this.endHandler)
      }

      this.errorHandler = err => {
        if (this.abort) {
          this.abort(err)
        } else {
          this.error = err
        }
      }
      this.body.on('error', this.errorHandler)
    } else if (util.isBuffer(body)) {
      this.body = body.byteLength ? body : null
    } else if (ArrayBuffer.isView(body)) {
      this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null
    } else if (body instanceof ArrayBuffer) {
      this.body = body.byteLength ? Buffer.from(body) : null
    } else if (typeof body === 'string') {
      this.body = body.length ? Buffer.from(body) : null
    } else if (util.isFormDataLike(body) || util.isIterable(body) || util.isBlobLike(body)) {
      this.body = body
    } else {
      throw new InvalidArgumentError('body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable')
    }

    this.completed = false

    this.aborted = false

    this.upgrade = upgrade || null

    this.path = query ? util.buildURL(path, query) : path

    this.origin = origin

    this.idempotent = idempotent == null
      ? method === 'HEAD' || method === 'GET'
      : idempotent

    this.blocking = blocking == null ? false : blocking

    this.reset = reset == null ? null : reset

    this.host = null

    this.contentLength = null

    this.contentType = null

    this.headers = ''

    // Only for H2
    this.expectContinue = expectContinue != null ? expectContinue : false

    if (Array.isArray(headers)) {
      if (headers.length % 2 !== 0) {
        throw new InvalidArgumentError('headers array must be even')
      }
      for (let i = 0; i < headers.length; i += 2) {
        processHeader(this, headers[i], headers[i + 1])
      }
    } else if (headers && typeof headers === 'object') {
      const keys = Object.keys(headers)
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i]
        processHeader(this, key, headers[key])
      }
    } else if (headers != null) {
      throw new InvalidArgumentError('headers must be an object or an array')
    }

    if (util.isFormDataLike(this.body)) {
      if (util.nodeMajor < 16 || (util.nodeMajor === 16 && util.nodeMinor < 8)) {
        throw new InvalidArgumentError('Form-Data bodies are only supported in node v16.8 and newer.')
      }

      if (!extractBody) {
        extractBody = (__nccwpck_require__(1472).extractBody)
      }

      const [bodyStream, contentType] = extractBody(body)
      if (this.contentType == null) {
        this.contentType = contentType
        this.headers += `content-type: ${contentType}\r\n`
      }
      this.body = bodyStream.stream
      this.contentLength = bodyStream.length
    } else if (util.isBlobLike(body) && this.contentType == null && body.type) {
      this.contentType = body.type
      this.headers += `content-type: ${body.type}\r\n`
    }

    util.validateHandler(handler, method, upgrade)

    this.servername = util.getServerName(this.host)

    this[kHandler] = handler

    if (channels.create.hasSubscribers) {
      channels.create.publish({ request: this })
    }
  }

  onBodySent (chunk) {
    if (this[kHandler].onBodySent) {
      try {
        return this[kHandler].onBodySent(chunk)
      } catch (err) {
        this.abort(err)
      }
    }
  }

  onRequestSent () {
    if (channels.bodySent.hasSubscribers) {
      channels.bodySent.publish({ request: this })
    }

    if (this[kHandler].onRequestSent) {
      try {
        return this[kHandler].onRequestSent()
      } catch (err) {
        this.abort(err)
      }
    }
  }

  onConnect (abort) {
    assert(!this.aborted)
    assert(!this.completed)

    if (this.error) {
      abort(this.error)
    } else {
      this.abort = abort
      return this[kHandler].onConnect(abort)
    }
  }

  onHeaders (statusCode, headers, resume, statusText) {
    assert(!this.aborted)
    assert(!this.completed)

    if (channels.headers.hasSubscribers) {
      channels.headers.publish({ request: this, response: { statusCode, headers, statusText } })
    }

    try {
      return this[kHandler].onHeaders(statusCode, headers, resume, statusText)
    } catch (err) {
      this.abort(err)
    }
  }

  onData (chunk) {
    assert(!this.aborted)
    assert(!this.completed)

    try {
      return this[kHandler].onData(chunk)
    } catch (err) {
      this.abort(err)
      return false
    }
  }

  onUpgrade (statusCode, headers, socket) {
    assert(!this.aborted)
    assert(!this.completed)

    return this[kHandler].onUpgrade(statusCode, headers, socket)
  }

  onComplete (trailers) {
    this.onFinally()

    assert(!this.aborted)

    this.completed = true
    if (channels.trailers.hasSubscribers) {
      channels.trailers.publish({ request: this, trailers })
    }

    try {
      return this[kHandler].onComplete(trailers)
    } catch (err) {
      // TODO (fix): This might be a bad idea?
      this.onError(err)
    }
  }

  onError (error) {
    this.onFinally()

    if (channels.error.hasSubscribers) {
      channels.error.publish({ request: this, error })
    }

    if (this.aborted) {
      return
    }
    this.aborted = true

    return this[kHandler].onError(error)
  }

  onFinally () {
    if (this.errorHandler) {
      this.body.off('error', this.errorHandler)
      this.errorHandler = null
    }

    if (this.endHandler) {
      this.body.off('end', this.endHandler)
      this.endHandler = null
    }
  }

  // TODO: adjust to support H2
  addHeader (key, value) {
    processHeader(this, key, value)
    return this
  }

  static [kHTTP1BuildRequest] (origin, opts, handler) {
    // TODO: Migrate header parsing here, to make Requests
    // HTTP agnostic
    return new Request(origin, opts, handler)
  }

  static [kHTTP2BuildRequest] (origin, opts, handler) {
    const headers = opts.headers
    opts = { ...opts, headers: null }

    const request = new Request(origin, opts, handler)

    request.headers = {}

    if (Array.isArray(headers)) {
      if (headers.length % 2 !== 0) {
        throw new InvalidArgumentError('headers array must be even')
      }
      for (let i = 0; i < headers.length; i += 2) {
        processHeader(request, headers[i], headers[i + 1], true)
      }
    } else if (headers && typeof headers === 'object') {
      const keys = Object.keys(headers)
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i]
        processHeader(request, key, headers[key], true)
      }
    } else if (headers != null) {
      throw new InvalidArgumentError('headers must be an object or an array')
    }

    return request
  }

  static [kHTTP2CopyHeaders] (raw) {
    const rawHeaders = raw.split('\r\n')
    const headers = {}

    for (const header of rawHeaders) {
      const [key, value] = header.split(': ')

      if (value == null || value.length === 0) continue

      if (headers[key]) headers[key] += `,${value}`
      else headers[key] = value
    }

    return headers
  }
}

function processHeaderValue (key, val, skipAppend) {
  if (val && typeof val === 'object') {
    throw new InvalidArgumentError(`invalid ${key} header`)
  }

  val = val != null ? `${val}` : ''

  if (headerCharRegex.exec(val) !== null) {
    throw new InvalidArgumentError(`invalid ${key} header`)
  }

  return skipAppend ? val : `${key}: ${val}\r\n`
}

function processHeader (request, key, val, skipAppend = false) {
  if (val && (typeof val === 'object' && !Array.isArray(val))) {
    throw new InvalidArgumentError(`invalid ${key} header`)
  } else if (val === undefined) {
    return
  }

  if (
    request.host === null &&
    key.length === 4 &&
    key.toLowerCase() === 'host'
  ) {
    if (headerCharRegex.exec(val) !== null) {
      throw new InvalidArgumentError(`invalid ${key} header`)
    }
    // Consumed by Client
    request.host = val
  } else if (
    request.contentLength === null &&
    key.length === 14 &&
    key.toLowerCase() === 'content-length'
  ) {
    request.contentLength = parseInt(val, 10)
    if (!Number.isFinite(request.contentLength)) {
      throw new InvalidArgumentError('invalid content-length header')
    }
  } else if (
    request.contentType === null &&
    key.length === 12 &&
    key.toLowerCase() === 'content-type'
  ) {
    request.contentType = val
    if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend)
    else request.headers += processHeaderValue(key, val)
  } else if (
    key.length === 17 &&
    key.toLowerCase() === 'transfer-encoding'
  ) {
    throw new InvalidArgumentError('invalid transfer-encoding header')
  } else if (
    key.length === 10 &&
    key.toLowerCase() === 'connection'
  ) {
    const value = typeof val === 'string' ? val.toLowerCase() : null
    if (value !== 'close' && value !== 'keep-alive') {
      throw new InvalidArgumentError('invalid connection header')
    } else if (value === 'close') {
      request.reset = true
    }
  } else if (
    key.length === 10 &&
    key.toLowerCase() === 'keep-alive'
  ) {
    throw new InvalidArgumentError('invalid keep-alive header')
  } else if (
    key.length === 7 &&
    key.toLowerCase() === 'upgrade'
  ) {
    throw new InvalidArgumentError('invalid upgrade header')
  } else if (
    key.length === 6 &&
    key.toLowerCase() === 'expect'
  ) {
    throw new NotSupportedError('expect header not supported')
  } else if (tokenRegExp.exec(key) === null) {
    throw new InvalidArgumentError('invalid header key')
  } else {
    if (Array.isArray(val)) {
      for (let i = 0; i < val.length; i++) {
        if (skipAppend) {
          if (request.headers[key]) request.headers[key] += `,${processHeaderValue(key, val[i], skipAppend)}`
          else request.headers[key] = processHeaderValue(key, val[i], skipAppend)
        } else {
          request.headers += processHeaderValue(key, val[i])
        }
      }
    } else {
      if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend)
      else request.headers += processHeaderValue(key, val)
    }
  }
}

module.exports = Request


/***/ }),

/***/ 2785:
/***/ ((module) => {

module.exports = {
  kClose: Symbol('close'),
  kDestroy: Symbol('destroy'),
  kDispatch: Symbol('dispatch'),
  kUrl: Symbol('url'),
  kWriting: Symbol('writing'),
  kResuming: Symbol('resuming'),
  kQueue: Symbol('queue'),
  kConnect: Symbol('connect'),
  kConnecting: Symbol('connecting'),
  kHeadersList: Symbol('headers list'),
  kKeepAliveDefaultTimeout: Symbol('default keep alive timeout'),
  kKeepAliveMaxTimeout: Symbol('max keep alive timeout'),
  kKeepAliveTimeoutThreshold: Symbol('keep alive timeout threshold'),
  kKeepAliveTimeoutValue: Symbol('keep alive timeout'),
  kKeepAlive: Symbol('keep alive'),
  kHeadersTimeout: Symbol('headers timeout'),
  kBodyTimeout: Symbol('body timeout'),
  kServerName: Symbol('server name'),
  kLocalAddress: Symbol('local address'),
  kHost: Symbol('host'),
  kNoRef: Symbol('no ref'),
  kBodyUsed: Symbol('used'),
  kRunning: Symbol('running'),
  kBlocking: Symbol('blocking'),
  kPending: Symbol('pending'),
  kSize: Symbol('size'),
  kBusy: Symbol('busy'),
  kQueued: Symbol('queued'),
  kFree: Symbol('free'),
  kConnected: Symbol('connected'),
  kClosed: Symbol('closed'),
  kNeedDrain: Symbol('need drain'),
  kReset: Symbol('reset'),
  kDestroyed: Symbol.for('nodejs.stream.destroyed'),
  kMaxHeadersSize: Symbol('max headers size'),
  kRunningIdx: Symbol('running index'),
  kPendingIdx: Symbol('pending index'),
  kError: Symbol('error'),
  kClients: Symbol('clients'),
  kClient: Symbol('client'),
  kParser: Symbol('parser'),
  kOnDestroyed: Symbol('destroy callbacks'),
  kPipelining: Symbol('pipelining'),
  kSocket: Symbol('socket'),
  kHostHeader: Symbol('host header'),
  kConnector: Symbol('connector'),
  kStrictContentLength: Symbol('strict content length'),
  kMaxRedirections: Symbol('maxRedirections'),
  kMaxRequests: Symbol('maxRequestsPerClient'),
  kProxy: Symbol('proxy agent options'),
  kCounter: Symbol('socket request counter'),
  kInterceptors: Symbol('dispatch interceptors'),
  kMaxResponseSize: Symbol('max response size'),
  kHTTP2Session: Symbol('http2Session'),
  kHTTP2SessionState: Symbol('http2Session state'),
  kHTTP2BuildRequest: Symbol('http2 build request'),
  kHTTP1BuildRequest: Symbol('http1 build request'),
  kHTTP2CopyHeaders: Symbol('http2 copy headers'),
  kHTTPConnVersion: Symbol('http connection version'),
  kRetryHandlerDefaultRetry: Symbol('retry agent default retry'),
  kConstruct: Symbol('constructable')
}


/***/ }),

/***/ 3983:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const assert = __nccwpck_require__(9491)
const { kDestroyed, kBodyUsed } = __nccwpck_require__(2785)
const { IncomingMessage } = __nccwpck_require__(3685)
const stream = __nccwpck_require__(2781)
const net = __nccwpck_require__(1808)
const { InvalidArgumentError } = __nccwpck_require__(8045)
const { Blob } = __nccwpck_require__(4300)
const nodeUtil = __nccwpck_require__(3837)
const { stringify } = __nccwpck_require__(3477)
const { headerNameLowerCasedRecord } = __nccwpck_require__(4462)

const [nodeMajor, nodeMinor] = process.versions.node.split('.').map(v => Number(v))

function nop () {}

function isStream (obj) {
  return obj && typeof obj === 'object' && typeof obj.pipe === 'function' && typeof obj.on === 'function'
}

// based on https://github.com/node-fetch/fetch-blob/blob/8ab587d34080de94140b54f07168451e7d0b655e/index.js#L229-L241 (MIT License)
function isBlobLike (object) {
  return (Blob && object instanceof Blob) || (
    object &&
    typeof object === 'object' &&
    (typeof object.stream === 'function' ||
      typeof object.arrayBuffer === 'function') &&
    /^(Blob|File)$/.test(object[Symbol.toStringTag])
  )
}

function buildURL (url, queryParams) {
  if (url.includes('?') || url.includes('#')) {
    throw new Error('Query params cannot be passed when url already contains "?" or "#".')
  }

  const stringified = stringify(queryParams)

  if (stringified) {
    url += '?' + stringified
  }

  return url
}

function parseURL (url) {
  if (typeof url === 'string') {
    url = new URL(url)

    if (!/^https?:/.test(url.origin || url.protocol)) {
      throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.')
    }

    return url
  }

  if (!url || typeof url !== 'object') {
    throw new InvalidArgumentError('Invalid URL: The URL argument must be a non-null object.')
  }

  if (!/^https?:/.test(url.origin || url.protocol)) {
    throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.')
  }

  if (!(url instanceof URL)) {
    if (url.port != null && url.port !== '' && !Number.isFinite(parseInt(url.port))) {
      throw new InvalidArgumentError('Invalid URL: port must be a valid integer or a string representation of an integer.')
    }

    if (url.path != null && typeof url.path !== 'string') {
      throw new InvalidArgumentError('Invalid URL path: the path must be a string or null/undefined.')
    }

    if (url.pathname != null && typeof url.pathname !== 'string') {
      throw new InvalidArgumentError('Invalid URL pathname: the pathname must be a string or null/undefined.')
    }

    if (url.hostname != null && typeof url.hostname !== 'string') {
      throw new InvalidArgumentError('Invalid URL hostname: the hostname must be a string or null/undefined.')
    }

    if (url.origin != null && typeof url.origin !== 'string') {
      throw new InvalidArgumentError('Invalid URL origin: the origin must be a string or null/undefined.')
    }

    const port = url.port != null
      ? url.port
      : (url.protocol === 'https:' ? 443 : 80)
    let origin = url.origin != null
      ? url.origin
      : `${url.protocol}//${url.hostname}:${port}`
    let path = url.path != null
      ? url.path
      : `${url.pathname || ''}${url.search || ''}`

    if (origin.endsWith('/')) {
      origin = origin.substring(0, origin.length - 1)
    }

    if (path && !path.startsWith('/')) {
      path = `/${path}`
    }
    // new URL(path, origin) is unsafe when `path` contains an absolute URL
    // From https://developer.mozilla.org/en-US/docs/Web/API/URL/URL:
    // If first parameter is a relative URL, second param is required, and will be used as the base URL.
    // If first parameter is an absolute URL, a given second param will be ignored.
    url = new URL(origin + path)
  }

  return url
}

function parseOrigin (url) {
  url = parseURL(url)

  if (url.pathname !== '/' || url.search || url.hash) {
    throw new InvalidArgumentError('invalid url')
  }

  return url
}

function getHostname (host) {
  if (host[0] === '[') {
    const idx = host.indexOf(']')

    assert(idx !== -1)
    return host.substring(1, idx)
  }

  const idx = host.indexOf(':')
  if (idx === -1) return host

  return host.substring(0, idx)
}

// IP addresses are not valid server names per RFC6066
// > Currently, the only server names supported are DNS hostnames
function getServerName (host) {
  if (!host) {
    return null
  }

  assert.strictEqual(typeof host, 'string')

  const servername = getHostname(host)
  if (net.isIP(servername)) {
    return ''
  }

  return servername
}

function deepClone (obj) {
  return JSON.parse(JSON.stringify(obj))
}

function isAsyncIterable (obj) {
  return !!(obj != null && typeof obj[Symbol.asyncIterator] === 'function')
}

function isIterable (obj) {
  return !!(obj != null && (typeof obj[Symbol.iterator] === 'function' || typeof obj[Symbol.asyncIterator] === 'function'))
}

function bodyLength (body) {
  if (body == null) {
    return 0
  } else if (isStream(body)) {
    const state = body._readableState
    return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length)
      ? state.length
      : null
  } else if (isBlobLike(body)) {
    return body.size != null ? body.size : null
  } else if (isBuffer(body)) {
    return body.byteLength
  }

  return null
}

function isDestroyed (stream) {
  return !stream || !!(stream.destroyed || stream[kDestroyed])
}

function isReadableAborted (stream) {
  const state = stream && stream._readableState
  return isDestroyed(stream) && state && !state.endEmitted
}

function destroy (stream, err) {
  if (stream == null || !isStream(stream) || isDestroyed(stream)) {
    return
  }

  if (typeof stream.destroy === 'function') {
    if (Object.getPrototypeOf(stream).constructor === IncomingMessage) {
      // See: https://github.com/nodejs/node/pull/38505/files
      stream.socket = null
    }

    stream.destroy(err)
  } else if (err) {
    process.nextTick((stream, err) => {
      stream.emit('error', err)
    }, stream, err)
  }

  if (stream.destroyed !== true) {
    stream[kDestroyed] = true
  }
}

const KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/
function parseKeepAliveTimeout (val) {
  const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR)
  return m ? parseInt(m[1], 10) * 1000 : null
}

/**
 * Retrieves a header name and returns its lowercase value.
 * @param {string | Buffer} value Header name
 * @returns {string}
 */
function headerNameToString (value) {
  return headerNameLowerCasedRecord[value] || value.toLowerCase()
}

function parseHeaders (headers, obj = {}) {
  // For H2 support
  if (!Array.isArray(headers)) return headers

  for (let i = 0; i < headers.length; i += 2) {
    const key = headers[i].toString().toLowerCase()
    let val = obj[key]

    if (!val) {
      if (Array.isArray(headers[i + 1])) {
        obj[key] = headers[i + 1].map(x => x.toString('utf8'))
      } else {
        obj[key] = headers[i + 1].toString('utf8')
      }
    } else {
      if (!Array.isArray(val)) {
        val = [val]
        obj[key] = val
      }
      val.push(headers[i + 1].toString('utf8'))
    }
  }

  // See https://github.com/nodejs/node/pull/46528
  if ('content-length' in obj && 'content-disposition' in obj) {
    obj['content-disposition'] = Buffer.from(obj['content-disposition']).toString('latin1')
  }

  return obj
}

function parseRawHeaders (headers) {
  const ret = []
  let hasContentLength = false
  let contentDispositionIdx = -1

  for (let n = 0; n < headers.length; n += 2) {
    const key = headers[n + 0].toString()
    const val = headers[n + 1].toString('utf8')

    if (key.length === 14 && (key === 'content-length' || key.toLowerCase() === 'content-length')) {
      ret.push(key, val)
      hasContentLength = true
    } else if (key.length === 19 && (key === 'content-disposition' || key.toLowerCase() === 'content-disposition')) {
      contentDispositionIdx = ret.push(key, val) - 1
    } else {
      ret.push(key, val)
    }
  }

  // See https://github.com/nodejs/node/pull/46528
  if (hasContentLength && contentDispositionIdx !== -1) {
    ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString('latin1')
  }

  return ret
}

function isBuffer (buffer) {
  // See, https://github.com/mcollina/undici/pull/319
  return buffer instanceof Uint8Array || Buffer.isBuffer(buffer)
}

function validateHandler (handler, method, upgrade) {
  if (!handler || typeof handler !== 'object') {
    throw new InvalidArgumentError('handler must be an object')
  }

  if (typeof handler.onConnect !== 'function') {
    throw new InvalidArgumentError('invalid onConnect method')
  }

  if (typeof handler.onError !== 'function') {
    throw new InvalidArgumentError('invalid onError method')
  }

  if (typeof handler.onBodySent !== 'function' && handler.onBodySent !== undefined) {
    throw new InvalidArgumentError('invalid onBodySent method')
  }

  if (upgrade || method === 'CONNECT') {
    if (typeof handler.onUpgrade !== 'function') {
      throw new InvalidArgumentError('invalid onUpgrade method')
    }
  } else {
    if (typeof handler.onHeaders !== 'function') {
      throw new InvalidArgumentError('invalid onHeaders method')
    }

    if (typeof handler.onData !== 'function') {
      throw new InvalidArgumentError('invalid onData method')
    }

    if (typeof handler.onComplete !== 'function') {
      throw new InvalidArgumentError('invalid onComplete method')
    }
  }
}

// A body is disturbed if it has been read from and it cannot
// be re-used without losing state or data.
function isDisturbed (body) {
  return !!(body && (
    stream.isDisturbed
      ? stream.isDisturbed(body) || body[kBodyUsed] // TODO (fix): Why is body[kBodyUsed] needed?
      : body[kBodyUsed] ||
        body.readableDidRead ||
        (body._readableState && body._readableState.dataEmitted) ||
        isReadableAborted(body)
  ))
}

function isErrored (body) {
  return !!(body && (
    stream.isErrored
      ? stream.isErrored(body)
      : /state: 'errored'/.test(nodeUtil.inspect(body)
      )))
}

function isReadable (body) {
  return !!(body && (
    stream.isReadable
      ? stream.isReadable(body)
      : /state: 'readable'/.test(nodeUtil.inspect(body)
      )))
}

function getSocketInfo (socket) {
  return {
    localAddress: socket.localAddress,
    localPort: socket.localPort,
    remoteAddress: socket.remoteAddress,
    remotePort: socket.remotePort,
    remoteFamily: socket.remoteFamily,
    timeout: socket.timeout,
    bytesWritten: socket.bytesWritten,
    bytesRead: socket.bytesRead
  }
}

async function * convertIterableToBuffer (iterable) {
  for await (const chunk of iterable) {
    yield Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk)
  }
}

let ReadableStream
function ReadableStreamFrom (iterable) {
  if (!ReadableStream) {
    ReadableStream = (__nccwpck_require__(5356).ReadableStream)
  }

  if (ReadableStream.from) {
    return ReadableStream.from(convertIterableToBuffer(iterable))
  }

  let iterator
  return new ReadableStream(
    {
      async start () {
        iterator = iterable[Symbol.asyncIterator]()
      },
      async pull (controller) {
        const { done, value } = await iterator.next()
        if (done) {
          queueMicrotask(() => {
            controller.close()
          })
        } else {
          const buf = Buffer.isBuffer(value) ? value : Buffer.from(value)
          controller.enqueue(new Uint8Array(buf))
        }
        return controller.desiredSize > 0
      },
      async cancel (reason) {
        await iterator.return()
      }
    },
    0
  )
}

// The chunk should be a FormData instance and contains
// all the required methods.
function isFormDataLike (object) {
  return (
    object &&
    typeof object === 'object' &&
    typeof object.append === 'function' &&
    typeof object.delete === 'function' &&
    typeof object.get === 'function' &&
    typeof object.getAll === 'function' &&
    typeof object.has === 'function' &&
    typeof object.set === 'function' &&
    object[Symbol.toStringTag] === 'FormData'
  )
}

function throwIfAborted (signal) {
  if (!signal) { return }
  if (typeof signal.throwIfAborted === 'function') {
    signal.throwIfAborted()
  } else {
    if (signal.aborted) {
      // DOMException not available < v17.0.0
      const err = new Error('The operation was aborted')
      err.name = 'AbortError'
      throw err
    }
  }
}

function addAbortListener (signal, listener) {
  if ('addEventListener' in signal) {
    signal.addEventListener('abort', listener, { once: true })
    return () => signal.removeEventListener('abort', listener)
  }
  signal.addListener('abort', listener)
  return () => signal.removeListener('abort', listener)
}

const hasToWellFormed = !!String.prototype.toWellFormed

/**
 * @param {string} val
 */
function toUSVString (val) {
  if (hasToWellFormed) {
    return `${val}`.toWellFormed()
  } else if (nodeUtil.toUSVString) {
    return nodeUtil.toUSVString(val)
  }

  return `${val}`
}

// Parsed accordingly to RFC 9110
// https://www.rfc-editor.org/rfc/rfc9110#field.content-range
function parseRangeHeader (range) {
  if (range == null || range === '') return { start: 0, end: null, size: null }

  const m = range ? range.match(/^bytes (\d+)-(\d+)\/(\d+)?$/) : null
  return m
    ? {
        start: parseInt(m[1]),
        end: m[2] ? parseInt(m[2]) : null,
        size: m[3] ? parseInt(m[3]) : null
      }
    : null
}

const kEnumerableProperty = Object.create(null)
kEnumerableProperty.enumerable = true

module.exports = {
  kEnumerableProperty,
  nop,
  isDisturbed,
  isErrored,
  isReadable,
  toUSVString,
  isReadableAborted,
  isBlobLike,
  parseOrigin,
  parseURL,
  getServerName,
  isStream,
  isIterable,
  isAsyncIterable,
  isDestroyed,
  headerNameToString,
  parseRawHeaders,
  parseHeaders,
  parseKeepAliveTimeout,
  destroy,
  bodyLength,
  deepClone,
  ReadableStreamFrom,
  isBuffer,
  validateHandler,
  getSocketInfo,
  isFormDataLike,
  buildURL,
  throwIfAborted,
  addAbortListener,
  parseRangeHeader,
  nodeMajor,
  nodeMinor,
  nodeHasAutoSelectFamily: nodeMajor > 18 || (nodeMajor === 18 && nodeMinor >= 13),
  safeHTTPMethods: ['GET', 'HEAD', 'OPTIONS', 'TRACE']
}


/***/ }),

/***/ 4839:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const Dispatcher = __nccwpck_require__(412)
const {
  ClientDestroyedError,
  ClientClosedError,
  InvalidArgumentError
} = __nccwpck_require__(8045)
const { kDestroy, kClose, kDispatch, kInterceptors } = __nccwpck_require__(2785)

const kDestroyed = Symbol('destroyed')
const kClosed = Symbol('closed')
const kOnDestroyed = Symbol('onDestroyed')
const kOnClosed = Symbol('onClosed')
const kInterceptedDispatch = Symbol('Intercepted Dispatch')

class DispatcherBase extends Dispatcher {
  constructor () {
    super()

    this[kDestroyed] = false
    this[kOnDestroyed] = null
    this[kClosed] = false
    this[kOnClosed] = []
  }

  get destroyed () {
    return this[kDestroyed]
  }

  get closed () {
    return this[kClosed]
  }

  get interceptors () {
    return this[kInterceptors]
  }

  set interceptors (newInterceptors) {
    if (newInterceptors) {
      for (let i = newInterceptors.length - 1; i >= 0; i--) {
        const interceptor = this[kInterceptors][i]
        if (typeof interceptor !== 'function') {
          throw new InvalidArgumentError('interceptor must be an function')
        }
      }
    }

    this[kInterceptors] = newInterceptors
  }

  close (callback) {
    if (callback === undefined) {
      return new Promise((resolve, reject) => {
        this.close((err, data) => {
          return err ? reject(err) : resolve(data)
        })
      })
    }

    if (typeof callback !== 'function') {
      throw new InvalidArgumentError('invalid callback')
    }

    if (this[kDestroyed]) {
      queueMicrotask(() => callback(new ClientDestroyedError(), null))
      return
    }

    if (this[kClosed]) {
      if (this[kOnClosed]) {
        this[kOnClosed].push(callback)
      } else {
        queueMicrotask(() => callback(null, null))
      }
      return
    }

    this[kClosed] = true
    this[kOnClosed].push(callback)

    const onClosed = () => {
      const callbacks = this[kOnClosed]
      this[kOnClosed] = null
      for (let i = 0; i < callbacks.length; i++) {
        callbacks[i](null, null)
      }
    }

    // Should not error.
    this[kClose]()
      .then(() => this.destroy())
      .then(() => {
        queueMicrotask(onClosed)
      })
  }

  destroy (err, callback) {
    if (typeof err === 'function') {
      callback = err
      err = null
    }

    if (callback === undefined) {
      return new Promise((resolve, reject) => {
        this.destroy(err, (err, data) => {
          return err ? /* istanbul ignore next: should never error */ reject(err) : resolve(data)
        })
      })
    }

    if (typeof callback !== 'function') {
      throw new InvalidArgumentError('invalid callback')
    }

    if (this[kDestroyed]) {
      if (this[kOnDestroyed]) {
        this[kOnDestroyed].push(callback)
      } else {
        queueMicrotask(() => callback(null, null))
      }
      return
    }

    if (!err) {
      err = new ClientDestroyedError()
    }

    this[kDestroyed] = true
    this[kOnDestroyed] = this[kOnDestroyed] || []
    this[kOnDestroyed].push(callback)

    const onDestroyed = () => {
      const callbacks = this[kOnDestroyed]
      this[kOnDestroyed] = null
      for (let i = 0; i < callbacks.length; i++) {
        callbacks[i](null, null)
      }
    }

    // Should not error.
    this[kDestroy](err).then(() => {
      queueMicrotask(onDestroyed)
    })
  }

  [kInterceptedDispatch] (opts, handler) {
    if (!this[kInterceptors] || this[kInterceptors].length === 0) {
      this[kInterceptedDispatch] = this[kDispatch]
      return this[kDispatch](opts, handler)
    }

    let dispatch = this[kDispatch].bind(this)
    for (let i = this[kInterceptors].length - 1; i >= 0; i--) {
      dispatch = this[kInterceptors][i](dispatch)
    }
    this[kInterceptedDispatch] = dispatch
    return dispatch(opts, handler)
  }

  dispatch (opts, handler) {
    if (!handler || typeof handler !== 'object') {
      throw new InvalidArgumentError('handler must be an object')
    }

    try {
      if (!opts || typeof opts !== 'object') {
        throw new InvalidArgumentError('opts must be an object.')
      }

      if (this[kDestroyed] || this[kOnDestroyed]) {
        throw new ClientDestroyedError()
      }

      if (this[kClosed]) {
        throw new ClientClosedError()
      }

      return this[kInterceptedDispatch](opts, handler)
    } catch (err) {
      if (typeof handler.onError !== 'function') {
        throw new InvalidArgumentError('invalid onError method')
      }

      handler.onError(err)

      return false
    }
  }
}

module.exports = DispatcherBase


/***/ }),

/***/ 412:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const EventEmitter = __nccwpck_require__(2361)

class Dispatcher extends EventEmitter {
  dispatch () {
    throw new Error('not implemented')
  }

  close () {
    throw new Error('not implemented')
  }

  destroy () {
    throw new Error('not implemented')
  }
}

module.exports = Dispatcher


/***/ }),

/***/ 1472:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const Busboy = __nccwpck_require__(727)
const util = __nccwpck_require__(3983)
const {
  ReadableStreamFrom,
  isBlobLike,
  isReadableStreamLike,
  readableStreamClose,
  createDeferredPromise,
  fullyReadBody
} = __nccwpck_require__(2538)
const { FormData } = __nccwpck_require__(2015)
const { kState } = __nccwpck_require__(5861)
const { webidl } = __nccwpck_require__(1744)
const { DOMException, structuredClone } = __nccwpck_require__(1037)
const { Blob, File: NativeFile } = __nccwpck_require__(4300)
const { kBodyUsed } = __nccwpck_require__(2785)
const assert = __nccwpck_require__(9491)
const { isErrored } = __nccwpck_require__(3983)
const { isUint8Array, isArrayBuffer } = __nccwpck_require__(9830)
const { File: UndiciFile } = __nccwpck_require__(8511)
const { parseMIMEType, serializeAMimeType } = __nccwpck_require__(685)

let ReadableStream = globalThis.ReadableStream

/** @type {globalThis['File']} */
const File = NativeFile ?? UndiciFile
const textEncoder = new TextEncoder()
const textDecoder = new TextDecoder()

// https://fetch.spec.whatwg.org/#concept-bodyinit-extract
function extractBody (object, keepalive = false) {
  if (!ReadableStream) {
    ReadableStream = (__nccwpck_require__(5356).ReadableStream)
  }

  // 1. Let stream be null.
  let stream = null

  // 2. If object is a ReadableStream object, then set stream to object.
  if (object instanceof ReadableStream) {
    stream = object
  } else if (isBlobLike(object)) {
    // 3. Otherwise, if object is a Blob object, set stream to the
    //    result of running object’s get stream.
    stream = object.stream()
  } else {
    // 4. Otherwise, set stream to a new ReadableStream object, and set
    //    up stream.
    stream = new ReadableStream({
      async pull (controller) {
        controller.enqueue(
          typeof source === 'string' ? textEncoder.encode(source) : source
        )
        queueMicrotask(() => readableStreamClose(controller))
      },
      start () {},
      type: undefined
    })
  }

  // 5. Assert: stream is a ReadableStream object.
  assert(isReadableStreamLike(stream))

  // 6. Let action be null.
  let action = null

  // 7. Let source be null.
  let source = null

  // 8. Let length be null.
  let length = null

  // 9. Let type be null.
  let type = null

  // 10. Switch on object:
  if (typeof object === 'string') {
    // Set source to the UTF-8 encoding of object.
    // Note: setting source to a Uint8Array here breaks some mocking assumptions.
    source = object

    // Set type to `text/plain;charset=UTF-8`.
    type = 'text/plain;charset=UTF-8'
  } else if (object instanceof URLSearchParams) {
    // URLSearchParams

    // spec says to run application/x-www-form-urlencoded on body.list
    // this is implemented in Node.js as apart of an URLSearchParams instance toString method
    // See: https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L490
    // and https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L1100

    // Set source to the result of running the application/x-www-form-urlencoded serializer with object’s list.
    source = object.toString()

    // Set type to `application/x-www-form-urlencoded;charset=UTF-8`.
    type = 'application/x-www-form-urlencoded;charset=UTF-8'
  } else if (isArrayBuffer(object)) {
    // BufferSource/ArrayBuffer

    // Set source to a copy of the bytes held by object.
    source = new Uint8Array(object.slice())
  } else if (ArrayBuffer.isView(object)) {
    // BufferSource/ArrayBufferView

    // Set source to a copy of the bytes held by object.
    source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength))
  } else if (util.isFormDataLike(object)) {
    const boundary = `----formdata-undici-0${`${Math.floor(Math.random() * 1e11)}`.padStart(11, '0')}`
    const prefix = `--${boundary}\r\nContent-Disposition: form-data`

    /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
    const escape = (str) =>
      str.replace(/\n/g, '%0A').replace(/\r/g, '%0D').replace(/"/g, '%22')
    const normalizeLinefeeds = (value) => value.replace(/\r?\n|\r/g, '\r\n')

    // Set action to this step: run the multipart/form-data
    // encoding algorithm, with object’s entry list and UTF-8.
    // - This ensures that the body is immutable and can't be changed afterwords
    // - That the content-length is calculated in advance.
    // - And that all parts are pre-encoded and ready to be sent.

    const blobParts = []
    const rn = new Uint8Array([13, 10]) // '\r\n'
    length = 0
    let hasUnknownSizeValue = false

    for (const [name, value] of object) {
      if (typeof value === 'string') {
        const chunk = textEncoder.encode(prefix +
          `; name="${escape(normalizeLinefeeds(name))}"` +
          `\r\n\r\n${normalizeLinefeeds(value)}\r\n`)
        blobParts.push(chunk)
        length += chunk.byteLength
      } else {
        const chunk = textEncoder.encode(`${prefix}; name="${escape(normalizeLinefeeds(name))}"` +
          (value.name ? `; filename="${escape(value.name)}"` : '') + '\r\n' +
          `Content-Type: ${
            value.type || 'application/octet-stream'
          }\r\n\r\n`)
        blobParts.push(chunk, value, rn)
        if (typeof value.size === 'number') {
          length += chunk.byteLength + value.size + rn.byteLength
        } else {
          hasUnknownSizeValue = true
        }
      }
    }

    const chunk = textEncoder.encode(`--${boundary}--`)
    blobParts.push(chunk)
    length += chunk.byteLength
    if (hasUnknownSizeValue) {
      length = null
    }

    // Set source to object.
    source = object

    action = async function * () {
      for (const part of blobParts) {
        if (part.stream) {
          yield * part.stream()
        } else {
          yield part
        }
      }
    }

    // Set type to `multipart/form-data; boundary=`,
    // followed by the multipart/form-data boundary string generated
    // by the multipart/form-data encoding algorithm.
    type = 'multipart/form-data; boundary=' + boundary
  } else if (isBlobLike(object)) {
    // Blob

    // Set source to object.
    source = object

    // Set length to object’s size.
    length = object.size

    // If object’s type attribute is not the empty byte sequence, set
    // type to its value.
    if (object.type) {
      type = object.type
    }
  } else if (typeof object[Symbol.asyncIterator] === 'function') {
    // If keepalive is true, then throw a TypeError.
    if (keepalive) {
      throw new TypeError('keepalive')
    }

    // If object is disturbed or locked, then throw a TypeError.
    if (util.isDisturbed(object) || object.locked) {
      throw new TypeError(
        'Response body object should not be disturbed or locked'
      )
    }

    stream =
      object instanceof ReadableStream ? object : ReadableStreamFrom(object)
  }

  // 11. If source is a byte sequence, then set action to a
  // step that returns source and length to source’s length.
  if (typeof source === 'string' || util.isBuffer(source)) {
    length = Buffer.byteLength(source)
  }

  // 12. If action is non-null, then run these steps in in parallel:
  if (action != null) {
    // Run action.
    let iterator
    stream = new ReadableStream({
      async start () {
        iterator = action(object)[Symbol.asyncIterator]()
      },
      async pull (controller) {
        const { value, done } = await iterator.next()
        if (done) {
          // When running action is done, close stream.
          queueMicrotask(() => {
            controller.close()
          })
        } else {
          // Whenever one or more bytes are available and stream is not errored,
          // enqueue a Uint8Array wrapping an ArrayBuffer containing the available
          // bytes into stream.
          if (!isErrored(stream)) {
            controller.enqueue(new Uint8Array(value))
          }
        }
        return controller.desiredSize > 0
      },
      async cancel (reason) {
        await iterator.return()
      },
      type: undefined
    })
  }

  // 13. Let body be a body whose stream is stream, source is source,
  // and length is length.
  const body = { stream, source, length }

  // 14. Return (body, type).
  return [body, type]
}

// https://fetch.spec.whatwg.org/#bodyinit-safely-extract
function safelyExtractBody (object, keepalive = false) {
  if (!ReadableStream) {
    // istanbul ignore next
    ReadableStream = (__nccwpck_require__(5356).ReadableStream)
  }

  // To safely extract a body and a `Content-Type` value from
  // a byte sequence or BodyInit object object, run these steps:

  // 1. If object is a ReadableStream object, then:
  if (object instanceof ReadableStream) {
    // Assert: object is neither disturbed nor locked.
    // istanbul ignore next
    assert(!util.isDisturbed(object), 'The body has already been consumed.')
    // istanbul ignore next
    assert(!object.locked, 'The stream is locked.')
  }

  // 2. Return the results of extracting object.
  return extractBody(object, keepalive)
}

function cloneBody (body) {
  // To clone a body body, run these steps:

  // https://fetch.spec.whatwg.org/#concept-body-clone

  // 1. Let « out1, out2 » be the result of teeing body’s stream.
  const [out1, out2] = body.stream.tee()
  const out2Clone = structuredClone(out2, { transfer: [out2] })
  // This, for whatever reasons, unrefs out2Clone which allows
  // the process to exit by itself.
  const [, finalClone] = out2Clone.tee()

  // 2. Set body’s stream to out1.
  body.stream = out1

  // 3. Return a body whose stream is out2 and other members are copied from body.
  return {
    stream: finalClone,
    length: body.length,
    source: body.source
  }
}

async function * consumeBody (body) {
  if (body) {
    if (isUint8Array(body)) {
      yield body
    } else {
      const stream = body.stream

      if (util.isDisturbed(stream)) {
        throw new TypeError('The body has already been consumed.')
      }

      if (stream.locked) {
        throw new TypeError('The stream is locked.')
      }

      // Compat.
      stream[kBodyUsed] = true

      yield * stream
    }
  }
}

function throwIfAborted (state) {
  if (state.aborted) {
    throw new DOMException('The operation was aborted.', 'AbortError')
  }
}

function bodyMixinMethods (instance) {
  const methods = {
    blob () {
      // The blob() method steps are to return the result of
      // running consume body with this and the following step
      // given a byte sequence bytes: return a Blob whose
      // contents are bytes and whose type attribute is this’s
      // MIME type.
      return specConsumeBody(this, (bytes) => {
        let mimeType = bodyMimeType(this)

        if (mimeType === 'failure') {
          mimeType = ''
        } else if (mimeType) {
          mimeType = serializeAMimeType(mimeType)
        }

        // Return a Blob whose contents are bytes and type attribute
        // is mimeType.
        return new Blob([bytes], { type: mimeType })
      }, instance)
    },

    arrayBuffer () {
      // The arrayBuffer() method steps are to return the result
      // of running consume body with this and the following step
      // given a byte sequence bytes: return a new ArrayBuffer
      // whose contents are bytes.
      return specConsumeBody(this, (bytes) => {
        return new Uint8Array(bytes).buffer
      }, instance)
    },

    text () {
      // The text() method steps are to return the result of running
      // consume body with this and UTF-8 decode.
      return specConsumeBody(this, utf8DecodeBytes, instance)
    },

    json () {
      // The json() method steps are to return the result of running
      // consume body with this and parse JSON from bytes.
      return specConsumeBody(this, parseJSONFromBytes, instance)
    },

    async formData () {
      webidl.brandCheck(this, instance)

      throwIfAborted(this[kState])

      const contentType = this.headers.get('Content-Type')

      // If mimeType’s essence is "multipart/form-data", then:
      if (/multipart\/form-data/.test(contentType)) {
        const headers = {}
        for (const [key, value] of this.headers) headers[key.toLowerCase()] = value

        const responseFormData = new FormData()

        let busboy

        try {
          busboy = new Busboy({
            headers,
            preservePath: true
          })
        } catch (err) {
          throw new DOMException(`${err}`, 'AbortError')
        }

        busboy.on('field', (name, value) => {
          responseFormData.append(name, value)
        })
        busboy.on('file', (name, value, filename, encoding, mimeType) => {
          const chunks = []

          if (encoding === 'base64' || encoding.toLowerCase() === 'base64') {
            let base64chunk = ''

            value.on('data', (chunk) => {
              base64chunk += chunk.toString().replace(/[\r\n]/gm, '')

              const end = base64chunk.length - base64chunk.length % 4
              chunks.push(Buffer.from(base64chunk.slice(0, end), 'base64'))

              base64chunk = base64chunk.slice(end)
            })
            value.on('end', () => {
              chunks.push(Buffer.from(base64chunk, 'base64'))
              responseFormData.append(name, new File(chunks, filename, { type: mimeType }))
            })
          } else {
            value.on('data', (chunk) => {
              chunks.push(chunk)
            })
            value.on('end', () => {
              responseFormData.append(name, new File(chunks, filename, { type: mimeType }))
            })
          }
        })

        const busboyResolve = new Promise((resolve, reject) => {
          busboy.on('finish', resolve)
          busboy.on('error', (err) => reject(new TypeError(err)))
        })

        if (this.body !== null) for await (const chunk of consumeBody(this[kState].body)) busboy.write(chunk)
        busboy.end()
        await busboyResolve

        return responseFormData
      } else if (/application\/x-www-form-urlencoded/.test(contentType)) {
        // Otherwise, if mimeType’s essence is "application/x-www-form-urlencoded", then:

        // 1. Let entries be the result of parsing bytes.
        let entries
        try {
          let text = ''
          // application/x-www-form-urlencoded parser will keep the BOM.
          // https://url.spec.whatwg.org/#concept-urlencoded-parser
          // Note that streaming decoder is stateful and cannot be reused
          const streamingDecoder = new TextDecoder('utf-8', { ignoreBOM: true })

          for await (const chunk of consumeBody(this[kState].body)) {
            if (!isUint8Array(chunk)) {
              throw new TypeError('Expected Uint8Array chunk')
            }
            text += streamingDecoder.decode(chunk, { stream: true })
          }
          text += streamingDecoder.decode()
          entries = new URLSearchParams(text)
        } catch (err) {
          // istanbul ignore next: Unclear when new URLSearchParams can fail on a string.
          // 2. If entries is failure, then throw a TypeError.
          throw Object.assign(new TypeError(), { cause: err })
        }

        // 3. Return a new FormData object whose entries are entries.
        const formData = new FormData()
        for (const [name, value] of entries) {
          formData.append(name, value)
        }
        return formData
      } else {
        // Wait a tick before checking if the request has been aborted.
        // Otherwise, a TypeError can be thrown when an AbortError should.
        await Promise.resolve()

        throwIfAborted(this[kState])

        // Otherwise, throw a TypeError.
        throw webidl.errors.exception({
          header: `${instance.name}.formData`,
          message: 'Could not parse content as FormData.'
        })
      }
    }
  }

  return methods
}

function mixinBody (prototype) {
  Object.assign(prototype.prototype, bodyMixinMethods(prototype))
}

/**
 * @see https://fetch.spec.whatwg.org/#concept-body-consume-body
 * @param {Response|Request} object
 * @param {(value: unknown) => unknown} convertBytesToJSValue
 * @param {Response|Request} instance
 */
async function specConsumeBody (object, convertBytesToJSValue, instance) {
  webidl.brandCheck(object, instance)

  throwIfAborted(object[kState])

  // 1. If object is unusable, then return a promise rejected
  //    with a TypeError.
  if (bodyUnusable(object[kState].body)) {
    throw new TypeError('Body is unusable')
  }

  // 2. Let promise be a new promise.
  const promise = createDeferredPromise()

  // 3. Let errorSteps given error be to reject promise with error.
  const errorSteps = (error) => promise.reject(error)

  // 4. Let successSteps given a byte sequence data be to resolve
  //    promise with the result of running convertBytesToJSValue
  //    with data. If that threw an exception, then run errorSteps
  //    with that exception.
  const successSteps = (data) => {
    try {
      promise.resolve(convertBytesToJSValue(data))
    } catch (e) {
      errorSteps(e)
    }
  }

  // 5. If object’s body is null, then run successSteps with an
  //    empty byte sequence.
  if (object[kState].body == null) {
    successSteps(new Uint8Array())
    return promise.promise
  }

  // 6. Otherwise, fully read object’s body given successSteps,
  //    errorSteps, and object’s relevant global object.
  await fullyReadBody(object[kState].body, successSteps, errorSteps)

  // 7. Return promise.
  return promise.promise
}

// https://fetch.spec.whatwg.org/#body-unusable
function bodyUnusable (body) {
  // An object including the Body interface mixin is
  // said to be unusable if its body is non-null and
  // its body’s stream is disturbed or locked.
  return body != null && (body.stream.locked || util.isDisturbed(body.stream))
}

/**
 * @see https://encoding.spec.whatwg.org/#utf-8-decode
 * @param {Buffer} buffer
 */
function utf8DecodeBytes (buffer) {
  if (buffer.length === 0) {
    return ''
  }

  // 1. Let buffer be the result of peeking three bytes from
  //    ioQueue, converted to a byte sequence.

  // 2. If buffer is 0xEF 0xBB 0xBF, then read three
  //    bytes from ioQueue. (Do nothing with those bytes.)
  if (buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) {
    buffer = buffer.subarray(3)
  }

  // 3. Process a queue with an instance of UTF-8’s
  //    decoder, ioQueue, output, and "replacement".
  const output = textDecoder.decode(buffer)

  // 4. Return output.
  return output
}

/**
 * @see https://infra.spec.whatwg.org/#parse-json-bytes-to-a-javascript-value
 * @param {Uint8Array} bytes
 */
function parseJSONFromBytes (bytes) {
  return JSON.parse(utf8DecodeBytes(bytes))
}

/**
 * @see https://fetch.spec.whatwg.org/#concept-body-mime-type
 * @param {import('./response').Response|import('./request').Request} object
 */
function bodyMimeType (object) {
  const { headersList } = object[kState]
  const contentType = headersList.get('content-type')

  if (contentType === null) {
    return 'failure'
  }

  return parseMIMEType(contentType)
}

module.exports = {
  extractBody,
  safelyExtractBody,
  cloneBody,
  mixinBody
}


/***/ }),

/***/ 1037:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { MessageChannel, receiveMessageOnPort } = __nccwpck_require__(1267)

const corsSafeListedMethods = ['GET', 'HEAD', 'POST']
const corsSafeListedMethodsSet = new Set(corsSafeListedMethods)

const nullBodyStatus = [101, 204, 205, 304]

const redirectStatus = [301, 302, 303, 307, 308]
const redirectStatusSet = new Set(redirectStatus)

// https://fetch.spec.whatwg.org/#block-bad-port
const badPorts = [
  '1', '7', '9', '11', '13', '15', '17', '19', '20', '21', '22', '23', '25', '37', '42', '43', '53', '69', '77', '79',
  '87', '95', '101', '102', '103', '104', '109', '110', '111', '113', '115', '117', '119', '123', '135', '137',
  '139', '143', '161', '179', '389', '427', '465', '512', '513', '514', '515', '526', '530', '531', '532',
  '540', '548', '554', '556', '563', '587', '601', '636', '989', '990', '993', '995', '1719', '1720', '1723',
  '2049', '3659', '4045', '5060', '5061', '6000', '6566', '6665', '6666', '6667', '6668', '6669', '6697',
  '10080'
]

const badPortsSet = new Set(badPorts)

// https://w3c.github.io/webappsec-referrer-policy/#referrer-policies
const referrerPolicy = [
  '',
  'no-referrer',
  'no-referrer-when-downgrade',
  'same-origin',
  'origin',
  'strict-origin',
  'origin-when-cross-origin',
  'strict-origin-when-cross-origin',
  'unsafe-url'
]
const referrerPolicySet = new Set(referrerPolicy)

const requestRedirect = ['follow', 'manual', 'error']

const safeMethods = ['GET', 'HEAD', 'OPTIONS', 'TRACE']
const safeMethodsSet = new Set(safeMethods)

const requestMode = ['navigate', 'same-origin', 'no-cors', 'cors']

const requestCredentials = ['omit', 'same-origin', 'include']

const requestCache = [
  'default',
  'no-store',
  'reload',
  'no-cache',
  'force-cache',
  'only-if-cached'
]

// https://fetch.spec.whatwg.org/#request-body-header-name
const requestBodyHeader = [
  'content-encoding',
  'content-language',
  'content-location',
  'content-type',
  // See https://github.com/nodejs/undici/issues/2021
  // 'Content-Length' is a forbidden header name, which is typically
  // removed in the Headers implementation. However, undici doesn't
  // filter out headers, so we add it here.
  'content-length'
]

// https://fetch.spec.whatwg.org/#enumdef-requestduplex
const requestDuplex = [
  'half'
]

// http://fetch.spec.whatwg.org/#forbidden-method
const forbiddenMethods = ['CONNECT', 'TRACE', 'TRACK']
const forbiddenMethodsSet = new Set(forbiddenMethods)

const subresource = [
  'audio',
  'audioworklet',
  'font',
  'image',
  'manifest',
  'paintworklet',
  'script',
  'style',
  'track',
  'video',
  'xslt',
  ''
]
const subresourceSet = new Set(subresource)

/** @type {globalThis['DOMException']} */
const DOMException = globalThis.DOMException ?? (() => {
  // DOMException was only made a global in Node v17.0.0,
  // but fetch supports >= v16.8.
  try {
    atob('~')
  } catch (err) {
    return Object.getPrototypeOf(err).constructor
  }
})()

let channel

/** @type {globalThis['structuredClone']} */
const structuredClone =
  globalThis.structuredClone ??
  // https://github.com/nodejs/node/blob/b27ae24dcc4251bad726d9d84baf678d1f707fed/lib/internal/structured_clone.js
  // structuredClone was added in v17.0.0, but fetch supports v16.8
  function structuredClone (value, options = undefined) {
    if (arguments.length === 0) {
      throw new TypeError('missing argument')
    }

    if (!channel) {
      channel = new MessageChannel()
    }
    channel.port1.unref()
    channel.port2.unref()
    channel.port1.postMessage(value, options?.transfer)
    return receiveMessageOnPort(channel.port2).message
  }

module.exports = {
  DOMException,
  structuredClone,
  subresource,
  forbiddenMethods,
  requestBodyHeader,
  referrerPolicy,
  requestRedirect,
  requestMode,
  requestCredentials,
  requestCache,
  redirectStatus,
  corsSafeListedMethods,
  nullBodyStatus,
  safeMethods,
  badPorts,
  requestDuplex,
  subresourceSet,
  badPortsSet,
  redirectStatusSet,
  corsSafeListedMethodsSet,
  safeMethodsSet,
  forbiddenMethodsSet,
  referrerPolicySet
}


/***/ }),

/***/ 685:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const assert = __nccwpck_require__(9491)
const { atob } = __nccwpck_require__(4300)
const { isomorphicDecode } = __nccwpck_require__(2538)

const encoder = new TextEncoder()

/**
 * @see https://mimesniff.spec.whatwg.org/#http-token-code-point
 */
const HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/
const HTTP_WHITESPACE_REGEX = /(\u000A|\u000D|\u0009|\u0020)/ // eslint-disable-line
/**
 * @see https://mimesniff.spec.whatwg.org/#http-quoted-string-token-code-point
 */
const HTTP_QUOTED_STRING_TOKENS = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/ // eslint-disable-line

// https://fetch.spec.whatwg.org/#data-url-processor
/** @param {URL} dataURL */
function dataURLProcessor (dataURL) {
  // 1. Assert: dataURL’s scheme is "data".
  assert(dataURL.protocol === 'data:')

  // 2. Let input be the result of running the URL
  // serializer on dataURL with exclude fragment
  // set to true.
  let input = URLSerializer(dataURL, true)

  // 3. Remove the leading "data:" string from input.
  input = input.slice(5)

  // 4. Let position point at the start of input.
  const position = { position: 0 }

  // 5. Let mimeType be the result of collecting a
  // sequence of code points that are not equal
  // to U+002C (,), given position.
  let mimeType = collectASequenceOfCodePointsFast(
    ',',
    input,
    position
  )

  // 6. Strip leading and trailing ASCII whitespace
  // from mimeType.
  // Undici implementation note: we need to store the
  // length because if the mimetype has spaces removed,
  // the wrong amount will be sliced from the input in
  // step #9
  const mimeTypeLength = mimeType.length
  mimeType = removeASCIIWhitespace(mimeType, true, true)

  // 7. If position is past the end of input, then
  // return failure
  if (position.position >= input.length) {
    return 'failure'
  }

  // 8. Advance position by 1.
  position.position++

  // 9. Let encodedBody be the remainder of input.
  const encodedBody = input.slice(mimeTypeLength + 1)

  // 10. Let body be the percent-decoding of encodedBody.
  let body = stringPercentDecode(encodedBody)

  // 11. If mimeType ends with U+003B (;), followed by
  // zero or more U+0020 SPACE, followed by an ASCII
  // case-insensitive match for "base64", then:
  if (/;(\u0020){0,}base64$/i.test(mimeType)) {
    // 1. Let stringBody be the isomorphic decode of body.
    const stringBody = isomorphicDecode(body)

    // 2. Set body to the forgiving-base64 decode of
    // stringBody.
    body = forgivingBase64(stringBody)

    // 3. If body is failure, then return failure.
    if (body === 'failure') {
      return 'failure'
    }

    // 4. Remove the last 6 code points from mimeType.
    mimeType = mimeType.slice(0, -6)

    // 5. Remove trailing U+0020 SPACE code points from mimeType,
    // if any.
    mimeType = mimeType.replace(/(\u0020)+$/, '')

    // 6. Remove the last U+003B (;) code point from mimeType.
    mimeType = mimeType.slice(0, -1)
  }

  // 12. If mimeType starts with U+003B (;), then prepend
  // "text/plain" to mimeType.
  if (mimeType.startsWith(';')) {
    mimeType = 'text/plain' + mimeType
  }

  // 13. Let mimeTypeRecord be the result of parsing
  // mimeType.
  let mimeTypeRecord = parseMIMEType(mimeType)

  // 14. If mimeTypeRecord is failure, then set
  // mimeTypeRecord to text/plain;charset=US-ASCII.
  if (mimeTypeRecord === 'failure') {
    mimeTypeRecord = parseMIMEType('text/plain;charset=US-ASCII')
  }

  // 15. Return a new data: URL struct whose MIME
  // type is mimeTypeRecord and body is body.
  // https://fetch.spec.whatwg.org/#data-url-struct
  return { mimeType: mimeTypeRecord, body }
}

// https://url.spec.whatwg.org/#concept-url-serializer
/**
 * @param {URL} url
 * @param {boolean} excludeFragment
 */
function URLSerializer (url, excludeFragment = false) {
  if (!excludeFragment) {
    return url.href
  }

  const href = url.href
  const hashLength = url.hash.length

  return hashLength === 0 ? href : href.substring(0, href.length - hashLength)
}

// https://infra.spec.whatwg.org/#collect-a-sequence-of-code-points
/**
 * @param {(char: string) => boolean} condition
 * @param {string} input
 * @param {{ position: number }} position
 */
function collectASequenceOfCodePoints (condition, input, position) {
  // 1. Let result be the empty string.
  let result = ''

  // 2. While position doesn’t point past the end of input and the
  // code point at position within input meets the condition condition:
  while (position.position < input.length && condition(input[position.position])) {
    // 1. Append that code point to the end of result.
    result += input[position.position]

    // 2. Advance position by 1.
    position.position++
  }

  // 3. Return result.
  return result
}

/**
 * A faster collectASequenceOfCodePoints that only works when comparing a single character.
 * @param {string} char
 * @param {string} input
 * @param {{ position: number }} position
 */
function collectASequenceOfCodePointsFast (char, input, position) {
  const idx = input.indexOf(char, position.position)
  const start = position.position

  if (idx === -1) {
    position.position = input.length
    return input.slice(start)
  }

  position.position = idx
  return input.slice(start, position.position)
}

// https://url.spec.whatwg.org/#string-percent-decode
/** @param {string} input */
function stringPercentDecode (input) {
  // 1. Let bytes be the UTF-8 encoding of input.
  const bytes = encoder.encode(input)

  // 2. Return the percent-decoding of bytes.
  return percentDecode(bytes)
}

// https://url.spec.whatwg.org/#percent-decode
/** @param {Uint8Array} input */
function percentDecode (input) {
  // 1. Let output be an empty byte sequence.
  /** @type {number[]} */
  const output = []

  // 2. For each byte byte in input:
  for (let i = 0; i < input.length; i++) {
    const byte = input[i]

    // 1. If byte is not 0x25 (%), then append byte to output.
    if (byte !== 0x25) {
      output.push(byte)

    // 2. Otherwise, if byte is 0x25 (%) and the next two bytes
    // after byte in input are not in the ranges
    // 0x30 (0) to 0x39 (9), 0x41 (A) to 0x46 (F),
    // and 0x61 (a) to 0x66 (f), all inclusive, append byte
    // to output.
    } else if (
      byte === 0x25 &&
      !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i + 1], input[i + 2]))
    ) {
      output.push(0x25)

    // 3. Otherwise:
    } else {
      // 1. Let bytePoint be the two bytes after byte in input,
      // decoded, and then interpreted as hexadecimal number.
      const nextTwoBytes = String.fromCharCode(input[i + 1], input[i + 2])
      const bytePoint = Number.parseInt(nextTwoBytes, 16)

      // 2. Append a byte whose value is bytePoint to output.
      output.push(bytePoint)

      // 3. Skip the next two bytes in input.
      i += 2
    }
  }

  // 3. Return output.
  return Uint8Array.from(output)
}

// https://mimesniff.spec.whatwg.org/#parse-a-mime-type
/** @param {string} input */
function parseMIMEType (input) {
  // 1. Remove any leading and trailing HTTP whitespace
  // from input.
  input = removeHTTPWhitespace(input, true, true)

  // 2. Let position be a position variable for input,
  // initially pointing at the start of input.
  const position = { position: 0 }

  // 3. Let type be the result of collecting a sequence
  // of code points that are not U+002F (/) from
  // input, given position.
  const type = collectASequenceOfCodePointsFast(
    '/',
    input,
    position
  )

  // 4. If type is the empty string or does not solely
  // contain HTTP token code points, then return failure.
  // https://mimesniff.spec.whatwg.org/#http-token-code-point
  if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) {
    return 'failure'
  }

  // 5. If position is past the end of input, then return
  // failure
  if (position.position > input.length) {
    return 'failure'
  }

  // 6. Advance position by 1. (This skips past U+002F (/).)
  position.position++

  // 7. Let subtype be the result of collecting a sequence of
  // code points that are not U+003B (;) from input, given
  // position.
  let subtype = collectASequenceOfCodePointsFast(
    ';',
    input,
    position
  )

  // 8. Remove any trailing HTTP whitespace from subtype.
  subtype = removeHTTPWhitespace(subtype, false, true)

  // 9. If subtype is the empty string or does not solely
  // contain HTTP token code points, then return failure.
  if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {
    return 'failure'
  }

  const typeLowercase = type.toLowerCase()
  const subtypeLowercase = subtype.toLowerCase()

  // 10. Let mimeType be a new MIME type record whose type
  // is type, in ASCII lowercase, and subtype is subtype,
  // in ASCII lowercase.
  // https://mimesniff.spec.whatwg.org/#mime-type
  const mimeType = {
    type: typeLowercase,
    subtype: subtypeLowercase,
    /** @type {Map<string, string>} */
    parameters: new Map(),
    // https://mimesniff.spec.whatwg.org/#mime-type-essence
    essence: `${typeLowercase}/${subtypeLowercase}`
  }

  // 11. While position is not past the end of input:
  while (position.position < input.length) {
    // 1. Advance position by 1. (This skips past U+003B (;).)
    position.position++

    // 2. Collect a sequence of code points that are HTTP
    // whitespace from input given position.
    collectASequenceOfCodePoints(
      // https://fetch.spec.whatwg.org/#http-whitespace
      char => HTTP_WHITESPACE_REGEX.test(char),
      input,
      position
    )

    // 3. Let parameterName be the result of collecting a
    // sequence of code points that are not U+003B (;)
    // or U+003D (=) from input, given position.
    let parameterName = collectASequenceOfCodePoints(
      (char) => char !== ';' && char !== '=',
      input,
      position
    )

    // 4. Set parameterName to parameterName, in ASCII
    // lowercase.
    parameterName = parameterName.toLowerCase()

    // 5. If position is not past the end of input, then:
    if (position.position < input.length) {
      // 1. If the code point at position within input is
      // U+003B (;), then continue.
      if (input[position.position] === ';') {
        continue
      }

      // 2. Advance position by 1. (This skips past U+003D (=).)
      position.position++
    }

    // 6. If position is past the end of input, then break.
    if (position.position > input.length) {
      break
    }

    // 7. Let parameterValue be null.
    let parameterValue = null

    // 8. If the code point at position within input is
    // U+0022 ("), then:
    if (input[position.position] === '"') {
      // 1. Set parameterValue to the result of collecting
      // an HTTP quoted string from input, given position
      // and the extract-value flag.
      parameterValue = collectAnHTTPQuotedString(input, position, true)

      // 2. Collect a sequence of code points that are not
      // U+003B (;) from input, given position.
      collectASequenceOfCodePointsFast(
        ';',
        input,
        position
      )

    // 9. Otherwise:
    } else {
      // 1. Set parameterValue to the result of collecting
      // a sequence of code points that are not U+003B (;)
      // from input, given position.
      parameterValue = collectASequenceOfCodePointsFast(
        ';',
        input,
        position
      )

      // 2. Remove any trailing HTTP whitespace from parameterValue.
      parameterValue = removeHTTPWhitespace(parameterValue, false, true)

      // 3. If parameterValue is the empty string, then continue.
      if (parameterValue.length === 0) {
        continue
      }
    }

    // 10. If all of the following are true
    // - parameterName is not the empty string
    // - parameterName solely contains HTTP token code points
    // - parameterValue solely contains HTTP quoted-string token code points
    // - mimeType’s parameters[parameterName] does not exist
    // then set mimeType’s parameters[parameterName] to parameterValue.
    if (
      parameterName.length !== 0 &&
      HTTP_TOKEN_CODEPOINTS.test(parameterName) &&
      (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) &&
      !mimeType.parameters.has(parameterName)
    ) {
      mimeType.parameters.set(parameterName, parameterValue)
    }
  }

  // 12. Return mimeType.
  return mimeType
}

// https://infra.spec.whatwg.org/#forgiving-base64-decode
/** @param {string} data */
function forgivingBase64 (data) {
  // 1. Remove all ASCII whitespace from data.
  data = data.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, '')  // eslint-disable-line

  // 2. If data’s code point length divides by 4 leaving
  // no remainder, then:
  if (data.length % 4 === 0) {
    // 1. If data ends with one or two U+003D (=) code points,
    // then remove them from data.
    data = data.replace(/=?=$/, '')
  }

  // 3. If data’s code point length divides by 4 leaving
  // a remainder of 1, then return failure.
  if (data.length % 4 === 1) {
    return 'failure'
  }

  // 4. If data contains a code point that is not one of
  //  U+002B (+)
  //  U+002F (/)
  //  ASCII alphanumeric
  // then return failure.
  if (/[^+/0-9A-Za-z]/.test(data)) {
    return 'failure'
  }

  const binary = atob(data)
  const bytes = new Uint8Array(binary.length)

  for (let byte = 0; byte < binary.length; byte++) {
    bytes[byte] = binary.charCodeAt(byte)
  }

  return bytes
}

// https://fetch.spec.whatwg.org/#collect-an-http-quoted-string
// tests: https://fetch.spec.whatwg.org/#example-http-quoted-string
/**
 * @param {string} input
 * @param {{ position: number }} position
 * @param {boolean?} extractValue
 */
function collectAnHTTPQuotedString (input, position, extractValue) {
  // 1. Let positionStart be position.
  const positionStart = position.position

  // 2. Let value be the empty string.
  let value = ''

  // 3. Assert: the code point at position within input
  // is U+0022 (").
  assert(input[position.position] === '"')

  // 4. Advance position by 1.
  position.position++

  // 5. While true:
  while (true) {
    // 1. Append the result of collecting a sequence of code points
    // that are not U+0022 (") or U+005C (\) from input, given
    // position, to value.
    value += collectASequenceOfCodePoints(
      (char) => char !== '"' && char !== '\\',
      input,
      position
    )

    // 2. If position is past the end of input, then break.
    if (position.position >= input.length) {
      break
    }

    // 3. Let quoteOrBackslash be the code point at position within
    // input.
    const quoteOrBackslash = input[position.position]

    // 4. Advance position by 1.
    position.position++

    // 5. If quoteOrBackslash is U+005C (\), then:
    if (quoteOrBackslash === '\\') {
      // 1. If position is past the end of input, then append
      // U+005C (\) to value and break.
      if (position.position >= input.length) {
        value += '\\'
        break
      }

      // 2. Append the code point at position within input to value.
      value += input[position.position]

      // 3. Advance position by 1.
      position.position++

    // 6. Otherwise:
    } else {
      // 1. Assert: quoteOrBackslash is U+0022 (").
      assert(quoteOrBackslash === '"')

      // 2. Break.
      break
    }
  }

  // 6. If the extract-value flag is set, then return value.
  if (extractValue) {
    return value
  }

  // 7. Return the code points from positionStart to position,
  // inclusive, within input.
  return input.slice(positionStart, position.position)
}

/**
 * @see https://mimesniff.spec.whatwg.org/#serialize-a-mime-type
 */
function serializeAMimeType (mimeType) {
  assert(mimeType !== 'failure')
  const { parameters, essence } = mimeType

  // 1. Let serialization be the concatenation of mimeType’s
  //    type, U+002F (/), and mimeType’s subtype.
  let serialization = essence

  // 2. For each name → value of mimeType’s parameters:
  for (let [name, value] of parameters.entries()) {
    // 1. Append U+003B (;) to serialization.
    serialization += ';'

    // 2. Append name to serialization.
    serialization += name

    // 3. Append U+003D (=) to serialization.
    serialization += '='

    // 4. If value does not solely contain HTTP token code
    //    points or value is the empty string, then:
    if (!HTTP_TOKEN_CODEPOINTS.test(value)) {
      // 1. Precede each occurence of U+0022 (") or
      //    U+005C (\) in value with U+005C (\).
      value = value.replace(/(\\|")/g, '\\$1')

      // 2. Prepend U+0022 (") to value.
      value = '"' + value

      // 3. Append U+0022 (") to value.
      value += '"'
    }

    // 5. Append value to serialization.
    serialization += value
  }

  // 3. Return serialization.
  return serialization
}

/**
 * @see https://fetch.spec.whatwg.org/#http-whitespace
 * @param {string} char
 */
function isHTTPWhiteSpace (char) {
  return char === '\r' || char === '\n' || char === '\t' || char === ' '
}

/**
 * @see https://fetch.spec.whatwg.org/#http-whitespace
 * @param {string} str
 */
function removeHTTPWhitespace (str, leading = true, trailing = true) {
  let lead = 0
  let trail = str.length - 1

  if (leading) {
    for (; lead < str.length && isHTTPWhiteSpace(str[lead]); lead++);
  }

  if (trailing) {
    for (; trail > 0 && isHTTPWhiteSpace(str[trail]); trail--);
  }

  return str.slice(lead, trail + 1)
}

/**
 * @see https://infra.spec.whatwg.org/#ascii-whitespace
 * @param {string} char
 */
function isASCIIWhitespace (char) {
  return char === '\r' || char === '\n' || char === '\t' || char === '\f' || char === ' '
}

/**
 * @see https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace
 */
function removeASCIIWhitespace (str, leading = true, trailing = true) {
  let lead = 0
  let trail = str.length - 1

  if (leading) {
    for (; lead < str.length && isASCIIWhitespace(str[lead]); lead++);
  }

  if (trailing) {
    for (; trail > 0 && isASCIIWhitespace(str[trail]); trail--);
  }

  return str.slice(lead, trail + 1)
}

module.exports = {
  dataURLProcessor,
  URLSerializer,
  collectASequenceOfCodePoints,
  collectASequenceOfCodePointsFast,
  stringPercentDecode,
  parseMIMEType,
  collectAnHTTPQuotedString,
  serializeAMimeType
}


/***/ }),

/***/ 8511:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { Blob, File: NativeFile } = __nccwpck_require__(4300)
const { types } = __nccwpck_require__(3837)
const { kState } = __nccwpck_require__(5861)
const { isBlobLike } = __nccwpck_require__(2538)
const { webidl } = __nccwpck_require__(1744)
const { parseMIMEType, serializeAMimeType } = __nccwpck_require__(685)
const { kEnumerableProperty } = __nccwpck_require__(3983)
const encoder = new TextEncoder()

class File extends Blob {
  constructor (fileBits, fileName, options = {}) {
    // The File constructor is invoked with two or three parameters, depending
    // on whether the optional dictionary parameter is used. When the File()
    // constructor is invoked, user agents must run the following steps:
    webidl.argumentLengthCheck(arguments, 2, { header: 'File constructor' })

    fileBits = webidl.converters['sequence<BlobPart>'](fileBits)
    fileName = webidl.converters.USVString(fileName)
    options = webidl.converters.FilePropertyBag(options)

    // 1. Let bytes be the result of processing blob parts given fileBits and
    // options.
    // Note: Blob handles this for us

    // 2. Let n be the fileName argument to the constructor.
    const n = fileName

    // 3. Process FilePropertyBag dictionary argument by running the following
    // substeps:

    //    1. If the type member is provided and is not the empty string, let t
    //    be set to the type dictionary member. If t contains any characters
    //    outside the range U+0020 to U+007E, then set t to the empty string
    //    and return from these substeps.
    //    2. Convert every character in t to ASCII lowercase.
    let t = options.type
    let d

    // eslint-disable-next-line no-labels
    substep: {
      if (t) {
        t = parseMIMEType(t)

        if (t === 'failure') {
          t = ''
          // eslint-disable-next-line no-labels
          break substep
        }

        t = serializeAMimeType(t).toLowerCase()
      }

      //    3. If the lastModified member is provided, let d be set to the
      //    lastModified dictionary member. If it is not provided, set d to the
      //    current date and time represented as the number of milliseconds since
      //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).
      d = options.lastModified
    }

    // 4. Return a new File object F such that:
    // F refers to the bytes byte sequence.
    // F.size is set to the number of total bytes in bytes.
    // F.name is set to n.
    // F.type is set to t.
    // F.lastModified is set to d.

    super(processBlobParts(fileBits, options), { type: t })
    this[kState] = {
      name: n,
      lastModified: d,
      type: t
    }
  }

  get name () {
    webidl.brandCheck(this, File)

    return this[kState].name
  }

  get lastModified () {
    webidl.brandCheck(this, File)

    return this[kState].lastModified
  }

  get type () {
    webidl.brandCheck(this, File)

    return this[kState].type
  }
}

class FileLike {
  constructor (blobLike, fileName, options = {}) {
    // TODO: argument idl type check

    // The File constructor is invoked with two or three parameters, depending
    // on whether the optional dictionary parameter is used. When the File()
    // constructor is invoked, user agents must run the following steps:

    // 1. Let bytes be the result of processing blob parts given fileBits and
    // options.

    // 2. Let n be the fileName argument to the constructor.
    const n = fileName

    // 3. Process FilePropertyBag dictionary argument by running the following
    // substeps:

    //    1. If the type member is provided and is not the empty string, let t
    //    be set to the type dictionary member. If t contains any characters
    //    outside the range U+0020 to U+007E, then set t to the empty string
    //    and return from these substeps.
    //    TODO
    const t = options.type

    //    2. Convert every character in t to ASCII lowercase.
    //    TODO

    //    3. If the lastModified member is provided, let d be set to the
    //    lastModified dictionary member. If it is not provided, set d to the
    //    current date and time represented as the number of milliseconds since
    //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).
    const d = options.lastModified ?? Date.now()

    // 4. Return a new File object F such that:
    // F refers to the bytes byte sequence.
    // F.size is set to the number of total bytes in bytes.
    // F.name is set to n.
    // F.type is set to t.
    // F.lastModified is set to d.

    this[kState] = {
      blobLike,
      name: n,
      type: t,
      lastModified: d
    }
  }

  stream (...args) {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.stream(...args)
  }

  arrayBuffer (...args) {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.arrayBuffer(...args)
  }

  slice (...args) {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.slice(...args)
  }

  text (...args) {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.text(...args)
  }

  get size () {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.size
  }

  get type () {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.type
  }

  get name () {
    webidl.brandCheck(this, FileLike)

    return this[kState].name
  }

  get lastModified () {
    webidl.brandCheck(this, FileLike)

    return this[kState].lastModified
  }

  get [Symbol.toStringTag] () {
    return 'File'
  }
}

Object.defineProperties(File.prototype, {
  [Symbol.toStringTag]: {
    value: 'File',
    configurable: true
  },
  name: kEnumerableProperty,
  lastModified: kEnumerableProperty
})

webidl.converters.Blob = webidl.interfaceConverter(Blob)

webidl.converters.BlobPart = function (V, opts) {
  if (webidl.util.Type(V) === 'Object') {
    if (isBlobLike(V)) {
      return webidl.converters.Blob(V, { strict: false })
    }

    if (
      ArrayBuffer.isView(V) ||
      types.isAnyArrayBuffer(V)
    ) {
      return webidl.converters.BufferSource(V, opts)
    }
  }

  return webidl.converters.USVString(V, opts)
}

webidl.converters['sequence<BlobPart>'] = webidl.sequenceConverter(
  webidl.converters.BlobPart
)

// https://www.w3.org/TR/FileAPI/#dfn-FilePropertyBag
webidl.converters.FilePropertyBag = webidl.dictionaryConverter([
  {
    key: 'lastModified',
    converter: webidl.converters['long long'],
    get defaultValue () {
      return Date.now()
    }
  },
  {
    key: 'type',
    converter: webidl.converters.DOMString,
    defaultValue: ''
  },
  {
    key: 'endings',
    converter: (value) => {
      value = webidl.converters.DOMString(value)
      value = value.toLowerCase()

      if (value !== 'native') {
        value = 'transparent'
      }

      return value
    },
    defaultValue: 'transparent'
  }
])

/**
 * @see https://www.w3.org/TR/FileAPI/#process-blob-parts
 * @param {(NodeJS.TypedArray|Blob|string)[]} parts
 * @param {{ type: string, endings: string }} options
 */
function processBlobParts (parts, options) {
  // 1. Let bytes be an empty sequence of bytes.
  /** @type {NodeJS.TypedArray[]} */
  const bytes = []

  // 2. For each element in parts:
  for (const element of parts) {
    // 1. If element is a USVString, run the following substeps:
    if (typeof element === 'string') {
      // 1. Let s be element.
      let s = element

      // 2. If the endings member of options is "native", set s
      //    to the result of converting line endings to native
      //    of element.
      if (options.endings === 'native') {
        s = convertLineEndingsNative(s)
      }

      // 3. Append the result of UTF-8 encoding s to bytes.
      bytes.push(encoder.encode(s))
    } else if (
      types.isAnyArrayBuffer(element) ||
      types.isTypedArray(element)
    ) {
      // 2. If element is a BufferSource, get a copy of the
      //    bytes held by the buffer source, and append those
      //    bytes to bytes.
      if (!element.buffer) { // ArrayBuffer
        bytes.push(new Uint8Array(element))
      } else {
        bytes.push(
          new Uint8Array(element.buffer, element.byteOffset, element.byteLength)
        )
      }
    } else if (isBlobLike(element)) {
      // 3. If element is a Blob, append the bytes it represents
      //    to bytes.
      bytes.push(element)
    }
  }

  // 3. Return bytes.
  return bytes
}

/**
 * @see https://www.w3.org/TR/FileAPI/#convert-line-endings-to-native
 * @param {string} s
 */
function convertLineEndingsNative (s) {
  // 1. Let native line ending be be the code point U+000A LF.
  let nativeLineEnding = '\n'

  // 2. If the underlying platform’s conventions are to
  //    represent newlines as a carriage return and line feed
  //    sequence, set native line ending to the code point
  //    U+000D CR followed by the code point U+000A LF.
  if (process.platform === 'win32') {
    nativeLineEnding = '\r\n'
  }

  return s.replace(/\r?\n/g, nativeLineEnding)
}

// If this function is moved to ./util.js, some tools (such as
// rollup) will warn about circular dependencies. See:
// https://github.com/nodejs/undici/issues/1629
function isFileLike (object) {
  return (
    (NativeFile && object instanceof NativeFile) ||
    object instanceof File || (
      object &&
      (typeof object.stream === 'function' ||
      typeof object.arrayBuffer === 'function') &&
      object[Symbol.toStringTag] === 'File'
    )
  )
}

module.exports = { File, FileLike, isFileLike }


/***/ }),

/***/ 2015:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { isBlobLike, toUSVString, makeIterator } = __nccwpck_require__(2538)
const { kState } = __nccwpck_require__(5861)
const { File: UndiciFile, FileLike, isFileLike } = __nccwpck_require__(8511)
const { webidl } = __nccwpck_require__(1744)
const { Blob, File: NativeFile } = __nccwpck_require__(4300)

/** @type {globalThis['File']} */
const File = NativeFile ?? UndiciFile

// https://xhr.spec.whatwg.org/#formdata
class FormData {
  constructor (form) {
    if (form !== undefined) {
      throw webidl.errors.conversionFailed({
        prefix: 'FormData constructor',
        argument: 'Argument 1',
        types: ['undefined']
      })
    }

    this[kState] = []
  }

  append (name, value, filename = undefined) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 2, { header: 'FormData.append' })

    if (arguments.length === 3 && !isBlobLike(value)) {
      throw new TypeError(
        "Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'"
      )
    }

    // 1. Let value be value if given; otherwise blobValue.

    name = webidl.converters.USVString(name)
    value = isBlobLike(value)
      ? webidl.converters.Blob(value, { strict: false })
      : webidl.converters.USVString(value)
    filename = arguments.length === 3
      ? webidl.converters.USVString(filename)
      : undefined

    // 2. Let entry be the result of creating an entry with
    // name, value, and filename if given.
    const entry = makeEntry(name, value, filename)

    // 3. Append entry to this’s entry list.
    this[kState].push(entry)
  }

  delete (name) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.delete' })

    name = webidl.converters.USVString(name)

    // The delete(name) method steps are to remove all entries whose name
    // is name from this’s entry list.
    this[kState] = this[kState].filter(entry => entry.name !== name)
  }

  get (name) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.get' })

    name = webidl.converters.USVString(name)

    // 1. If there is no entry whose name is name in this’s entry list,
    // then return null.
    const idx = this[kState].findIndex((entry) => entry.name === name)
    if (idx === -1) {
      return null
    }

    // 2. Return the value of the first entry whose name is name from
    // this’s entry list.
    return this[kState][idx].value
  }

  getAll (name) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.getAll' })

    name = webidl.converters.USVString(name)

    // 1. If there is no entry whose name is name in this’s entry list,
    // then return the empty list.
    // 2. Return the values of all entries whose name is name, in order,
    // from this’s entry list.
    return this[kState]
      .filter((entry) => entry.name === name)
      .map((entry) => entry.value)
  }

  has (name) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.has' })

    name = webidl.converters.USVString(name)

    // The has(name) method steps are to return true if there is an entry
    // whose name is name in this’s entry list; otherwise false.
    return this[kState].findIndex((entry) => entry.name === name) !== -1
  }

  set (name, value, filename = undefined) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 2, { header: 'FormData.set' })

    if (arguments.length === 3 && !isBlobLike(value)) {
      throw new TypeError(
        "Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'"
      )
    }

    // The set(name, value) and set(name, blobValue, filename) method steps
    // are:

    // 1. Let value be value if given; otherwise blobValue.

    name = webidl.converters.USVString(name)
    value = isBlobLike(value)
      ? webidl.converters.Blob(value, { strict: false })
      : webidl.converters.USVString(value)
    filename = arguments.length === 3
      ? toUSVString(filename)
      : undefined

    // 2. Let entry be the result of creating an entry with name, value, and
    // filename if given.
    const entry = makeEntry(name, value, filename)

    // 3. If there are entries in this’s entry list whose name is name, then
    // replace the first such entry with entry and remove the others.
    const idx = this[kState].findIndex((entry) => entry.name === name)
    if (idx !== -1) {
      this[kState] = [
        ...this[kState].slice(0, idx),
        entry,
        ...this[kState].slice(idx + 1).filter((entry) => entry.name !== name)
      ]
    } else {
      // 4. Otherwise, append entry to this’s entry list.
      this[kState].push(entry)
    }
  }

  entries () {
    webidl.brandCheck(this, FormData)

    return makeIterator(
      () => this[kState].map(pair => [pair.name, pair.value]),
      'FormData',
      'key+value'
    )
  }

  keys () {
    webidl.brandCheck(this, FormData)

    return makeIterator(
      () => this[kState].map(pair => [pair.name, pair.value]),
      'FormData',
      'key'
    )
  }

  values () {
    webidl.brandCheck(this, FormData)

    return makeIterator(
      () => this[kState].map(pair => [pair.name, pair.value]),
      'FormData',
      'value'
    )
  }

  /**
   * @param {(value: string, key: string, self: FormData) => void} callbackFn
   * @param {unknown} thisArg
   */
  forEach (callbackFn, thisArg = globalThis) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.forEach' })

    if (typeof callbackFn !== 'function') {
      throw new TypeError(
        "Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'."
      )
    }

    for (const [key, value] of this) {
      callbackFn.apply(thisArg, [value, key, this])
    }
  }
}

FormData.prototype[Symbol.iterator] = FormData.prototype.entries

Object.defineProperties(FormData.prototype, {
  [Symbol.toStringTag]: {
    value: 'FormData',
    configurable: true
  }
})

/**
 * @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry
 * @param {string} name
 * @param {string|Blob} value
 * @param {?string} filename
 * @returns
 */
function makeEntry (name, value, filename) {
  // 1. Set name to the result of converting name into a scalar value string.
  // "To convert a string into a scalar value string, replace any surrogates
  //  with U+FFFD."
  // see: https://nodejs.org/dist/latest-v18.x/docs/api/buffer.html#buftostringencoding-start-end
  name = Buffer.from(name).toString('utf8')

  // 2. If value is a string, then set value to the result of converting
  //    value into a scalar value string.
  if (typeof value === 'string') {
    value = Buffer.from(value).toString('utf8')
  } else {
    // 3. Otherwise:

    // 1. If value is not a File object, then set value to a new File object,
    //    representing the same bytes, whose name attribute value is "blob"
    if (!isFileLike(value)) {
      value = value instanceof Blob
        ? new File([value], 'blob', { type: value.type })
        : new FileLike(value, 'blob', { type: value.type })
    }

    // 2. If filename is given, then set value to a new File object,
    //    representing the same bytes, whose name attribute is filename.
    if (filename !== undefined) {
      /** @type {FilePropertyBag} */
      const options = {
        type: value.type,
        lastModified: value.lastModified
      }

      value = (NativeFile && value instanceof NativeFile) || value instanceof UndiciFile
        ? new File([value], filename, options)
        : new FileLike(value, filename, options)
    }
  }

  // 4. Return an entry whose name is name and whose value is value.
  return { name, value }
}

module.exports = { FormData }


/***/ }),

/***/ 1246:
/***/ ((module) => {



// In case of breaking changes, increase the version
// number to avoid conflicts.
const globalOrigin = Symbol.for('undici.globalOrigin.1')

function getGlobalOrigin () {
  return globalThis[globalOrigin]
}

function setGlobalOrigin (newOrigin) {
  if (newOrigin === undefined) {
    Object.defineProperty(globalThis, globalOrigin, {
      value: undefined,
      writable: true,
      enumerable: false,
      configurable: false
    })

    return
  }

  const parsedURL = new URL(newOrigin)

  if (parsedURL.protocol !== 'http:' && parsedURL.protocol !== 'https:') {
    throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`)
  }

  Object.defineProperty(globalThis, globalOrigin, {
    value: parsedURL,
    writable: true,
    enumerable: false,
    configurable: false
  })
}

module.exports = {
  getGlobalOrigin,
  setGlobalOrigin
}


/***/ }),

/***/ 554:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

// https://github.com/Ethan-Arrowood/undici-fetch



const { kHeadersList, kConstruct } = __nccwpck_require__(2785)
const { kGuard } = __nccwpck_require__(5861)
const { kEnumerableProperty } = __nccwpck_require__(3983)
const {
  makeIterator,
  isValidHeaderName,
  isValidHeaderValue
} = __nccwpck_require__(2538)
const { webidl } = __nccwpck_require__(1744)
const assert = __nccwpck_require__(9491)

const kHeadersMap = Symbol('headers map')
const kHeadersSortedMap = Symbol('headers map sorted')

/**
 * @param {number} code
 */
function isHTTPWhiteSpaceCharCode (code) {
  return code === 0x00a || code === 0x00d || code === 0x009 || code === 0x020
}

/**
 * @see https://fetch.spec.whatwg.org/#concept-header-value-normalize
 * @param {string} potentialValue
 */
function headerValueNormalize (potentialValue) {
  //  To normalize a byte sequence potentialValue, remove
  //  any leading and trailing HTTP whitespace bytes from
  //  potentialValue.
  let i = 0; let j = potentialValue.length

  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1))) --j
  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i))) ++i

  return i === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j)
}

function fill (headers, object) {
  // To fill a Headers object headers with a given object object, run these steps:

  // 1. If object is a sequence, then for each header in object:
  // Note: webidl conversion to array has already been done.
  if (Array.isArray(object)) {
    for (let i = 0; i < object.length; ++i) {
      const header = object[i]
      // 1. If header does not contain exactly two items, then throw a TypeError.
      if (header.length !== 2) {
        throw webidl.errors.exception({
          header: 'Headers constructor',
          message: `expected name/value pair to be length 2, found ${header.length}.`
        })
      }

      // 2. Append (header’s first item, header’s second item) to headers.
      appendHeader(headers, header[0], header[1])
    }
  } else if (typeof object === 'object' && object !== null) {
    // Note: null should throw

    // 2. Otherwise, object is a record, then for each key → value in object,
    //    append (key, value) to headers
    const keys = Object.keys(object)
    for (let i = 0; i < keys.length; ++i) {
      appendHeader(headers, keys[i], object[keys[i]])
    }
  } else {
    throw webidl.errors.conversionFailed({
      prefix: 'Headers constructor',
      argument: 'Argument 1',
      types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']
    })
  }
}

/**
 * @see https://fetch.spec.whatwg.org/#concept-headers-append
 */
function appendHeader (headers, name, value) {
  // 1. Normalize value.
  value = headerValueNormalize(value)

  // 2. If name is not a header name or value is not a
  //    header value, then throw a TypeError.
  if (!isValidHeaderName(name)) {
    throw webidl.errors.invalidArgument({
      prefix: 'Headers.append',
      value: name,
      type: 'header name'
    })
  } else if (!isValidHeaderValue(value)) {
    throw webidl.errors.invalidArgument({
      prefix: 'Headers.append',
      value,
      type: 'header value'
    })
  }

  // 3. If headers’s guard is "immutable", then throw a TypeError.
  // 4. Otherwise, if headers’s guard is "request" and name is a
  //    forbidden header name, return.
  // Note: undici does not implement forbidden header names
  if (headers[kGuard] === 'immutable') {
    throw new TypeError('immutable')
  } else if (headers[kGuard] === 'request-no-cors') {
    // 5. Otherwise, if headers’s guard is "request-no-cors":
    // TODO
  }

  // 6. Otherwise, if headers’s guard is "response" and name is a
  //    forbidden response-header name, return.

  // 7. Append (name, value) to headers’s header list.
  return headers[kHeadersList].append(name, value)

  // 8. If headers’s guard is "request-no-cors", then remove
  //    privileged no-CORS request headers from headers
}

class HeadersList {
  /** @type {[string, string][]|null} */
  cookies = null

  constructor (init) {
    if (init instanceof HeadersList) {
      this[kHeadersMap] = new Map(init[kHeadersMap])
      this[kHeadersSortedMap] = init[kHeadersSortedMap]
      this.cookies = init.cookies === null ? null : [...init.cookies]
    } else {
      this[kHeadersMap] = new Map(init)
      this[kHeadersSortedMap] = null
    }
  }

  // https://fetch.spec.whatwg.org/#header-list-contains
  contains (name) {
    // A header list list contains a header name name if list
    // contains a header whose name is a byte-case-insensitive
    // match for name.
    name = name.toLowerCase()

    return this[kHeadersMap].has(name)
  }

  clear () {
    this[kHeadersMap].clear()
    this[kHeadersSortedMap] = null
    this.cookies = null
  }

  // https://fetch.spec.whatwg.org/#concept-header-list-append
  append (name, value) {
    this[kHeadersSortedMap] = null

    // 1. If list contains name, then set name to the first such
    //    header’s name.
    const lowercaseName = name.toLowerCase()
    const exists = this[kHeadersMap].get(lowercaseName)

    // 2. Append (name, value) to list.
    if (exists) {
      const delimiter = lowercaseName === 'cookie' ? '; ' : ', '
      this[kHeadersMap].set(lowercaseName, {
        name: exists.name,
        value: `${exists.value}${delimiter}${value}`
      })
    } else {
      this[kHeadersMap].set(lowercaseName, { name, value })
    }

    if (lowercaseName === 'set-cookie') {
      this.cookies ??= []
      this.cookies.push(value)
    }
  }

  // https://fetch.spec.whatwg.org/#concept-header-list-set
  set (name, value) {
    this[kHeadersSortedMap] = null
    const lowercaseName = name.toLowerCase()

    if (lowercaseName === 'set-cookie') {
      this.cookies = [value]
    }

    // 1. If list contains name, then set the value of
    //    the first such header to value and remove the
    //    others.
    // 2. Otherwise, append header (name, value) to list.
    this[kHeadersMap].set(lowercaseName, { name, value })
  }

  // https://fetch.spec.whatwg.org/#concept-header-list-delete
  delete (name) {
    this[kHeadersSortedMap] = null

    name = name.toLowerCase()

    if (name === 'set-cookie') {
      this.cookies = null
    }

    this[kHeadersMap].delete(name)
  }

  // https://fetch.spec.whatwg.org/#concept-header-list-get
  get (name) {
    const value = this[kHeadersMap].get(name.toLowerCase())

    // 1. If list does not contain name, then return null.
    // 2. Return the values of all headers in list whose name
    //    is a byte-case-insensitive match for name,
    //    separated from each other by 0x2C 0x20, in order.
    return value === undefined ? null : value.value
  }

  * [Symbol.iterator] () {
    // use the lowercased name
    for (const [name, { value }] of this[kHeadersMap]) {
      yield [name, value]
    }
  }

  get entries () {
    const headers = {}

    if (this[kHeadersMap].size) {
      for (const { name, value } of this[kHeadersMap].values()) {
        headers[name] = value
      }
    }

    return headers
  }
}

// https://fetch.spec.whatwg.org/#headers-class
class Headers {
  constructor (init = undefined) {
    if (init === kConstruct) {
      return
    }
    this[kHeadersList] = new HeadersList()

    // The new Headers(init) constructor steps are:

    // 1. Set this’s guard to "none".
    this[kGuard] = 'none'

    // 2. If init is given, then fill this with init.
    if (init !== undefined) {
      init = webidl.converters.HeadersInit(init)
      fill(this, init)
    }
  }

  // https://fetch.spec.whatwg.org/#dom-headers-append
  append (name, value) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 2, { header: 'Headers.append' })

    name = webidl.converters.ByteString(name)
    value = webidl.converters.ByteString(value)

    return appendHeader(this, name, value)
  }

  // https://fetch.spec.whatwg.org/#dom-headers-delete
  delete (name) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.delete' })

    name = webidl.converters.ByteString(name)

    // 1. If name is not a header name, then throw a TypeError.
    if (!isValidHeaderName(name)) {
      throw webidl.errors.invalidArgument({
        prefix: 'Headers.delete',
        value: name,
        type: 'header name'
      })
    }

    // 2. If this’s guard is "immutable", then throw a TypeError.
    // 3. Otherwise, if this’s guard is "request" and name is a
    //    forbidden header name, return.
    // 4. Otherwise, if this’s guard is "request-no-cors", name
    //    is not a no-CORS-safelisted request-header name, and
    //    name is not a privileged no-CORS request-header name,
    //    return.
    // 5. Otherwise, if this’s guard is "response" and name is
    //    a forbidden response-header name, return.
    // Note: undici does not implement forbidden header names
    if (this[kGuard] === 'immutable') {
      throw new TypeError('immutable')
    } else if (this[kGuard] === 'request-no-cors') {
      // TODO
    }

    // 6. If this’s header list does not contain name, then
    //    return.
    if (!this[kHeadersList].contains(name)) {
      return
    }

    // 7. Delete name from this’s header list.
    // 8. If this’s guard is "request-no-cors", then remove
    //    privileged no-CORS request headers from this.
    this[kHeadersList].delete(name)
  }

  // https://fetch.spec.whatwg.org/#dom-headers-get
  get (name) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.get' })

    name = webidl.converters.ByteString(name)

    // 1. If name is not a header name, then throw a TypeError.
    if (!isValidHeaderName(name)) {
      throw webidl.errors.invalidArgument({
        prefix: 'Headers.get',
        value: name,
        type: 'header name'
      })
    }

    // 2. Return the result of getting name from this’s header
    //    list.
    return this[kHeadersList].get(name)
  }

  // https://fetch.spec.whatwg.org/#dom-headers-has
  has (name) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.has' })

    name = webidl.converters.ByteString(name)

    // 1. If name is not a header name, then throw a TypeError.
    if (!isValidHeaderName(name)) {
      throw webidl.errors.invalidArgument({
        prefix: 'Headers.has',
        value: name,
        type: 'header name'
      })
    }

    // 2. Return true if this’s header list contains name;
    //    otherwise false.
    return this[kHeadersList].contains(name)
  }

  // https://fetch.spec.whatwg.org/#dom-headers-set
  set (name, value) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 2, { header: 'Headers.set' })

    name = webidl.converters.ByteString(name)
    value = webidl.converters.ByteString(value)

    // 1. Normalize value.
    value = headerValueNormalize(value)

    // 2. If name is not a header name or value is not a
    //    header value, then throw a TypeError.
    if (!isValidHeaderName(name)) {
      throw webidl.errors.invalidArgument({
        prefix: 'Headers.set',
        value: name,
        type: 'header name'
      })
    } else if (!isValidHeaderValue(value)) {
      throw webidl.errors.invalidArgument({
        prefix: 'Headers.set',
        value,
        type: 'header value'
      })
    }

    // 3. If this’s guard is "immutable", then throw a TypeError.
    // 4. Otherwise, if this’s guard is "request" and name is a
    //    forbidden header name, return.
    // 5. Otherwise, if this’s guard is "request-no-cors" and
    //    name/value is not a no-CORS-safelisted request-header,
    //    return.
    // 6. Otherwise, if this’s guard is "response" and name is a
    //    forbidden response-header name, return.
    // Note: undici does not implement forbidden header names
    if (this[kGuard] === 'immutable') {
      throw new TypeError('immutable')
    } else if (this[kGuard] === 'request-no-cors') {
      // TODO
    }

    // 7. Set (name, value) in this’s header list.
    // 8. If this’s guard is "request-no-cors", then remove
    //    privileged no-CORS request headers from this
    this[kHeadersList].set(name, value)
  }

  // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie
  getSetCookie () {
    webidl.brandCheck(this, Headers)

    // 1. If this’s header list does not contain `Set-Cookie`, then return « ».
    // 2. Return the values of all headers in this’s header list whose name is
    //    a byte-case-insensitive match for `Set-Cookie`, in order.

    const list = this[kHeadersList].cookies

    if (list) {
      return [...list]
    }

    return []
  }

  // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine
  get [kHeadersSortedMap] () {
    if (this[kHeadersList][kHeadersSortedMap]) {
      return this[kHeadersList][kHeadersSortedMap]
    }

    // 1. Let headers be an empty list of headers with the key being the name
    //    and value the value.
    const headers = []

    // 2. Let names be the result of convert header names to a sorted-lowercase
    //    set with all the names of the headers in list.
    const names = [...this[kHeadersList]].sort((a, b) => a[0] < b[0] ? -1 : 1)
    const cookies = this[kHeadersList].cookies

    // 3. For each name of names:
    for (let i = 0; i < names.length; ++i) {
      const [name, value] = names[i]
      // 1. If name is `set-cookie`, then:
      if (name === 'set-cookie') {
        // 1. Let values be a list of all values of headers in list whose name
        //    is a byte-case-insensitive match for name, in order.

        // 2. For each value of values:
        // 1. Append (name, value) to headers.
        for (let j = 0; j < cookies.length; ++j) {
          headers.push([name, cookies[j]])
        }
      } else {
        // 2. Otherwise:

        // 1. Let value be the result of getting name from list.

        // 2. Assert: value is non-null.
        assert(value !== null)

        // 3. Append (name, value) to headers.
        headers.push([name, value])
      }
    }

    this[kHeadersList][kHeadersSortedMap] = headers

    // 4. Return headers.
    return headers
  }

  keys () {
    webidl.brandCheck(this, Headers)

    if (this[kGuard] === 'immutable') {
      const value = this[kHeadersSortedMap]
      return makeIterator(() => value, 'Headers',
        'key')
    }

    return makeIterator(
      () => [...this[kHeadersSortedMap].values()],
      'Headers',
      'key'
    )
  }

  values () {
    webidl.brandCheck(this, Headers)

    if (this[kGuard] === 'immutable') {
      const value = this[kHeadersSortedMap]
      return makeIterator(() => value, 'Headers',
        'value')
    }

    return makeIterator(
      () => [...this[kHeadersSortedMap].values()],
      'Headers',
      'value'
    )
  }

  entries () {
    webidl.brandCheck(this, Headers)

    if (this[kGuard] === 'immutable') {
      const value = this[kHeadersSortedMap]
      return makeIterator(() => value, 'Headers',
        'key+value')
    }

    return makeIterator(
      () => [...this[kHeadersSortedMap].values()],
      'Headers',
      'key+value'
    )
  }

  /**
   * @param {(value: string, key: string, self: Headers) => void} callbackFn
   * @param {unknown} thisArg
   */
  forEach (callbackFn, thisArg = globalThis) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.forEach' })

    if (typeof callbackFn !== 'function') {
      throw new TypeError(
        "Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'."
      )
    }

    for (const [key, value] of this) {
      callbackFn.apply(thisArg, [value, key, this])
    }
  }

  [Symbol.for('nodejs.util.inspect.custom')] () {
    webidl.brandCheck(this, Headers)

    return this[kHeadersList]
  }
}

Headers.prototype[Symbol.iterator] = Headers.prototype.entries

Object.defineProperties(Headers.prototype, {
  append: kEnumerableProperty,
  delete: kEnumerableProperty,
  get: kEnumerableProperty,
  has: kEnumerableProperty,
  set: kEnumerableProperty,
  getSetCookie: kEnumerableProperty,
  keys: kEnumerableProperty,
  values: kEnumerableProperty,
  entries: kEnumerableProperty,
  forEach: kEnumerableProperty,
  [Symbol.iterator]: { enumerable: false },
  [Symbol.toStringTag]: {
    value: 'Headers',
    configurable: true
  }
})

webidl.converters.HeadersInit = function (V) {
  if (webidl.util.Type(V) === 'Object') {
    if (V[Symbol.iterator]) {
      return webidl.converters['sequence<sequence<ByteString>>'](V)
    }

    return webidl.converters['record<ByteString, ByteString>'](V)
  }

  throw webidl.errors.conversionFailed({
    prefix: 'Headers constructor',
    argument: 'Argument 1',
    types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']
  })
}

module.exports = {
  fill,
  Headers,
  HeadersList
}


/***/ }),

/***/ 4881:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

// https://github.com/Ethan-Arrowood/undici-fetch



const {
  Response,
  makeNetworkError,
  makeAppropriateNetworkError,
  filterResponse,
  makeResponse
} = __nccwpck_require__(7823)
const { Headers } = __nccwpck_require__(554)
const { Request, makeRequest } = __nccwpck_require__(8359)
const zlib = __nccwpck_require__(9796)
const {
  bytesMatch,
  makePolicyContainer,
  clonePolicyContainer,
  requestBadPort,
  TAOCheck,
  appendRequestOriginHeader,
  responseLocationURL,
  requestCurrentURL,
  setRequestReferrerPolicyOnRedirect,
  tryUpgradeRequestToAPotentiallyTrustworthyURL,
  createOpaqueTimingInfo,
  appendFetchMetadata,
  corsCheck,
  crossOriginResourcePolicyCheck,
  determineRequestsReferrer,
  coarsenedSharedCurrentTime,
  createDeferredPromise,
  isBlobLike,
  sameOrigin,
  isCancelled,
  isAborted,
  isErrorLike,
  fullyReadBody,
  readableStreamClose,
  isomorphicEncode,
  urlIsLocal,
  urlIsHttpHttpsScheme,
  urlHasHttpsScheme
} = __nccwpck_require__(2538)
const { kState, kHeaders, kGuard, kRealm } = __nccwpck_require__(5861)
const assert = __nccwpck_require__(9491)
const { safelyExtractBody } = __nccwpck_require__(1472)
const {
  redirectStatusSet,
  nullBodyStatus,
  safeMethodsSet,
  requestBodyHeader,
  subresourceSet,
  DOMException
} = __nccwpck_require__(1037)
const { kHeadersList } = __nccwpck_require__(2785)
const EE = __nccwpck_require__(2361)
const { Readable, pipeline } = __nccwpck_require__(2781)
const { addAbortListener, isErrored, isReadable, nodeMajor, nodeMinor } = __nccwpck_require__(3983)
const { dataURLProcessor, serializeAMimeType } = __nccwpck_require__(685)
const { TransformStream } = __nccwpck_require__(5356)
const { getGlobalDispatcher } = __nccwpck_require__(1892)
const { webidl } = __nccwpck_require__(1744)
const { STATUS_CODES } = __nccwpck_require__(3685)
const GET_OR_HEAD = ['GET', 'HEAD']

/** @type {import('buffer').resolveObjectURL} */
let resolveObjectURL
let ReadableStream = globalThis.ReadableStream

class Fetch extends EE {
  constructor (dispatcher) {
    super()

    this.dispatcher = dispatcher
    this.connection = null
    this.dump = false
    this.state = 'ongoing'
    // 2 terminated listeners get added per request,
    // but only 1 gets removed. If there are 20 redirects,
    // 21 listeners will be added.
    // See https://github.com/nodejs/undici/issues/1711
    // TODO (fix): Find and fix root cause for leaked listener.
    this.setMaxListeners(21)
  }

  terminate (reason) {
    if (this.state !== 'ongoing') {
      return
    }

    this.state = 'terminated'
    this.connection?.destroy(reason)
    this.emit('terminated', reason)
  }

  // https://fetch.spec.whatwg.org/#fetch-controller-abort
  abort (error) {
    if (this.state !== 'ongoing') {
      return
    }

    // 1. Set controller’s state to "aborted".
    this.state = 'aborted'

    // 2. Let fallbackError be an "AbortError" DOMException.
    // 3. Set error to fallbackError if it is not given.
    if (!error) {
      error = new DOMException('The operation was aborted.', 'AbortError')
    }

    // 4. Let serializedError be StructuredSerialize(error).
    //    If that threw an exception, catch it, and let
    //    serializedError be StructuredSerialize(fallbackError).

    // 5. Set controller’s serialized abort reason to serializedError.
    this.serializedAbortReason = error

    this.connection?.destroy(error)
    this.emit('terminated', error)
  }
}

// https://fetch.spec.whatwg.org/#fetch-method
function fetch (input, init = {}) {
  webidl.argumentLengthCheck(arguments, 1, { header: 'globalThis.fetch' })

  // 1. Let p be a new promise.
  const p = createDeferredPromise()

  // 2. Let requestObject be the result of invoking the initial value of
  // Request as constructor with input and init as arguments. If this throws
  // an exception, reject p with it and return p.
  let requestObject

  try {
    requestObject = new Request(input, init)
  } catch (e) {
    p.reject(e)
    return p.promise
  }

  // 3. Let request be requestObject’s request.
  const request = requestObject[kState]

  // 4. If requestObject’s signal’s aborted flag is set, then:
  if (requestObject.signal.aborted) {
    // 1. Abort the fetch() call with p, request, null, and
    //    requestObject’s signal’s abort reason.
    abortFetch(p, request, null, requestObject.signal.reason)

    // 2. Return p.
    return p.promise
  }

  // 5. Let globalObject be request’s client’s global object.
  const globalObject = request.client.globalObject

  // 6. If globalObject is a ServiceWorkerGlobalScope object, then set
  // request’s service-workers mode to "none".
  if (globalObject?.constructor?.name === 'ServiceWorkerGlobalScope') {
    request.serviceWorkers = 'none'
  }

  // 7. Let responseObject be null.
  let responseObject = null

  // 8. Let relevantRealm be this’s relevant Realm.
  const relevantRealm = null

  // 9. Let locallyAborted be false.
  let locallyAborted = false

  // 10. Let controller be null.
  let controller = null

  // 11. Add the following abort steps to requestObject’s signal:
  addAbortListener(
    requestObject.signal,
    () => {
      // 1. Set locallyAborted to true.
      locallyAborted = true

      // 2. Assert: controller is non-null.
      assert(controller != null)

      // 3. Abort controller with requestObject’s signal’s abort reason.
      controller.abort(requestObject.signal.reason)

      // 4. Abort the fetch() call with p, request, responseObject,
      //    and requestObject’s signal’s abort reason.
      abortFetch(p, request, responseObject, requestObject.signal.reason)
    }
  )

  // 12. Let handleFetchDone given response response be to finalize and
  // report timing with response, globalObject, and "fetch".
  const handleFetchDone = (response) =>
    finalizeAndReportTiming(response, 'fetch')

  // 13. Set controller to the result of calling fetch given request,
  // with processResponseEndOfBody set to handleFetchDone, and processResponse
  // given response being these substeps:

  const processResponse = (response) => {
    // 1. If locallyAborted is true, terminate these substeps.
    if (locallyAborted) {
      return Promise.resolve()
    }

    // 2. If response’s aborted flag is set, then:
    if (response.aborted) {
      // 1. Let deserializedError be the result of deserialize a serialized
      //    abort reason given controller’s serialized abort reason and
      //    relevantRealm.

      // 2. Abort the fetch() call with p, request, responseObject, and
      //    deserializedError.

      abortFetch(p, request, responseObject, controller.serializedAbortReason)
      return Promise.resolve()
    }

    // 3. If response is a network error, then reject p with a TypeError
    // and terminate these substeps.
    if (response.type === 'error') {
      p.reject(
        Object.assign(new TypeError('fetch failed'), { cause: response.error })
      )
      return Promise.resolve()
    }

    // 4. Set responseObject to the result of creating a Response object,
    // given response, "immutable", and relevantRealm.
    responseObject = new Response()
    responseObject[kState] = response
    responseObject[kRealm] = relevantRealm
    responseObject[kHeaders][kHeadersList] = response.headersList
    responseObject[kHeaders][kGuard] = 'immutable'
    responseObject[kHeaders][kRealm] = relevantRealm

    // 5. Resolve p with responseObject.
    p.resolve(responseObject)
  }

  controller = fetching({
    request,
    processResponseEndOfBody: handleFetchDone,
    processResponse,
    dispatcher: init.dispatcher ?? getGlobalDispatcher() // undici
  })

  // 14. Return p.
  return p.promise
}

// https://fetch.spec.whatwg.org/#finalize-and-report-timing
function finalizeAndReportTiming (response, initiatorType = 'other') {
  // 1. If response is an aborted network error, then return.
  if (response.type === 'error' && response.aborted) {
    return
  }

  // 2. If response’s URL list is null or empty, then return.
  if (!response.urlList?.length) {
    return
  }

  // 3. Let originalURL be response’s URL list[0].
  const originalURL = response.urlList[0]

  // 4. Let timingInfo be response’s timing info.
  let timingInfo = response.timingInfo

  // 5. Let cacheState be response’s cache state.
  let cacheState = response.cacheState

  // 6. If originalURL’s scheme is not an HTTP(S) scheme, then return.
  if (!urlIsHttpHttpsScheme(originalURL)) {
    return
  }

  // 7. If timingInfo is null, then return.
  if (timingInfo === null) {
    return
  }

  // 8. If response’s timing allow passed flag is not set, then:
  if (!response.timingAllowPassed) {
    //  1. Set timingInfo to a the result of creating an opaque timing info for timingInfo.
    timingInfo = createOpaqueTimingInfo({
      startTime: timingInfo.startTime
    })

    //  2. Set cacheState to the empty string.
    cacheState = ''
  }

  // 9. Set timingInfo’s end time to the coarsened shared current time
  // given global’s relevant settings object’s cross-origin isolated
  // capability.
  // TODO: given global’s relevant settings object’s cross-origin isolated
  // capability?
  timingInfo.endTime = coarsenedSharedCurrentTime()

  // 10. Set response’s timing info to timingInfo.
  response.timingInfo = timingInfo

  // 11. Mark resource timing for timingInfo, originalURL, initiatorType,
  // global, and cacheState.
  markResourceTiming(
    timingInfo,
    originalURL,
    initiatorType,
    globalThis,
    cacheState
  )
}

// https://w3c.github.io/resource-timing/#dfn-mark-resource-timing
function markResourceTiming (timingInfo, originalURL, initiatorType, globalThis, cacheState) {
  if (nodeMajor > 18 || (nodeMajor === 18 && nodeMinor >= 2)) {
    performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis, cacheState)
  }
}

// https://fetch.spec.whatwg.org/#abort-fetch
function abortFetch (p, request, responseObject, error) {
  // Note: AbortSignal.reason was added in node v17.2.0
  // which would give us an undefined error to reject with.
  // Remove this once node v16 is no longer supported.
  if (!error) {
    error = new DOMException('The operation was aborted.', 'AbortError')
  }

  // 1. Reject promise with error.
  p.reject(error)

  // 2. If request’s body is not null and is readable, then cancel request’s
  // body with error.
  if (request.body != null && isReadable(request.body?.stream)) {
    request.body.stream.cancel(error).catch((err) => {
      if (err.code === 'ERR_INVALID_STATE') {
        // Node bug?
        return
      }
      throw err
    })
  }

  // 3. If responseObject is null, then return.
  if (responseObject == null) {
    return
  }

  // 4. Let response be responseObject’s response.
  const response = responseObject[kState]

  // 5. If response’s body is not null and is readable, then error response’s
  // body with error.
  if (response.body != null && isReadable(response.body?.stream)) {
    response.body.stream.cancel(error).catch((err) => {
      if (err.code === 'ERR_INVALID_STATE') {
        // Node bug?
        return
      }
      throw err
    })
  }
}

// https://fetch.spec.whatwg.org/#fetching
function fetching ({
  request,
  processRequestBodyChunkLength,
  processRequestEndOfBody,
  processResponse,
  processResponseEndOfBody,
  processResponseConsumeBody,
  useParallelQueue = false,
  dispatcher // undici
}) {
  // 1. Let taskDestination be null.
  let taskDestination = null

  // 2. Let crossOriginIsolatedCapability be false.
  let crossOriginIsolatedCapability = false

  // 3. If request’s client is non-null, then:
  if (request.client != null) {
    // 1. Set taskDestination to request’s client’s global object.
    taskDestination = request.client.globalObject

    // 2. Set crossOriginIsolatedCapability to request’s client’s cross-origin
    // isolated capability.
    crossOriginIsolatedCapability =
      request.client.crossOriginIsolatedCapability
  }

  // 4. If useParallelQueue is true, then set taskDestination to the result of
  // starting a new parallel queue.
  // TODO

  // 5. Let timingInfo be a new fetch timing info whose start time and
  // post-redirect start time are the coarsened shared current time given
  // crossOriginIsolatedCapability.
  const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability)
  const timingInfo = createOpaqueTimingInfo({
    startTime: currenTime
  })

  // 6. Let fetchParams be a new fetch params whose
  // request is request,
  // timing info is timingInfo,
  // process request body chunk length is processRequestBodyChunkLength,
  // process request end-of-body is processRequestEndOfBody,
  // process response is processResponse,
  // process response consume body is processResponseConsumeBody,
  // process response end-of-body is processResponseEndOfBody,
  // task destination is taskDestination,
  // and cross-origin isolated capability is crossOriginIsolatedCapability.
  const fetchParams = {
    controller: new Fetch(dispatcher),
    request,
    timingInfo,
    processRequestBodyChunkLength,
    processRequestEndOfBody,
    processResponse,
    processResponseConsumeBody,
    processResponseEndOfBody,
    taskDestination,
    crossOriginIsolatedCapability
  }

  // 7. If request’s body is a byte sequence, then set request’s body to
  //    request’s body as a body.
  // NOTE: Since fetching is only called from fetch, body should already be
  // extracted.
  assert(!request.body || request.body.stream)

  // 8. If request’s window is "client", then set request’s window to request’s
  // client, if request’s client’s global object is a Window object; otherwise
  // "no-window".
  if (request.window === 'client') {
    // TODO: What if request.client is null?
    request.window =
      request.client?.globalObject?.constructor?.name === 'Window'
        ? request.client
        : 'no-window'
  }

  // 9. If request’s origin is "client", then set request’s origin to request’s
  // client’s origin.
  if (request.origin === 'client') {
    // TODO: What if request.client is null?
    request.origin = request.client?.origin
  }

  // 10. If all of the following conditions are true:
  // TODO

  // 11. If request’s policy container is "client", then:
  if (request.policyContainer === 'client') {
    // 1. If request’s client is non-null, then set request’s policy
    // container to a clone of request’s client’s policy container. [HTML]
    if (request.client != null) {
      request.policyContainer = clonePolicyContainer(
        request.client.policyContainer
      )
    } else {
      // 2. Otherwise, set request’s policy container to a new policy
      // container.
      request.policyContainer = makePolicyContainer()
    }
  }

  // 12. If request’s header list does not contain `Accept`, then:
  if (!request.headersList.contains('accept')) {
    // 1. Let value be `*/*`.
    const value = '*/*'

    // 2. A user agent should set value to the first matching statement, if
    // any, switching on request’s destination:
    // "document"
    // "frame"
    // "iframe"
    // `text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8`
    // "image"
    // `image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5`
    // "style"
    // `text/css,*/*;q=0.1`
    // TODO

    // 3. Append `Accept`/value to request’s header list.
    request.headersList.append('accept', value)
  }

  // 13. If request’s header list does not contain `Accept-Language`, then
  // user agents should append `Accept-Language`/an appropriate value to
  // request’s header list.
  if (!request.headersList.contains('accept-language')) {
    request.headersList.append('accept-language', '*')
  }

  // 14. If request’s priority is null, then use request’s initiator and
  // destination appropriately in setting request’s priority to a
  // user-agent-defined object.
  if (request.priority === null) {
    // TODO
  }

  // 15. If request is a subresource request, then:
  if (subresourceSet.has(request.destination)) {
    // TODO
  }

  // 16. Run main fetch given fetchParams.
  mainFetch(fetchParams)
    .catch(err => {
      fetchParams.controller.terminate(err)
    })

  // 17. Return fetchParam's controller
  return fetchParams.controller
}

// https://fetch.spec.whatwg.org/#concept-main-fetch
async function mainFetch (fetchParams, recursive = false) {
  // 1. Let request be fetchParams’s request.
  const request = fetchParams.request

  // 2. Let response be null.
  let response = null

  // 3. If request’s local-URLs-only flag is set and request’s current URL is
  // not local, then set response to a network error.
  if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request))) {
    response = makeNetworkError('local URLs only')
  }

  // 4. Run report Content Security Policy violations for request.
  // TODO

  // 5. Upgrade request to a potentially trustworthy URL, if appropriate.
  tryUpgradeRequestToAPotentiallyTrustworthyURL(request)

  // 6. If should request be blocked due to a bad port, should fetching request
  // be blocked as mixed content, or should request be blocked by Content
  // Security Policy returns blocked, then set response to a network error.
  if (requestBadPort(request) === 'blocked') {
    response = makeNetworkError('bad port')
  }
  // TODO: should fetching request be blocked as mixed content?
  // TODO: should request be blocked by Content Security Policy?

  // 7. If request’s referrer policy is the empty string, then set request’s
  // referrer policy to request’s policy container’s referrer policy.
  if (request.referrerPolicy === '') {
    request.referrerPolicy = request.policyContainer.referrerPolicy
  }

  // 8. If request’s referrer is not "no-referrer", then set request’s
  // referrer to the result of invoking determine request’s referrer.
  if (request.referrer !== 'no-referrer') {
    request.referrer = determineRequestsReferrer(request)
  }

  // 9. Set request’s current URL’s scheme to "https" if all of the following
  // conditions are true:
  // - request’s current URL’s scheme is "http"
  // - request’s current URL’s host is a domain
  // - Matching request’s current URL’s host per Known HSTS Host Domain Name
  //   Matching results in either a superdomain match with an asserted
  //   includeSubDomains directive or a congruent match (with or without an
  //   asserted includeSubDomains directive). [HSTS]
  // TODO

  // 10. If recursive is false, then run the remaining steps in parallel.
  // TODO

  // 11. If response is null, then set response to the result of running
  // the steps corresponding to the first matching statement:
  if (response === null) {
    response = await (async () => {
      const currentURL = requestCurrentURL(request)

      if (
        // - request’s current URL’s origin is same origin with request’s origin,
        //   and request’s response tainting is "basic"
        (sameOrigin(currentURL, request.url) && request.responseTainting === 'basic') ||
        // request’s current URL’s scheme is "data"
        (currentURL.protocol === 'data:') ||
        // - request’s mode is "navigate" or "websocket"
        (request.mode === 'navigate' || request.mode === 'websocket')
      ) {
        // 1. Set request’s response tainting to "basic".
        request.responseTainting = 'basic'

        // 2. Return the result of running scheme fetch given fetchParams.
        return await schemeFetch(fetchParams)
      }

      // request’s mode is "same-origin"
      if (request.mode === 'same-origin') {
        // 1. Return a network error.
        return makeNetworkError('request mode cannot be "same-origin"')
      }

      // request’s mode is "no-cors"
      if (request.mode === 'no-cors') {
        // 1. If request’s redirect mode is not "follow", then return a network
        // error.
        if (request.redirect !== 'follow') {
          return makeNetworkError(
            'redirect mode cannot be "follow" for "no-cors" request'
          )
        }

        // 2. Set request’s response tainting to "opaque".
        request.responseTainting = 'opaque'

        // 3. Return the result of running scheme fetch given fetchParams.
        return await schemeFetch(fetchParams)
      }

      // request’s current URL’s scheme is not an HTTP(S) scheme
      if (!urlIsHttpHttpsScheme(requestCurrentURL(request))) {
        // Return a network error.
        return makeNetworkError('URL scheme must be a HTTP(S) scheme')
      }

      // - request’s use-CORS-preflight flag is set
      // - request’s unsafe-request flag is set and either request’s method is
      //   not a CORS-safelisted method or CORS-unsafe request-header names with
      //   request’s header list is not empty
      //    1. Set request’s response tainting to "cors".
      //    2. Let corsWithPreflightResponse be the result of running HTTP fetch
      //    given fetchParams and true.
      //    3. If corsWithPreflightResponse is a network error, then clear cache
      //    entries using request.
      //    4. Return corsWithPreflightResponse.
      // TODO

      // Otherwise
      //    1. Set request’s response tainting to "cors".
      request.responseTainting = 'cors'

      //    2. Return the result of running HTTP fetch given fetchParams.
      return await httpFetch(fetchParams)
    })()
  }

  // 12. If recursive is true, then return response.
  if (recursive) {
    return response
  }

  // 13. If response is not a network error and response is not a filtered
  // response, then:
  if (response.status !== 0 && !response.internalResponse) {
    // If request’s response tainting is "cors", then:
    if (request.responseTainting === 'cors') {
      // 1. Let headerNames be the result of extracting header list values
      // given `Access-Control-Expose-Headers` and response’s header list.
      // TODO
      // 2. If request’s credentials mode is not "include" and headerNames
      // contains `*`, then set response’s CORS-exposed header-name list to
      // all unique header names in response’s header list.
      // TODO
      // 3. Otherwise, if headerNames is not null or failure, then set
      // response’s CORS-exposed header-name list to headerNames.
      // TODO
    }

    // Set response to the following filtered response with response as its
    // internal response, depending on request’s response tainting:
    if (request.responseTainting === 'basic') {
      response = filterResponse(response, 'basic')
    } else if (request.responseTainting === 'cors') {
      response = filterResponse(response, 'cors')
    } else if (request.responseTainting === 'opaque') {
      response = filterResponse(response, 'opaque')
    } else {
      assert(false)
    }
  }

  // 14. Let internalResponse be response, if response is a network error,
  // and response’s internal response otherwise.
  let internalResponse =
    response.status === 0 ? response : response.internalResponse

  // 15. If internalResponse’s URL list is empty, then set it to a clone of
  // request’s URL list.
  if (internalResponse.urlList.length === 0) {
    internalResponse.urlList.push(...request.urlList)
  }

  // 16. If request’s timing allow failed flag is unset, then set
  // internalResponse’s timing allow passed flag.
  if (!request.timingAllowFailed) {
    response.timingAllowPassed = true
  }

  // 17. If response is not a network error and any of the following returns
  // blocked
  // - should internalResponse to request be blocked as mixed content
  // - should internalResponse to request be blocked by Content Security Policy
  // - should internalResponse to request be blocked due to its MIME type
  // - should internalResponse to request be blocked due to nosniff
  // TODO

  // 18. If response’s type is "opaque", internalResponse’s status is 206,
  // internalResponse’s range-requested flag is set, and request’s header
  // list does not contain `Range`, then set response and internalResponse
  // to a network error.
  if (
    response.type === 'opaque' &&
    internalResponse.status === 206 &&
    internalResponse.rangeRequested &&
    !request.headers.contains('range')
  ) {
    response = internalResponse = makeNetworkError()
  }

  // 19. If response is not a network error and either request’s method is
  // `HEAD` or `CONNECT`, or internalResponse’s status is a null body status,
  // set internalResponse’s body to null and disregard any enqueuing toward
  // it (if any).
  if (
    response.status !== 0 &&
    (request.method === 'HEAD' ||
      request.method === 'CONNECT' ||
      nullBodyStatus.includes(internalResponse.status))
  ) {
    internalResponse.body = null
    fetchParams.controller.dump = true
  }

  // 20. If request’s integrity metadata is not the empty string, then:
  if (request.integrity) {
    // 1. Let processBodyError be this step: run fetch finale given fetchParams
    // and a network error.
    const processBodyError = (reason) =>
      fetchFinale(fetchParams, makeNetworkError(reason))

    // 2. If request’s response tainting is "opaque", or response’s body is null,
    // then run processBodyError and abort these steps.
    if (request.responseTainting === 'opaque' || response.body == null) {
      processBodyError(response.error)
      return
    }

    // 3. Let processBody given bytes be these steps:
    const processBody = (bytes) => {
      // 1. If bytes do not match request’s integrity metadata,
      // then run processBodyError and abort these steps. [SRI]
      if (!bytesMatch(bytes, request.integrity)) {
        processBodyError('integrity mismatch')
        return
      }

      // 2. Set response’s body to bytes as a body.
      response.body = safelyExtractBody(bytes)[0]

      // 3. Run fetch finale given fetchParams and response.
      fetchFinale(fetchParams, response)
    }

    // 4. Fully read response’s body given processBody and processBodyError.
    await fullyReadBody(response.body, processBody, processBodyError)
  } else {
    // 21. Otherwise, run fetch finale given fetchParams and response.
    fetchFinale(fetchParams, response)
  }
}

// https://fetch.spec.whatwg.org/#concept-scheme-fetch
// given a fetch params fetchParams
function schemeFetch (fetchParams) {
  // Note: since the connection is destroyed on redirect, which sets fetchParams to a
  // cancelled state, we do not want this condition to trigger *unless* there have been
  // no redirects. See https://github.com/nodejs/undici/issues/1776
  // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.
  if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {
    return Promise.resolve(makeAppropriateNetworkError(fetchParams))
  }

  // 2. Let request be fetchParams’s request.
  const { request } = fetchParams

  const { protocol: scheme } = requestCurrentURL(request)

  // 3. Switch on request’s current URL’s scheme and run the associated steps:
  switch (scheme) {
    case 'about:': {
      // If request’s current URL’s path is the string "blank", then return a new response
      // whose status message is `OK`, header list is « (`Content-Type`, `text/html;charset=utf-8`) »,
      // and body is the empty byte sequence as a body.

      // Otherwise, return a network error.
      return Promise.resolve(makeNetworkError('about scheme is not supported'))
    }
    case 'blob:': {
      if (!resolveObjectURL) {
        resolveObjectURL = (__nccwpck_require__(4300).resolveObjectURL)
      }

      // 1. Let blobURLEntry be request’s current URL’s blob URL entry.
      const blobURLEntry = requestCurrentURL(request)

      // https://github.com/web-platform-tests/wpt/blob/7b0ebaccc62b566a1965396e5be7bb2bc06f841f/FileAPI/url/resources/fetch-tests.js#L52-L56
      // Buffer.resolveObjectURL does not ignore URL queries.
      if (blobURLEntry.search.length !== 0) {
        return Promise.resolve(makeNetworkError('NetworkError when attempting to fetch resource.'))
      }

      const blobURLEntryObject = resolveObjectURL(blobURLEntry.toString())

      // 2. If request’s method is not `GET`, blobURLEntry is null, or blobURLEntry’s
      //    object is not a Blob object, then return a network error.
      if (request.method !== 'GET' || !isBlobLike(blobURLEntryObject)) {
        return Promise.resolve(makeNetworkError('invalid method'))
      }

      // 3. Let bodyWithType be the result of safely extracting blobURLEntry’s object.
      const bodyWithType = safelyExtractBody(blobURLEntryObject)

      // 4. Let body be bodyWithType’s body.
      const body = bodyWithType[0]

      // 5. Let length be body’s length, serialized and isomorphic encoded.
      const length = isomorphicEncode(`${body.length}`)

      // 6. Let type be bodyWithType’s type if it is non-null; otherwise the empty byte sequence.
      const type = bodyWithType[1] ?? ''

      // 7. Return a new response whose status message is `OK`, header list is
      //    « (`Content-Length`, length), (`Content-Type`, type) », and body is body.
      const response = makeResponse({
        statusText: 'OK',
        headersList: [
          ['content-length', { name: 'Content-Length', value: length }],
          ['content-type', { name: 'Content-Type', value: type }]
        ]
      })

      response.body = body

      return Promise.resolve(response)
    }
    case 'data:': {
      // 1. Let dataURLStruct be the result of running the
      //    data: URL processor on request’s current URL.
      const currentURL = requestCurrentURL(request)
      const dataURLStruct = dataURLProcessor(currentURL)

      // 2. If dataURLStruct is failure, then return a
      //    network error.
      if (dataURLStruct === 'failure') {
        return Promise.resolve(makeNetworkError('failed to fetch the data URL'))
      }

      // 3. Let mimeType be dataURLStruct’s MIME type, serialized.
      const mimeType = serializeAMimeType(dataURLStruct.mimeType)

      // 4. Return a response whose status message is `OK`,
      //    header list is « (`Content-Type`, mimeType) »,
      //    and body is dataURLStruct’s body as a body.
      return Promise.resolve(makeResponse({
        statusText: 'OK',
        headersList: [
          ['content-type', { name: 'Content-Type', value: mimeType }]
        ],
        body: safelyExtractBody(dataURLStruct.body)[0]
      }))
    }
    case 'file:': {
      // For now, unfortunate as it is, file URLs are left as an exercise for the reader.
      // When in doubt, return a network error.
      return Promise.resolve(makeNetworkError('not implemented... yet...'))
    }
    case 'http:':
    case 'https:': {
      // Return the result of running HTTP fetch given fetchParams.

      return httpFetch(fetchParams)
        .catch((err) => makeNetworkError(err))
    }
    default: {
      return Promise.resolve(makeNetworkError('unknown scheme'))
    }
  }
}

// https://fetch.spec.whatwg.org/#finalize-response
function finalizeResponse (fetchParams, response) {
  // 1. Set fetchParams’s request’s done flag.
  fetchParams.request.done = true

  // 2, If fetchParams’s process response done is not null, then queue a fetch
  // task to run fetchParams’s process response done given response, with
  // fetchParams’s task destination.
  if (fetchParams.processResponseDone != null) {
    queueMicrotask(() => fetchParams.processResponseDone(response))
  }
}

// https://fetch.spec.whatwg.org/#fetch-finale
function fetchFinale (fetchParams, response) {
  // 1. If response is a network error, then:
  if (response.type === 'error') {
    // 1. Set response’s URL list to « fetchParams’s request’s URL list[0] ».
    response.urlList = [fetchParams.request.urlList[0]]

    // 2. Set response’s timing info to the result of creating an opaque timing
    // info for fetchParams’s timing info.
    response.timingInfo = createOpaqueTimingInfo({
      startTime: fetchParams.timingInfo.startTime
    })
  }

  // 2. Let processResponseEndOfBody be the following steps:
  const processResponseEndOfBody = () => {
    // 1. Set fetchParams’s request’s done flag.
    fetchParams.request.done = true

    // If fetchParams’s process response end-of-body is not null,
    // then queue a fetch task to run fetchParams’s process response
    // end-of-body given response with fetchParams’s task destination.
    if (fetchParams.processResponseEndOfBody != null) {
      queueMicrotask(() => fetchParams.processResponseEndOfBody(response))
    }
  }

  // 3. If fetchParams’s process response is non-null, then queue a fetch task
  // to run fetchParams’s process response given response, with fetchParams’s
  // task destination.
  if (fetchParams.processResponse != null) {
    queueMicrotask(() => fetchParams.processResponse(response))
  }

  // 4. If response’s body is null, then run processResponseEndOfBody.
  if (response.body == null) {
    processResponseEndOfBody()
  } else {
  // 5. Otherwise:

    // 1. Let transformStream be a new a TransformStream.

    // 2. Let identityTransformAlgorithm be an algorithm which, given chunk,
    // enqueues chunk in transformStream.
    const identityTransformAlgorithm = (chunk, controller) => {
      controller.enqueue(chunk)
    }

    // 3. Set up transformStream with transformAlgorithm set to identityTransformAlgorithm
    // and flushAlgorithm set to processResponseEndOfBody.
    const transformStream = new TransformStream({
      start () {},
      transform: identityTransformAlgorithm,
      flush: processResponseEndOfBody
    }, {
      size () {
        return 1
      }
    }, {
      size () {
        return 1
      }
    })

    // 4. Set response’s body to the result of piping response’s body through transformStream.
    response.body = { stream: response.body.stream.pipeThrough(transformStream) }
  }

  // 6. If fetchParams’s process response consume body is non-null, then:
  if (fetchParams.processResponseConsumeBody != null) {
    // 1. Let processBody given nullOrBytes be this step: run fetchParams’s
    // process response consume body given response and nullOrBytes.
    const processBody = (nullOrBytes) => fetchParams.processResponseConsumeBody(response, nullOrBytes)

    // 2. Let processBodyError be this step: run fetchParams’s process
    // response consume body given response and failure.
    const processBodyError = (failure) => fetchParams.processResponseConsumeBody(response, failure)

    // 3. If response’s body is null, then queue a fetch task to run processBody
    // given null, with fetchParams’s task destination.
    if (response.body == null) {
      queueMicrotask(() => processBody(null))
    } else {
      // 4. Otherwise, fully read response’s body given processBody, processBodyError,
      // and fetchParams’s task destination.
      return fullyReadBody(response.body, processBody, processBodyError)
    }
    return Promise.resolve()
  }
}

// https://fetch.spec.whatwg.org/#http-fetch
async function httpFetch (fetchParams) {
  // 1. Let request be fetchParams’s request.
  const request = fetchParams.request

  // 2. Let response be null.
  let response = null

  // 3. Let actualResponse be null.
  let actualResponse = null

  // 4. Let timingInfo be fetchParams’s timing info.
  const timingInfo = fetchParams.timingInfo

  // 5. If request’s service-workers mode is "all", then:
  if (request.serviceWorkers === 'all') {
    // TODO
  }

  // 6. If response is null, then:
  if (response === null) {
    // 1. If makeCORSPreflight is true and one of these conditions is true:
    // TODO

    // 2. If request’s redirect mode is "follow", then set request’s
    // service-workers mode to "none".
    if (request.redirect === 'follow') {
      request.serviceWorkers = 'none'
    }

    // 3. Set response and actualResponse to the result of running
    // HTTP-network-or-cache fetch given fetchParams.
    actualResponse = response = await httpNetworkOrCacheFetch(fetchParams)

    // 4. If request’s response tainting is "cors" and a CORS check
    // for request and response returns failure, then return a network error.
    if (
      request.responseTainting === 'cors' &&
      corsCheck(request, response) === 'failure'
    ) {
      return makeNetworkError('cors failure')
    }

    // 5. If the TAO check for request and response returns failure, then set
    // request’s timing allow failed flag.
    if (TAOCheck(request, response) === 'failure') {
      request.timingAllowFailed = true
    }
  }

  // 7. If either request’s response tainting or response’s type
  // is "opaque", and the cross-origin resource policy check with
  // request’s origin, request’s client, request’s destination,
  // and actualResponse returns blocked, then return a network error.
  if (
    (request.responseTainting === 'opaque' || response.type === 'opaque') &&
    crossOriginResourcePolicyCheck(
      request.origin,
      request.client,
      request.destination,
      actualResponse
    ) === 'blocked'
  ) {
    return makeNetworkError('blocked')
  }

  // 8. If actualResponse’s status is a redirect status, then:
  if (redirectStatusSet.has(actualResponse.status)) {
    // 1. If actualResponse’s status is not 303, request’s body is not null,
    // and the connection uses HTTP/2, then user agents may, and are even
    // encouraged to, transmit an RST_STREAM frame.
    // See, https://github.com/whatwg/fetch/issues/1288
    if (request.redirect !== 'manual') {
      fetchParams.controller.connection.destroy()
    }

    // 2. Switch on request’s redirect mode:
    if (request.redirect === 'error') {
      // Set response to a network error.
      response = makeNetworkError('unexpected redirect')
    } else if (request.redirect === 'manual') {
      // Set response to an opaque-redirect filtered response whose internal
      // response is actualResponse.
      // NOTE(spec): On the web this would return an `opaqueredirect` response,
      // but that doesn't make sense server side.
      // See https://github.com/nodejs/undici/issues/1193.
      response = actualResponse
    } else if (request.redirect === 'follow') {
      // Set response to the result of running HTTP-redirect fetch given
      // fetchParams and response.
      response = await httpRedirectFetch(fetchParams, response)
    } else {
      assert(false)
    }
  }

  // 9. Set response’s timing info to timingInfo.
  response.timingInfo = timingInfo

  // 10. Return response.
  return response
}

// https://fetch.spec.whatwg.org/#http-redirect-fetch
function httpRedirectFetch (fetchParams, response) {
  // 1. Let request be fetchParams’s request.
  const request = fetchParams.request

  // 2. Let actualResponse be response, if response is not a filtered response,
  // and response’s internal response otherwise.
  const actualResponse = response.internalResponse
    ? response.internalResponse
    : response

  // 3. Let locationURL be actualResponse’s location URL given request’s current
  // URL’s fragment.
  let locationURL

  try {
    locationURL = responseLocationURL(
      actualResponse,
      requestCurrentURL(request).hash
    )

    // 4. If locationURL is null, then return response.
    if (locationURL == null) {
      return response
    }
  } catch (err) {
    // 5. If locationURL is failure, then return a network error.
    return Promise.resolve(makeNetworkError(err))
  }

  // 6. If locationURL’s scheme is not an HTTP(S) scheme, then return a network
  // error.
  if (!urlIsHttpHttpsScheme(locationURL)) {
    return Promise.resolve(makeNetworkError('URL scheme must be a HTTP(S) scheme'))
  }

  // 7. If request’s redirect count is 20, then return a network error.
  if (request.redirectCount === 20) {
    return Promise.resolve(makeNetworkError('redirect count exceeded'))
  }

  // 8. Increase request’s redirect count by 1.
  request.redirectCount += 1

  // 9. If request’s mode is "cors", locationURL includes credentials, and
  // request’s origin is not same origin with locationURL’s origin, then return
  //  a network error.
  if (
    request.mode === 'cors' &&
    (locationURL.username || locationURL.password) &&
    !sameOrigin(request, locationURL)
  ) {
    return Promise.resolve(makeNetworkError('cross origin not allowed for request mode "cors"'))
  }

  // 10. If request’s response tainting is "cors" and locationURL includes
  // credentials, then return a network error.
  if (
    request.responseTainting === 'cors' &&
    (locationURL.username || locationURL.password)
  ) {
    return Promise.resolve(makeNetworkError(
      'URL cannot contain credentials for request mode "cors"'
    ))
  }

  // 11. If actualResponse’s status is not 303, request’s body is non-null,
  // and request’s body’s source is null, then return a network error.
  if (
    actualResponse.status !== 303 &&
    request.body != null &&
    request.body.source == null
  ) {
    return Promise.resolve(makeNetworkError())
  }

  // 12. If one of the following is true
  // - actualResponse’s status is 301 or 302 and request’s method is `POST`
  // - actualResponse’s status is 303 and request’s method is not `GET` or `HEAD`
  if (
    ([301, 302].includes(actualResponse.status) && request.method === 'POST') ||
    (actualResponse.status === 303 &&
      !GET_OR_HEAD.includes(request.method))
  ) {
    // then:
    // 1. Set request’s method to `GET` and request’s body to null.
    request.method = 'GET'
    request.body = null

    // 2. For each headerName of request-body-header name, delete headerName from
    // request’s header list.
    for (const headerName of requestBodyHeader) {
      request.headersList.delete(headerName)
    }
  }

  // 13. If request’s current URL’s origin is not same origin with locationURL’s
  //     origin, then for each headerName of CORS non-wildcard request-header name,
  //     delete headerName from request’s header list.
  if (!sameOrigin(requestCurrentURL(request), locationURL)) {
    // https://fetch.spec.whatwg.org/#cors-non-wildcard-request-header-name
    request.headersList.delete('authorization')

    // https://fetch.spec.whatwg.org/#authentication-entries
    request.headersList.delete('proxy-authorization', true)

    // "Cookie" and "Host" are forbidden request-headers, which undici doesn't implement.
    request.headersList.delete('cookie')
    request.headersList.delete('host')
  }

  // 14. If request’s body is non-null, then set request’s body to the first return
  // value of safely extracting request’s body’s source.
  if (request.body != null) {
    assert(request.body.source != null)
    request.body = safelyExtractBody(request.body.source)[0]
  }

  // 15. Let timingInfo be fetchParams’s timing info.
  const timingInfo = fetchParams.timingInfo

  // 16. Set timingInfo’s redirect end time and post-redirect start time to the
  // coarsened shared current time given fetchParams’s cross-origin isolated
  // capability.
  timingInfo.redirectEndTime = timingInfo.postRedirectStartTime =
    coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability)

  // 17. If timingInfo’s redirect start time is 0, then set timingInfo’s
  //  redirect start time to timingInfo’s start time.
  if (timingInfo.redirectStartTime === 0) {
    timingInfo.redirectStartTime = timingInfo.startTime
  }

  // 18. Append locationURL to request’s URL list.
  request.urlList.push(locationURL)

  // 19. Invoke set request’s referrer policy on redirect on request and
  // actualResponse.
  setRequestReferrerPolicyOnRedirect(request, actualResponse)

  // 20. Return the result of running main fetch given fetchParams and true.
  return mainFetch(fetchParams, true)
}

// https://fetch.spec.whatwg.org/#http-network-or-cache-fetch
async function httpNetworkOrCacheFetch (
  fetchParams,
  isAuthenticationFetch = false,
  isNewConnectionFetch = false
) {
  // 1. Let request be fetchParams’s request.
  const request = fetchParams.request

  // 2. Let httpFetchParams be null.
  let httpFetchParams = null

  // 3. Let httpRequest be null.
  let httpRequest = null

  // 4. Let response be null.
  let response = null

  // 5. Let storedResponse be null.
  // TODO: cache

  // 6. Let httpCache be null.
  const httpCache = null

  // 7. Let the revalidatingFlag be unset.
  const revalidatingFlag = false

  // 8. Run these steps, but abort when the ongoing fetch is terminated:

  //    1. If request’s window is "no-window" and request’s redirect mode is
  //    "error", then set httpFetchParams to fetchParams and httpRequest to
  //    request.
  if (request.window === 'no-window' && request.redirect === 'error') {
    httpFetchParams = fetchParams
    httpRequest = request
  } else {
    // Otherwise:

    // 1. Set httpRequest to a clone of request.
    httpRequest = makeRequest(request)

    // 2. Set httpFetchParams to a copy of fetchParams.
    httpFetchParams = { ...fetchParams }

    // 3. Set httpFetchParams’s request to httpRequest.
    httpFetchParams.request = httpRequest
  }

  //    3. Let includeCredentials be true if one of
  const includeCredentials =
    request.credentials === 'include' ||
    (request.credentials === 'same-origin' &&
      request.responseTainting === 'basic')

  //    4. Let contentLength be httpRequest’s body’s length, if httpRequest’s
  //    body is non-null; otherwise null.
  const contentLength = httpRequest.body ? httpRequest.body.length : null

  //    5. Let contentLengthHeaderValue be null.
  let contentLengthHeaderValue = null

  //    6. If httpRequest’s body is null and httpRequest’s method is `POST` or
  //    `PUT`, then set contentLengthHeaderValue to `0`.
  if (
    httpRequest.body == null &&
    ['POST', 'PUT'].includes(httpRequest.method)
  ) {
    contentLengthHeaderValue = '0'
  }

  //    7. If contentLength is non-null, then set contentLengthHeaderValue to
  //    contentLength, serialized and isomorphic encoded.
  if (contentLength != null) {
    contentLengthHeaderValue = isomorphicEncode(`${contentLength}`)
  }

  //    8. If contentLengthHeaderValue is non-null, then append
  //    `Content-Length`/contentLengthHeaderValue to httpRequest’s header
  //    list.
  if (contentLengthHeaderValue != null) {
    httpRequest.headersList.append('content-length', contentLengthHeaderValue)
  }

  //    9. If contentLengthHeaderValue is non-null, then append (`Content-Length`,
  //    contentLengthHeaderValue) to httpRequest’s header list.

  //    10. If contentLength is non-null and httpRequest’s keepalive is true,
  //    then:
  if (contentLength != null && httpRequest.keepalive) {
    // NOTE: keepalive is a noop outside of browser context.
  }

  //    11. If httpRequest’s referrer is a URL, then append
  //    `Referer`/httpRequest’s referrer, serialized and isomorphic encoded,
  //     to httpRequest’s header list.
  if (httpRequest.referrer instanceof URL) {
    httpRequest.headersList.append('referer', isomorphicEncode(httpRequest.referrer.href))
  }

  //    12. Append a request `Origin` header for httpRequest.
  appendRequestOriginHeader(httpRequest)

  //    13. Append the Fetch metadata headers for httpRequest. [FETCH-METADATA]
  appendFetchMetadata(httpRequest)

  //    14. If httpRequest’s header list does not contain `User-Agent`, then
  //    user agents should append `User-Agent`/default `User-Agent` value to
  //    httpRequest’s header list.
  if (!httpRequest.headersList.contains('user-agent')) {
    httpRequest.headersList.append('user-agent', typeof esbuildDetection === 'undefined' ? 'undici' : 'node')
  }

  //    15. If httpRequest’s cache mode is "default" and httpRequest’s header
  //    list contains `If-Modified-Since`, `If-None-Match`,
  //    `If-Unmodified-Since`, `If-Match`, or `If-Range`, then set
  //    httpRequest’s cache mode to "no-store".
  if (
    httpRequest.cache === 'default' &&
    (httpRequest.headersList.contains('if-modified-since') ||
      httpRequest.headersList.contains('if-none-match') ||
      httpRequest.headersList.contains('if-unmodified-since') ||
      httpRequest.headersList.contains('if-match') ||
      httpRequest.headersList.contains('if-range'))
  ) {
    httpRequest.cache = 'no-store'
  }

  //    16. If httpRequest’s cache mode is "no-cache", httpRequest’s prevent
  //    no-cache cache-control header modification flag is unset, and
  //    httpRequest’s header list does not contain `Cache-Control`, then append
  //    `Cache-Control`/`max-age=0` to httpRequest’s header list.
  if (
    httpRequest.cache === 'no-cache' &&
    !httpRequest.preventNoCacheCacheControlHeaderModification &&
    !httpRequest.headersList.contains('cache-control')
  ) {
    httpRequest.headersList.append('cache-control', 'max-age=0')
  }

  //    17. If httpRequest’s cache mode is "no-store" or "reload", then:
  if (httpRequest.cache === 'no-store' || httpRequest.cache === 'reload') {
    // 1. If httpRequest’s header list does not contain `Pragma`, then append
    // `Pragma`/`no-cache` to httpRequest’s header list.
    if (!httpRequest.headersList.contains('pragma')) {
      httpRequest.headersList.append('pragma', 'no-cache')
    }

    // 2. If httpRequest’s header list does not contain `Cache-Control`,
    // then append `Cache-Control`/`no-cache` to httpRequest’s header list.
    if (!httpRequest.headersList.contains('cache-control')) {
      httpRequest.headersList.append('cache-control', 'no-cache')
    }
  }

  //    18. If httpRequest’s header list contains `Range`, then append
  //    `Accept-Encoding`/`identity` to httpRequest’s header list.
  if (httpRequest.headersList.contains('range')) {
    httpRequest.headersList.append('accept-encoding', 'identity')
  }

  //    19. Modify httpRequest’s header list per HTTP. Do not append a given
  //    header if httpRequest’s header list contains that header’s name.
  //    TODO: https://github.com/whatwg/fetch/issues/1285#issuecomment-896560129
  if (!httpRequest.headersList.contains('accept-encoding')) {
    if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {
      httpRequest.headersList.append('accept-encoding', 'br, gzip, deflate')
    } else {
      httpRequest.headersList.append('accept-encoding', 'gzip, deflate')
    }
  }

  httpRequest.headersList.delete('host')

  //    20. If includeCredentials is true, then:
  if (includeCredentials) {
    // 1. If the user agent is not configured to block cookies for httpRequest
    // (see section 7 of [COOKIES]), then:
    // TODO: credentials
    // 2. If httpRequest’s header list does not contain `Authorization`, then:
    // TODO: credentials
  }

  //    21. If there’s a proxy-authentication entry, use it as appropriate.
  //    TODO: proxy-authentication

  //    22. Set httpCache to the result of determining the HTTP cache
  //    partition, given httpRequest.
  //    TODO: cache

  //    23. If httpCache is null, then set httpRequest’s cache mode to
  //    "no-store".
  if (httpCache == null) {
    httpRequest.cache = 'no-store'
  }

  //    24. If httpRequest’s cache mode is neither "no-store" nor "reload",
  //    then:
  if (httpRequest.mode !== 'no-store' && httpRequest.mode !== 'reload') {
    // TODO: cache
  }

  // 9. If aborted, then return the appropriate network error for fetchParams.
  // TODO

  // 10. If response is null, then:
  if (response == null) {
    // 1. If httpRequest’s cache mode is "only-if-cached", then return a
    // network error.
    if (httpRequest.mode === 'only-if-cached') {
      return makeNetworkError('only if cached')
    }

    // 2. Let forwardResponse be the result of running HTTP-network fetch
    // given httpFetchParams, includeCredentials, and isNewConnectionFetch.
    const forwardResponse = await httpNetworkFetch(
      httpFetchParams,
      includeCredentials,
      isNewConnectionFetch
    )

    // 3. If httpRequest’s method is unsafe and forwardResponse’s status is
    // in the range 200 to 399, inclusive, invalidate appropriate stored
    // responses in httpCache, as per the "Invalidation" chapter of HTTP
    // Caching, and set storedResponse to null. [HTTP-CACHING]
    if (
      !safeMethodsSet.has(httpRequest.method) &&
      forwardResponse.status >= 200 &&
      forwardResponse.status <= 399
    ) {
      // TODO: cache
    }

    // 4. If the revalidatingFlag is set and forwardResponse’s status is 304,
    // then:
    if (revalidatingFlag && forwardResponse.status === 304) {
      // TODO: cache
    }

    // 5. If response is null, then:
    if (response == null) {
      // 1. Set response to forwardResponse.
      response = forwardResponse

      // 2. Store httpRequest and forwardResponse in httpCache, as per the
      // "Storing Responses in Caches" chapter of HTTP Caching. [HTTP-CACHING]
      // TODO: cache
    }
  }

  // 11. Set response’s URL list to a clone of httpRequest’s URL list.
  response.urlList = [...httpRequest.urlList]

  // 12. If httpRequest’s header list contains `Range`, then set response’s
  // range-requested flag.
  if (httpRequest.headersList.contains('range')) {
    response.rangeRequested = true
  }

  // 13. Set response’s request-includes-credentials to includeCredentials.
  response.requestIncludesCredentials = includeCredentials

  // 14. If response’s status is 401, httpRequest’s response tainting is not
  // "cors", includeCredentials is true, and request’s window is an environment
  // settings object, then:
  // TODO

  // 15. If response’s status is 407, then:
  if (response.status === 407) {
    // 1. If request’s window is "no-window", then return a network error.
    if (request.window === 'no-window') {
      return makeNetworkError()
    }

    // 2. ???

    // 3. If fetchParams is canceled, then return the appropriate network error for fetchParams.
    if (isCancelled(fetchParams)) {
      return makeAppropriateNetworkError(fetchParams)
    }

    // 4. Prompt the end user as appropriate in request’s window and store
    // the result as a proxy-authentication entry. [HTTP-AUTH]
    // TODO: Invoke some kind of callback?

    // 5. Set response to the result of running HTTP-network-or-cache fetch given
    // fetchParams.
    // TODO
    return makeNetworkError('proxy authentication required')
  }

  // 16. If all of the following are true
  if (
    // response’s status is 421
    response.status === 421 &&
    // isNewConnectionFetch is false
    !isNewConnectionFetch &&
    // request’s body is null, or request’s body is non-null and request’s body’s source is non-null
    (request.body == null || request.body.source != null)
  ) {
    // then:

    // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.
    if (isCancelled(fetchParams)) {
      return makeAppropriateNetworkError(fetchParams)
    }

    // 2. Set response to the result of running HTTP-network-or-cache
    // fetch given fetchParams, isAuthenticationFetch, and true.

    // TODO (spec): The spec doesn't specify this but we need to cancel
    // the active response before we can start a new one.
    // https://github.com/whatwg/fetch/issues/1293
    fetchParams.controller.connection.destroy()

    response = await httpNetworkOrCacheFetch(
      fetchParams,
      isAuthenticationFetch,
      true
    )
  }

  // 17. If isAuthenticationFetch is true, then create an authentication entry
  if (isAuthenticationFetch) {
    // TODO
  }

  // 18. Return response.
  return response
}

// https://fetch.spec.whatwg.org/#http-network-fetch
async function httpNetworkFetch (
  fetchParams,
  includeCredentials = false,
  forceNewConnection = false
) {
  assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed)

  fetchParams.controller.connection = {
    abort: null,
    destroyed: false,
    destroy (err) {
      if (!this.destroyed) {
        this.destroyed = true
        this.abort?.(err ?? new DOMException('The operation was aborted.', 'AbortError'))
      }
    }
  }

  // 1. Let request be fetchParams’s request.
  const request = fetchParams.request

  // 2. Let response be null.
  let response = null

  // 3. Let timingInfo be fetchParams’s timing info.
  const timingInfo = fetchParams.timingInfo

  // 4. Let httpCache be the result of determining the HTTP cache partition,
  // given request.
  // TODO: cache
  const httpCache = null

  // 5. If httpCache is null, then set request’s cache mode to "no-store".
  if (httpCache == null) {
    request.cache = 'no-store'
  }

  // 6. Let networkPartitionKey be the result of determining the network
  // partition key given request.
  // TODO

  // 7. Let newConnection be "yes" if forceNewConnection is true; otherwise
  // "no".
  const newConnection = forceNewConnection ? 'yes' : 'no' // eslint-disable-line no-unused-vars

  // 8. Switch on request’s mode:
  if (request.mode === 'websocket') {
    // Let connection be the result of obtaining a WebSocket connection,
    // given request’s current URL.
    // TODO
  } else {
    // Let connection be the result of obtaining a connection, given
    // networkPartitionKey, request’s current URL’s origin,
    // includeCredentials, and forceNewConnection.
    // TODO
  }

  // 9. Run these steps, but abort when the ongoing fetch is terminated:

  //    1. If connection is failure, then return a network error.

  //    2. Set timingInfo’s final connection timing info to the result of
  //    calling clamp and coarsen connection timing info with connection’s
  //    timing info, timingInfo’s post-redirect start time, and fetchParams’s
  //    cross-origin isolated capability.

  //    3. If connection is not an HTTP/2 connection, request’s body is non-null,
  //    and request’s body’s source is null, then append (`Transfer-Encoding`,
  //    `chunked`) to request’s header list.

  //    4. Set timingInfo’s final network-request start time to the coarsened
  //    shared current time given fetchParams’s cross-origin isolated
  //    capability.

  //    5. Set response to the result of making an HTTP request over connection
  //    using request with the following caveats:

  //        - Follow the relevant requirements from HTTP. [HTTP] [HTTP-SEMANTICS]
  //        [HTTP-COND] [HTTP-CACHING] [HTTP-AUTH]

  //        - If request’s body is non-null, and request’s body’s source is null,
  //        then the user agent may have a buffer of up to 64 kibibytes and store
  //        a part of request’s body in that buffer. If the user agent reads from
  //        request’s body beyond that buffer’s size and the user agent needs to
  //        resend request, then instead return a network error.

  //        - Set timingInfo’s final network-response start time to the coarsened
  //        shared current time given fetchParams’s cross-origin isolated capability,
  //        immediately after the user agent’s HTTP parser receives the first byte
  //        of the response (e.g., frame header bytes for HTTP/2 or response status
  //        line for HTTP/1.x).

  //        - Wait until all the headers are transmitted.

  //        - Any responses whose status is in the range 100 to 199, inclusive,
  //        and is not 101, are to be ignored, except for the purposes of setting
  //        timingInfo’s final network-response start time above.

  //    - If request’s header list contains `Transfer-Encoding`/`chunked` and
  //    response is transferred via HTTP/1.0 or older, then return a network
  //    error.

  //    - If the HTTP request results in a TLS client certificate dialog, then:

  //        1. If request’s window is an environment settings object, make the
  //        dialog available in request’s window.

  //        2. Otherwise, return a network error.

  // To transmit request’s body body, run these steps:
  let requestBody = null
  // 1. If body is null and fetchParams’s process request end-of-body is
  // non-null, then queue a fetch task given fetchParams’s process request
  // end-of-body and fetchParams’s task destination.
  if (request.body == null && fetchParams.processRequestEndOfBody) {
    queueMicrotask(() => fetchParams.processRequestEndOfBody())
  } else if (request.body != null) {
    // 2. Otherwise, if body is non-null:

    //    1. Let processBodyChunk given bytes be these steps:
    const processBodyChunk = async function * (bytes) {
      // 1. If the ongoing fetch is terminated, then abort these steps.
      if (isCancelled(fetchParams)) {
        return
      }

      // 2. Run this step in parallel: transmit bytes.
      yield bytes

      // 3. If fetchParams’s process request body is non-null, then run
      // fetchParams’s process request body given bytes’s length.
      fetchParams.processRequestBodyChunkLength?.(bytes.byteLength)
    }

    // 2. Let processEndOfBody be these steps:
    const processEndOfBody = () => {
      // 1. If fetchParams is canceled, then abort these steps.
      if (isCancelled(fetchParams)) {
        return
      }

      // 2. If fetchParams’s process request end-of-body is non-null,
      // then run fetchParams’s process request end-of-body.
      if (fetchParams.processRequestEndOfBody) {
        fetchParams.processRequestEndOfBody()
      }
    }

    // 3. Let processBodyError given e be these steps:
    const processBodyError = (e) => {
      // 1. If fetchParams is canceled, then abort these steps.
      if (isCancelled(fetchParams)) {
        return
      }

      // 2. If e is an "AbortError" DOMException, then abort fetchParams’s controller.
      if (e.name === 'AbortError') {
        fetchParams.controller.abort()
      } else {
        fetchParams.controller.terminate(e)
      }
    }

    // 4. Incrementally read request’s body given processBodyChunk, processEndOfBody,
    // processBodyError, and fetchParams’s task destination.
    requestBody = (async function * () {
      try {
        for await (const bytes of request.body.stream) {
          yield * processBodyChunk(bytes)
        }
        processEndOfBody()
      } catch (err) {
        processBodyError(err)
      }
    })()
  }

  try {
    // socket is only provided for websockets
    const { body, status, statusText, headersList, socket } = await dispatch({ body: requestBody })

    if (socket) {
      response = makeResponse({ status, statusText, headersList, socket })
    } else {
      const iterator = body[Symbol.asyncIterator]()
      fetchParams.controller.next = () => iterator.next()

      response = makeResponse({ status, statusText, headersList })
    }
  } catch (err) {
    // 10. If aborted, then:
    if (err.name === 'AbortError') {
      // 1. If connection uses HTTP/2, then transmit an RST_STREAM frame.
      fetchParams.controller.connection.destroy()

      // 2. Return the appropriate network error for fetchParams.
      return makeAppropriateNetworkError(fetchParams, err)
    }

    return makeNetworkError(err)
  }

  // 11. Let pullAlgorithm be an action that resumes the ongoing fetch
  // if it is suspended.
  const pullAlgorithm = () => {
    fetchParams.controller.resume()
  }

  // 12. Let cancelAlgorithm be an algorithm that aborts fetchParams’s
  // controller with reason, given reason.
  const cancelAlgorithm = (reason) => {
    fetchParams.controller.abort(reason)
  }

  // 13. Let highWaterMark be a non-negative, non-NaN number, chosen by
  // the user agent.
  // TODO

  // 14. Let sizeAlgorithm be an algorithm that accepts a chunk object
  // and returns a non-negative, non-NaN, non-infinite number, chosen by the user agent.
  // TODO

  // 15. Let stream be a new ReadableStream.
  // 16. Set up stream with pullAlgorithm set to pullAlgorithm,
  // cancelAlgorithm set to cancelAlgorithm, highWaterMark set to
  // highWaterMark, and sizeAlgorithm set to sizeAlgorithm.
  if (!ReadableStream) {
    ReadableStream = (__nccwpck_require__(5356).ReadableStream)
  }

  const stream = new ReadableStream(
    {
      async start (controller) {
        fetchParams.controller.controller = controller
      },
      async pull (controller) {
        await pullAlgorithm(controller)
      },
      async cancel (reason) {
        await cancelAlgorithm(reason)
      }
    },
    {
      highWaterMark: 0,
      size () {
        return 1
      }
    }
  )

  // 17. Run these steps, but abort when the ongoing fetch is terminated:

  //    1. Set response’s body to a new body whose stream is stream.
  response.body = { stream }

  //    2. If response is not a network error and request’s cache mode is
  //    not "no-store", then update response in httpCache for request.
  //    TODO

  //    3. If includeCredentials is true and the user agent is not configured
  //    to block cookies for request (see section 7 of [COOKIES]), then run the
  //    "set-cookie-string" parsing algorithm (see section 5.2 of [COOKIES]) on
  //    the value of each header whose name is a byte-case-insensitive match for
  //    `Set-Cookie` in response’s header list, if any, and request’s current URL.
  //    TODO

  // 18. If aborted, then:
  // TODO

  // 19. Run these steps in parallel:

  //    1. Run these steps, but abort when fetchParams is canceled:
  fetchParams.controller.on('terminated', onAborted)
  fetchParams.controller.resume = async () => {
    // 1. While true
    while (true) {
      // 1-3. See onData...

      // 4. Set bytes to the result of handling content codings given
      // codings and bytes.
      let bytes
      let isFailure
      try {
        const { done, value } = await fetchParams.controller.next()

        if (isAborted(fetchParams)) {
          break
        }

        bytes = done ? undefined : value
      } catch (err) {
        if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {
          // zlib doesn't like empty streams.
          bytes = undefined
        } else {
          bytes = err

          // err may be propagated from the result of calling readablestream.cancel,
          // which might not be an error. https://github.com/nodejs/undici/issues/2009
          isFailure = true
        }
      }

      if (bytes === undefined) {
        // 2. Otherwise, if the bytes transmission for response’s message
        // body is done normally and stream is readable, then close
        // stream, finalize response for fetchParams and response, and
        // abort these in-parallel steps.
        readableStreamClose(fetchParams.controller.controller)

        finalizeResponse(fetchParams, response)

        return
      }

      // 5. Increase timingInfo’s decoded body size by bytes’s length.
      timingInfo.decodedBodySize += bytes?.byteLength ?? 0

      // 6. If bytes is failure, then terminate fetchParams’s controller.
      if (isFailure) {
        fetchParams.controller.terminate(bytes)
        return
      }

      // 7. Enqueue a Uint8Array wrapping an ArrayBuffer containing bytes
      // into stream.
      fetchParams.controller.controller.enqueue(new Uint8Array(bytes))

      // 8. If stream is errored, then terminate the ongoing fetch.
      if (isErrored(stream)) {
        fetchParams.controller.terminate()
        return
      }

      // 9. If stream doesn’t need more data ask the user agent to suspend
      // the ongoing fetch.
      if (!fetchParams.controller.controller.desiredSize) {
        return
      }
    }
  }

  //    2. If aborted, then:
  function onAborted (reason) {
    // 2. If fetchParams is aborted, then:
    if (isAborted(fetchParams)) {
      // 1. Set response’s aborted flag.
      response.aborted = true

      // 2. If stream is readable, then error stream with the result of
      //    deserialize a serialized abort reason given fetchParams’s
      //    controller’s serialized abort reason and an
      //    implementation-defined realm.
      if (isReadable(stream)) {
        fetchParams.controller.controller.error(
          fetchParams.controller.serializedAbortReason
        )
      }
    } else {
      // 3. Otherwise, if stream is readable, error stream with a TypeError.
      if (isReadable(stream)) {
        fetchParams.controller.controller.error(new TypeError('terminated', {
          cause: isErrorLike(reason) ? reason : undefined
        }))
      }
    }

    // 4. If connection uses HTTP/2, then transmit an RST_STREAM frame.
    // 5. Otherwise, the user agent should close connection unless it would be bad for performance to do so.
    fetchParams.controller.connection.destroy()
  }

  // 20. Return response.
  return response

  async function dispatch ({ body }) {
    const url = requestCurrentURL(request)
    /** @type {import('../..').Agent} */
    const agent = fetchParams.controller.dispatcher

    return new Promise((resolve, reject) => agent.dispatch(
      {
        path: url.pathname + url.search,
        origin: url.origin,
        method: request.method,
        body: fetchParams.controller.dispatcher.isMockActive ? request.body && (request.body.source || request.body.stream) : body,
        headers: request.headersList.entries,
        maxRedirections: 0,
        upgrade: request.mode === 'websocket' ? 'websocket' : undefined
      },
      {
        body: null,
        abort: null,

        onConnect (abort) {
          // TODO (fix): Do we need connection here?
          const { connection } = fetchParams.controller

          if (connection.destroyed) {
            abort(new DOMException('The operation was aborted.', 'AbortError'))
          } else {
            fetchParams.controller.on('terminated', abort)
            this.abort = connection.abort = abort
          }
        },

        onHeaders (status, headersList, resume, statusText) {
          if (status < 200) {
            return
          }

          let codings = []
          let location = ''

          const headers = new Headers()

          // For H2, the headers are a plain JS object
          // We distinguish between them and iterate accordingly
          if (Array.isArray(headersList)) {
            for (let n = 0; n < headersList.length; n += 2) {
              const key = headersList[n + 0].toString('latin1')
              const val = headersList[n + 1].toString('latin1')
              if (key.toLowerCase() === 'content-encoding') {
                // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1
                // "All content-coding values are case-insensitive..."
                codings = val.toLowerCase().split(',').map((x) => x.trim())
              } else if (key.toLowerCase() === 'location') {
                location = val
              }

              headers[kHeadersList].append(key, val)
            }
          } else {
            const keys = Object.keys(headersList)
            for (const key of keys) {
              const val = headersList[key]
              if (key.toLowerCase() === 'content-encoding') {
                // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1
                // "All content-coding values are case-insensitive..."
                codings = val.toLowerCase().split(',').map((x) => x.trim()).reverse()
              } else if (key.toLowerCase() === 'location') {
                location = val
              }

              headers[kHeadersList].append(key, val)
            }
          }

          this.body = new Readable({ read: resume })

          const decoders = []

          const willFollow = request.redirect === 'follow' &&
            location &&
            redirectStatusSet.has(status)

          // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding
          if (request.method !== 'HEAD' && request.method !== 'CONNECT' && !nullBodyStatus.includes(status) && !willFollow) {
            for (const coding of codings) {
              // https://www.rfc-editor.org/rfc/rfc9112.html#section-7.2
              if (coding === 'x-gzip' || coding === 'gzip') {
                decoders.push(zlib.createGunzip({
                  // Be less strict when decoding compressed responses, since sometimes
                  // servers send slightly invalid responses that are still accepted
                  // by common browsers.
                  // Always using Z_SYNC_FLUSH is what cURL does.
                  flush: zlib.constants.Z_SYNC_FLUSH,
                  finishFlush: zlib.constants.Z_SYNC_FLUSH
                }))
              } else if (coding === 'deflate') {
                decoders.push(zlib.createInflate())
              } else if (coding === 'br') {
                decoders.push(zlib.createBrotliDecompress())
              } else {
                decoders.length = 0
                break
              }
            }
          }

          resolve({
            status,
            statusText,
            headersList: headers[kHeadersList],
            body: decoders.length
              ? pipeline(this.body, ...decoders, () => { })
              : this.body.on('error', () => {})
          })

          return true
        },

        onData (chunk) {
          if (fetchParams.controller.dump) {
            return
          }

          // 1. If one or more bytes have been transmitted from response’s
          // message body, then:

          //  1. Let bytes be the transmitted bytes.
          const bytes = chunk

          //  2. Let codings be the result of extracting header list values
          //  given `Content-Encoding` and response’s header list.
          //  See pullAlgorithm.

          //  3. Increase timingInfo’s encoded body size by bytes’s length.
          timingInfo.encodedBodySize += bytes.byteLength

          //  4. See pullAlgorithm...

          return this.body.push(bytes)
        },

        onComplete () {
          if (this.abort) {
            fetchParams.controller.off('terminated', this.abort)
          }

          fetchParams.controller.ended = true

          this.body.push(null)
        },

        onError (error) {
          if (this.abort) {
            fetchParams.controller.off('terminated', this.abort)
          }

          this.body?.destroy(error)

          fetchParams.controller.terminate(error)

          reject(error)
        },

        onUpgrade (status, headersList, socket) {
          if (status !== 101) {
            return
          }

          const headers = new Headers()

          for (let n = 0; n < headersList.length; n += 2) {
            const key = headersList[n + 0].toString('latin1')
            const val = headersList[n + 1].toString('latin1')

            headers[kHeadersList].append(key, val)
          }

          resolve({
            status,
            statusText: STATUS_CODES[status],
            headersList: headers[kHeadersList],
            socket
          })

          return true
        }
      }
    ))
  }
}

module.exports = {
  fetch,
  Fetch,
  fetching,
  finalizeAndReportTiming
}


/***/ }),

/***/ 8359:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* globals AbortController */



const { extractBody, mixinBody, cloneBody } = __nccwpck_require__(1472)
const { Headers, fill: fillHeaders, HeadersList } = __nccwpck_require__(554)
const { FinalizationRegistry } = __nccwpck_require__(6436)()
const util = __nccwpck_require__(3983)
const {
  isValidHTTPToken,
  sameOrigin,
  normalizeMethod,
  makePolicyContainer,
  normalizeMethodRecord
} = __nccwpck_require__(2538)
const {
  forbiddenMethodsSet,
  corsSafeListedMethodsSet,
  referrerPolicy,
  requestRedirect,
  requestMode,
  requestCredentials,
  requestCache,
  requestDuplex
} = __nccwpck_require__(1037)
const { kEnumerableProperty } = util
const { kHeaders, kSignal, kState, kGuard, kRealm } = __nccwpck_require__(5861)
const { webidl } = __nccwpck_require__(1744)
const { getGlobalOrigin } = __nccwpck_require__(1246)
const { URLSerializer } = __nccwpck_require__(685)
const { kHeadersList, kConstruct } = __nccwpck_require__(2785)
const assert = __nccwpck_require__(9491)
const { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = __nccwpck_require__(2361)

let TransformStream = globalThis.TransformStream

const kAbortController = Symbol('abortController')

const requestFinalizer = new FinalizationRegistry(({ signal, abort }) => {
  signal.removeEventListener('abort', abort)
})

// https://fetch.spec.whatwg.org/#request-class
class Request {
  // https://fetch.spec.whatwg.org/#dom-request
  constructor (input, init = {}) {
    if (input === kConstruct) {
      return
    }

    webidl.argumentLengthCheck(arguments, 1, { header: 'Request constructor' })

    input = webidl.converters.RequestInfo(input)
    init = webidl.converters.RequestInit(init)

    // https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object
    this[kRealm] = {
      settingsObject: {
        baseUrl: getGlobalOrigin(),
        get origin () {
          return this.baseUrl?.origin
        },
        policyContainer: makePolicyContainer()
      }
    }

    // 1. Let request be null.
    let request = null

    // 2. Let fallbackMode be null.
    let fallbackMode = null

    // 3. Let baseURL be this’s relevant settings object’s API base URL.
    const baseUrl = this[kRealm].settingsObject.baseUrl

    // 4. Let signal be null.
    let signal = null

    // 5. If input is a string, then:
    if (typeof input === 'string') {
      // 1. Let parsedURL be the result of parsing input with baseURL.
      // 2. If parsedURL is failure, then throw a TypeError.
      let parsedURL
      try {
        parsedURL = new URL(input, baseUrl)
      } catch (err) {
        throw new TypeError('Failed to parse URL from ' + input, { cause: err })
      }

      // 3. If parsedURL includes credentials, then throw a TypeError.
      if (parsedURL.username || parsedURL.password) {
        throw new TypeError(
          'Request cannot be constructed from a URL that includes credentials: ' +
            input
        )
      }

      // 4. Set request to a new request whose URL is parsedURL.
      request = makeRequest({ urlList: [parsedURL] })

      // 5. Set fallbackMode to "cors".
      fallbackMode = 'cors'
    } else {
      // 6. Otherwise:

      // 7. Assert: input is a Request object.
      assert(input instanceof Request)

      // 8. Set request to input’s request.
      request = input[kState]

      // 9. Set signal to input’s signal.
      signal = input[kSignal]
    }

    // 7. Let origin be this’s relevant settings object’s origin.
    const origin = this[kRealm].settingsObject.origin

    // 8. Let window be "client".
    let window = 'client'

    // 9. If request’s window is an environment settings object and its origin
    // is same origin with origin, then set window to request’s window.
    if (
      request.window?.constructor?.name === 'EnvironmentSettingsObject' &&
      sameOrigin(request.window, origin)
    ) {
      window = request.window
    }

    // 10. If init["window"] exists and is non-null, then throw a TypeError.
    if (init.window != null) {
      throw new TypeError(`'window' option '${window}' must be null`)
    }

    // 11. If init["window"] exists, then set window to "no-window".
    if ('window' in init) {
      window = 'no-window'
    }

    // 12. Set request to a new request with the following properties:
    request = makeRequest({
      // URL request’s URL.
      // undici implementation note: this is set as the first item in request's urlList in makeRequest
      // method request’s method.
      method: request.method,
      // header list A copy of request’s header list.
      // undici implementation note: headersList is cloned in makeRequest
      headersList: request.headersList,
      // unsafe-request flag Set.
      unsafeRequest: request.unsafeRequest,
      // client This’s relevant settings object.
      client: this[kRealm].settingsObject,
      // window window.
      window,
      // priority request’s priority.
      priority: request.priority,
      // origin request’s origin. The propagation of the origin is only significant for navigation requests
      // being handled by a service worker. In this scenario a request can have an origin that is different
      // from the current client.
      origin: request.origin,
      // referrer request’s referrer.
      referrer: request.referrer,
      // referrer policy request’s referrer policy.
      referrerPolicy: request.referrerPolicy,
      // mode request’s mode.
      mode: request.mode,
      // credentials mode request’s credentials mode.
      credentials: request.credentials,
      // cache mode request’s cache mode.
      cache: request.cache,
      // redirect mode request’s redirect mode.
      redirect: request.redirect,
      // integrity metadata request’s integrity metadata.
      integrity: request.integrity,
      // keepalive request’s keepalive.
      keepalive: request.keepalive,
      // reload-navigation flag request’s reload-navigation flag.
      reloadNavigation: request.reloadNavigation,
      // history-navigation flag request’s history-navigation flag.
      historyNavigation: request.historyNavigation,
      // URL list A clone of request’s URL list.
      urlList: [...request.urlList]
    })

    const initHasKey = Object.keys(init).length !== 0

    // 13. If init is not empty, then:
    if (initHasKey) {
      // 1. If request’s mode is "navigate", then set it to "same-origin".
      if (request.mode === 'navigate') {
        request.mode = 'same-origin'
      }

      // 2. Unset request’s reload-navigation flag.
      request.reloadNavigation = false

      // 3. Unset request’s history-navigation flag.
      request.historyNavigation = false

      // 4. Set request’s origin to "client".
      request.origin = 'client'

      // 5. Set request’s referrer to "client"
      request.referrer = 'client'

      // 6. Set request’s referrer policy to the empty string.
      request.referrerPolicy = ''

      // 7. Set request’s URL to request’s current URL.
      request.url = request.urlList[request.urlList.length - 1]

      // 8. Set request’s URL list to « request’s URL ».
      request.urlList = [request.url]
    }

    // 14. If init["referrer"] exists, then:
    if (init.referrer !== undefined) {
      // 1. Let referrer be init["referrer"].
      const referrer = init.referrer

      // 2. If referrer is the empty string, then set request’s referrer to "no-referrer".
      if (referrer === '') {
        request.referrer = 'no-referrer'
      } else {
        // 1. Let parsedReferrer be the result of parsing referrer with
        // baseURL.
        // 2. If parsedReferrer is failure, then throw a TypeError.
        let parsedReferrer
        try {
          parsedReferrer = new URL(referrer, baseUrl)
        } catch (err) {
          throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, { cause: err })
        }

        // 3. If one of the following is true
        // - parsedReferrer’s scheme is "about" and path is the string "client"
        // - parsedReferrer’s origin is not same origin with origin
        // then set request’s referrer to "client".
        if (
          (parsedReferrer.protocol === 'about:' && parsedReferrer.hostname === 'client') ||
          (origin && !sameOrigin(parsedReferrer, this[kRealm].settingsObject.baseUrl))
        ) {
          request.referrer = 'client'
        } else {
          // 4. Otherwise, set request’s referrer to parsedReferrer.
          request.referrer = parsedReferrer
        }
      }
    }

    // 15. If init["referrerPolicy"] exists, then set request’s referrer policy
    // to it.
    if (init.referrerPolicy !== undefined) {
      request.referrerPolicy = init.referrerPolicy
    }

    // 16. Let mode be init["mode"] if it exists, and fallbackMode otherwise.
    let mode
    if (init.mode !== undefined) {
      mode = init.mode
    } else {
      mode = fallbackMode
    }

    // 17. If mode is "navigate", then throw a TypeError.
    if (mode === 'navigate') {
      throw webidl.errors.exception({
        header: 'Request constructor',
        message: 'invalid request mode navigate.'
      })
    }

    // 18. If mode is non-null, set request’s mode to mode.
    if (mode != null) {
      request.mode = mode
    }

    // 19. If init["credentials"] exists, then set request’s credentials mode
    // to it.
    if (init.credentials !== undefined) {
      request.credentials = init.credentials
    }

    // 18. If init["cache"] exists, then set request’s cache mode to it.
    if (init.cache !== undefined) {
      request.cache = init.cache
    }

    // 21. If request’s cache mode is "only-if-cached" and request’s mode is
    // not "same-origin", then throw a TypeError.
    if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {
      throw new TypeError(
        "'only-if-cached' can be set only with 'same-origin' mode"
      )
    }

    // 22. If init["redirect"] exists, then set request’s redirect mode to it.
    if (init.redirect !== undefined) {
      request.redirect = init.redirect
    }

    // 23. If init["integrity"] exists, then set request’s integrity metadata to it.
    if (init.integrity != null) {
      request.integrity = String(init.integrity)
    }

    // 24. If init["keepalive"] exists, then set request’s keepalive to it.
    if (init.keepalive !== undefined) {
      request.keepalive = Boolean(init.keepalive)
    }

    // 25. If init["method"] exists, then:
    if (init.method !== undefined) {
      // 1. Let method be init["method"].
      let method = init.method

      // 2. If method is not a method or method is a forbidden method, then
      // throw a TypeError.
      if (!isValidHTTPToken(method)) {
        throw new TypeError(`'${method}' is not a valid HTTP method.`)
      }

      if (forbiddenMethodsSet.has(method.toUpperCase())) {
        throw new TypeError(`'${method}' HTTP method is unsupported.`)
      }

      // 3. Normalize method.
      method = normalizeMethodRecord[method] ?? normalizeMethod(method)

      // 4. Set request’s method to method.
      request.method = method
    }

    // 26. If init["signal"] exists, then set signal to it.
    if (init.signal !== undefined) {
      signal = init.signal
    }

    // 27. Set this’s request to request.
    this[kState] = request

    // 28. Set this’s signal to a new AbortSignal object with this’s relevant
    // Realm.
    // TODO: could this be simplified with AbortSignal.any
    // (https://dom.spec.whatwg.org/#dom-abortsignal-any)
    const ac = new AbortController()
    this[kSignal] = ac.signal
    this[kSignal][kRealm] = this[kRealm]

    // 29. If signal is not null, then make this’s signal follow signal.
    if (signal != null) {
      if (
        !signal ||
        typeof signal.aborted !== 'boolean' ||
        typeof signal.addEventListener !== 'function'
      ) {
        throw new TypeError(
          "Failed to construct 'Request': member signal is not of type AbortSignal."
        )
      }

      if (signal.aborted) {
        ac.abort(signal.reason)
      } else {
        // Keep a strong ref to ac while request object
        // is alive. This is needed to prevent AbortController
        // from being prematurely garbage collected.
        // See, https://github.com/nodejs/undici/issues/1926.
        this[kAbortController] = ac

        const acRef = new WeakRef(ac)
        const abort = function () {
          const ac = acRef.deref()
          if (ac !== undefined) {
            ac.abort(this.reason)
          }
        }

        // Third-party AbortControllers may not work with these.
        // See, https://github.com/nodejs/undici/pull/1910#issuecomment-1464495619.
        try {
          // If the max amount of listeners is equal to the default, increase it
          // This is only available in node >= v19.9.0
          if (typeof getMaxListeners === 'function' && getMaxListeners(signal) === defaultMaxListeners) {
            setMaxListeners(100, signal)
          } else if (getEventListeners(signal, 'abort').length >= defaultMaxListeners) {
            setMaxListeners(100, signal)
          }
        } catch {}

        util.addAbortListener(signal, abort)
        requestFinalizer.register(ac, { signal, abort })
      }
    }

    // 30. Set this’s headers to a new Headers object with this’s relevant
    // Realm, whose header list is request’s header list and guard is
    // "request".
    this[kHeaders] = new Headers(kConstruct)
    this[kHeaders][kHeadersList] = request.headersList
    this[kHeaders][kGuard] = 'request'
    this[kHeaders][kRealm] = this[kRealm]

    // 31. If this’s request’s mode is "no-cors", then:
    if (mode === 'no-cors') {
      // 1. If this’s request’s method is not a CORS-safelisted method,
      // then throw a TypeError.
      if (!corsSafeListedMethodsSet.has(request.method)) {
        throw new TypeError(
          `'${request.method} is unsupported in no-cors mode.`
        )
      }

      // 2. Set this’s headers’s guard to "request-no-cors".
      this[kHeaders][kGuard] = 'request-no-cors'
    }

    // 32. If init is not empty, then:
    if (initHasKey) {
      /** @type {HeadersList} */
      const headersList = this[kHeaders][kHeadersList]
      // 1. Let headers be a copy of this’s headers and its associated header
      // list.
      // 2. If init["headers"] exists, then set headers to init["headers"].
      const headers = init.headers !== undefined ? init.headers : new HeadersList(headersList)

      // 3. Empty this’s headers’s header list.
      headersList.clear()

      // 4. If headers is a Headers object, then for each header in its header
      // list, append header’s name/header’s value to this’s headers.
      if (headers instanceof HeadersList) {
        for (const [key, val] of headers) {
          headersList.append(key, val)
        }
        // Note: Copy the `set-cookie` meta-data.
        headersList.cookies = headers.cookies
      } else {
        // 5. Otherwise, fill this’s headers with headers.
        fillHeaders(this[kHeaders], headers)
      }
    }

    // 33. Let inputBody be input’s request’s body if input is a Request
    // object; otherwise null.
    const inputBody = input instanceof Request ? input[kState].body : null

    // 34. If either init["body"] exists and is non-null or inputBody is
    // non-null, and request’s method is `GET` or `HEAD`, then throw a
    // TypeError.
    if (
      (init.body != null || inputBody != null) &&
      (request.method === 'GET' || request.method === 'HEAD')
    ) {
      throw new TypeError('Request with GET/HEAD method cannot have body.')
    }

    // 35. Let initBody be null.
    let initBody = null

    // 36. If init["body"] exists and is non-null, then:
    if (init.body != null) {
      // 1. Let Content-Type be null.
      // 2. Set initBody and Content-Type to the result of extracting
      // init["body"], with keepalive set to request’s keepalive.
      const [extractedBody, contentType] = extractBody(
        init.body,
        request.keepalive
      )
      initBody = extractedBody

      // 3, If Content-Type is non-null and this’s headers’s header list does
      // not contain `Content-Type`, then append `Content-Type`/Content-Type to
      // this’s headers.
      if (contentType && !this[kHeaders][kHeadersList].contains('content-type')) {
        this[kHeaders].append('content-type', contentType)
      }
    }

    // 37. Let inputOrInitBody be initBody if it is non-null; otherwise
    // inputBody.
    const inputOrInitBody = initBody ?? inputBody

    // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is
    // null, then:
    if (inputOrInitBody != null && inputOrInitBody.source == null) {
      // 1. If initBody is non-null and init["duplex"] does not exist,
      //    then throw a TypeError.
      if (initBody != null && init.duplex == null) {
        throw new TypeError('RequestInit: duplex option is required when sending a body.')
      }

      // 2. If this’s request’s mode is neither "same-origin" nor "cors",
      // then throw a TypeError.
      if (request.mode !== 'same-origin' && request.mode !== 'cors') {
        throw new TypeError(
          'If request is made from ReadableStream, mode should be "same-origin" or "cors"'
        )
      }

      // 3. Set this’s request’s use-CORS-preflight flag.
      request.useCORSPreflightFlag = true
    }

    // 39. Let finalBody be inputOrInitBody.
    let finalBody = inputOrInitBody

    // 40. If initBody is null and inputBody is non-null, then:
    if (initBody == null && inputBody != null) {
      // 1. If input is unusable, then throw a TypeError.
      if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {
        throw new TypeError(
          'Cannot construct a Request with a Request object that has already been used.'
        )
      }

      // 2. Set finalBody to the result of creating a proxy for inputBody.
      if (!TransformStream) {
        TransformStream = (__nccwpck_require__(5356).TransformStream)
      }

      // https://streams.spec.whatwg.org/#readablestream-create-a-proxy
      const identityTransform = new TransformStream()
      inputBody.stream.pipeThrough(identityTransform)
      finalBody = {
        source: inputBody.source,
        length: inputBody.length,
        stream: identityTransform.readable
      }
    }

    // 41. Set this’s request’s body to finalBody.
    this[kState].body = finalBody
  }

  // Returns request’s HTTP method, which is "GET" by default.
  get method () {
    webidl.brandCheck(this, Request)

    // The method getter steps are to return this’s request’s method.
    return this[kState].method
  }

  // Returns the URL of request as a string.
  get url () {
    webidl.brandCheck(this, Request)

    // The url getter steps are to return this’s request’s URL, serialized.
    return URLSerializer(this[kState].url)
  }

  // Returns a Headers object consisting of the headers associated with request.
  // Note that headers added in the network layer by the user agent will not
  // be accounted for in this object, e.g., the "Host" header.
  get headers () {
    webidl.brandCheck(this, Request)

    // The headers getter steps are to return this’s headers.
    return this[kHeaders]
  }

  // Returns the kind of resource requested by request, e.g., "document"
  // or "script".
  get destination () {
    webidl.brandCheck(this, Request)

    // The destination getter are to return this’s request’s destination.
    return this[kState].destination
  }

  // Returns the referrer of request. Its value can be a same-origin URL if
  // explicitly set in init, the empty string to indicate no referrer, and
  // "about:client" when defaulting to the global’s default. This is used
  // during fetching to determine the value of the `Referer` header of the
  // request being made.
  get referrer () {
    webidl.brandCheck(this, Request)

    // 1. If this’s request’s referrer is "no-referrer", then return the
    // empty string.
    if (this[kState].referrer === 'no-referrer') {
      return ''
    }

    // 2. If this’s request’s referrer is "client", then return
    // "about:client".
    if (this[kState].referrer === 'client') {
      return 'about:client'
    }

    // Return this’s request’s referrer, serialized.
    return this[kState].referrer.toString()
  }

  // Returns the referrer policy associated with request.
  // This is used during fetching to compute the value of the request’s
  // referrer.
  get referrerPolicy () {
    webidl.brandCheck(this, Request)

    // The referrerPolicy getter steps are to return this’s request’s referrer policy.
    return this[kState].referrerPolicy
  }

  // Returns the mode associated with request, which is a string indicating
  // whether the request will use CORS, or will be restricted to same-origin
  // URLs.
  get mode () {
    webidl.brandCheck(this, Request)

    // The mode getter steps are to return this’s request’s mode.
    return this[kState].mode
  }

  // Returns the credentials mode associated with request,
  // which is a string indicating whether credentials will be sent with the
  // request always, never, or only when sent to a same-origin URL.
  get credentials () {
    // The credentials getter steps are to return this’s request’s credentials mode.
    return this[kState].credentials
  }

  // Returns the cache mode associated with request,
  // which is a string indicating how the request will
  // interact with the browser’s cache when fetching.
  get cache () {
    webidl.brandCheck(this, Request)

    // The cache getter steps are to return this’s request’s cache mode.
    return this[kState].cache
  }

  // Returns the redirect mode associated with request,
  // which is a string indicating how redirects for the
  // request will be handled during fetching. A request
  // will follow redirects by default.
  get redirect () {
    webidl.brandCheck(this, Request)

    // The redirect getter steps are to return this’s request’s redirect mode.
    return this[kState].redirect
  }

  // Returns request’s subresource integrity metadata, which is a
  // cryptographic hash of the resource being fetched. Its value
  // consists of multiple hashes separated by whitespace. [SRI]
  get integrity () {
    webidl.brandCheck(this, Request)

    // The integrity getter steps are to return this’s request’s integrity
    // metadata.
    return this[kState].integrity
  }

  // Returns a boolean indicating whether or not request can outlive the
  // global in which it was created.
  get keepalive () {
    webidl.brandCheck(this, Request)

    // The keepalive getter steps are to return this’s request’s keepalive.
    return this[kState].keepalive
  }

  // Returns a boolean indicating whether or not request is for a reload
  // navigation.
  get isReloadNavigation () {
    webidl.brandCheck(this, Request)

    // The isReloadNavigation getter steps are to return true if this’s
    // request’s reload-navigation flag is set; otherwise false.
    return this[kState].reloadNavigation
  }

  // Returns a boolean indicating whether or not request is for a history
  // navigation (a.k.a. back-foward navigation).
  get isHistoryNavigation () {
    webidl.brandCheck(this, Request)

    // The isHistoryNavigation getter steps are to return true if this’s request’s
    // history-navigation flag is set; otherwise false.
    return this[kState].historyNavigation
  }

  // Returns the signal associated with request, which is an AbortSignal
  // object indicating whether or not request has been aborted, and its
  // abort event handler.
  get signal () {
    webidl.brandCheck(this, Request)

    // The signal getter steps are to return this’s signal.
    return this[kSignal]
  }

  get body () {
    webidl.brandCheck(this, Request)

    return this[kState].body ? this[kState].body.stream : null
  }

  get bodyUsed () {
    webidl.brandCheck(this, Request)

    return !!this[kState].body && util.isDisturbed(this[kState].body.stream)
  }

  get duplex () {
    webidl.brandCheck(this, Request)

    return 'half'
  }

  // Returns a clone of request.
  clone () {
    webidl.brandCheck(this, Request)

    // 1. If this is unusable, then throw a TypeError.
    if (this.bodyUsed || this.body?.locked) {
      throw new TypeError('unusable')
    }

    // 2. Let clonedRequest be the result of cloning this’s request.
    const clonedRequest = cloneRequest(this[kState])

    // 3. Let clonedRequestObject be the result of creating a Request object,
    // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.
    const clonedRequestObject = new Request(kConstruct)
    clonedRequestObject[kState] = clonedRequest
    clonedRequestObject[kRealm] = this[kRealm]
    clonedRequestObject[kHeaders] = new Headers(kConstruct)
    clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList
    clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard]
    clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm]

    // 4. Make clonedRequestObject’s signal follow this’s signal.
    const ac = new AbortController()
    if (this.signal.aborted) {
      ac.abort(this.signal.reason)
    } else {
      util.addAbortListener(
        this.signal,
        () => {
          ac.abort(this.signal.reason)
        }
      )
    }
    clonedRequestObject[kSignal] = ac.signal

    // 4. Return clonedRequestObject.
    return clonedRequestObject
  }
}

mixinBody(Request)

function makeRequest (init) {
  // https://fetch.spec.whatwg.org/#requests
  const request = {
    method: 'GET',
    localURLsOnly: false,
    unsafeRequest: false,
    body: null,
    client: null,
    reservedClient: null,
    replacesClientId: '',
    window: 'client',
    keepalive: false,
    serviceWorkers: 'all',
    initiator: '',
    destination: '',
    priority: null,
    origin: 'client',
    policyContainer: 'client',
    referrer: 'client',
    referrerPolicy: '',
    mode: 'no-cors',
    useCORSPreflightFlag: false,
    credentials: 'same-origin',
    useCredentials: false,
    cache: 'default',
    redirect: 'follow',
    integrity: '',
    cryptoGraphicsNonceMetadata: '',
    parserMetadata: '',
    reloadNavigation: false,
    historyNavigation: false,
    userActivation: false,
    taintedOrigin: false,
    redirectCount: 0,
    responseTainting: 'basic',
    preventNoCacheCacheControlHeaderModification: false,
    done: false,
    timingAllowFailed: false,
    ...init,
    headersList: init.headersList
      ? new HeadersList(init.headersList)
      : new HeadersList()
  }
  request.url = request.urlList[0]
  return request
}

// https://fetch.spec.whatwg.org/#concept-request-clone
function cloneRequest (request) {
  // To clone a request request, run these steps:

  // 1. Let newRequest be a copy of request, except for its body.
  const newRequest = makeRequest({ ...request, body: null })

  // 2. If request’s body is non-null, set newRequest’s body to the
  // result of cloning request’s body.
  if (request.body != null) {
    newRequest.body = cloneBody(request.body)
  }

  // 3. Return newRequest.
  return newRequest
}

Object.defineProperties(Request.prototype, {
  method: kEnumerableProperty,
  url: kEnumerableProperty,
  headers: kEnumerableProperty,
  redirect: kEnumerableProperty,
  clone: kEnumerableProperty,
  signal: kEnumerableProperty,
  duplex: kEnumerableProperty,
  destination: kEnumerableProperty,
  body: kEnumerableProperty,
  bodyUsed: kEnumerableProperty,
  isHistoryNavigation: kEnumerableProperty,
  isReloadNavigation: kEnumerableProperty,
  keepalive: kEnumerableProperty,
  integrity: kEnumerableProperty,
  cache: kEnumerableProperty,
  credentials: kEnumerableProperty,
  attribute: kEnumerableProperty,
  referrerPolicy: kEnumerableProperty,
  referrer: kEnumerableProperty,
  mode: kEnumerableProperty,
  [Symbol.toStringTag]: {
    value: 'Request',
    configurable: true
  }
})

webidl.converters.Request = webidl.interfaceConverter(
  Request
)

// https://fetch.spec.whatwg.org/#requestinfo
webidl.converters.RequestInfo = function (V) {
  if (typeof V === 'string') {
    return webidl.converters.USVString(V)
  }

  if (V instanceof Request) {
    return webidl.converters.Request(V)
  }

  return webidl.converters.USVString(V)
}

webidl.converters.AbortSignal = webidl.interfaceConverter(
  AbortSignal
)

// https://fetch.spec.whatwg.org/#requestinit
webidl.converters.RequestInit = webidl.dictionaryConverter([
  {
    key: 'method',
    converter: webidl.converters.ByteString
  },
  {
    key: 'headers',
    converter: webidl.converters.HeadersInit
  },
  {
    key: 'body',
    converter: webidl.nullableConverter(
      webidl.converters.BodyInit
    )
  },
  {
    key: 'referrer',
    converter: webidl.converters.USVString
  },
  {
    key: 'referrerPolicy',
    converter: webidl.converters.DOMString,
    // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy
    allowedValues: referrerPolicy
  },
  {
    key: 'mode',
    converter: webidl.converters.DOMString,
    // https://fetch.spec.whatwg.org/#concept-request-mode
    allowedValues: requestMode
  },
  {
    key: 'credentials',
    converter: webidl.converters.DOMString,
    // https://fetch.spec.whatwg.org/#requestcredentials
    allowedValues: requestCredentials
  },
  {
    key: 'cache',
    converter: webidl.converters.DOMString,
    // https://fetch.spec.whatwg.org/#requestcache
    allowedValues: requestCache
  },
  {
    key: 'redirect',
    converter: webidl.converters.DOMString,
    // https://fetch.spec.whatwg.org/#requestredirect
    allowedValues: requestRedirect
  },
  {
    key: 'integrity',
    converter: webidl.converters.DOMString
  },
  {
    key: 'keepalive',
    converter: webidl.converters.boolean
  },
  {
    key: 'signal',
    converter: webidl.nullableConverter(
      (signal) => webidl.converters.AbortSignal(
        signal,
        { strict: false }
      )
    )
  },
  {
    key: 'window',
    converter: webidl.converters.any
  },
  {
    key: 'duplex',
    converter: webidl.converters.DOMString,
    allowedValues: requestDuplex
  }
])

module.exports = { Request, makeRequest }


/***/ }),

/***/ 7823:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { Headers, HeadersList, fill } = __nccwpck_require__(554)
const { extractBody, cloneBody, mixinBody } = __nccwpck_require__(1472)
const util = __nccwpck_require__(3983)
const { kEnumerableProperty } = util
const {
  isValidReasonPhrase,
  isCancelled,
  isAborted,
  isBlobLike,
  serializeJavascriptValueToJSONString,
  isErrorLike,
  isomorphicEncode
} = __nccwpck_require__(2538)
const {
  redirectStatusSet,
  nullBodyStatus,
  DOMException
} = __nccwpck_require__(1037)
const { kState, kHeaders, kGuard, kRealm } = __nccwpck_require__(5861)
const { webidl } = __nccwpck_require__(1744)
const { FormData } = __nccwpck_require__(2015)
const { getGlobalOrigin } = __nccwpck_require__(1246)
const { URLSerializer } = __nccwpck_require__(685)
const { kHeadersList, kConstruct } = __nccwpck_require__(2785)
const assert = __nccwpck_require__(9491)
const { types } = __nccwpck_require__(3837)

const ReadableStream = globalThis.ReadableStream || (__nccwpck_require__(5356).ReadableStream)
const textEncoder = new TextEncoder('utf-8')

// https://fetch.spec.whatwg.org/#response-class
class Response {
  // Creates network error Response.
  static error () {
    // TODO
    const relevantRealm = { settingsObject: {} }

    // The static error() method steps are to return the result of creating a
    // Response object, given a new network error, "immutable", and this’s
    // relevant Realm.
    const responseObject = new Response()
    responseObject[kState] = makeNetworkError()
    responseObject[kRealm] = relevantRealm
    responseObject[kHeaders][kHeadersList] = responseObject[kState].headersList
    responseObject[kHeaders][kGuard] = 'immutable'
    responseObject[kHeaders][kRealm] = relevantRealm
    return responseObject
  }

  // https://fetch.spec.whatwg.org/#dom-response-json
  static json (data, init = {}) {
    webidl.argumentLengthCheck(arguments, 1, { header: 'Response.json' })

    if (init !== null) {
      init = webidl.converters.ResponseInit(init)
    }

    // 1. Let bytes the result of running serialize a JavaScript value to JSON bytes on data.
    const bytes = textEncoder.encode(
      serializeJavascriptValueToJSONString(data)
    )

    // 2. Let body be the result of extracting bytes.
    const body = extractBody(bytes)

    // 3. Let responseObject be the result of creating a Response object, given a new response,
    //    "response", and this’s relevant Realm.
    const relevantRealm = { settingsObject: {} }
    const responseObject = new Response()
    responseObject[kRealm] = relevantRealm
    responseObject[kHeaders][kGuard] = 'response'
    responseObject[kHeaders][kRealm] = relevantRealm

    // 4. Perform initialize a response given responseObject, init, and (body, "application/json").
    initializeResponse(responseObject, init, { body: body[0], type: 'application/json' })

    // 5. Return responseObject.
    return responseObject
  }

  // Creates a redirect Response that redirects to url with status status.
  static redirect (url, status = 302) {
    const relevantRealm = { settingsObject: {} }

    webidl.argumentLengthCheck(arguments, 1, { header: 'Response.redirect' })

    url = webidl.converters.USVString(url)
    status = webidl.converters['unsigned short'](status)

    // 1. Let parsedURL be the result of parsing url with current settings
    // object’s API base URL.
    // 2. If parsedURL is failure, then throw a TypeError.
    // TODO: base-URL?
    let parsedURL
    try {
      parsedURL = new URL(url, getGlobalOrigin())
    } catch (err) {
      throw Object.assign(new TypeError('Failed to parse URL from ' + url), {
        cause: err
      })
    }

    // 3. If status is not a redirect status, then throw a RangeError.
    if (!redirectStatusSet.has(status)) {
      throw new RangeError('Invalid status code ' + status)
    }

    // 4. Let responseObject be the result of creating a Response object,
    // given a new response, "immutable", and this’s relevant Realm.
    const responseObject = new Response()
    responseObject[kRealm] = relevantRealm
    responseObject[kHeaders][kGuard] = 'immutable'
    responseObject[kHeaders][kRealm] = relevantRealm

    // 5. Set responseObject’s response’s status to status.
    responseObject[kState].status = status

    // 6. Let value be parsedURL, serialized and isomorphic encoded.
    const value = isomorphicEncode(URLSerializer(parsedURL))

    // 7. Append `Location`/value to responseObject’s response’s header list.
    responseObject[kState].headersList.append('location', value)

    // 8. Return responseObject.
    return responseObject
  }

  // https://fetch.spec.whatwg.org/#dom-response
  constructor (body = null, init = {}) {
    if (body !== null) {
      body = webidl.converters.BodyInit(body)
    }

    init = webidl.converters.ResponseInit(init)

    // TODO
    this[kRealm] = { settingsObject: {} }

    // 1. Set this’s response to a new response.
    this[kState] = makeResponse({})

    // 2. Set this’s headers to a new Headers object with this’s relevant
    // Realm, whose header list is this’s response’s header list and guard
    // is "response".
    this[kHeaders] = new Headers(kConstruct)
    this[kHeaders][kGuard] = 'response'
    this[kHeaders][kHeadersList] = this[kState].headersList
    this[kHeaders][kRealm] = this[kRealm]

    // 3. Let bodyWithType be null.
    let bodyWithType = null

    // 4. If body is non-null, then set bodyWithType to the result of extracting body.
    if (body != null) {
      const [extractedBody, type] = extractBody(body)
      bodyWithType = { body: extractedBody, type }
    }

    // 5. Perform initialize a response given this, init, and bodyWithType.
    initializeResponse(this, init, bodyWithType)
  }

  // Returns response’s type, e.g., "cors".
  get type () {
    webidl.brandCheck(this, Response)

    // The type getter steps are to return this’s response’s type.
    return this[kState].type
  }

  // Returns response’s URL, if it has one; otherwise the empty string.
  get url () {
    webidl.brandCheck(this, Response)

    const urlList = this[kState].urlList

    // The url getter steps are to return the empty string if this’s
    // response’s URL is null; otherwise this’s response’s URL,
    // serialized with exclude fragment set to true.
    const url = urlList[urlList.length - 1] ?? null

    if (url === null) {
      return ''
    }

    return URLSerializer(url, true)
  }

  // Returns whether response was obtained through a redirect.
  get redirected () {
    webidl.brandCheck(this, Response)

    // The redirected getter steps are to return true if this’s response’s URL
    // list has more than one item; otherwise false.
    return this[kState].urlList.length > 1
  }

  // Returns response’s status.
  get status () {
    webidl.brandCheck(this, Response)

    // The status getter steps are to return this’s response’s status.
    return this[kState].status
  }

  // Returns whether response’s status is an ok status.
  get ok () {
    webidl.brandCheck(this, Response)

    // The ok getter steps are to return true if this’s response’s status is an
    // ok status; otherwise false.
    return this[kState].status >= 200 && this[kState].status <= 299
  }

  // Returns response’s status message.
  get statusText () {
    webidl.brandCheck(this, Response)

    // The statusText getter steps are to return this’s response’s status
    // message.
    return this[kState].statusText
  }

  // Returns response’s headers as Headers.
  get headers () {
    webidl.brandCheck(this, Response)

    // The headers getter steps are to return this’s headers.
    return this[kHeaders]
  }

  get body () {
    webidl.brandCheck(this, Response)

    return this[kState].body ? this[kState].body.stream : null
  }

  get bodyUsed () {
    webidl.brandCheck(this, Response)

    return !!this[kState].body && util.isDisturbed(this[kState].body.stream)
  }

  // Returns a clone of response.
  clone () {
    webidl.brandCheck(this, Response)

    // 1. If this is unusable, then throw a TypeError.
    if (this.bodyUsed || (this.body && this.body.locked)) {
      throw webidl.errors.exception({
        header: 'Response.clone',
        message: 'Body has already been consumed.'
      })
    }

    // 2. Let clonedResponse be the result of cloning this’s response.
    const clonedResponse = cloneResponse(this[kState])

    // 3. Return the result of creating a Response object, given
    // clonedResponse, this’s headers’s guard, and this’s relevant Realm.
    const clonedResponseObject = new Response()
    clonedResponseObject[kState] = clonedResponse
    clonedResponseObject[kRealm] = this[kRealm]
    clonedResponseObject[kHeaders][kHeadersList] = clonedResponse.headersList
    clonedResponseObject[kHeaders][kGuard] = this[kHeaders][kGuard]
    clonedResponseObject[kHeaders][kRealm] = this[kHeaders][kRealm]

    return clonedResponseObject
  }
}

mixinBody(Response)

Object.defineProperties(Response.prototype, {
  type: kEnumerableProperty,
  url: kEnumerableProperty,
  status: kEnumerableProperty,
  ok: kEnumerableProperty,
  redirected: kEnumerableProperty,
  statusText: kEnumerableProperty,
  headers: kEnumerableProperty,
  clone: kEnumerableProperty,
  body: kEnumerableProperty,
  bodyUsed: kEnumerableProperty,
  [Symbol.toStringTag]: {
    value: 'Response',
    configurable: true
  }
})

Object.defineProperties(Response, {
  json: kEnumerableProperty,
  redirect: kEnumerableProperty,
  error: kEnumerableProperty
})

// https://fetch.spec.whatwg.org/#concept-response-clone
function cloneResponse (response) {
  // To clone a response response, run these steps:

  // 1. If response is a filtered response, then return a new identical
  // filtered response whose internal response is a clone of response’s
  // internal response.
  if (response.internalResponse) {
    return filterResponse(
      cloneResponse(response.internalResponse),
      response.type
    )
  }

  // 2. Let newResponse be a copy of response, except for its body.
  const newResponse = makeResponse({ ...response, body: null })

  // 3. If response’s body is non-null, then set newResponse’s body to the
  // result of cloning response’s body.
  if (response.body != null) {
    newResponse.body = cloneBody(response.body)
  }

  // 4. Return newResponse.
  return newResponse
}

function makeResponse (init) {
  return {
    aborted: false,
    rangeRequested: false,
    timingAllowPassed: false,
    requestIncludesCredentials: false,
    type: 'default',
    status: 200,
    timingInfo: null,
    cacheState: '',
    statusText: '',
    ...init,
    headersList: init.headersList
      ? new HeadersList(init.headersList)
      : new HeadersList(),
    urlList: init.urlList ? [...init.urlList] : []
  }
}

function makeNetworkError (reason) {
  const isError = isErrorLike(reason)
  return makeResponse({
    type: 'error',
    status: 0,
    error: isError
      ? reason
      : new Error(reason ? String(reason) : reason),
    aborted: reason && reason.name === 'AbortError'
  })
}

function makeFilteredResponse (response, state) {
  state = {
    internalResponse: response,
    ...state
  }

  return new Proxy(response, {
    get (target, p) {
      return p in state ? state[p] : target[p]
    },
    set (target, p, value) {
      assert(!(p in state))
      target[p] = value
      return true
    }
  })
}

// https://fetch.spec.whatwg.org/#concept-filtered-response
function filterResponse (response, type) {
  // Set response to the following filtered response with response as its
  // internal response, depending on request’s response tainting:
  if (type === 'basic') {
    // A basic filtered response is a filtered response whose type is "basic"
    // and header list excludes any headers in internal response’s header list
    // whose name is a forbidden response-header name.

    // Note: undici does not implement forbidden response-header names
    return makeFilteredResponse(response, {
      type: 'basic',
      headersList: response.headersList
    })
  } else if (type === 'cors') {
    // A CORS filtered response is a filtered response whose type is "cors"
    // and header list excludes any headers in internal response’s header
    // list whose name is not a CORS-safelisted response-header name, given
    // internal response’s CORS-exposed header-name list.

    // Note: undici does not implement CORS-safelisted response-header names
    return makeFilteredResponse(response, {
      type: 'cors',
      headersList: response.headersList
    })
  } else if (type === 'opaque') {
    // An opaque filtered response is a filtered response whose type is
    // "opaque", URL list is the empty list, status is 0, status message
    // is the empty byte sequence, header list is empty, and body is null.

    return makeFilteredResponse(response, {
      type: 'opaque',
      urlList: Object.freeze([]),
      status: 0,
      statusText: '',
      body: null
    })
  } else if (type === 'opaqueredirect') {
    // An opaque-redirect filtered response is a filtered response whose type
    // is "opaqueredirect", status is 0, status message is the empty byte
    // sequence, header list is empty, and body is null.

    return makeFilteredResponse(response, {
      type: 'opaqueredirect',
      status: 0,
      statusText: '',
      headersList: [],
      body: null
    })
  } else {
    assert(false)
  }
}

// https://fetch.spec.whatwg.org/#appropriate-network-error
function makeAppropriateNetworkError (fetchParams, err = null) {
  // 1. Assert: fetchParams is canceled.
  assert(isCancelled(fetchParams))

  // 2. Return an aborted network error if fetchParams is aborted;
  // otherwise return a network error.
  return isAborted(fetchParams)
    ? makeNetworkError(Object.assign(new DOMException('The operation was aborted.', 'AbortError'), { cause: err }))
    : makeNetworkError(Object.assign(new DOMException('Request was cancelled.'), { cause: err }))
}

// https://whatpr.org/fetch/1392.html#initialize-a-response
function initializeResponse (response, init, body) {
  // 1. If init["status"] is not in the range 200 to 599, inclusive, then
  //    throw a RangeError.
  if (init.status !== null && (init.status < 200 || init.status > 599)) {
    throw new RangeError('init["status"] must be in the range of 200 to 599, inclusive.')
  }

  // 2. If init["statusText"] does not match the reason-phrase token production,
  //    then throw a TypeError.
  if ('statusText' in init && init.statusText != null) {
    // See, https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.2:
    //   reason-phrase  = *( HTAB / SP / VCHAR / obs-text )
    if (!isValidReasonPhrase(String(init.statusText))) {
      throw new TypeError('Invalid statusText')
    }
  }

  // 3. Set response’s response’s status to init["status"].
  if ('status' in init && init.status != null) {
    response[kState].status = init.status
  }

  // 4. Set response’s response’s status message to init["statusText"].
  if ('statusText' in init && init.statusText != null) {
    response[kState].statusText = init.statusText
  }

  // 5. If init["headers"] exists, then fill response’s headers with init["headers"].
  if ('headers' in init && init.headers != null) {
    fill(response[kHeaders], init.headers)
  }

  // 6. If body was given, then:
  if (body) {
    // 1. If response's status is a null body status, then throw a TypeError.
    if (nullBodyStatus.includes(response.status)) {
      throw webidl.errors.exception({
        header: 'Response constructor',
        message: 'Invalid response status code ' + response.status
      })
    }

    // 2. Set response's body to body's body.
    response[kState].body = body.body

    // 3. If body's type is non-null and response's header list does not contain
    //    `Content-Type`, then append (`Content-Type`, body's type) to response's header list.
    if (body.type != null && !response[kState].headersList.contains('Content-Type')) {
      response[kState].headersList.append('content-type', body.type)
    }
  }
}

webidl.converters.ReadableStream = webidl.interfaceConverter(
  ReadableStream
)

webidl.converters.FormData = webidl.interfaceConverter(
  FormData
)

webidl.converters.URLSearchParams = webidl.interfaceConverter(
  URLSearchParams
)

// https://fetch.spec.whatwg.org/#typedefdef-xmlhttprequestbodyinit
webidl.converters.XMLHttpRequestBodyInit = function (V) {
  if (typeof V === 'string') {
    return webidl.converters.USVString(V)
  }

  if (isBlobLike(V)) {
    return webidl.converters.Blob(V, { strict: false })
  }

  if (types.isArrayBuffer(V) || types.isTypedArray(V) || types.isDataView(V)) {
    return webidl.converters.BufferSource(V)
  }

  if (util.isFormDataLike(V)) {
    return webidl.converters.FormData(V, { strict: false })
  }

  if (V instanceof URLSearchParams) {
    return webidl.converters.URLSearchParams(V)
  }

  return webidl.converters.DOMString(V)
}

// https://fetch.spec.whatwg.org/#bodyinit
webidl.converters.BodyInit = function (V) {
  if (V instanceof ReadableStream) {
    return webidl.converters.ReadableStream(V)
  }

  // Note: the spec doesn't include async iterables,
  // this is an undici extension.
  if (V?.[Symbol.asyncIterator]) {
    return V
  }

  return webidl.converters.XMLHttpRequestBodyInit(V)
}

webidl.converters.ResponseInit = webidl.dictionaryConverter([
  {
    key: 'status',
    converter: webidl.converters['unsigned short'],
    defaultValue: 200
  },
  {
    key: 'statusText',
    converter: webidl.converters.ByteString,
    defaultValue: ''
  },
  {
    key: 'headers',
    converter: webidl.converters.HeadersInit
  }
])

module.exports = {
  makeNetworkError,
  makeResponse,
  makeAppropriateNetworkError,
  filterResponse,
  Response,
  cloneResponse
}


/***/ }),

/***/ 5861:
/***/ ((module) => {



module.exports = {
  kUrl: Symbol('url'),
  kHeaders: Symbol('headers'),
  kSignal: Symbol('signal'),
  kState: Symbol('state'),
  kGuard: Symbol('guard'),
  kRealm: Symbol('realm')
}


/***/ }),

/***/ 2538:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { redirectStatusSet, referrerPolicySet: referrerPolicyTokens, badPortsSet } = __nccwpck_require__(1037)
const { getGlobalOrigin } = __nccwpck_require__(1246)
const { performance } = __nccwpck_require__(4074)
const { isBlobLike, toUSVString, ReadableStreamFrom } = __nccwpck_require__(3983)
const assert = __nccwpck_require__(9491)
const { isUint8Array } = __nccwpck_require__(9830)

let supportedHashes = []

// https://nodejs.org/api/crypto.html#determining-if-crypto-support-is-unavailable
/** @type {import('crypto')|undefined} */
let crypto

try {
  crypto = __nccwpck_require__(6113)
  const possibleRelevantHashes = ['sha256', 'sha384', 'sha512']
  supportedHashes = crypto.getHashes().filter((hash) => possibleRelevantHashes.includes(hash))
/* c8 ignore next 3 */
} catch {
}

function responseURL (response) {
  // https://fetch.spec.whatwg.org/#responses
  // A response has an associated URL. It is a pointer to the last URL
  // in response’s URL list and null if response’s URL list is empty.
  const urlList = response.urlList
  const length = urlList.length
  return length === 0 ? null : urlList[length - 1].toString()
}

// https://fetch.spec.whatwg.org/#concept-response-location-url
function responseLocationURL (response, requestFragment) {
  // 1. If response’s status is not a redirect status, then return null.
  if (!redirectStatusSet.has(response.status)) {
    return null
  }

  // 2. Let location be the result of extracting header list values given
  // `Location` and response’s header list.
  let location = response.headersList.get('location')

  // 3. If location is a header value, then set location to the result of
  //    parsing location with response’s URL.
  if (location !== null && isValidHeaderValue(location)) {
    location = new URL(location, responseURL(response))
  }

  // 4. If location is a URL whose fragment is null, then set location’s
  // fragment to requestFragment.
  if (location && !location.hash) {
    location.hash = requestFragment
  }

  // 5. Return location.
  return location
}

/** @returns {URL} */
function requestCurrentURL (request) {
  return request.urlList[request.urlList.length - 1]
}

function requestBadPort (request) {
  // 1. Let url be request’s current URL.
  const url = requestCurrentURL(request)

  // 2. If url’s scheme is an HTTP(S) scheme and url’s port is a bad port,
  // then return blocked.
  if (urlIsHttpHttpsScheme(url) && badPortsSet.has(url.port)) {
    return 'blocked'
  }

  // 3. Return allowed.
  return 'allowed'
}

function isErrorLike (object) {
  return object instanceof Error || (
    object?.constructor?.name === 'Error' ||
    object?.constructor?.name === 'DOMException'
  )
}

// Check whether |statusText| is a ByteString and
// matches the Reason-Phrase token production.
// RFC 2616: https://tools.ietf.org/html/rfc2616
// RFC 7230: https://tools.ietf.org/html/rfc7230
// "reason-phrase = *( HTAB / SP / VCHAR / obs-text )"
// https://github.com/chromium/chromium/blob/94.0.4604.1/third_party/blink/renderer/core/fetch/response.cc#L116
function isValidReasonPhrase (statusText) {
  for (let i = 0; i < statusText.length; ++i) {
    const c = statusText.charCodeAt(i)
    if (
      !(
        (
          c === 0x09 || // HTAB
          (c >= 0x20 && c <= 0x7e) || // SP / VCHAR
          (c >= 0x80 && c <= 0xff)
        ) // obs-text
      )
    ) {
      return false
    }
  }
  return true
}

/**
 * @see https://tools.ietf.org/html/rfc7230#section-3.2.6
 * @param {number} c
 */
function isTokenCharCode (c) {
  switch (c) {
    case 0x22:
    case 0x28:
    case 0x29:
    case 0x2c:
    case 0x2f:
    case 0x3a:
    case 0x3b:
    case 0x3c:
    case 0x3d:
    case 0x3e:
    case 0x3f:
    case 0x40:
    case 0x5b:
    case 0x5c:
    case 0x5d:
    case 0x7b:
    case 0x7d:
      // DQUOTE and "(),/:;<=>?@[\]{}"
      return false
    default:
      // VCHAR %x21-7E
      return c >= 0x21 && c <= 0x7e
  }
}

/**
 * @param {string} characters
 */
function isValidHTTPToken (characters) {
  if (characters.length === 0) {
    return false
  }
  for (let i = 0; i < characters.length; ++i) {
    if (!isTokenCharCode(characters.charCodeAt(i))) {
      return false
    }
  }
  return true
}

/**
 * @see https://fetch.spec.whatwg.org/#header-name
 * @param {string} potentialValue
 */
function isValidHeaderName (potentialValue) {
  return isValidHTTPToken(potentialValue)
}

/**
 * @see https://fetch.spec.whatwg.org/#header-value
 * @param {string} potentialValue
 */
function isValidHeaderValue (potentialValue) {
  // - Has no leading or trailing HTTP tab or space bytes.
  // - Contains no 0x00 (NUL) or HTTP newline bytes.
  if (
    potentialValue.startsWith('\t') ||
    potentialValue.startsWith(' ') ||
    potentialValue.endsWith('\t') ||
    potentialValue.endsWith(' ')
  ) {
    return false
  }

  if (
    potentialValue.includes('\0') ||
    potentialValue.includes('\r') ||
    potentialValue.includes('\n')
  ) {
    return false
  }

  return true
}

// https://w3c.github.io/webappsec-referrer-policy/#set-requests-referrer-policy-on-redirect
function setRequestReferrerPolicyOnRedirect (request, actualResponse) {
  //  Given a request request and a response actualResponse, this algorithm
  //  updates request’s referrer policy according to the Referrer-Policy
  //  header (if any) in actualResponse.

  // 1. Let policy be the result of executing § 8.1 Parse a referrer policy
  // from a Referrer-Policy header on actualResponse.

  // 8.1 Parse a referrer policy from a Referrer-Policy header
  // 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy` and response’s header list.
  const { headersList } = actualResponse
  // 2. Let policy be the empty string.
  // 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty string, then set policy to token.
  // 4. Return policy.
  const policyHeader = (headersList.get('referrer-policy') ?? '').split(',')

  // Note: As the referrer-policy can contain multiple policies
  // separated by comma, we need to loop through all of them
  // and pick the first valid one.
  // Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy#specify_a_fallback_policy
  let policy = ''
  if (policyHeader.length > 0) {
    // The right-most policy takes precedence.
    // The left-most policy is the fallback.
    for (let i = policyHeader.length; i !== 0; i--) {
      const token = policyHeader[i - 1].trim()
      if (referrerPolicyTokens.has(token)) {
        policy = token
        break
      }
    }
  }

  // 2. If policy is not the empty string, then set request’s referrer policy to policy.
  if (policy !== '') {
    request.referrerPolicy = policy
  }
}

// https://fetch.spec.whatwg.org/#cross-origin-resource-policy-check
function crossOriginResourcePolicyCheck () {
  // TODO
  return 'allowed'
}

// https://fetch.spec.whatwg.org/#concept-cors-check
function corsCheck () {
  // TODO
  return 'success'
}

// https://fetch.spec.whatwg.org/#concept-tao-check
function TAOCheck () {
  // TODO
  return 'success'
}

function appendFetchMetadata (httpRequest) {
  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-dest-header
  //  TODO

  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-mode-header

  //  1. Assert: r’s url is a potentially trustworthy URL.
  //  TODO

  //  2. Let header be a Structured Header whose value is a token.
  let header = null

  //  3. Set header’s value to r’s mode.
  header = httpRequest.mode

  //  4. Set a structured field value `Sec-Fetch-Mode`/header in r’s header list.
  httpRequest.headersList.set('sec-fetch-mode', header)

  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-site-header
  //  TODO

  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-user-header
  //  TODO
}

// https://fetch.spec.whatwg.org/#append-a-request-origin-header
function appendRequestOriginHeader (request) {
  // 1. Let serializedOrigin be the result of byte-serializing a request origin with request.
  let serializedOrigin = request.origin

  // 2. If request’s response tainting is "cors" or request’s mode is "websocket", then append (`Origin`, serializedOrigin) to request’s header list.
  if (request.responseTainting === 'cors' || request.mode === 'websocket') {
    if (serializedOrigin) {
      request.headersList.append('origin', serializedOrigin)
    }

  // 3. Otherwise, if request’s method is neither `GET` nor `HEAD`, then:
  } else if (request.method !== 'GET' && request.method !== 'HEAD') {
    // 1. Switch on request’s referrer policy:
    switch (request.referrerPolicy) {
      case 'no-referrer':
        // Set serializedOrigin to `null`.
        serializedOrigin = null
        break
      case 'no-referrer-when-downgrade':
      case 'strict-origin':
      case 'strict-origin-when-cross-origin':
        // If request’s origin is a tuple origin, its scheme is "https", and request’s current URL’s scheme is not "https", then set serializedOrigin to `null`.
        if (request.origin && urlHasHttpsScheme(request.origin) && !urlHasHttpsScheme(requestCurrentURL(request))) {
          serializedOrigin = null
        }
        break
      case 'same-origin':
        // If request’s origin is not same origin with request’s current URL’s origin, then set serializedOrigin to `null`.
        if (!sameOrigin(request, requestCurrentURL(request))) {
          serializedOrigin = null
        }
        break
      default:
        // Do nothing.
    }

    if (serializedOrigin) {
      // 2. Append (`Origin`, serializedOrigin) to request’s header list.
      request.headersList.append('origin', serializedOrigin)
    }
  }
}

function coarsenedSharedCurrentTime (crossOriginIsolatedCapability) {
  // TODO
  return performance.now()
}

// https://fetch.spec.whatwg.org/#create-an-opaque-timing-info
function createOpaqueTimingInfo (timingInfo) {
  return {
    startTime: timingInfo.startTime ?? 0,
    redirectStartTime: 0,
    redirectEndTime: 0,
    postRedirectStartTime: timingInfo.startTime ?? 0,
    finalServiceWorkerStartTime: 0,
    finalNetworkResponseStartTime: 0,
    finalNetworkRequestStartTime: 0,
    endTime: 0,
    encodedBodySize: 0,
    decodedBodySize: 0,
    finalConnectionTimingInfo: null
  }
}

// https://html.spec.whatwg.org/multipage/origin.html#policy-container
function makePolicyContainer () {
  // Note: the fetch spec doesn't make use of embedder policy or CSP list
  return {
    referrerPolicy: 'strict-origin-when-cross-origin'
  }
}

// https://html.spec.whatwg.org/multipage/origin.html#clone-a-policy-container
function clonePolicyContainer (policyContainer) {
  return {
    referrerPolicy: policyContainer.referrerPolicy
  }
}

// https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer
function determineRequestsReferrer (request) {
  // 1. Let policy be request's referrer policy.
  const policy = request.referrerPolicy

  // Note: policy cannot (shouldn't) be null or an empty string.
  assert(policy)

  // 2. Let environment be request’s client.

  let referrerSource = null

  // 3. Switch on request’s referrer:
  if (request.referrer === 'client') {
    // Note: node isn't a browser and doesn't implement document/iframes,
    // so we bypass this step and replace it with our own.

    const globalOrigin = getGlobalOrigin()

    if (!globalOrigin || globalOrigin.origin === 'null') {
      return 'no-referrer'
    }

    // note: we need to clone it as it's mutated
    referrerSource = new URL(globalOrigin)
  } else if (request.referrer instanceof URL) {
    // Let referrerSource be request’s referrer.
    referrerSource = request.referrer
  }

  // 4. Let request’s referrerURL be the result of stripping referrerSource for
  //    use as a referrer.
  let referrerURL = stripURLForReferrer(referrerSource)

  // 5. Let referrerOrigin be the result of stripping referrerSource for use as
  //    a referrer, with the origin-only flag set to true.
  const referrerOrigin = stripURLForReferrer(referrerSource, true)

  // 6. If the result of serializing referrerURL is a string whose length is
  //    greater than 4096, set referrerURL to referrerOrigin.
  if (referrerURL.toString().length > 4096) {
    referrerURL = referrerOrigin
  }

  const areSameOrigin = sameOrigin(request, referrerURL)
  const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) &&
    !isURLPotentiallyTrustworthy(request.url)

  // 8. Execute the switch statements corresponding to the value of policy:
  switch (policy) {
    case 'origin': return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true)
    case 'unsafe-url': return referrerURL
    case 'same-origin':
      return areSameOrigin ? referrerOrigin : 'no-referrer'
    case 'origin-when-cross-origin':
      return areSameOrigin ? referrerURL : referrerOrigin
    case 'strict-origin-when-cross-origin': {
      const currentURL = requestCurrentURL(request)

      // 1. If the origin of referrerURL and the origin of request’s current
      //    URL are the same, then return referrerURL.
      if (sameOrigin(referrerURL, currentURL)) {
        return referrerURL
      }

      // 2. If referrerURL is a potentially trustworthy URL and request’s
      //    current URL is not a potentially trustworthy URL, then return no
      //    referrer.
      if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {
        return 'no-referrer'
      }

      // 3. Return referrerOrigin.
      return referrerOrigin
    }
    case 'strict-origin': // eslint-disable-line
      /**
         * 1. If referrerURL is a potentially trustworthy URL and
         * request’s current URL is not a potentially trustworthy URL,
         * then return no referrer.
         * 2. Return referrerOrigin
        */
    case 'no-referrer-when-downgrade': // eslint-disable-line
      /**
       * 1. If referrerURL is a potentially trustworthy URL and
       * request’s current URL is not a potentially trustworthy URL,
       * then return no referrer.
       * 2. Return referrerOrigin
      */

    default: // eslint-disable-line
      return isNonPotentiallyTrustWorthy ? 'no-referrer' : referrerOrigin
  }
}

/**
 * @see https://w3c.github.io/webappsec-referrer-policy/#strip-url
 * @param {URL} url
 * @param {boolean|undefined} originOnly
 */
function stripURLForReferrer (url, originOnly) {
  // 1. Assert: url is a URL.
  assert(url instanceof URL)

  // 2. If url’s scheme is a local scheme, then return no referrer.
  if (url.protocol === 'file:' || url.protocol === 'about:' || url.protocol === 'blank:') {
    return 'no-referrer'
  }

  // 3. Set url’s username to the empty string.
  url.username = ''

  // 4. Set url’s password to the empty string.
  url.password = ''

  // 5. Set url’s fragment to null.
  url.hash = ''

  // 6. If the origin-only flag is true, then:
  if (originOnly) {
    // 1. Set url’s path to « the empty string ».
    url.pathname = ''

    // 2. Set url’s query to null.
    url.search = ''
  }

  // 7. Return url.
  return url
}

function isURLPotentiallyTrustworthy (url) {
  if (!(url instanceof URL)) {
    return false
  }

  // If child of about, return true
  if (url.href === 'about:blank' || url.href === 'about:srcdoc') {
    return true
  }

  // If scheme is data, return true
  if (url.protocol === 'data:') return true

  // If file, return true
  if (url.protocol === 'file:') return true

  return isOriginPotentiallyTrustworthy(url.origin)

  function isOriginPotentiallyTrustworthy (origin) {
    // If origin is explicitly null, return false
    if (origin == null || origin === 'null') return false

    const originAsURL = new URL(origin)

    // If secure, return true
    if (originAsURL.protocol === 'https:' || originAsURL.protocol === 'wss:') {
      return true
    }

    // If localhost or variants, return true
    if (/^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(originAsURL.hostname) ||
     (originAsURL.hostname === 'localhost' || originAsURL.hostname.includes('localhost.')) ||
     (originAsURL.hostname.endsWith('.localhost'))) {
      return true
    }

    // If any other, return false
    return false
  }
}

/**
 * @see https://w3c.github.io/webappsec-subresource-integrity/#does-response-match-metadatalist
 * @param {Uint8Array} bytes
 * @param {string} metadataList
 */
function bytesMatch (bytes, metadataList) {
  // If node is not built with OpenSSL support, we cannot check
  // a request's integrity, so allow it by default (the spec will
  // allow requests if an invalid hash is given, as precedence).
  /* istanbul ignore if: only if node is built with --without-ssl */
  if (crypto === undefined) {
    return true
  }

  // 1. Let parsedMetadata be the result of parsing metadataList.
  const parsedMetadata = parseMetadata(metadataList)

  // 2. If parsedMetadata is no metadata, return true.
  if (parsedMetadata === 'no metadata') {
    return true
  }

  // 3. If response is not eligible for integrity validation, return false.
  // TODO

  // 4. If parsedMetadata is the empty set, return true.
  if (parsedMetadata.length === 0) {
    return true
  }

  // 5. Let metadata be the result of getting the strongest
  //    metadata from parsedMetadata.
  const strongest = getStrongestMetadata(parsedMetadata)
  const metadata = filterMetadataListByAlgorithm(parsedMetadata, strongest)

  // 6. For each item in metadata:
  for (const item of metadata) {
    // 1. Let algorithm be the alg component of item.
    const algorithm = item.algo

    // 2. Let expectedValue be the val component of item.
    const expectedValue = item.hash

    // See https://github.com/web-platform-tests/wpt/commit/e4c5cc7a5e48093220528dfdd1c4012dc3837a0e
    // "be liberal with padding". This is annoying, and it's not even in the spec.

    // 3. Let actualValue be the result of applying algorithm to bytes.
    let actualValue = crypto.createHash(algorithm).update(bytes).digest('base64')

    if (actualValue[actualValue.length - 1] === '=') {
      if (actualValue[actualValue.length - 2] === '=') {
        actualValue = actualValue.slice(0, -2)
      } else {
        actualValue = actualValue.slice(0, -1)
      }
    }

    // 4. If actualValue is a case-sensitive match for expectedValue,
    //    return true.
    if (compareBase64Mixed(actualValue, expectedValue)) {
      return true
    }
  }

  // 7. Return false.
  return false
}

// https://w3c.github.io/webappsec-subresource-integrity/#grammardef-hash-with-options
// https://www.w3.org/TR/CSP2/#source-list-syntax
// https://www.rfc-editor.org/rfc/rfc5234#appendix-B.1
const parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i

/**
 * @see https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata
 * @param {string} metadata
 */
function parseMetadata (metadata) {
  // 1. Let result be the empty set.
  /** @type {{ algo: string, hash: string }[]} */
  const result = []

  // 2. Let empty be equal to true.
  let empty = true

  // 3. For each token returned by splitting metadata on spaces:
  for (const token of metadata.split(' ')) {
    // 1. Set empty to false.
    empty = false

    // 2. Parse token as a hash-with-options.
    const parsedToken = parseHashWithOptions.exec(token)

    // 3. If token does not parse, continue to the next token.
    if (
      parsedToken === null ||
      parsedToken.groups === undefined ||
      parsedToken.groups.algo === undefined
    ) {
      // Note: Chromium blocks the request at this point, but Firefox
      // gives a warning that an invalid integrity was given. The
      // correct behavior is to ignore these, and subsequently not
      // check the integrity of the resource.
      continue
    }

    // 4. Let algorithm be the hash-algo component of token.
    const algorithm = parsedToken.groups.algo.toLowerCase()

    // 5. If algorithm is a hash function recognized by the user
    //    agent, add the parsed token to result.
    if (supportedHashes.includes(algorithm)) {
      result.push(parsedToken.groups)
    }
  }

  // 4. Return no metadata if empty is true, otherwise return result.
  if (empty === true) {
    return 'no metadata'
  }

  return result
}

/**
 * @param {{ algo: 'sha256' | 'sha384' | 'sha512' }[]} metadataList
 */
function getStrongestMetadata (metadataList) {
  // Let algorithm be the algo component of the first item in metadataList.
  // Can be sha256
  let algorithm = metadataList[0].algo
  // If the algorithm is sha512, then it is the strongest
  // and we can return immediately
  if (algorithm[3] === '5') {
    return algorithm
  }

  for (let i = 1; i < metadataList.length; ++i) {
    const metadata = metadataList[i]
    // If the algorithm is sha512, then it is the strongest
    // and we can break the loop immediately
    if (metadata.algo[3] === '5') {
      algorithm = 'sha512'
      break
    // If the algorithm is sha384, then a potential sha256 or sha384 is ignored
    } else if (algorithm[3] === '3') {
      continue
    // algorithm is sha256, check if algorithm is sha384 and if so, set it as
    // the strongest
    } else if (metadata.algo[3] === '3') {
      algorithm = 'sha384'
    }
  }
  return algorithm
}

function filterMetadataListByAlgorithm (metadataList, algorithm) {
  if (metadataList.length === 1) {
    return metadataList
  }

  let pos = 0
  for (let i = 0; i < metadataList.length; ++i) {
    if (metadataList[i].algo === algorithm) {
      metadataList[pos++] = metadataList[i]
    }
  }

  metadataList.length = pos

  return metadataList
}

/**
 * Compares two base64 strings, allowing for base64url
 * in the second string.
 *
* @param {string} actualValue always base64
 * @param {string} expectedValue base64 or base64url
 * @returns {boolean}
 */
function compareBase64Mixed (actualValue, expectedValue) {
  if (actualValue.length !== expectedValue.length) {
    return false
  }
  for (let i = 0; i < actualValue.length; ++i) {
    if (actualValue[i] !== expectedValue[i]) {
      if (
        (actualValue[i] === '+' && expectedValue[i] === '-') ||
        (actualValue[i] === '/' && expectedValue[i] === '_')
      ) {
        continue
      }
      return false
    }
  }

  return true
}

// https://w3c.github.io/webappsec-upgrade-insecure-requests/#upgrade-request
function tryUpgradeRequestToAPotentiallyTrustworthyURL (request) {
  // TODO
}

/**
 * @link {https://html.spec.whatwg.org/multipage/origin.html#same-origin}
 * @param {URL} A
 * @param {URL} B
 */
function sameOrigin (A, B) {
  // 1. If A and B are the same opaque origin, then return true.
  if (A.origin === B.origin && A.origin === 'null') {
    return true
  }

  // 2. If A and B are both tuple origins and their schemes,
  //    hosts, and port are identical, then return true.
  if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) {
    return true
  }

  // 3. Return false.
  return false
}

function createDeferredPromise () {
  let res
  let rej
  const promise = new Promise((resolve, reject) => {
    res = resolve
    rej = reject
  })

  return { promise, resolve: res, reject: rej }
}

function isAborted (fetchParams) {
  return fetchParams.controller.state === 'aborted'
}

function isCancelled (fetchParams) {
  return fetchParams.controller.state === 'aborted' ||
    fetchParams.controller.state === 'terminated'
}

const normalizeMethodRecord = {
  delete: 'DELETE',
  DELETE: 'DELETE',
  get: 'GET',
  GET: 'GET',
  head: 'HEAD',
  HEAD: 'HEAD',
  options: 'OPTIONS',
  OPTIONS: 'OPTIONS',
  post: 'POST',
  POST: 'POST',
  put: 'PUT',
  PUT: 'PUT'
}

// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.
Object.setPrototypeOf(normalizeMethodRecord, null)

/**
 * @see https://fetch.spec.whatwg.org/#concept-method-normalize
 * @param {string} method
 */
function normalizeMethod (method) {
  return normalizeMethodRecord[method.toLowerCase()] ?? method
}

// https://infra.spec.whatwg.org/#serialize-a-javascript-value-to-a-json-string
function serializeJavascriptValueToJSONString (value) {
  // 1. Let result be ? Call(%JSON.stringify%, undefined, « value »).
  const result = JSON.stringify(value)

  // 2. If result is undefined, then throw a TypeError.
  if (result === undefined) {
    throw new TypeError('Value is not JSON serializable')
  }

  // 3. Assert: result is a string.
  assert(typeof result === 'string')

  // 4. Return result.
  return result
}

// https://tc39.es/ecma262/#sec-%25iteratorprototype%25-object
const esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()))

/**
 * @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object
 * @param {() => unknown[]} iterator
 * @param {string} name name of the instance
 * @param {'key'|'value'|'key+value'} kind
 */
function makeIterator (iterator, name, kind) {
  const object = {
    index: 0,
    kind,
    target: iterator
  }

  const i = {
    next () {
      // 1. Let interface be the interface for which the iterator prototype object exists.

      // 2. Let thisValue be the this value.

      // 3. Let object be ? ToObject(thisValue).

      // 4. If object is a platform object, then perform a security
      //    check, passing:

      // 5. If object is not a default iterator object for interface,
      //    then throw a TypeError.
      if (Object.getPrototypeOf(this) !== i) {
        throw new TypeError(
          `'next' called on an object that does not implement interface ${name} Iterator.`
        )
      }

      // 6. Let index be object’s index.
      // 7. Let kind be object’s kind.
      // 8. Let values be object’s target's value pairs to iterate over.
      const { index, kind, target } = object
      const values = target()

      // 9. Let len be the length of values.
      const len = values.length

      // 10. If index is greater than or equal to len, then return
      //     CreateIterResultObject(undefined, true).
      if (index >= len) {
        return { value: undefined, done: true }
      }

      // 11. Let pair be the entry in values at index index.
      const pair = values[index]

      // 12. Set object’s index to index + 1.
      object.index = index + 1

      // 13. Return the iterator result for pair and kind.
      return iteratorResult(pair, kind)
    },
    // The class string of an iterator prototype object for a given interface is the
    // result of concatenating the identifier of the interface and the string " Iterator".
    [Symbol.toStringTag]: `${name} Iterator`
  }

  // The [[Prototype]] internal slot of an iterator prototype object must be %IteratorPrototype%.
  Object.setPrototypeOf(i, esIteratorPrototype)
  // esIteratorPrototype needs to be the prototype of i
  // which is the prototype of an empty object. Yes, it's confusing.
  return Object.setPrototypeOf({}, i)
}

// https://webidl.spec.whatwg.org/#iterator-result
function iteratorResult (pair, kind) {
  let result

  // 1. Let result be a value determined by the value of kind:
  switch (kind) {
    case 'key': {
      // 1. Let idlKey be pair’s key.
      // 2. Let key be the result of converting idlKey to an
      //    ECMAScript value.
      // 3. result is key.
      result = pair[0]
      break
    }
    case 'value': {
      // 1. Let idlValue be pair’s value.
      // 2. Let value be the result of converting idlValue to
      //    an ECMAScript value.
      // 3. result is value.
      result = pair[1]
      break
    }
    case 'key+value': {
      // 1. Let idlKey be pair’s key.
      // 2. Let idlValue be pair’s value.
      // 3. Let key be the result of converting idlKey to an
      //    ECMAScript value.
      // 4. Let value be the result of converting idlValue to
      //    an ECMAScript value.
      // 5. Let array be ! ArrayCreate(2).
      // 6. Call ! CreateDataProperty(array, "0", key).
      // 7. Call ! CreateDataProperty(array, "1", value).
      // 8. result is array.
      result = pair
      break
    }
  }

  // 2. Return CreateIterResultObject(result, false).
  return { value: result, done: false }
}

/**
 * @see https://fetch.spec.whatwg.org/#body-fully-read
 */
async function fullyReadBody (body, processBody, processBodyError) {
  // 1. If taskDestination is null, then set taskDestination to
  //    the result of starting a new parallel queue.

  // 2. Let successSteps given a byte sequence bytes be to queue a
  //    fetch task to run processBody given bytes, with taskDestination.
  const successSteps = processBody

  // 3. Let errorSteps be to queue a fetch task to run processBodyError,
  //    with taskDestination.
  const errorSteps = processBodyError

  // 4. Let reader be the result of getting a reader for body’s stream.
  //    If that threw an exception, then run errorSteps with that
  //    exception and return.
  let reader

  try {
    reader = body.stream.getReader()
  } catch (e) {
    errorSteps(e)
    return
  }

  // 5. Read all bytes from reader, given successSteps and errorSteps.
  try {
    const result = await readAllBytes(reader)
    successSteps(result)
  } catch (e) {
    errorSteps(e)
  }
}

/** @type {ReadableStream} */
let ReadableStream = globalThis.ReadableStream

function isReadableStreamLike (stream) {
  if (!ReadableStream) {
    ReadableStream = (__nccwpck_require__(5356).ReadableStream)
  }

  return stream instanceof ReadableStream || (
    stream[Symbol.toStringTag] === 'ReadableStream' &&
    typeof stream.tee === 'function'
  )
}

const MAXIMUM_ARGUMENT_LENGTH = 65535

/**
 * @see https://infra.spec.whatwg.org/#isomorphic-decode
 * @param {number[]|Uint8Array} input
 */
function isomorphicDecode (input) {
  // 1. To isomorphic decode a byte sequence input, return a string whose code point
  //    length is equal to input’s length and whose code points have the same values
  //    as the values of input’s bytes, in the same order.

  if (input.length < MAXIMUM_ARGUMENT_LENGTH) {
    return String.fromCharCode(...input)
  }

  return input.reduce((previous, current) => previous + String.fromCharCode(current), '')
}

/**
 * @param {ReadableStreamController<Uint8Array>} controller
 */
function readableStreamClose (controller) {
  try {
    controller.close()
  } catch (err) {
    // TODO: add comment explaining why this error occurs.
    if (!err.message.includes('Controller is already closed')) {
      throw err
    }
  }
}

/**
 * @see https://infra.spec.whatwg.org/#isomorphic-encode
 * @param {string} input
 */
function isomorphicEncode (input) {
  // 1. Assert: input contains no code points greater than U+00FF.
  for (let i = 0; i < input.length; i++) {
    assert(input.charCodeAt(i) <= 0xFF)
  }

  // 2. Return a byte sequence whose length is equal to input’s code
  //    point length and whose bytes have the same values as the
  //    values of input’s code points, in the same order
  return input
}

/**
 * @see https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes
 * @see https://streams.spec.whatwg.org/#read-loop
 * @param {ReadableStreamDefaultReader} reader
 */
async function readAllBytes (reader) {
  const bytes = []
  let byteLength = 0

  while (true) {
    const { done, value: chunk } = await reader.read()

    if (done) {
      // 1. Call successSteps with bytes.
      return Buffer.concat(bytes, byteLength)
    }

    // 1. If chunk is not a Uint8Array object, call failureSteps
    //    with a TypeError and abort these steps.
    if (!isUint8Array(chunk)) {
      throw new TypeError('Received non-Uint8Array chunk')
    }

    // 2. Append the bytes represented by chunk to bytes.
    bytes.push(chunk)
    byteLength += chunk.length

    // 3. Read-loop given reader, bytes, successSteps, and failureSteps.
  }
}

/**
 * @see https://fetch.spec.whatwg.org/#is-local
 * @param {URL} url
 */
function urlIsLocal (url) {
  assert('protocol' in url) // ensure it's a url object

  const protocol = url.protocol

  return protocol === 'about:' || protocol === 'blob:' || protocol === 'data:'
}

/**
 * @param {string|URL} url
 */
function urlHasHttpsScheme (url) {
  if (typeof url === 'string') {
    return url.startsWith('https:')
  }

  return url.protocol === 'https:'
}

/**
 * @see https://fetch.spec.whatwg.org/#http-scheme
 * @param {URL} url
 */
function urlIsHttpHttpsScheme (url) {
  assert('protocol' in url) // ensure it's a url object

  const protocol = url.protocol

  return protocol === 'http:' || protocol === 'https:'
}

/**
 * Fetch supports node >= 16.8.0, but Object.hasOwn was added in v16.9.0.
 */
const hasOwn = Object.hasOwn || ((dict, key) => Object.prototype.hasOwnProperty.call(dict, key))

module.exports = {
  isAborted,
  isCancelled,
  createDeferredPromise,
  ReadableStreamFrom,
  toUSVString,
  tryUpgradeRequestToAPotentiallyTrustworthyURL,
  coarsenedSharedCurrentTime,
  determineRequestsReferrer,
  makePolicyContainer,
  clonePolicyContainer,
  appendFetchMetadata,
  appendRequestOriginHeader,
  TAOCheck,
  corsCheck,
  crossOriginResourcePolicyCheck,
  createOpaqueTimingInfo,
  setRequestReferrerPolicyOnRedirect,
  isValidHTTPToken,
  requestBadPort,
  requestCurrentURL,
  responseURL,
  responseLocationURL,
  isBlobLike,
  isURLPotentiallyTrustworthy,
  isValidReasonPhrase,
  sameOrigin,
  normalizeMethod,
  serializeJavascriptValueToJSONString,
  makeIterator,
  isValidHeaderName,
  isValidHeaderValue,
  hasOwn,
  isErrorLike,
  fullyReadBody,
  bytesMatch,
  isReadableStreamLike,
  readableStreamClose,
  isomorphicEncode,
  isomorphicDecode,
  urlIsLocal,
  urlHasHttpsScheme,
  urlIsHttpHttpsScheme,
  readAllBytes,
  normalizeMethodRecord,
  parseMetadata
}


/***/ }),

/***/ 1744:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { types } = __nccwpck_require__(3837)
const { hasOwn, toUSVString } = __nccwpck_require__(2538)

/** @type {import('../../types/webidl').Webidl} */
const webidl = {}
webidl.converters = {}
webidl.util = {}
webidl.errors = {}

webidl.errors.exception = function (message) {
  return new TypeError(`${message.header}: ${message.message}`)
}

webidl.errors.conversionFailed = function (context) {
  const plural = context.types.length === 1 ? '' : ' one of'
  const message =
    `${context.argument} could not be converted to` +
    `${plural}: ${context.types.join(', ')}.`

  return webidl.errors.exception({
    header: context.prefix,
    message
  })
}

webidl.errors.invalidArgument = function (context) {
  return webidl.errors.exception({
    header: context.prefix,
    message: `"${context.value}" is an invalid ${context.type}.`
  })
}

// https://webidl.spec.whatwg.org/#implements
webidl.brandCheck = function (V, I, opts = undefined) {
  if (opts?.strict !== false && !(V instanceof I)) {
    throw new TypeError('Illegal invocation')
  } else {
    return V?.[Symbol.toStringTag] === I.prototype[Symbol.toStringTag]
  }
}

webidl.argumentLengthCheck = function ({ length }, min, ctx) {
  if (length < min) {
    throw webidl.errors.exception({
      message: `${min} argument${min !== 1 ? 's' : ''} required, ` +
               `but${length ? ' only' : ''} ${length} found.`,
      ...ctx
    })
  }
}

webidl.illegalConstructor = function () {
  throw webidl.errors.exception({
    header: 'TypeError',
    message: 'Illegal constructor'
  })
}

// https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values
webidl.util.Type = function (V) {
  switch (typeof V) {
    case 'undefined': return 'Undefined'
    case 'boolean': return 'Boolean'
    case 'string': return 'String'
    case 'symbol': return 'Symbol'
    case 'number': return 'Number'
    case 'bigint': return 'BigInt'
    case 'function':
    case 'object': {
      if (V === null) {
        return 'Null'
      }

      return 'Object'
    }
  }
}

// https://webidl.spec.whatwg.org/#abstract-opdef-converttoint
webidl.util.ConvertToInt = function (V, bitLength, signedness, opts = {}) {
  let upperBound
  let lowerBound

  // 1. If bitLength is 64, then:
  if (bitLength === 64) {
    // 1. Let upperBound be 2^53 − 1.
    upperBound = Math.pow(2, 53) - 1

    // 2. If signedness is "unsigned", then let lowerBound be 0.
    if (signedness === 'unsigned') {
      lowerBound = 0
    } else {
      // 3. Otherwise let lowerBound be −2^53 + 1.
      lowerBound = Math.pow(-2, 53) + 1
    }
  } else if (signedness === 'unsigned') {
    // 2. Otherwise, if signedness is "unsigned", then:

    // 1. Let lowerBound be 0.
    lowerBound = 0

    // 2. Let upperBound be 2^bitLength − 1.
    upperBound = Math.pow(2, bitLength) - 1
  } else {
    // 3. Otherwise:

    // 1. Let lowerBound be -2^bitLength − 1.
    lowerBound = Math.pow(-2, bitLength) - 1

    // 2. Let upperBound be 2^bitLength − 1 − 1.
    upperBound = Math.pow(2, bitLength - 1) - 1
  }

  // 4. Let x be ? ToNumber(V).
  let x = Number(V)

  // 5. If x is −0, then set x to +0.
  if (x === 0) {
    x = 0
  }

  // 6. If the conversion is to an IDL type associated
  //    with the [EnforceRange] extended attribute, then:
  if (opts.enforceRange === true) {
    // 1. If x is NaN, +∞, or −∞, then throw a TypeError.
    if (
      Number.isNaN(x) ||
      x === Number.POSITIVE_INFINITY ||
      x === Number.NEGATIVE_INFINITY
    ) {
      throw webidl.errors.exception({
        header: 'Integer conversion',
        message: `Could not convert ${V} to an integer.`
      })
    }

    // 2. Set x to IntegerPart(x).
    x = webidl.util.IntegerPart(x)

    // 3. If x < lowerBound or x > upperBound, then
    //    throw a TypeError.
    if (x < lowerBound || x > upperBound) {
      throw webidl.errors.exception({
        header: 'Integer conversion',
        message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`
      })
    }

    // 4. Return x.
    return x
  }

  // 7. If x is not NaN and the conversion is to an IDL
  //    type associated with the [Clamp] extended
  //    attribute, then:
  if (!Number.isNaN(x) && opts.clamp === true) {
    // 1. Set x to min(max(x, lowerBound), upperBound).
    x = Math.min(Math.max(x, lowerBound), upperBound)

    // 2. Round x to the nearest integer, choosing the
    //    even integer if it lies halfway between two,
    //    and choosing +0 rather than −0.
    if (Math.floor(x) % 2 === 0) {
      x = Math.floor(x)
    } else {
      x = Math.ceil(x)
    }

    // 3. Return x.
    return x
  }

  // 8. If x is NaN, +0, +∞, or −∞, then return +0.
  if (
    Number.isNaN(x) ||
    (x === 0 && Object.is(0, x)) ||
    x === Number.POSITIVE_INFINITY ||
    x === Number.NEGATIVE_INFINITY
  ) {
    return 0
  }

  // 9. Set x to IntegerPart(x).
  x = webidl.util.IntegerPart(x)

  // 10. Set x to x modulo 2^bitLength.
  x = x % Math.pow(2, bitLength)

  // 11. If signedness is "signed" and x ≥ 2^bitLength − 1,
  //    then return x − 2^bitLength.
  if (signedness === 'signed' && x >= Math.pow(2, bitLength) - 1) {
    return x - Math.pow(2, bitLength)
  }

  // 12. Otherwise, return x.
  return x
}

// https://webidl.spec.whatwg.org/#abstract-opdef-integerpart
webidl.util.IntegerPart = function (n) {
  // 1. Let r be floor(abs(n)).
  const r = Math.floor(Math.abs(n))

  // 2. If n < 0, then return -1 × r.
  if (n < 0) {
    return -1 * r
  }

  // 3. Otherwise, return r.
  return r
}

// https://webidl.spec.whatwg.org/#es-sequence
webidl.sequenceConverter = function (converter) {
  return (V) => {
    // 1. If Type(V) is not Object, throw a TypeError.
    if (webidl.util.Type(V) !== 'Object') {
      throw webidl.errors.exception({
        header: 'Sequence',
        message: `Value of type ${webidl.util.Type(V)} is not an Object.`
      })
    }

    // 2. Let method be ? GetMethod(V, @@iterator).
    /** @type {Generator} */
    const method = V?.[Symbol.iterator]?.()
    const seq = []

    // 3. If method is undefined, throw a TypeError.
    if (
      method === undefined ||
      typeof method.next !== 'function'
    ) {
      throw webidl.errors.exception({
        header: 'Sequence',
        message: 'Object is not an iterator.'
      })
    }

    // https://webidl.spec.whatwg.org/#create-sequence-from-iterable
    while (true) {
      const { done, value } = method.next()

      if (done) {
        break
      }

      seq.push(converter(value))
    }

    return seq
  }
}

// https://webidl.spec.whatwg.org/#es-to-record
webidl.recordConverter = function (keyConverter, valueConverter) {
  return (O) => {
    // 1. If Type(O) is not Object, throw a TypeError.
    if (webidl.util.Type(O) !== 'Object') {
      throw webidl.errors.exception({
        header: 'Record',
        message: `Value of type ${webidl.util.Type(O)} is not an Object.`
      })
    }

    // 2. Let result be a new empty instance of record<K, V>.
    const result = {}

    if (!types.isProxy(O)) {
      // Object.keys only returns enumerable properties
      const keys = Object.keys(O)

      for (const key of keys) {
        // 1. Let typedKey be key converted to an IDL value of type K.
        const typedKey = keyConverter(key)

        // 2. Let value be ? Get(O, key).
        // 3. Let typedValue be value converted to an IDL value of type V.
        const typedValue = valueConverter(O[key])

        // 4. Set result[typedKey] to typedValue.
        result[typedKey] = typedValue
      }

      // 5. Return result.
      return result
    }

    // 3. Let keys be ? O.[[OwnPropertyKeys]]().
    const keys = Reflect.ownKeys(O)

    // 4. For each key of keys.
    for (const key of keys) {
      // 1. Let desc be ? O.[[GetOwnProperty]](key).
      const desc = Reflect.getOwnPropertyDescriptor(O, key)

      // 2. If desc is not undefined and desc.[[Enumerable]] is true:
      if (desc?.enumerable) {
        // 1. Let typedKey be key converted to an IDL value of type K.
        const typedKey = keyConverter(key)

        // 2. Let value be ? Get(O, key).
        // 3. Let typedValue be value converted to an IDL value of type V.
        const typedValue = valueConverter(O[key])

        // 4. Set result[typedKey] to typedValue.
        result[typedKey] = typedValue
      }
    }

    // 5. Return result.
    return result
  }
}

webidl.interfaceConverter = function (i) {
  return (V, opts = {}) => {
    if (opts.strict !== false && !(V instanceof i)) {
      throw webidl.errors.exception({
        header: i.name,
        message: `Expected ${V} to be an instance of ${i.name}.`
      })
    }

    return V
  }
}

webidl.dictionaryConverter = function (converters) {
  return (dictionary) => {
    const type = webidl.util.Type(dictionary)
    const dict = {}

    if (type === 'Null' || type === 'Undefined') {
      return dict
    } else if (type !== 'Object') {
      throw webidl.errors.exception({
        header: 'Dictionary',
        message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
      })
    }

    for (const options of converters) {
      const { key, defaultValue, required, converter } = options

      if (required === true) {
        if (!hasOwn(dictionary, key)) {
          throw webidl.errors.exception({
            header: 'Dictionary',
            message: `Missing required key "${key}".`
          })
        }
      }

      let value = dictionary[key]
      const hasDefault = hasOwn(options, 'defaultValue')

      // Only use defaultValue if value is undefined and
      // a defaultValue options was provided.
      if (hasDefault && value !== null) {
        value = value ?? defaultValue
      }

      // A key can be optional and have no default value.
      // When this happens, do not perform a conversion,
      // and do not assign the key a value.
      if (required || hasDefault || value !== undefined) {
        value = converter(value)

        if (
          options.allowedValues &&
          !options.allowedValues.includes(value)
        ) {
          throw webidl.errors.exception({
            header: 'Dictionary',
            message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(', ')}.`
          })
        }

        dict[key] = value
      }
    }

    return dict
  }
}

webidl.nullableConverter = function (converter) {
  return (V) => {
    if (V === null) {
      return V
    }

    return converter(V)
  }
}

// https://webidl.spec.whatwg.org/#es-DOMString
webidl.converters.DOMString = function (V, opts = {}) {
  // 1. If V is null and the conversion is to an IDL type
  //    associated with the [LegacyNullToEmptyString]
  //    extended attribute, then return the DOMString value
  //    that represents the empty string.
  if (V === null && opts.legacyNullToEmptyString) {
    return ''
  }

  // 2. Let x be ? ToString(V).
  if (typeof V === 'symbol') {
    throw new TypeError('Could not convert argument of type symbol to string.')
  }

  // 3. Return the IDL DOMString value that represents the
  //    same sequence of code units as the one the
  //    ECMAScript String value x represents.
  return String(V)
}

// https://webidl.spec.whatwg.org/#es-ByteString
webidl.converters.ByteString = function (V) {
  // 1. Let x be ? ToString(V).
  // Note: DOMString converter perform ? ToString(V)
  const x = webidl.converters.DOMString(V)

  // 2. If the value of any element of x is greater than
  //    255, then throw a TypeError.
  for (let index = 0; index < x.length; index++) {
    if (x.charCodeAt(index) > 255) {
      throw new TypeError(
        'Cannot convert argument to a ByteString because the character at ' +
        `index ${index} has a value of ${x.charCodeAt(index)} which is greater than 255.`
      )
    }
  }

  // 3. Return an IDL ByteString value whose length is the
  //    length of x, and where the value of each element is
  //    the value of the corresponding element of x.
  return x
}

// https://webidl.spec.whatwg.org/#es-USVString
webidl.converters.USVString = toUSVString

// https://webidl.spec.whatwg.org/#es-boolean
webidl.converters.boolean = function (V) {
  // 1. Let x be the result of computing ToBoolean(V).
  const x = Boolean(V)

  // 2. Return the IDL boolean value that is the one that represents
  //    the same truth value as the ECMAScript Boolean value x.
  return x
}

// https://webidl.spec.whatwg.org/#es-any
webidl.converters.any = function (V) {
  return V
}

// https://webidl.spec.whatwg.org/#es-long-long
webidl.converters['long long'] = function (V) {
  // 1. Let x be ? ConvertToInt(V, 64, "signed").
  const x = webidl.util.ConvertToInt(V, 64, 'signed')

  // 2. Return the IDL long long value that represents
  //    the same numeric value as x.
  return x
}

// https://webidl.spec.whatwg.org/#es-unsigned-long-long
webidl.converters['unsigned long long'] = function (V) {
  // 1. Let x be ? ConvertToInt(V, 64, "unsigned").
  const x = webidl.util.ConvertToInt(V, 64, 'unsigned')

  // 2. Return the IDL unsigned long long value that
  //    represents the same numeric value as x.
  return x
}

// https://webidl.spec.whatwg.org/#es-unsigned-long
webidl.converters['unsigned long'] = function (V) {
  // 1. Let x be ? ConvertToInt(V, 32, "unsigned").
  const x = webidl.util.ConvertToInt(V, 32, 'unsigned')

  // 2. Return the IDL unsigned long value that
  //    represents the same numeric value as x.
  return x
}

// https://webidl.spec.whatwg.org/#es-unsigned-short
webidl.converters['unsigned short'] = function (V, opts) {
  // 1. Let x be ? ConvertToInt(V, 16, "unsigned").
  const x = webidl.util.ConvertToInt(V, 16, 'unsigned', opts)

  // 2. Return the IDL unsigned short value that represents
  //    the same numeric value as x.
  return x
}

// https://webidl.spec.whatwg.org/#idl-ArrayBuffer
webidl.converters.ArrayBuffer = function (V, opts = {}) {
  // 1. If Type(V) is not Object, or V does not have an
  //    [[ArrayBufferData]] internal slot, then throw a
  //    TypeError.
  // see: https://tc39.es/ecma262/#sec-properties-of-the-arraybuffer-instances
  // see: https://tc39.es/ecma262/#sec-properties-of-the-sharedarraybuffer-instances
  if (
    webidl.util.Type(V) !== 'Object' ||
    !types.isAnyArrayBuffer(V)
  ) {
    throw webidl.errors.conversionFailed({
      prefix: `${V}`,
      argument: `${V}`,
      types: ['ArrayBuffer']
    })
  }

  // 2. If the conversion is not to an IDL type associated
  //    with the [AllowShared] extended attribute, and
  //    IsSharedArrayBuffer(V) is true, then throw a
  //    TypeError.
  if (opts.allowShared === false && types.isSharedArrayBuffer(V)) {
    throw webidl.errors.exception({
      header: 'ArrayBuffer',
      message: 'SharedArrayBuffer is not allowed.'
    })
  }

  // 3. If the conversion is not to an IDL type associated
  //    with the [AllowResizable] extended attribute, and
  //    IsResizableArrayBuffer(V) is true, then throw a
  //    TypeError.
  // Note: resizable ArrayBuffers are currently a proposal.

  // 4. Return the IDL ArrayBuffer value that is a
  //    reference to the same object as V.
  return V
}

webidl.converters.TypedArray = function (V, T, opts = {}) {
  // 1. Let T be the IDL type V is being converted to.

  // 2. If Type(V) is not Object, or V does not have a
  //    [[TypedArrayName]] internal slot with a value
  //    equal to T’s name, then throw a TypeError.
  if (
    webidl.util.Type(V) !== 'Object' ||
    !types.isTypedArray(V) ||
    V.constructor.name !== T.name
  ) {
    throw webidl.errors.conversionFailed({
      prefix: `${T.name}`,
      argument: `${V}`,
      types: [T.name]
    })
  }

  // 3. If the conversion is not to an IDL type associated
  //    with the [AllowShared] extended attribute, and
  //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is
  //    true, then throw a TypeError.
  if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
    throw webidl.errors.exception({
      header: 'ArrayBuffer',
      message: 'SharedArrayBuffer is not allowed.'
    })
  }

  // 4. If the conversion is not to an IDL type associated
  //    with the [AllowResizable] extended attribute, and
  //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is
  //    true, then throw a TypeError.
  // Note: resizable array buffers are currently a proposal

  // 5. Return the IDL value of type T that is a reference
  //    to the same object as V.
  return V
}

webidl.converters.DataView = function (V, opts = {}) {
  // 1. If Type(V) is not Object, or V does not have a
  //    [[DataView]] internal slot, then throw a TypeError.
  if (webidl.util.Type(V) !== 'Object' || !types.isDataView(V)) {
    throw webidl.errors.exception({
      header: 'DataView',
      message: 'Object is not a DataView.'
    })
  }

  // 2. If the conversion is not to an IDL type associated
  //    with the [AllowShared] extended attribute, and
  //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is true,
  //    then throw a TypeError.
  if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
    throw webidl.errors.exception({
      header: 'ArrayBuffer',
      message: 'SharedArrayBuffer is not allowed.'
    })
  }

  // 3. If the conversion is not to an IDL type associated
  //    with the [AllowResizable] extended attribute, and
  //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is
  //    true, then throw a TypeError.
  // Note: resizable ArrayBuffers are currently a proposal

  // 4. Return the IDL DataView value that is a reference
  //    to the same object as V.
  return V
}

// https://webidl.spec.whatwg.org/#BufferSource
webidl.converters.BufferSource = function (V, opts = {}) {
  if (types.isAnyArrayBuffer(V)) {
    return webidl.converters.ArrayBuffer(V, opts)
  }

  if (types.isTypedArray(V)) {
    return webidl.converters.TypedArray(V, V.constructor)
  }

  if (types.isDataView(V)) {
    return webidl.converters.DataView(V, opts)
  }

  throw new TypeError(`Could not convert ${V} to a BufferSource.`)
}

webidl.converters['sequence<ByteString>'] = webidl.sequenceConverter(
  webidl.converters.ByteString
)

webidl.converters['sequence<sequence<ByteString>>'] = webidl.sequenceConverter(
  webidl.converters['sequence<ByteString>']
)

webidl.converters['record<ByteString, ByteString>'] = webidl.recordConverter(
  webidl.converters.ByteString,
  webidl.converters.ByteString
)

module.exports = {
  webidl
}


/***/ }),

/***/ 4854:
/***/ ((module) => {



/**
 * @see https://encoding.spec.whatwg.org/#concept-encoding-get
 * @param {string|undefined} label
 */
function getEncoding (label) {
  if (!label) {
    return 'failure'
  }

  // 1. Remove any leading and trailing ASCII whitespace from label.
  // 2. If label is an ASCII case-insensitive match for any of the
  //    labels listed in the table below, then return the
  //    corresponding encoding; otherwise return failure.
  switch (label.trim().toLowerCase()) {
    case 'unicode-1-1-utf-8':
    case 'unicode11utf8':
    case 'unicode20utf8':
    case 'utf-8':
    case 'utf8':
    case 'x-unicode20utf8':
      return 'UTF-8'
    case '866':
    case 'cp866':
    case 'csibm866':
    case 'ibm866':
      return 'IBM866'
    case 'csisolatin2':
    case 'iso-8859-2':
    case 'iso-ir-101':
    case 'iso8859-2':
    case 'iso88592':
    case 'iso_8859-2':
    case 'iso_8859-2:1987':
    case 'l2':
    case 'latin2':
      return 'ISO-8859-2'
    case 'csisolatin3':
    case 'iso-8859-3':
    case 'iso-ir-109':
    case 'iso8859-3':
    case 'iso88593':
    case 'iso_8859-3':
    case 'iso_8859-3:1988':
    case 'l3':
    case 'latin3':
      return 'ISO-8859-3'
    case 'csisolatin4':
    case 'iso-8859-4':
    case 'iso-ir-110':
    case 'iso8859-4':
    case 'iso88594':
    case 'iso_8859-4':
    case 'iso_8859-4:1988':
    case 'l4':
    case 'latin4':
      return 'ISO-8859-4'
    case 'csisolatincyrillic':
    case 'cyrillic':
    case 'iso-8859-5':
    case 'iso-ir-144':
    case 'iso8859-5':
    case 'iso88595':
    case 'iso_8859-5':
    case 'iso_8859-5:1988':
      return 'ISO-8859-5'
    case 'arabic':
    case 'asmo-708':
    case 'csiso88596e':
    case 'csiso88596i':
    case 'csisolatinarabic':
    case 'ecma-114':
    case 'iso-8859-6':
    case 'iso-8859-6-e':
    case 'iso-8859-6-i':
    case 'iso-ir-127':
    case 'iso8859-6':
    case 'iso88596':
    case 'iso_8859-6':
    case 'iso_8859-6:1987':
      return 'ISO-8859-6'
    case 'csisolatingreek':
    case 'ecma-118':
    case 'elot_928':
    case 'greek':
    case 'greek8':
    case 'iso-8859-7':
    case 'iso-ir-126':
    case 'iso8859-7':
    case 'iso88597':
    case 'iso_8859-7':
    case 'iso_8859-7:1987':
    case 'sun_eu_greek':
      return 'ISO-8859-7'
    case 'csiso88598e':
    case 'csisolatinhebrew':
    case 'hebrew':
    case 'iso-8859-8':
    case 'iso-8859-8-e':
    case 'iso-ir-138':
    case 'iso8859-8':
    case 'iso88598':
    case 'iso_8859-8':
    case 'iso_8859-8:1988':
    case 'visual':
      return 'ISO-8859-8'
    case 'csiso88598i':
    case 'iso-8859-8-i':
    case 'logical':
      return 'ISO-8859-8-I'
    case 'csisolatin6':
    case 'iso-8859-10':
    case 'iso-ir-157':
    case 'iso8859-10':
    case 'iso885910':
    case 'l6':
    case 'latin6':
      return 'ISO-8859-10'
    case 'iso-8859-13':
    case 'iso8859-13':
    case 'iso885913':
      return 'ISO-8859-13'
    case 'iso-8859-14':
    case 'iso8859-14':
    case 'iso885914':
      return 'ISO-8859-14'
    case 'csisolatin9':
    case 'iso-8859-15':
    case 'iso8859-15':
    case 'iso885915':
    case 'iso_8859-15':
    case 'l9':
      return 'ISO-8859-15'
    case 'iso-8859-16':
      return 'ISO-8859-16'
    case 'cskoi8r':
    case 'koi':
    case 'koi8':
    case 'koi8-r':
    case 'koi8_r':
      return 'KOI8-R'
    case 'koi8-ru':
    case 'koi8-u':
      return 'KOI8-U'
    case 'csmacintosh':
    case 'mac':
    case 'macintosh':
    case 'x-mac-roman':
      return 'macintosh'
    case 'iso-8859-11':
    case 'iso8859-11':
    case 'iso885911':
    case 'tis-620':
    case 'windows-874':
      return 'windows-874'
    case 'cp1250':
    case 'windows-1250':
    case 'x-cp1250':
      return 'windows-1250'
    case 'cp1251':
    case 'windows-1251':
    case 'x-cp1251':
      return 'windows-1251'
    case 'ansi_x3.4-1968':
    case 'ascii':
    case 'cp1252':
    case 'cp819':
    case 'csisolatin1':
    case 'ibm819':
    case 'iso-8859-1':
    case 'iso-ir-100':
    case 'iso8859-1':
    case 'iso88591':
    case 'iso_8859-1':
    case 'iso_8859-1:1987':
    case 'l1':
    case 'latin1':
    case 'us-ascii':
    case 'windows-1252':
    case 'x-cp1252':
      return 'windows-1252'
    case 'cp1253':
    case 'windows-1253':
    case 'x-cp1253':
      return 'windows-1253'
    case 'cp1254':
    case 'csisolatin5':
    case 'iso-8859-9':
    case 'iso-ir-148':
    case 'iso8859-9':
    case 'iso88599':
    case 'iso_8859-9':
    case 'iso_8859-9:1989':
    case 'l5':
    case 'latin5':
    case 'windows-1254':
    case 'x-cp1254':
      return 'windows-1254'
    case 'cp1255':
    case 'windows-1255':
    case 'x-cp1255':
      return 'windows-1255'
    case 'cp1256':
    case 'windows-1256':
    case 'x-cp1256':
      return 'windows-1256'
    case 'cp1257':
    case 'windows-1257':
    case 'x-cp1257':
      return 'windows-1257'
    case 'cp1258':
    case 'windows-1258':
    case 'x-cp1258':
      return 'windows-1258'
    case 'x-mac-cyrillic':
    case 'x-mac-ukrainian':
      return 'x-mac-cyrillic'
    case 'chinese':
    case 'csgb2312':
    case 'csiso58gb231280':
    case 'gb2312':
    case 'gb_2312':
    case 'gb_2312-80':
    case 'gbk':
    case 'iso-ir-58':
    case 'x-gbk':
      return 'GBK'
    case 'gb18030':
      return 'gb18030'
    case 'big5':
    case 'big5-hkscs':
    case 'cn-big5':
    case 'csbig5':
    case 'x-x-big5':
      return 'Big5'
    case 'cseucpkdfmtjapanese':
    case 'euc-jp':
    case 'x-euc-jp':
      return 'EUC-JP'
    case 'csiso2022jp':
    case 'iso-2022-jp':
      return 'ISO-2022-JP'
    case 'csshiftjis':
    case 'ms932':
    case 'ms_kanji':
    case 'shift-jis':
    case 'shift_jis':
    case 'sjis':
    case 'windows-31j':
    case 'x-sjis':
      return 'Shift_JIS'
    case 'cseuckr':
    case 'csksc56011987':
    case 'euc-kr':
    case 'iso-ir-149':
    case 'korean':
    case 'ks_c_5601-1987':
    case 'ks_c_5601-1989':
    case 'ksc5601':
    case 'ksc_5601':
    case 'windows-949':
      return 'EUC-KR'
    case 'csiso2022kr':
    case 'hz-gb-2312':
    case 'iso-2022-cn':
    case 'iso-2022-cn-ext':
    case 'iso-2022-kr':
    case 'replacement':
      return 'replacement'
    case 'unicodefffe':
    case 'utf-16be':
      return 'UTF-16BE'
    case 'csunicode':
    case 'iso-10646-ucs-2':
    case 'ucs-2':
    case 'unicode':
    case 'unicodefeff':
    case 'utf-16':
    case 'utf-16le':
      return 'UTF-16LE'
    case 'x-user-defined':
      return 'x-user-defined'
    default: return 'failure'
  }
}

module.exports = {
  getEncoding
}


/***/ }),

/***/ 1446:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const {
  staticPropertyDescriptors,
  readOperation,
  fireAProgressEvent
} = __nccwpck_require__(7530)
const {
  kState,
  kError,
  kResult,
  kEvents,
  kAborted
} = __nccwpck_require__(9054)
const { webidl } = __nccwpck_require__(1744)
const { kEnumerableProperty } = __nccwpck_require__(3983)

class FileReader extends EventTarget {
  constructor () {
    super()

    this[kState] = 'empty'
    this[kResult] = null
    this[kError] = null
    this[kEvents] = {
      loadend: null,
      error: null,
      abort: null,
      load: null,
      progress: null,
      loadstart: null
    }
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer
   * @param {import('buffer').Blob} blob
   */
  readAsArrayBuffer (blob) {
    webidl.brandCheck(this, FileReader)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsArrayBuffer' })

    blob = webidl.converters.Blob(blob, { strict: false })

    // The readAsArrayBuffer(blob) method, when invoked,
    // must initiate a read operation for blob with ArrayBuffer.
    readOperation(this, blob, 'ArrayBuffer')
  }

  /**
   * @see https://w3c.github.io/FileAPI/#readAsBinaryString
   * @param {import('buffer').Blob} blob
   */
  readAsBinaryString (blob) {
    webidl.brandCheck(this, FileReader)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsBinaryString' })

    blob = webidl.converters.Blob(blob, { strict: false })

    // The readAsBinaryString(blob) method, when invoked,
    // must initiate a read operation for blob with BinaryString.
    readOperation(this, blob, 'BinaryString')
  }

  /**
   * @see https://w3c.github.io/FileAPI/#readAsDataText
   * @param {import('buffer').Blob} blob
   * @param {string?} encoding
   */
  readAsText (blob, encoding = undefined) {
    webidl.brandCheck(this, FileReader)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsText' })

    blob = webidl.converters.Blob(blob, { strict: false })

    if (encoding !== undefined) {
      encoding = webidl.converters.DOMString(encoding)
    }

    // The readAsText(blob, encoding) method, when invoked,
    // must initiate a read operation for blob with Text and encoding.
    readOperation(this, blob, 'Text', encoding)
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL
   * @param {import('buffer').Blob} blob
   */
  readAsDataURL (blob) {
    webidl.brandCheck(this, FileReader)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsDataURL' })

    blob = webidl.converters.Blob(blob, { strict: false })

    // The readAsDataURL(blob) method, when invoked, must
    // initiate a read operation for blob with DataURL.
    readOperation(this, blob, 'DataURL')
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dfn-abort
   */
  abort () {
    // 1. If this's state is "empty" or if this's state is
    //    "done" set this's result to null and terminate
    //    this algorithm.
    if (this[kState] === 'empty' || this[kState] === 'done') {
      this[kResult] = null
      return
    }

    // 2. If this's state is "loading" set this's state to
    //    "done" and set this's result to null.
    if (this[kState] === 'loading') {
      this[kState] = 'done'
      this[kResult] = null
    }

    // 3. If there are any tasks from this on the file reading
    //    task source in an affiliated task queue, then remove
    //    those tasks from that task queue.
    this[kAborted] = true

    // 4. Terminate the algorithm for the read method being processed.
    // TODO

    // 5. Fire a progress event called abort at this.
    fireAProgressEvent('abort', this)

    // 6. If this's state is not "loading", fire a progress
    //    event called loadend at this.
    if (this[kState] !== 'loading') {
      fireAProgressEvent('loadend', this)
    }
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dom-filereader-readystate
   */
  get readyState () {
    webidl.brandCheck(this, FileReader)

    switch (this[kState]) {
      case 'empty': return this.EMPTY
      case 'loading': return this.LOADING
      case 'done': return this.DONE
    }
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dom-filereader-result
   */
  get result () {
    webidl.brandCheck(this, FileReader)

    // The result attribute’s getter, when invoked, must return
    // this's result.
    return this[kResult]
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dom-filereader-error
   */
  get error () {
    webidl.brandCheck(this, FileReader)

    // The error attribute’s getter, when invoked, must return
    // this's error.
    return this[kError]
  }

  get onloadend () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].loadend
  }

  set onloadend (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].loadend) {
      this.removeEventListener('loadend', this[kEvents].loadend)
    }

    if (typeof fn === 'function') {
      this[kEvents].loadend = fn
      this.addEventListener('loadend', fn)
    } else {
      this[kEvents].loadend = null
    }
  }

  get onerror () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].error
  }

  set onerror (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].error) {
      this.removeEventListener('error', this[kEvents].error)
    }

    if (typeof fn === 'function') {
      this[kEvents].error = fn
      this.addEventListener('error', fn)
    } else {
      this[kEvents].error = null
    }
  }

  get onloadstart () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].loadstart
  }

  set onloadstart (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].loadstart) {
      this.removeEventListener('loadstart', this[kEvents].loadstart)
    }

    if (typeof fn === 'function') {
      this[kEvents].loadstart = fn
      this.addEventListener('loadstart', fn)
    } else {
      this[kEvents].loadstart = null
    }
  }

  get onprogress () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].progress
  }

  set onprogress (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].progress) {
      this.removeEventListener('progress', this[kEvents].progress)
    }

    if (typeof fn === 'function') {
      this[kEvents].progress = fn
      this.addEventListener('progress', fn)
    } else {
      this[kEvents].progress = null
    }
  }

  get onload () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].load
  }

  set onload (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].load) {
      this.removeEventListener('load', this[kEvents].load)
    }

    if (typeof fn === 'function') {
      this[kEvents].load = fn
      this.addEventListener('load', fn)
    } else {
      this[kEvents].load = null
    }
  }

  get onabort () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].abort
  }

  set onabort (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].abort) {
      this.removeEventListener('abort', this[kEvents].abort)
    }

    if (typeof fn === 'function') {
      this[kEvents].abort = fn
      this.addEventListener('abort', fn)
    } else {
      this[kEvents].abort = null
    }
  }
}

// https://w3c.github.io/FileAPI/#dom-filereader-empty
FileReader.EMPTY = FileReader.prototype.EMPTY = 0
// https://w3c.github.io/FileAPI/#dom-filereader-loading
FileReader.LOADING = FileReader.prototype.LOADING = 1
// https://w3c.github.io/FileAPI/#dom-filereader-done
FileReader.DONE = FileReader.prototype.DONE = 2

Object.defineProperties(FileReader.prototype, {
  EMPTY: staticPropertyDescriptors,
  LOADING: staticPropertyDescriptors,
  DONE: staticPropertyDescriptors,
  readAsArrayBuffer: kEnumerableProperty,
  readAsBinaryString: kEnumerableProperty,
  readAsText: kEnumerableProperty,
  readAsDataURL: kEnumerableProperty,
  abort: kEnumerableProperty,
  readyState: kEnumerableProperty,
  result: kEnumerableProperty,
  error: kEnumerableProperty,
  onloadstart: kEnumerableProperty,
  onprogress: kEnumerableProperty,
  onload: kEnumerableProperty,
  onabort: kEnumerableProperty,
  onerror: kEnumerableProperty,
  onloadend: kEnumerableProperty,
  [Symbol.toStringTag]: {
    value: 'FileReader',
    writable: false,
    enumerable: false,
    configurable: true
  }
})

Object.defineProperties(FileReader, {
  EMPTY: staticPropertyDescriptors,
  LOADING: staticPropertyDescriptors,
  DONE: staticPropertyDescriptors
})

module.exports = {
  FileReader
}


/***/ }),

/***/ 5504:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { webidl } = __nccwpck_require__(1744)

const kState = Symbol('ProgressEvent state')

/**
 * @see https://xhr.spec.whatwg.org/#progressevent
 */
class ProgressEvent extends Event {
  constructor (type, eventInitDict = {}) {
    type = webidl.converters.DOMString(type)
    eventInitDict = webidl.converters.ProgressEventInit(eventInitDict ?? {})

    super(type, eventInitDict)

    this[kState] = {
      lengthComputable: eventInitDict.lengthComputable,
      loaded: eventInitDict.loaded,
      total: eventInitDict.total
    }
  }

  get lengthComputable () {
    webidl.brandCheck(this, ProgressEvent)

    return this[kState].lengthComputable
  }

  get loaded () {
    webidl.brandCheck(this, ProgressEvent)

    return this[kState].loaded
  }

  get total () {
    webidl.brandCheck(this, ProgressEvent)

    return this[kState].total
  }
}

webidl.converters.ProgressEventInit = webidl.dictionaryConverter([
  {
    key: 'lengthComputable',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'loaded',
    converter: webidl.converters['unsigned long long'],
    defaultValue: 0
  },
  {
    key: 'total',
    converter: webidl.converters['unsigned long long'],
    defaultValue: 0
  },
  {
    key: 'bubbles',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'cancelable',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'composed',
    converter: webidl.converters.boolean,
    defaultValue: false
  }
])

module.exports = {
  ProgressEvent
}


/***/ }),

/***/ 9054:
/***/ ((module) => {



module.exports = {
  kState: Symbol('FileReader state'),
  kResult: Symbol('FileReader result'),
  kError: Symbol('FileReader error'),
  kLastProgressEventFired: Symbol('FileReader last progress event fired timestamp'),
  kEvents: Symbol('FileReader events'),
  kAborted: Symbol('FileReader aborted')
}


/***/ }),

/***/ 7530:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const {
  kState,
  kError,
  kResult,
  kAborted,
  kLastProgressEventFired
} = __nccwpck_require__(9054)
const { ProgressEvent } = __nccwpck_require__(5504)
const { getEncoding } = __nccwpck_require__(4854)
const { DOMException } = __nccwpck_require__(1037)
const { serializeAMimeType, parseMIMEType } = __nccwpck_require__(685)
const { types } = __nccwpck_require__(3837)
const { StringDecoder } = __nccwpck_require__(1576)
const { btoa } = __nccwpck_require__(4300)

/** @type {PropertyDescriptor} */
const staticPropertyDescriptors = {
  enumerable: true,
  writable: false,
  configurable: false
}

/**
 * @see https://w3c.github.io/FileAPI/#readOperation
 * @param {import('./filereader').FileReader} fr
 * @param {import('buffer').Blob} blob
 * @param {string} type
 * @param {string?} encodingName
 */
function readOperation (fr, blob, type, encodingName) {
  // 1. If fr’s state is "loading", throw an InvalidStateError
  //    DOMException.
  if (fr[kState] === 'loading') {
    throw new DOMException('Invalid state', 'InvalidStateError')
  }

  // 2. Set fr’s state to "loading".
  fr[kState] = 'loading'

  // 3. Set fr’s result to null.
  fr[kResult] = null

  // 4. Set fr’s error to null.
  fr[kError] = null

  // 5. Let stream be the result of calling get stream on blob.
  /** @type {import('stream/web').ReadableStream} */
  const stream = blob.stream()

  // 6. Let reader be the result of getting a reader from stream.
  const reader = stream.getReader()

  // 7. Let bytes be an empty byte sequence.
  /** @type {Uint8Array[]} */
  const bytes = []

  // 8. Let chunkPromise be the result of reading a chunk from
  //    stream with reader.
  let chunkPromise = reader.read()

  // 9. Let isFirstChunk be true.
  let isFirstChunk = true

  // 10. In parallel, while true:
  // Note: "In parallel" just means non-blocking
  // Note 2: readOperation itself cannot be async as double
  // reading the body would then reject the promise, instead
  // of throwing an error.
  ;(async () => {
    while (!fr[kAborted]) {
      // 1. Wait for chunkPromise to be fulfilled or rejected.
      try {
        const { done, value } = await chunkPromise

        // 2. If chunkPromise is fulfilled, and isFirstChunk is
        //    true, queue a task to fire a progress event called
        //    loadstart at fr.
        if (isFirstChunk && !fr[kAborted]) {
          queueMicrotask(() => {
            fireAProgressEvent('loadstart', fr)
          })
        }

        // 3. Set isFirstChunk to false.
        isFirstChunk = false

        // 4. If chunkPromise is fulfilled with an object whose
        //    done property is false and whose value property is
        //    a Uint8Array object, run these steps:
        if (!done && types.isUint8Array(value)) {
          // 1. Let bs be the byte sequence represented by the
          //    Uint8Array object.

          // 2. Append bs to bytes.
          bytes.push(value)

          // 3. If roughly 50ms have passed since these steps
          //    were last invoked, queue a task to fire a
          //    progress event called progress at fr.
          if (
            (
              fr[kLastProgressEventFired] === undefined ||
              Date.now() - fr[kLastProgressEventFired] >= 50
            ) &&
            !fr[kAborted]
          ) {
            fr[kLastProgressEventFired] = Date.now()
            queueMicrotask(() => {
              fireAProgressEvent('progress', fr)
            })
          }

          // 4. Set chunkPromise to the result of reading a
          //    chunk from stream with reader.
          chunkPromise = reader.read()
        } else if (done) {
          // 5. Otherwise, if chunkPromise is fulfilled with an
          //    object whose done property is true, queue a task
          //    to run the following steps and abort this algorithm:
          queueMicrotask(() => {
            // 1. Set fr’s state to "done".
            fr[kState] = 'done'

            // 2. Let result be the result of package data given
            //    bytes, type, blob’s type, and encodingName.
            try {
              const result = packageData(bytes, type, blob.type, encodingName)

              // 4. Else:

              if (fr[kAborted]) {
                return
              }

              // 1. Set fr’s result to result.
              fr[kResult] = result

              // 2. Fire a progress event called load at the fr.
              fireAProgressEvent('load', fr)
            } catch (error) {
              // 3. If package data threw an exception error:

              // 1. Set fr’s error to error.
              fr[kError] = error

              // 2. Fire a progress event called error at fr.
              fireAProgressEvent('error', fr)
            }

            // 5. If fr’s state is not "loading", fire a progress
            //    event called loadend at the fr.
            if (fr[kState] !== 'loading') {
              fireAProgressEvent('loadend', fr)
            }
          })

          break
        }
      } catch (error) {
        if (fr[kAborted]) {
          return
        }

        // 6. Otherwise, if chunkPromise is rejected with an
        //    error error, queue a task to run the following
        //    steps and abort this algorithm:
        queueMicrotask(() => {
          // 1. Set fr’s state to "done".
          fr[kState] = 'done'

          // 2. Set fr’s error to error.
          fr[kError] = error

          // 3. Fire a progress event called error at fr.
          fireAProgressEvent('error', fr)

          // 4. If fr’s state is not "loading", fire a progress
          //    event called loadend at fr.
          if (fr[kState] !== 'loading') {
            fireAProgressEvent('loadend', fr)
          }
        })

        break
      }
    }
  })()
}

/**
 * @see https://w3c.github.io/FileAPI/#fire-a-progress-event
 * @see https://dom.spec.whatwg.org/#concept-event-fire
 * @param {string} e The name of the event
 * @param {import('./filereader').FileReader} reader
 */
function fireAProgressEvent (e, reader) {
  // The progress event e does not bubble. e.bubbles must be false
  // The progress event e is NOT cancelable. e.cancelable must be false
  const event = new ProgressEvent(e, {
    bubbles: false,
    cancelable: false
  })

  reader.dispatchEvent(event)
}

/**
 * @see https://w3c.github.io/FileAPI/#blob-package-data
 * @param {Uint8Array[]} bytes
 * @param {string} type
 * @param {string?} mimeType
 * @param {string?} encodingName
 */
function packageData (bytes, type, mimeType, encodingName) {
  // 1. A Blob has an associated package data algorithm, given
  //    bytes, a type, a optional mimeType, and a optional
  //    encodingName, which switches on type and runs the
  //    associated steps:

  switch (type) {
    case 'DataURL': {
      // 1. Return bytes as a DataURL [RFC2397] subject to
      //    the considerations below:
      //  * Use mimeType as part of the Data URL if it is
      //    available in keeping with the Data URL
      //    specification [RFC2397].
      //  * If mimeType is not available return a Data URL
      //    without a media-type. [RFC2397].

      // https://datatracker.ietf.org/doc/html/rfc2397#section-3
      // dataurl    := "data:" [ mediatype ] [ ";base64" ] "," data
      // mediatype  := [ type "/" subtype ] *( ";" parameter )
      // data       := *urlchar
      // parameter  := attribute "=" value
      let dataURL = 'data:'

      const parsed = parseMIMEType(mimeType || 'application/octet-stream')

      if (parsed !== 'failure') {
        dataURL += serializeAMimeType(parsed)
      }

      dataURL += ';base64,'

      const decoder = new StringDecoder('latin1')

      for (const chunk of bytes) {
        dataURL += btoa(decoder.write(chunk))
      }

      dataURL += btoa(decoder.end())

      return dataURL
    }
    case 'Text': {
      // 1. Let encoding be failure
      let encoding = 'failure'

      // 2. If the encodingName is present, set encoding to the
      //    result of getting an encoding from encodingName.
      if (encodingName) {
        encoding = getEncoding(encodingName)
      }

      // 3. If encoding is failure, and mimeType is present:
      if (encoding === 'failure' && mimeType) {
        // 1. Let type be the result of parse a MIME type
        //    given mimeType.
        const type = parseMIMEType(mimeType)

        // 2. If type is not failure, set encoding to the result
        //    of getting an encoding from type’s parameters["charset"].
        if (type !== 'failure') {
          encoding = getEncoding(type.parameters.get('charset'))
        }
      }

      // 4. If encoding is failure, then set encoding to UTF-8.
      if (encoding === 'failure') {
        encoding = 'UTF-8'
      }

      // 5. Decode bytes using fallback encoding encoding, and
      //    return the result.
      return decode(bytes, encoding)
    }
    case 'ArrayBuffer': {
      // Return a new ArrayBuffer whose contents are bytes.
      const sequence = combineByteSequences(bytes)

      return sequence.buffer
    }
    case 'BinaryString': {
      // Return bytes as a binary string, in which every byte
      //  is represented by a code unit of equal value [0..255].
      let binaryString = ''

      const decoder = new StringDecoder('latin1')

      for (const chunk of bytes) {
        binaryString += decoder.write(chunk)
      }

      binaryString += decoder.end()

      return binaryString
    }
  }
}

/**
 * @see https://encoding.spec.whatwg.org/#decode
 * @param {Uint8Array[]} ioQueue
 * @param {string} encoding
 */
function decode (ioQueue, encoding) {
  const bytes = combineByteSequences(ioQueue)

  // 1. Let BOMEncoding be the result of BOM sniffing ioQueue.
  const BOMEncoding = BOMSniffing(bytes)

  let slice = 0

  // 2. If BOMEncoding is non-null:
  if (BOMEncoding !== null) {
    // 1. Set encoding to BOMEncoding.
    encoding = BOMEncoding

    // 2. Read three bytes from ioQueue, if BOMEncoding is
    //    UTF-8; otherwise read two bytes.
    //    (Do nothing with those bytes.)
    slice = BOMEncoding === 'UTF-8' ? 3 : 2
  }

  // 3. Process a queue with an instance of encoding’s
  //    decoder, ioQueue, output, and "replacement".

  // 4. Return output.

  const sliced = bytes.slice(slice)
  return new TextDecoder(encoding).decode(sliced)
}

/**
 * @see https://encoding.spec.whatwg.org/#bom-sniff
 * @param {Uint8Array} ioQueue
 */
function BOMSniffing (ioQueue) {
  // 1. Let BOM be the result of peeking 3 bytes from ioQueue,
  //    converted to a byte sequence.
  const [a, b, c] = ioQueue

  // 2. For each of the rows in the table below, starting with
  //    the first one and going down, if BOM starts with the
  //    bytes given in the first column, then return the
  //    encoding given in the cell in the second column of that
  //    row. Otherwise, return null.
  if (a === 0xEF && b === 0xBB && c === 0xBF) {
    return 'UTF-8'
  } else if (a === 0xFE && b === 0xFF) {
    return 'UTF-16BE'
  } else if (a === 0xFF && b === 0xFE) {
    return 'UTF-16LE'
  }

  return null
}

/**
 * @param {Uint8Array[]} sequences
 */
function combineByteSequences (sequences) {
  const size = sequences.reduce((a, b) => {
    return a + b.byteLength
  }, 0)

  let offset = 0

  return sequences.reduce((a, b) => {
    a.set(b, offset)
    offset += b.byteLength
    return a
  }, new Uint8Array(size))
}

module.exports = {
  staticPropertyDescriptors,
  readOperation,
  fireAProgressEvent
}


/***/ }),

/***/ 1892:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



// We include a version number for the Dispatcher API. In case of breaking changes,
// this version number must be increased to avoid conflicts.
const globalDispatcher = Symbol.for('undici.globalDispatcher.1')
const { InvalidArgumentError } = __nccwpck_require__(8045)
const Agent = __nccwpck_require__(7890)

if (getGlobalDispatcher() === undefined) {
  setGlobalDispatcher(new Agent())
}

function setGlobalDispatcher (agent) {
  if (!agent || typeof agent.dispatch !== 'function') {
    throw new InvalidArgumentError('Argument agent must implement Agent')
  }
  Object.defineProperty(globalThis, globalDispatcher, {
    value: agent,
    writable: true,
    enumerable: false,
    configurable: false
  })
}

function getGlobalDispatcher () {
  return globalThis[globalDispatcher]
}

module.exports = {
  setGlobalDispatcher,
  getGlobalDispatcher
}


/***/ }),

/***/ 6930:
/***/ ((module) => {



module.exports = class DecoratorHandler {
  constructor (handler) {
    this.handler = handler
  }

  onConnect (...args) {
    return this.handler.onConnect(...args)
  }

  onError (...args) {
    return this.handler.onError(...args)
  }

  onUpgrade (...args) {
    return this.handler.onUpgrade(...args)
  }

  onHeaders (...args) {
    return this.handler.onHeaders(...args)
  }

  onData (...args) {
    return this.handler.onData(...args)
  }

  onComplete (...args) {
    return this.handler.onComplete(...args)
  }

  onBodySent (...args) {
    return this.handler.onBodySent(...args)
  }
}


/***/ }),

/***/ 2860:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const util = __nccwpck_require__(3983)
const { kBodyUsed } = __nccwpck_require__(2785)
const assert = __nccwpck_require__(9491)
const { InvalidArgumentError } = __nccwpck_require__(8045)
const EE = __nccwpck_require__(2361)

const redirectableStatusCodes = [300, 301, 302, 303, 307, 308]

const kBody = Symbol('body')

class BodyAsyncIterable {
  constructor (body) {
    this[kBody] = body
    this[kBodyUsed] = false
  }

  async * [Symbol.asyncIterator] () {
    assert(!this[kBodyUsed], 'disturbed')
    this[kBodyUsed] = true
    yield * this[kBody]
  }
}

class RedirectHandler {
  constructor (dispatch, maxRedirections, opts, handler) {
    if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
      throw new InvalidArgumentError('maxRedirections must be a positive number')
    }

    util.validateHandler(handler, opts.method, opts.upgrade)

    this.dispatch = dispatch
    this.location = null
    this.abort = null
    this.opts = { ...opts, maxRedirections: 0 } // opts must be a copy
    this.maxRedirections = maxRedirections
    this.handler = handler
    this.history = []

    if (util.isStream(this.opts.body)) {
      // TODO (fix): Provide some way for the user to cache the file to e.g. /tmp
      // so that it can be dispatched again?
      // TODO (fix): Do we need 100-expect support to provide a way to do this properly?
      if (util.bodyLength(this.opts.body) === 0) {
        this.opts.body
          .on('data', function () {
            assert(false)
          })
      }

      if (typeof this.opts.body.readableDidRead !== 'boolean') {
        this.opts.body[kBodyUsed] = false
        EE.prototype.on.call(this.opts.body, 'data', function () {
          this[kBodyUsed] = true
        })
      }
    } else if (this.opts.body && typeof this.opts.body.pipeTo === 'function') {
      // TODO (fix): We can't access ReadableStream internal state
      // to determine whether or not it has been disturbed. This is just
      // a workaround.
      this.opts.body = new BodyAsyncIterable(this.opts.body)
    } else if (
      this.opts.body &&
      typeof this.opts.body !== 'string' &&
      !ArrayBuffer.isView(this.opts.body) &&
      util.isIterable(this.opts.body)
    ) {
      // TODO: Should we allow re-using iterable if !this.opts.idempotent
      // or through some other flag?
      this.opts.body = new BodyAsyncIterable(this.opts.body)
    }
  }

  onConnect (abort) {
    this.abort = abort
    this.handler.onConnect(abort, { history: this.history })
  }

  onUpgrade (statusCode, headers, socket) {
    this.handler.onUpgrade(statusCode, headers, socket)
  }

  onError (error) {
    this.handler.onError(error)
  }

  onHeaders (statusCode, headers, resume, statusText) {
    this.location = this.history.length >= this.maxRedirections || util.isDisturbed(this.opts.body)
      ? null
      : parseLocation(statusCode, headers)

    if (this.opts.origin) {
      this.history.push(new URL(this.opts.path, this.opts.origin))
    }

    if (!this.location) {
      return this.handler.onHeaders(statusCode, headers, resume, statusText)
    }

    const { origin, pathname, search } = util.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)))
    const path = search ? `${pathname}${search}` : pathname

    // Remove headers referring to the original URL.
    // By default it is Host only, unless it's a 303 (see below), which removes also all Content-* headers.
    // https://tools.ietf.org/html/rfc7231#section-6.4
    this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin)
    this.opts.path = path
    this.opts.origin = origin
    this.opts.maxRedirections = 0
    this.opts.query = null

    // https://tools.ietf.org/html/rfc7231#section-6.4.4
    // In case of HTTP 303, always replace method to be either HEAD or GET
    if (statusCode === 303 && this.opts.method !== 'HEAD') {
      this.opts.method = 'GET'
      this.opts.body = null
    }
  }

  onData (chunk) {
    if (this.location) {
      /*
        https://tools.ietf.org/html/rfc7231#section-6.4

        TLDR: undici always ignores 3xx response bodies.

        Redirection is used to serve the requested resource from another URL, so it is assumes that
        no body is generated (and thus can be ignored). Even though generating a body is not prohibited.

        For status 301, 302, 303, 307 and 308 (the latter from RFC 7238), the specs mention that the body usually
        (which means it's optional and not mandated) contain just an hyperlink to the value of
        the Location response header, so the body can be ignored safely.

        For status 300, which is "Multiple Choices", the spec mentions both generating a Location
        response header AND a response body with the other possible location to follow.
        Since the spec explicitily chooses not to specify a format for such body and leave it to
        servers and browsers implementors, we ignore the body as there is no specified way to eventually parse it.
      */
    } else {
      return this.handler.onData(chunk)
    }
  }

  onComplete (trailers) {
    if (this.location) {
      /*
        https://tools.ietf.org/html/rfc7231#section-6.4

        TLDR: undici always ignores 3xx response trailers as they are not expected in case of redirections
        and neither are useful if present.

        See comment on onData method above for more detailed informations.
      */

      this.location = null
      this.abort = null

      this.dispatch(this.opts, this)
    } else {
      this.handler.onComplete(trailers)
    }
  }

  onBodySent (chunk) {
    if (this.handler.onBodySent) {
      this.handler.onBodySent(chunk)
    }
  }
}

function parseLocation (statusCode, headers) {
  if (redirectableStatusCodes.indexOf(statusCode) === -1) {
    return null
  }

  for (let i = 0; i < headers.length; i += 2) {
    if (headers[i].toString().toLowerCase() === 'location') {
      return headers[i + 1]
    }
  }
}

// https://tools.ietf.org/html/rfc7231#section-6.4.4
function shouldRemoveHeader (header, removeContent, unknownOrigin) {
  if (header.length === 4) {
    return util.headerNameToString(header) === 'host'
  }
  if (removeContent && util.headerNameToString(header).startsWith('content-')) {
    return true
  }
  if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {
    const name = util.headerNameToString(header)
    return name === 'authorization' || name === 'cookie' || name === 'proxy-authorization'
  }
  return false
}

// https://tools.ietf.org/html/rfc7231#section-6.4
function cleanRequestHeaders (headers, removeContent, unknownOrigin) {
  const ret = []
  if (Array.isArray(headers)) {
    for (let i = 0; i < headers.length; i += 2) {
      if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {
        ret.push(headers[i], headers[i + 1])
      }
    }
  } else if (headers && typeof headers === 'object') {
    for (const key of Object.keys(headers)) {
      if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {
        ret.push(key, headers[key])
      }
    }
  } else {
    assert(headers == null, 'headers must be an object or an array')
  }
  return ret
}

module.exports = RedirectHandler


/***/ }),

/***/ 2286:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const assert = __nccwpck_require__(9491)

const { kRetryHandlerDefaultRetry } = __nccwpck_require__(2785)
const { RequestRetryError } = __nccwpck_require__(8045)
const { isDisturbed, parseHeaders, parseRangeHeader } = __nccwpck_require__(3983)

function calculateRetryAfterHeader (retryAfter) {
  const current = Date.now()
  const diff = new Date(retryAfter).getTime() - current

  return diff
}

class RetryHandler {
  constructor (opts, handlers) {
    const { retryOptions, ...dispatchOpts } = opts
    const {
      // Retry scoped
      retry: retryFn,
      maxRetries,
      maxTimeout,
      minTimeout,
      timeoutFactor,
      // Response scoped
      methods,
      errorCodes,
      retryAfter,
      statusCodes
    } = retryOptions ?? {}

    this.dispatch = handlers.dispatch
    this.handler = handlers.handler
    this.opts = dispatchOpts
    this.abort = null
    this.aborted = false
    this.retryOpts = {
      retry: retryFn ?? RetryHandler[kRetryHandlerDefaultRetry],
      retryAfter: retryAfter ?? true,
      maxTimeout: maxTimeout ?? 30 * 1000, // 30s,
      timeout: minTimeout ?? 500, // .5s
      timeoutFactor: timeoutFactor ?? 2,
      maxRetries: maxRetries ?? 5,
      // What errors we should retry
      methods: methods ?? ['GET', 'HEAD', 'OPTIONS', 'PUT', 'DELETE', 'TRACE'],
      // Indicates which errors to retry
      statusCodes: statusCodes ?? [500, 502, 503, 504, 429],
      // List of errors to retry
      errorCodes: errorCodes ?? [
        'ECONNRESET',
        'ECONNREFUSED',
        'ENOTFOUND',
        'ENETDOWN',
        'ENETUNREACH',
        'EHOSTDOWN',
        'EHOSTUNREACH',
        'EPIPE'
      ]
    }

    this.retryCount = 0
    this.start = 0
    this.end = null
    this.etag = null
    this.resume = null

    // Handle possible onConnect duplication
    this.handler.onConnect(reason => {
      this.aborted = true
      if (this.abort) {
        this.abort(reason)
      } else {
        this.reason = reason
      }
    })
  }

  onRequestSent () {
    if (this.handler.onRequestSent) {
      this.handler.onRequestSent()
    }
  }

  onUpgrade (statusCode, headers, socket) {
    if (this.handler.onUpgrade) {
      this.handler.onUpgrade(statusCode, headers, socket)
    }
  }

  onConnect (abort) {
    if (this.aborted) {
      abort(this.reason)
    } else {
      this.abort = abort
    }
  }

  onBodySent (chunk) {
    if (this.handler.onBodySent) return this.handler.onBodySent(chunk)
  }

  static [kRetryHandlerDefaultRetry] (err, { state, opts }, cb) {
    const { statusCode, code, headers } = err
    const { method, retryOptions } = opts
    const {
      maxRetries,
      timeout,
      maxTimeout,
      timeoutFactor,
      statusCodes,
      errorCodes,
      methods
    } = retryOptions
    let { counter, currentTimeout } = state

    currentTimeout =
      currentTimeout != null && currentTimeout > 0 ? currentTimeout : timeout

    // Any code that is not a Undici's originated and allowed to retry
    if (
      code &&
      code !== 'UND_ERR_REQ_RETRY' &&
      code !== 'UND_ERR_SOCKET' &&
      !errorCodes.includes(code)
    ) {
      cb(err)
      return
    }

    // If a set of method are provided and the current method is not in the list
    if (Array.isArray(methods) && !methods.includes(method)) {
      cb(err)
      return
    }

    // If a set of status code are provided and the current status code is not in the list
    if (
      statusCode != null &&
      Array.isArray(statusCodes) &&
      !statusCodes.includes(statusCode)
    ) {
      cb(err)
      return
    }

    // If we reached the max number of retries
    if (counter > maxRetries) {
      cb(err)
      return
    }

    let retryAfterHeader = headers != null && headers['retry-after']
    if (retryAfterHeader) {
      retryAfterHeader = Number(retryAfterHeader)
      retryAfterHeader = isNaN(retryAfterHeader)
        ? calculateRetryAfterHeader(retryAfterHeader)
        : retryAfterHeader * 1e3 // Retry-After is in seconds
    }

    const retryTimeout =
      retryAfterHeader > 0
        ? Math.min(retryAfterHeader, maxTimeout)
        : Math.min(currentTimeout * timeoutFactor ** counter, maxTimeout)

    state.currentTimeout = retryTimeout

    setTimeout(() => cb(null), retryTimeout)
  }

  onHeaders (statusCode, rawHeaders, resume, statusMessage) {
    const headers = parseHeaders(rawHeaders)

    this.retryCount += 1

    if (statusCode >= 300) {
      this.abort(
        new RequestRetryError('Request failed', statusCode, {
          headers,
          count: this.retryCount
        })
      )
      return false
    }

    // Checkpoint for resume from where we left it
    if (this.resume != null) {
      this.resume = null

      if (statusCode !== 206) {
        return true
      }

      const contentRange = parseRangeHeader(headers['content-range'])
      // If no content range
      if (!contentRange) {
        this.abort(
          new RequestRetryError('Content-Range mismatch', statusCode, {
            headers,
            count: this.retryCount
          })
        )
        return false
      }

      // Let's start with a weak etag check
      if (this.etag != null && this.etag !== headers.etag) {
        this.abort(
          new RequestRetryError('ETag mismatch', statusCode, {
            headers,
            count: this.retryCount
          })
        )
        return false
      }

      const { start, size, end = size } = contentRange

      assert(this.start === start, 'content-range mismatch')
      assert(this.end == null || this.end === end, 'content-range mismatch')

      this.resume = resume
      return true
    }

    if (this.end == null) {
      if (statusCode === 206) {
        // First time we receive 206
        const range = parseRangeHeader(headers['content-range'])

        if (range == null) {
          return this.handler.onHeaders(
            statusCode,
            rawHeaders,
            resume,
            statusMessage
          )
        }

        const { start, size, end = size } = range

        assert(
          start != null && Number.isFinite(start) && this.start !== start,
          'content-range mismatch'
        )
        assert(Number.isFinite(start))
        assert(
          end != null && Number.isFinite(end) && this.end !== end,
          'invalid content-length'
        )

        this.start = start
        this.end = end
      }

      // We make our best to checkpoint the body for further range headers
      if (this.end == null) {
        const contentLength = headers['content-length']
        this.end = contentLength != null ? Number(contentLength) : null
      }

      assert(Number.isFinite(this.start))
      assert(
        this.end == null || Number.isFinite(this.end),
        'invalid content-length'
      )

      this.resume = resume
      this.etag = headers.etag != null ? headers.etag : null

      return this.handler.onHeaders(
        statusCode,
        rawHeaders,
        resume,
        statusMessage
      )
    }

    const err = new RequestRetryError('Request failed', statusCode, {
      headers,
      count: this.retryCount
    })

    this.abort(err)

    return false
  }

  onData (chunk) {
    this.start += chunk.length

    return this.handler.onData(chunk)
  }

  onComplete (rawTrailers) {
    this.retryCount = 0
    return this.handler.onComplete(rawTrailers)
  }

  onError (err) {
    if (this.aborted || isDisturbed(this.opts.body)) {
      return this.handler.onError(err)
    }

    this.retryOpts.retry(
      err,
      {
        state: { counter: this.retryCount++, currentTimeout: this.retryAfter },
        opts: { retryOptions: this.retryOpts, ...this.opts }
      },
      onRetry.bind(this)
    )

    function onRetry (err) {
      if (err != null || this.aborted || isDisturbed(this.opts.body)) {
        return this.handler.onError(err)
      }

      if (this.start !== 0) {
        this.opts = {
          ...this.opts,
          headers: {
            ...this.opts.headers,
            range: `bytes=${this.start}-${this.end ?? ''}`
          }
        }
      }

      try {
        this.dispatch(this.opts, this)
      } catch (err) {
        this.handler.onError(err)
      }
    }
  }
}

module.exports = RetryHandler


/***/ }),

/***/ 8861:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const RedirectHandler = __nccwpck_require__(2860)

function createRedirectInterceptor ({ maxRedirections: defaultMaxRedirections }) {
  return (dispatch) => {
    return function Intercept (opts, handler) {
      const { maxRedirections = defaultMaxRedirections } = opts

      if (!maxRedirections) {
        return dispatch(opts, handler)
      }

      const redirectHandler = new RedirectHandler(dispatch, maxRedirections, opts, handler)
      opts = { ...opts, maxRedirections: 0 } // Stop sub dispatcher from also redirecting.
      return dispatch(opts, redirectHandler)
    }
  }
}

module.exports = createRedirectInterceptor


/***/ }),

/***/ 953:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SPECIAL_HEADERS = exports.HEADER_STATE = exports.MINOR = exports.MAJOR = exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS = exports.TOKEN = exports.STRICT_TOKEN = exports.HEX = exports.URL_CHAR = exports.STRICT_URL_CHAR = exports.USERINFO_CHARS = exports.MARK = exports.ALPHANUM = exports.NUM = exports.HEX_MAP = exports.NUM_MAP = exports.ALPHA = exports.FINISH = exports.H_METHOD_MAP = exports.METHOD_MAP = exports.METHODS_RTSP = exports.METHODS_ICE = exports.METHODS_HTTP = exports.METHODS = exports.LENIENT_FLAGS = exports.FLAGS = exports.TYPE = exports.ERROR = void 0;
const utils_1 = __nccwpck_require__(1891);
// C headers
var ERROR;
(function (ERROR) {
    ERROR[ERROR["OK"] = 0] = "OK";
    ERROR[ERROR["INTERNAL"] = 1] = "INTERNAL";
    ERROR[ERROR["STRICT"] = 2] = "STRICT";
    ERROR[ERROR["LF_EXPECTED"] = 3] = "LF_EXPECTED";
    ERROR[ERROR["UNEXPECTED_CONTENT_LENGTH"] = 4] = "UNEXPECTED_CONTENT_LENGTH";
    ERROR[ERROR["CLOSED_CONNECTION"] = 5] = "CLOSED_CONNECTION";
    ERROR[ERROR["INVALID_METHOD"] = 6] = "INVALID_METHOD";
    ERROR[ERROR["INVALID_URL"] = 7] = "INVALID_URL";
    ERROR[ERROR["INVALID_CONSTANT"] = 8] = "INVALID_CONSTANT";
    ERROR[ERROR["INVALID_VERSION"] = 9] = "INVALID_VERSION";
    ERROR[ERROR["INVALID_HEADER_TOKEN"] = 10] = "INVALID_HEADER_TOKEN";
    ERROR[ERROR["INVALID_CONTENT_LENGTH"] = 11] = "INVALID_CONTENT_LENGTH";
    ERROR[ERROR["INVALID_CHUNK_SIZE"] = 12] = "INVALID_CHUNK_SIZE";
    ERROR[ERROR["INVALID_STATUS"] = 13] = "INVALID_STATUS";
    ERROR[ERROR["INVALID_EOF_STATE"] = 14] = "INVALID_EOF_STATE";
    ERROR[ERROR["INVALID_TRANSFER_ENCODING"] = 15] = "INVALID_TRANSFER_ENCODING";
    ERROR[ERROR["CB_MESSAGE_BEGIN"] = 16] = "CB_MESSAGE_BEGIN";
    ERROR[ERROR["CB_HEADERS_COMPLETE"] = 17] = "CB_HEADERS_COMPLETE";
    ERROR[ERROR["CB_MESSAGE_COMPLETE"] = 18] = "CB_MESSAGE_COMPLETE";
    ERROR[ERROR["CB_CHUNK_HEADER"] = 19] = "CB_CHUNK_HEADER";
    ERROR[ERROR["CB_CHUNK_COMPLETE"] = 20] = "CB_CHUNK_COMPLETE";
    ERROR[ERROR["PAUSED"] = 21] = "PAUSED";
    ERROR[ERROR["PAUSED_UPGRADE"] = 22] = "PAUSED_UPGRADE";
    ERROR[ERROR["PAUSED_H2_UPGRADE"] = 23] = "PAUSED_H2_UPGRADE";
    ERROR[ERROR["USER"] = 24] = "USER";
})(ERROR = exports.ERROR || (exports.ERROR = {}));
var TYPE;
(function (TYPE) {
    TYPE[TYPE["BOTH"] = 0] = "BOTH";
    TYPE[TYPE["REQUEST"] = 1] = "REQUEST";
    TYPE[TYPE["RESPONSE"] = 2] = "RESPONSE";
})(TYPE = exports.TYPE || (exports.TYPE = {}));
var FLAGS;
(function (FLAGS) {
    FLAGS[FLAGS["CONNECTION_KEEP_ALIVE"] = 1] = "CONNECTION_KEEP_ALIVE";
    FLAGS[FLAGS["CONNECTION_CLOSE"] = 2] = "CONNECTION_CLOSE";
    FLAGS[FLAGS["CONNECTION_UPGRADE"] = 4] = "CONNECTION_UPGRADE";
    FLAGS[FLAGS["CHUNKED"] = 8] = "CHUNKED";
    FLAGS[FLAGS["UPGRADE"] = 16] = "UPGRADE";
    FLAGS[FLAGS["CONTENT_LENGTH"] = 32] = "CONTENT_LENGTH";
    FLAGS[FLAGS["SKIPBODY"] = 64] = "SKIPBODY";
    FLAGS[FLAGS["TRAILING"] = 128] = "TRAILING";
    // 1 << 8 is unused
    FLAGS[FLAGS["TRANSFER_ENCODING"] = 512] = "TRANSFER_ENCODING";
})(FLAGS = exports.FLAGS || (exports.FLAGS = {}));
var LENIENT_FLAGS;
(function (LENIENT_FLAGS) {
    LENIENT_FLAGS[LENIENT_FLAGS["HEADERS"] = 1] = "HEADERS";
    LENIENT_FLAGS[LENIENT_FLAGS["CHUNKED_LENGTH"] = 2] = "CHUNKED_LENGTH";
    LENIENT_FLAGS[LENIENT_FLAGS["KEEP_ALIVE"] = 4] = "KEEP_ALIVE";
})(LENIENT_FLAGS = exports.LENIENT_FLAGS || (exports.LENIENT_FLAGS = {}));
var METHODS;
(function (METHODS) {
    METHODS[METHODS["DELETE"] = 0] = "DELETE";
    METHODS[METHODS["GET"] = 1] = "GET";
    METHODS[METHODS["HEAD"] = 2] = "HEAD";
    METHODS[METHODS["POST"] = 3] = "POST";
    METHODS[METHODS["PUT"] = 4] = "PUT";
    /* pathological */
    METHODS[METHODS["CONNECT"] = 5] = "CONNECT";
    METHODS[METHODS["OPTIONS"] = 6] = "OPTIONS";
    METHODS[METHODS["TRACE"] = 7] = "TRACE";
    /* WebDAV */
    METHODS[METHODS["COPY"] = 8] = "COPY";
    METHODS[METHODS["LOCK"] = 9] = "LOCK";
    METHODS[METHODS["MKCOL"] = 10] = "MKCOL";
    METHODS[METHODS["MOVE"] = 11] = "MOVE";
    METHODS[METHODS["PROPFIND"] = 12] = "PROPFIND";
    METHODS[METHODS["PROPPATCH"] = 13] = "PROPPATCH";
    METHODS[METHODS["SEARCH"] = 14] = "SEARCH";
    METHODS[METHODS["UNLOCK"] = 15] = "UNLOCK";
    METHODS[METHODS["BIND"] = 16] = "BIND";
    METHODS[METHODS["REBIND"] = 17] = "REBIND";
    METHODS[METHODS["UNBIND"] = 18] = "UNBIND";
    METHODS[METHODS["ACL"] = 19] = "ACL";
    /* subversion */
    METHODS[METHODS["REPORT"] = 20] = "REPORT";
    METHODS[METHODS["MKACTIVITY"] = 21] = "MKACTIVITY";
    METHODS[METHODS["CHECKOUT"] = 22] = "CHECKOUT";
    METHODS[METHODS["MERGE"] = 23] = "MERGE";
    /* upnp */
    METHODS[METHODS["M-SEARCH"] = 24] = "M-SEARCH";
    METHODS[METHODS["NOTIFY"] = 25] = "NOTIFY";
    METHODS[METHODS["SUBSCRIBE"] = 26] = "SUBSCRIBE";
    METHODS[METHODS["UNSUBSCRIBE"] = 27] = "UNSUBSCRIBE";
    /* RFC-5789 */
    METHODS[METHODS["PATCH"] = 28] = "PATCH";
    METHODS[METHODS["PURGE"] = 29] = "PURGE";
    /* CalDAV */
    METHODS[METHODS["MKCALENDAR"] = 30] = "MKCALENDAR";
    /* RFC-2068, section 19.6.1.2 */
    METHODS[METHODS["LINK"] = 31] = "LINK";
    METHODS[METHODS["UNLINK"] = 32] = "UNLINK";
    /* icecast */
    METHODS[METHODS["SOURCE"] = 33] = "SOURCE";
    /* RFC-7540, section 11.6 */
    METHODS[METHODS["PRI"] = 34] = "PRI";
    /* RFC-2326 RTSP */
    METHODS[METHODS["DESCRIBE"] = 35] = "DESCRIBE";
    METHODS[METHODS["ANNOUNCE"] = 36] = "ANNOUNCE";
    METHODS[METHODS["SETUP"] = 37] = "SETUP";
    METHODS[METHODS["PLAY"] = 38] = "PLAY";
    METHODS[METHODS["PAUSE"] = 39] = "PAUSE";
    METHODS[METHODS["TEARDOWN"] = 40] = "TEARDOWN";
    METHODS[METHODS["GET_PARAMETER"] = 41] = "GET_PARAMETER";
    METHODS[METHODS["SET_PARAMETER"] = 42] = "SET_PARAMETER";
    METHODS[METHODS["REDIRECT"] = 43] = "REDIRECT";
    METHODS[METHODS["RECORD"] = 44] = "RECORD";
    /* RAOP */
    METHODS[METHODS["FLUSH"] = 45] = "FLUSH";
})(METHODS = exports.METHODS || (exports.METHODS = {}));
exports.METHODS_HTTP = [
    METHODS.DELETE,
    METHODS.GET,
    METHODS.HEAD,
    METHODS.POST,
    METHODS.PUT,
    METHODS.CONNECT,
    METHODS.OPTIONS,
    METHODS.TRACE,
    METHODS.COPY,
    METHODS.LOCK,
    METHODS.MKCOL,
    METHODS.MOVE,
    METHODS.PROPFIND,
    METHODS.PROPPATCH,
    METHODS.SEARCH,
    METHODS.UNLOCK,
    METHODS.BIND,
    METHODS.REBIND,
    METHODS.UNBIND,
    METHODS.ACL,
    METHODS.REPORT,
    METHODS.MKACTIVITY,
    METHODS.CHECKOUT,
    METHODS.MERGE,
    METHODS['M-SEARCH'],
    METHODS.NOTIFY,
    METHODS.SUBSCRIBE,
    METHODS.UNSUBSCRIBE,
    METHODS.PATCH,
    METHODS.PURGE,
    METHODS.MKCALENDAR,
    METHODS.LINK,
    METHODS.UNLINK,
    METHODS.PRI,
    // TODO(indutny): should we allow it with HTTP?
    METHODS.SOURCE,
];
exports.METHODS_ICE = [
    METHODS.SOURCE,
];
exports.METHODS_RTSP = [
    METHODS.OPTIONS,
    METHODS.DESCRIBE,
    METHODS.ANNOUNCE,
    METHODS.SETUP,
    METHODS.PLAY,
    METHODS.PAUSE,
    METHODS.TEARDOWN,
    METHODS.GET_PARAMETER,
    METHODS.SET_PARAMETER,
    METHODS.REDIRECT,
    METHODS.RECORD,
    METHODS.FLUSH,
    // For AirPlay
    METHODS.GET,
    METHODS.POST,
];
exports.METHOD_MAP = utils_1.enumToMap(METHODS);
exports.H_METHOD_MAP = {};
Object.keys(exports.METHOD_MAP).forEach((key) => {
    if (/^H/.test(key)) {
        exports.H_METHOD_MAP[key] = exports.METHOD_MAP[key];
    }
});
var FINISH;
(function (FINISH) {
    FINISH[FINISH["SAFE"] = 0] = "SAFE";
    FINISH[FINISH["SAFE_WITH_CB"] = 1] = "SAFE_WITH_CB";
    FINISH[FINISH["UNSAFE"] = 2] = "UNSAFE";
})(FINISH = exports.FINISH || (exports.FINISH = {}));
exports.ALPHA = [];
for (let i = 'A'.charCodeAt(0); i <= 'Z'.charCodeAt(0); i++) {
    // Upper case
    exports.ALPHA.push(String.fromCharCode(i));
    // Lower case
    exports.ALPHA.push(String.fromCharCode(i + 0x20));
}
exports.NUM_MAP = {
    0: 0, 1: 1, 2: 2, 3: 3, 4: 4,
    5: 5, 6: 6, 7: 7, 8: 8, 9: 9,
};
exports.HEX_MAP = {
    0: 0, 1: 1, 2: 2, 3: 3, 4: 4,
    5: 5, 6: 6, 7: 7, 8: 8, 9: 9,
    A: 0XA, B: 0XB, C: 0XC, D: 0XD, E: 0XE, F: 0XF,
    a: 0xa, b: 0xb, c: 0xc, d: 0xd, e: 0xe, f: 0xf,
};
exports.NUM = [
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
];
exports.ALPHANUM = exports.ALPHA.concat(exports.NUM);
exports.MARK = ['-', '_', '.', '!', '~', '*', '\'', '(', ')'];
exports.USERINFO_CHARS = exports.ALPHANUM
    .concat(exports.MARK)
    .concat(['%', ';', ':', '&', '=', '+', '$', ',']);
// TODO(indutny): use RFC
exports.STRICT_URL_CHAR = [
    '!', '"', '$', '%', '&', '\'',
    '(', ')', '*', '+', ',', '-', '.', '/',
    ':', ';', '<', '=', '>',
    '@', '[', '\\', ']', '^', '_',
    '`',
    '{', '|', '}', '~',
].concat(exports.ALPHANUM);
exports.URL_CHAR = exports.STRICT_URL_CHAR
    .concat(['\t', '\f']);
// All characters with 0x80 bit set to 1
for (let i = 0x80; i <= 0xff; i++) {
    exports.URL_CHAR.push(i);
}
exports.HEX = exports.NUM.concat(['a', 'b', 'c', 'd', 'e', 'f', 'A', 'B', 'C', 'D', 'E', 'F']);
/* Tokens as defined by rfc 2616. Also lowercases them.
 *        token       = 1*<any CHAR except CTLs or separators>
 *     separators     = "(" | ")" | "<" | ">" | "@"
 *                    | "," | ";" | ":" | "\" | <">
 *                    | "/" | "[" | "]" | "?" | "="
 *                    | "{" | "}" | SP | HT
 */
exports.STRICT_TOKEN = [
    '!', '#', '$', '%', '&', '\'',
    '*', '+', '-', '.',
    '^', '_', '`',
    '|', '~',
].concat(exports.ALPHANUM);
exports.TOKEN = exports.STRICT_TOKEN.concat([' ']);
/*
 * Verify that a char is a valid visible (printable) US-ASCII
 * character or %x80-FF
 */
exports.HEADER_CHARS = ['\t'];
for (let i = 32; i <= 255; i++) {
    if (i !== 127) {
        exports.HEADER_CHARS.push(i);
    }
}
// ',' = \x44
exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS.filter((c) => c !== 44);
exports.MAJOR = exports.NUM_MAP;
exports.MINOR = exports.MAJOR;
var HEADER_STATE;
(function (HEADER_STATE) {
    HEADER_STATE[HEADER_STATE["GENERAL"] = 0] = "GENERAL";
    HEADER_STATE[HEADER_STATE["CONNECTION"] = 1] = "CONNECTION";
    HEADER_STATE[HEADER_STATE["CONTENT_LENGTH"] = 2] = "CONTENT_LENGTH";
    HEADER_STATE[HEADER_STATE["TRANSFER_ENCODING"] = 3] = "TRANSFER_ENCODING";
    HEADER_STATE[HEADER_STATE["UPGRADE"] = 4] = "UPGRADE";
    HEADER_STATE[HEADER_STATE["CONNECTION_KEEP_ALIVE"] = 5] = "CONNECTION_KEEP_ALIVE";
    HEADER_STATE[HEADER_STATE["CONNECTION_CLOSE"] = 6] = "CONNECTION_CLOSE";
    HEADER_STATE[HEADER_STATE["CONNECTION_UPGRADE"] = 7] = "CONNECTION_UPGRADE";
    HEADER_STATE[HEADER_STATE["TRANSFER_ENCODING_CHUNKED"] = 8] = "TRANSFER_ENCODING_CHUNKED";
})(HEADER_STATE = exports.HEADER_STATE || (exports.HEADER_STATE = {}));
exports.SPECIAL_HEADERS = {
    'connection': HEADER_STATE.CONNECTION,
    'content-length': HEADER_STATE.CONTENT_LENGTH,
    'proxy-connection': HEADER_STATE.CONNECTION,
    'transfer-encoding': HEADER_STATE.TRANSFER_ENCODING,
    'upgrade': HEADER_STATE.UPGRADE,
};
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ 1145:
/***/ ((module) => {

module.exports = ''


/***/ }),

/***/ 5627:
/***/ ((module) => {

module.exports = ''


/***/ }),

/***/ 1891:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.enumToMap = void 0;
function enumToMap(obj) {
    const res = {};
    Object.keys(obj).forEach((key) => {
        const value = obj[key];
        if (typeof value === 'number') {
            res[key] = value;
        }
    });
    return res;
}
exports.enumToMap = enumToMap;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 6771:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { kClients } = __nccwpck_require__(2785)
const Agent = __nccwpck_require__(7890)
const {
  kAgent,
  kMockAgentSet,
  kMockAgentGet,
  kDispatches,
  kIsMockActive,
  kNetConnect,
  kGetNetConnect,
  kOptions,
  kFactory
} = __nccwpck_require__(4347)
const MockClient = __nccwpck_require__(8687)
const MockPool = __nccwpck_require__(6193)
const { matchValue, buildMockOptions } = __nccwpck_require__(9323)
const { InvalidArgumentError, UndiciError } = __nccwpck_require__(8045)
const Dispatcher = __nccwpck_require__(412)
const Pluralizer = __nccwpck_require__(8891)
const PendingInterceptorsFormatter = __nccwpck_require__(6823)

class FakeWeakRef {
  constructor (value) {
    this.value = value
  }

  deref () {
    return this.value
  }
}

class MockAgent extends Dispatcher {
  constructor (opts) {
    super(opts)

    this[kNetConnect] = true
    this[kIsMockActive] = true

    // Instantiate Agent and encapsulate
    if ((opts && opts.agent && typeof opts.agent.dispatch !== 'function')) {
      throw new InvalidArgumentError('Argument opts.agent must implement Agent')
    }
    const agent = opts && opts.agent ? opts.agent : new Agent(opts)
    this[kAgent] = agent

    this[kClients] = agent[kClients]
    this[kOptions] = buildMockOptions(opts)
  }

  get (origin) {
    let dispatcher = this[kMockAgentGet](origin)

    if (!dispatcher) {
      dispatcher = this[kFactory](origin)
      this[kMockAgentSet](origin, dispatcher)
    }
    return dispatcher
  }

  dispatch (opts, handler) {
    // Call MockAgent.get to perform additional setup before dispatching as normal
    this.get(opts.origin)
    return this[kAgent].dispatch(opts, handler)
  }

  async close () {
    await this[kAgent].close()
    this[kClients].clear()
  }

  deactivate () {
    this[kIsMockActive] = false
  }

  activate () {
    this[kIsMockActive] = true
  }

  enableNetConnect (matcher) {
    if (typeof matcher === 'string' || typeof matcher === 'function' || matcher instanceof RegExp) {
      if (Array.isArray(this[kNetConnect])) {
        this[kNetConnect].push(matcher)
      } else {
        this[kNetConnect] = [matcher]
      }
    } else if (typeof matcher === 'undefined') {
      this[kNetConnect] = true
    } else {
      throw new InvalidArgumentError('Unsupported matcher. Must be one of String|Function|RegExp.')
    }
  }

  disableNetConnect () {
    this[kNetConnect] = false
  }

  // This is required to bypass issues caused by using global symbols - see:
  // https://github.com/nodejs/undici/issues/1447
  get isMockActive () {
    return this[kIsMockActive]
  }

  [kMockAgentSet] (origin, dispatcher) {
    this[kClients].set(origin, new FakeWeakRef(dispatcher))
  }

  [kFactory] (origin) {
    const mockOptions = Object.assign({ agent: this }, this[kOptions])
    return this[kOptions] && this[kOptions].connections === 1
      ? new MockClient(origin, mockOptions)
      : new MockPool(origin, mockOptions)
  }

  [kMockAgentGet] (origin) {
    // First check if we can immediately find it
    const ref = this[kClients].get(origin)
    if (ref) {
      return ref.deref()
    }

    // If the origin is not a string create a dummy parent pool and return to user
    if (typeof origin !== 'string') {
      const dispatcher = this[kFactory]('http://localhost:9999')
      this[kMockAgentSet](origin, dispatcher)
      return dispatcher
    }

    // If we match, create a pool and assign the same dispatches
    for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {
      const nonExplicitDispatcher = nonExplicitRef.deref()
      if (nonExplicitDispatcher && typeof keyMatcher !== 'string' && matchValue(keyMatcher, origin)) {
        const dispatcher = this[kFactory](origin)
        this[kMockAgentSet](origin, dispatcher)
        dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches]
        return dispatcher
      }
    }
  }

  [kGetNetConnect] () {
    return this[kNetConnect]
  }

  pendingInterceptors () {
    const mockAgentClients = this[kClients]

    return Array.from(mockAgentClients.entries())
      .flatMap(([origin, scope]) => scope.deref()[kDispatches].map(dispatch => ({ ...dispatch, origin })))
      .filter(({ pending }) => pending)
  }

  assertNoPendingInterceptors ({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter() } = {}) {
    const pending = this.pendingInterceptors()

    if (pending.length === 0) {
      return
    }

    const pluralizer = new Pluralizer('interceptor', 'interceptors').pluralize(pending.length)

    throw new UndiciError(`
${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:

${pendingInterceptorsFormatter.format(pending)}
`.trim())
  }
}

module.exports = MockAgent


/***/ }),

/***/ 8687:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { promisify } = __nccwpck_require__(3837)
const Client = __nccwpck_require__(3598)
const { buildMockDispatch } = __nccwpck_require__(9323)
const {
  kDispatches,
  kMockAgent,
  kClose,
  kOriginalClose,
  kOrigin,
  kOriginalDispatch,
  kConnected
} = __nccwpck_require__(4347)
const { MockInterceptor } = __nccwpck_require__(410)
const Symbols = __nccwpck_require__(2785)
const { InvalidArgumentError } = __nccwpck_require__(8045)

/**
 * MockClient provides an API that extends the Client to influence the mockDispatches.
 */
class MockClient extends Client {
  constructor (origin, opts) {
    super(origin, opts)

    if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {
      throw new InvalidArgumentError('Argument opts.agent must implement Agent')
    }

    this[kMockAgent] = opts.agent
    this[kOrigin] = origin
    this[kDispatches] = []
    this[kConnected] = 1
    this[kOriginalDispatch] = this.dispatch
    this[kOriginalClose] = this.close.bind(this)

    this.dispatch = buildMockDispatch.call(this)
    this.close = this[kClose]
  }

  get [Symbols.kConnected] () {
    return this[kConnected]
  }

  /**
   * Sets up the base interceptor for mocking replies from undici.
   */
  intercept (opts) {
    return new MockInterceptor(opts, this[kDispatches])
  }

  async [kClose] () {
    await promisify(this[kOriginalClose])()
    this[kConnected] = 0
    this[kMockAgent][Symbols.kClients].delete(this[kOrigin])
  }
}

module.exports = MockClient


/***/ }),

/***/ 888:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { UndiciError } = __nccwpck_require__(8045)

class MockNotMatchedError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, MockNotMatchedError)
    this.name = 'MockNotMatchedError'
    this.message = message || 'The request does not match any registered mock dispatches'
    this.code = 'UND_MOCK_ERR_MOCK_NOT_MATCHED'
  }
}

module.exports = {
  MockNotMatchedError
}


/***/ }),

/***/ 410:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { getResponseData, buildKey, addMockDispatch } = __nccwpck_require__(9323)
const {
  kDispatches,
  kDispatchKey,
  kDefaultHeaders,
  kDefaultTrailers,
  kContentLength,
  kMockDispatch
} = __nccwpck_require__(4347)
const { InvalidArgumentError } = __nccwpck_require__(8045)
const { buildURL } = __nccwpck_require__(3983)

/**
 * Defines the scope API for an interceptor reply
 */
class MockScope {
  constructor (mockDispatch) {
    this[kMockDispatch] = mockDispatch
  }

  /**
   * Delay a reply by a set amount in ms.
   */
  delay (waitInMs) {
    if (typeof waitInMs !== 'number' || !Number.isInteger(waitInMs) || waitInMs <= 0) {
      throw new InvalidArgumentError('waitInMs must be a valid integer > 0')
    }

    this[kMockDispatch].delay = waitInMs
    return this
  }

  /**
   * For a defined reply, never mark as consumed.
   */
  persist () {
    this[kMockDispatch].persist = true
    return this
  }

  /**
   * Allow one to define a reply for a set amount of matching requests.
   */
  times (repeatTimes) {
    if (typeof repeatTimes !== 'number' || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {
      throw new InvalidArgumentError('repeatTimes must be a valid integer > 0')
    }

    this[kMockDispatch].times = repeatTimes
    return this
  }
}

/**
 * Defines an interceptor for a Mock
 */
class MockInterceptor {
  constructor (opts, mockDispatches) {
    if (typeof opts !== 'object') {
      throw new InvalidArgumentError('opts must be an object')
    }
    if (typeof opts.path === 'undefined') {
      throw new InvalidArgumentError('opts.path must be defined')
    }
    if (typeof opts.method === 'undefined') {
      opts.method = 'GET'
    }
    // See https://github.com/nodejs/undici/issues/1245
    // As per RFC 3986, clients are not supposed to send URI
    // fragments to servers when they retrieve a document,
    if (typeof opts.path === 'string') {
      if (opts.query) {
        opts.path = buildURL(opts.path, opts.query)
      } else {
        // Matches https://github.com/nodejs/undici/blob/main/lib/fetch/index.js#L1811
        const parsedURL = new URL(opts.path, 'data://')
        opts.path = parsedURL.pathname + parsedURL.search
      }
    }
    if (typeof opts.method === 'string') {
      opts.method = opts.method.toUpperCase()
    }

    this[kDispatchKey] = buildKey(opts)
    this[kDispatches] = mockDispatches
    this[kDefaultHeaders] = {}
    this[kDefaultTrailers] = {}
    this[kContentLength] = false
  }

  createMockScopeDispatchData (statusCode, data, responseOptions = {}) {
    const responseData = getResponseData(data)
    const contentLength = this[kContentLength] ? { 'content-length': responseData.length } : {}
    const headers = { ...this[kDefaultHeaders], ...contentLength, ...responseOptions.headers }
    const trailers = { ...this[kDefaultTrailers], ...responseOptions.trailers }

    return { statusCode, data, headers, trailers }
  }

  validateReplyParameters (statusCode, data, responseOptions) {
    if (typeof statusCode === 'undefined') {
      throw new InvalidArgumentError('statusCode must be defined')
    }
    if (typeof data === 'undefined') {
      throw new InvalidArgumentError('data must be defined')
    }
    if (typeof responseOptions !== 'object') {
      throw new InvalidArgumentError('responseOptions must be an object')
    }
  }

  /**
   * Mock an undici request with a defined reply.
   */
  reply (replyData) {
    // Values of reply aren't available right now as they
    // can only be available when the reply callback is invoked.
    if (typeof replyData === 'function') {
      // We'll first wrap the provided callback in another function,
      // this function will properly resolve the data from the callback
      // when invoked.
      const wrappedDefaultsCallback = (opts) => {
        // Our reply options callback contains the parameter for statusCode, data and options.
        const resolvedData = replyData(opts)

        // Check if it is in the right format
        if (typeof resolvedData !== 'object') {
          throw new InvalidArgumentError('reply options callback must return an object')
        }

        const { statusCode, data = '', responseOptions = {} } = resolvedData
        this.validateReplyParameters(statusCode, data, responseOptions)
        // Since the values can be obtained immediately we return them
        // from this higher order function that will be resolved later.
        return {
          ...this.createMockScopeDispatchData(statusCode, data, responseOptions)
        }
      }

      // Add usual dispatch data, but this time set the data parameter to function that will eventually provide data.
      const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback)
      return new MockScope(newMockDispatch)
    }

    // We can have either one or three parameters, if we get here,
    // we should have 1-3 parameters. So we spread the arguments of
    // this function to obtain the parameters, since replyData will always
    // just be the statusCode.
    const [statusCode, data = '', responseOptions = {}] = [...arguments]
    this.validateReplyParameters(statusCode, data, responseOptions)

    // Send in-already provided data like usual
    const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions)
    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData)
    return new MockScope(newMockDispatch)
  }

  /**
   * Mock an undici request with a defined error.
   */
  replyWithError (error) {
    if (typeof error === 'undefined') {
      throw new InvalidArgumentError('error must be defined')
    }

    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], { error })
    return new MockScope(newMockDispatch)
  }

  /**
   * Set default reply headers on the interceptor for subsequent replies
   */
  defaultReplyHeaders (headers) {
    if (typeof headers === 'undefined') {
      throw new InvalidArgumentError('headers must be defined')
    }

    this[kDefaultHeaders] = headers
    return this
  }

  /**
   * Set default reply trailers on the interceptor for subsequent replies
   */
  defaultReplyTrailers (trailers) {
    if (typeof trailers === 'undefined') {
      throw new InvalidArgumentError('trailers must be defined')
    }

    this[kDefaultTrailers] = trailers
    return this
  }

  /**
   * Set reply content length header for replies on the interceptor
   */
  replyContentLength () {
    this[kContentLength] = true
    return this
  }
}

module.exports.MockInterceptor = MockInterceptor
module.exports.MockScope = MockScope


/***/ }),

/***/ 6193:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { promisify } = __nccwpck_require__(3837)
const Pool = __nccwpck_require__(4634)
const { buildMockDispatch } = __nccwpck_require__(9323)
const {
  kDispatches,
  kMockAgent,
  kClose,
  kOriginalClose,
  kOrigin,
  kOriginalDispatch,
  kConnected
} = __nccwpck_require__(4347)
const { MockInterceptor } = __nccwpck_require__(410)
const Symbols = __nccwpck_require__(2785)
const { InvalidArgumentError } = __nccwpck_require__(8045)

/**
 * MockPool provides an API that extends the Pool to influence the mockDispatches.
 */
class MockPool extends Pool {
  constructor (origin, opts) {
    super(origin, opts)

    if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {
      throw new InvalidArgumentError('Argument opts.agent must implement Agent')
    }

    this[kMockAgent] = opts.agent
    this[kOrigin] = origin
    this[kDispatches] = []
    this[kConnected] = 1
    this[kOriginalDispatch] = this.dispatch
    this[kOriginalClose] = this.close.bind(this)

    this.dispatch = buildMockDispatch.call(this)
    this.close = this[kClose]
  }

  get [Symbols.kConnected] () {
    return this[kConnected]
  }

  /**
   * Sets up the base interceptor for mocking replies from undici.
   */
  intercept (opts) {
    return new MockInterceptor(opts, this[kDispatches])
  }

  async [kClose] () {
    await promisify(this[kOriginalClose])()
    this[kConnected] = 0
    this[kMockAgent][Symbols.kClients].delete(this[kOrigin])
  }
}

module.exports = MockPool


/***/ }),

/***/ 4347:
/***/ ((module) => {



module.exports = {
  kAgent: Symbol('agent'),
  kOptions: Symbol('options'),
  kFactory: Symbol('factory'),
  kDispatches: Symbol('dispatches'),
  kDispatchKey: Symbol('dispatch key'),
  kDefaultHeaders: Symbol('default headers'),
  kDefaultTrailers: Symbol('default trailers'),
  kContentLength: Symbol('content length'),
  kMockAgent: Symbol('mock agent'),
  kMockAgentSet: Symbol('mock agent set'),
  kMockAgentGet: Symbol('mock agent get'),
  kMockDispatch: Symbol('mock dispatch'),
  kClose: Symbol('close'),
  kOriginalClose: Symbol('original agent close'),
  kOrigin: Symbol('origin'),
  kIsMockActive: Symbol('is mock active'),
  kNetConnect: Symbol('net connect'),
  kGetNetConnect: Symbol('get net connect'),
  kConnected: Symbol('connected')
}


/***/ }),

/***/ 9323:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { MockNotMatchedError } = __nccwpck_require__(888)
const {
  kDispatches,
  kMockAgent,
  kOriginalDispatch,
  kOrigin,
  kGetNetConnect
} = __nccwpck_require__(4347)
const { buildURL, nop } = __nccwpck_require__(3983)
const { STATUS_CODES } = __nccwpck_require__(3685)
const {
  types: {
    isPromise
  }
} = __nccwpck_require__(3837)

function matchValue (match, value) {
  if (typeof match === 'string') {
    return match === value
  }
  if (match instanceof RegExp) {
    return match.test(value)
  }
  if (typeof match === 'function') {
    return match(value) === true
  }
  return false
}

function lowerCaseEntries (headers) {
  return Object.fromEntries(
    Object.entries(headers).map(([headerName, headerValue]) => {
      return [headerName.toLocaleLowerCase(), headerValue]
    })
  )
}

/**
 * @param {import('../../index').Headers|string[]|Record<string, string>} headers
 * @param {string} key
 */
function getHeaderByName (headers, key) {
  if (Array.isArray(headers)) {
    for (let i = 0; i < headers.length; i += 2) {
      if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) {
        return headers[i + 1]
      }
    }

    return undefined
  } else if (typeof headers.get === 'function') {
    return headers.get(key)
  } else {
    return lowerCaseEntries(headers)[key.toLocaleLowerCase()]
  }
}

/** @param {string[]} headers */
function buildHeadersFromArray (headers) { // fetch HeadersList
  const clone = headers.slice()
  const entries = []
  for (let index = 0; index < clone.length; index += 2) {
    entries.push([clone[index], clone[index + 1]])
  }
  return Object.fromEntries(entries)
}

function matchHeaders (mockDispatch, headers) {
  if (typeof mockDispatch.headers === 'function') {
    if (Array.isArray(headers)) { // fetch HeadersList
      headers = buildHeadersFromArray(headers)
    }
    return mockDispatch.headers(headers ? lowerCaseEntries(headers) : {})
  }
  if (typeof mockDispatch.headers === 'undefined') {
    return true
  }
  if (typeof headers !== 'object' || typeof mockDispatch.headers !== 'object') {
    return false
  }

  for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch.headers)) {
    const headerValue = getHeaderByName(headers, matchHeaderName)

    if (!matchValue(matchHeaderValue, headerValue)) {
      return false
    }
  }
  return true
}

function safeUrl (path) {
  if (typeof path !== 'string') {
    return path
  }

  const pathSegments = path.split('?')

  if (pathSegments.length !== 2) {
    return path
  }

  const qp = new URLSearchParams(pathSegments.pop())
  qp.sort()
  return [...pathSegments, qp.toString()].join('?')
}

function matchKey (mockDispatch, { path, method, body, headers }) {
  const pathMatch = matchValue(mockDispatch.path, path)
  const methodMatch = matchValue(mockDispatch.method, method)
  const bodyMatch = typeof mockDispatch.body !== 'undefined' ? matchValue(mockDispatch.body, body) : true
  const headersMatch = matchHeaders(mockDispatch, headers)
  return pathMatch && methodMatch && bodyMatch && headersMatch
}

function getResponseData (data) {
  if (Buffer.isBuffer(data)) {
    return data
  } else if (typeof data === 'object') {
    return JSON.stringify(data)
  } else {
    return data.toString()
  }
}

function getMockDispatch (mockDispatches, key) {
  const basePath = key.query ? buildURL(key.path, key.query) : key.path
  const resolvedPath = typeof basePath === 'string' ? safeUrl(basePath) : basePath

  // Match path
  let matchedMockDispatches = mockDispatches.filter(({ consumed }) => !consumed).filter(({ path }) => matchValue(safeUrl(path), resolvedPath))
  if (matchedMockDispatches.length === 0) {
    throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`)
  }

  // Match method
  matchedMockDispatches = matchedMockDispatches.filter(({ method }) => matchValue(method, key.method))
  if (matchedMockDispatches.length === 0) {
    throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}'`)
  }

  // Match body
  matchedMockDispatches = matchedMockDispatches.filter(({ body }) => typeof body !== 'undefined' ? matchValue(body, key.body) : true)
  if (matchedMockDispatches.length === 0) {
    throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}'`)
  }

  // Match headers
  matchedMockDispatches = matchedMockDispatches.filter((mockDispatch) => matchHeaders(mockDispatch, key.headers))
  if (matchedMockDispatches.length === 0) {
    throw new MockNotMatchedError(`Mock dispatch not matched for headers '${typeof key.headers === 'object' ? JSON.stringify(key.headers) : key.headers}'`)
  }

  return matchedMockDispatches[0]
}

function addMockDispatch (mockDispatches, key, data) {
  const baseData = { timesInvoked: 0, times: 1, persist: false, consumed: false }
  const replyData = typeof data === 'function' ? { callback: data } : { ...data }
  const newMockDispatch = { ...baseData, ...key, pending: true, data: { error: null, ...replyData } }
  mockDispatches.push(newMockDispatch)
  return newMockDispatch
}

function deleteMockDispatch (mockDispatches, key) {
  const index = mockDispatches.findIndex(dispatch => {
    if (!dispatch.consumed) {
      return false
    }
    return matchKey(dispatch, key)
  })
  if (index !== -1) {
    mockDispatches.splice(index, 1)
  }
}

function buildKey (opts) {
  const { path, method, body, headers, query } = opts
  return {
    path,
    method,
    body,
    headers,
    query
  }
}

function generateKeyValues (data) {
  return Object.entries(data).reduce((keyValuePairs, [key, value]) => [
    ...keyValuePairs,
    Buffer.from(`${key}`),
    Array.isArray(value) ? value.map(x => Buffer.from(`${x}`)) : Buffer.from(`${value}`)
  ], [])
}

/**
 * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
 * @param {number} statusCode
 */
function getStatusText (statusCode) {
  return STATUS_CODES[statusCode] || 'unknown'
}

async function getResponse (body) {
  const buffers = []
  for await (const data of body) {
    buffers.push(data)
  }
  return Buffer.concat(buffers).toString('utf8')
}

/**
 * Mock dispatch function used to simulate undici dispatches
 */
function mockDispatch (opts, handler) {
  // Get mock dispatch from built key
  const key = buildKey(opts)
  const mockDispatch = getMockDispatch(this[kDispatches], key)

  mockDispatch.timesInvoked++

  // Here's where we resolve a callback if a callback is present for the dispatch data.
  if (mockDispatch.data.callback) {
    mockDispatch.data = { ...mockDispatch.data, ...mockDispatch.data.callback(opts) }
  }

  // Parse mockDispatch data
  const { data: { statusCode, data, headers, trailers, error }, delay, persist } = mockDispatch
  const { timesInvoked, times } = mockDispatch

  // If it's used up and not persistent, mark as consumed
  mockDispatch.consumed = !persist && timesInvoked >= times
  mockDispatch.pending = timesInvoked < times

  // If specified, trigger dispatch error
  if (error !== null) {
    deleteMockDispatch(this[kDispatches], key)
    handler.onError(error)
    return true
  }

  // Handle the request with a delay if necessary
  if (typeof delay === 'number' && delay > 0) {
    setTimeout(() => {
      handleReply(this[kDispatches])
    }, delay)
  } else {
    handleReply(this[kDispatches])
  }

  function handleReply (mockDispatches, _data = data) {
    // fetch's HeadersList is a 1D string array
    const optsHeaders = Array.isArray(opts.headers)
      ? buildHeadersFromArray(opts.headers)
      : opts.headers
    const body = typeof _data === 'function'
      ? _data({ ...opts, headers: optsHeaders })
      : _data

    // util.types.isPromise is likely needed for jest.
    if (isPromise(body)) {
      // If handleReply is asynchronous, throwing an error
      // in the callback will reject the promise, rather than
      // synchronously throw the error, which breaks some tests.
      // Rather, we wait for the callback to resolve if it is a
      // promise, and then re-run handleReply with the new body.
      body.then((newData) => handleReply(mockDispatches, newData))
      return
    }

    const responseData = getResponseData(body)
    const responseHeaders = generateKeyValues(headers)
    const responseTrailers = generateKeyValues(trailers)

    handler.abort = nop
    handler.onHeaders(statusCode, responseHeaders, resume, getStatusText(statusCode))
    handler.onData(Buffer.from(responseData))
    handler.onComplete(responseTrailers)
    deleteMockDispatch(mockDispatches, key)
  }

  function resume () {}

  return true
}

function buildMockDispatch () {
  const agent = this[kMockAgent]
  const origin = this[kOrigin]
  const originalDispatch = this[kOriginalDispatch]

  return function dispatch (opts, handler) {
    if (agent.isMockActive) {
      try {
        mockDispatch.call(this, opts, handler)
      } catch (error) {
        if (error instanceof MockNotMatchedError) {
          const netConnect = agent[kGetNetConnect]()
          if (netConnect === false) {
            throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`)
          }
          if (checkNetConnect(netConnect, origin)) {
            originalDispatch.call(this, opts, handler)
          } else {
            throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`)
          }
        } else {
          throw error
        }
      }
    } else {
      originalDispatch.call(this, opts, handler)
    }
  }
}

function checkNetConnect (netConnect, origin) {
  const url = new URL(origin)
  if (netConnect === true) {
    return true
  } else if (Array.isArray(netConnect) && netConnect.some((matcher) => matchValue(matcher, url.host))) {
    return true
  }
  return false
}

function buildMockOptions (opts) {
  if (opts) {
    const { agent, ...mockOptions } = opts
    return mockOptions
  }
}

module.exports = {
  getResponseData,
  getMockDispatch,
  addMockDispatch,
  deleteMockDispatch,
  buildKey,
  generateKeyValues,
  matchValue,
  getResponse,
  getStatusText,
  mockDispatch,
  buildMockDispatch,
  checkNetConnect,
  buildMockOptions,
  getHeaderByName
}


/***/ }),

/***/ 6823:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { Transform } = __nccwpck_require__(2781)
const { Console } = __nccwpck_require__(6206)

/**
 * Gets the output of `console.table(…)` as a string.
 */
module.exports = class PendingInterceptorsFormatter {
  constructor ({ disableColors } = {}) {
    this.transform = new Transform({
      transform (chunk, _enc, cb) {
        cb(null, chunk)
      }
    })

    this.logger = new Console({
      stdout: this.transform,
      inspectOptions: {
        colors: !disableColors && !process.env.CI
      }
    })
  }

  format (pendingInterceptors) {
    const withPrettyHeaders = pendingInterceptors.map(
      ({ method, path, data: { statusCode }, persist, times, timesInvoked, origin }) => ({
        Method: method,
        Origin: origin,
        Path: path,
        'Status code': statusCode,
        Persistent: persist ? '✅' : '❌',
        Invocations: timesInvoked,
        Remaining: persist ? Infinity : times - timesInvoked
      }))

    this.logger.table(withPrettyHeaders)
    return this.transform.read().toString()
  }
}


/***/ }),

/***/ 8891:
/***/ ((module) => {



const singulars = {
  pronoun: 'it',
  is: 'is',
  was: 'was',
  this: 'this'
}

const plurals = {
  pronoun: 'they',
  is: 'are',
  was: 'were',
  this: 'these'
}

module.exports = class Pluralizer {
  constructor (singular, plural) {
    this.singular = singular
    this.plural = plural
  }

  pluralize (count) {
    const one = count === 1
    const keys = one ? singulars : plurals
    const noun = one ? this.singular : this.plural
    return { ...keys, count, noun }
  }
}


/***/ }),

/***/ 8266:
/***/ ((module) => {

/* eslint-disable */



// Extracted from node/lib/internal/fixed_queue.js

// Currently optimal queue size, tested on V8 6.0 - 6.6. Must be power of two.
const kSize = 2048;
const kMask = kSize - 1;

// The FixedQueue is implemented as a singly-linked list of fixed-size
// circular buffers. It looks something like this:
//
//  head                                                       tail
//    |                                                          |
//    v                                                          v
// +-----------+ <-----\       +-----------+ <------\         +-----------+
// |  [null]   |        \----- |   next    |         \------- |   next    |
// +-----------+               +-----------+                  +-----------+
// |   item    | <-- bottom    |   item    | <-- bottom       |  [empty]  |
// |   item    |               |   item    |                  |  [empty]  |
// |   item    |               |   item    |                  |  [empty]  |
// |   item    |               |   item    |                  |  [empty]  |
// |   item    |               |   item    |       bottom --> |   item    |
// |   item    |               |   item    |                  |   item    |
// |    ...    |               |    ...    |                  |    ...    |
// |   item    |               |   item    |                  |   item    |
// |   item    |               |   item    |                  |   item    |
// |  [empty]  | <-- top       |   item    |                  |   item    |
// |  [empty]  |               |   item    |                  |   item    |
// |  [empty]  |               |  [empty]  | <-- top  top --> |  [empty]  |
// +-----------+               +-----------+                  +-----------+
//
// Or, if there is only one circular buffer, it looks something
// like either of these:
//
//  head   tail                                 head   tail
//    |     |                                     |     |
//    v     v                                     v     v
// +-----------+                               +-----------+
// |  [null]   |                               |  [null]   |
// +-----------+                               +-----------+
// |  [empty]  |                               |   item    |
// |  [empty]  |                               |   item    |
// |   item    | <-- bottom            top --> |  [empty]  |
// |   item    |                               |  [empty]  |
// |  [empty]  | <-- top            bottom --> |   item    |
// |  [empty]  |                               |   item    |
// +-----------+                               +-----------+
//
// Adding a value means moving `top` forward by one, removing means
// moving `bottom` forward by one. After reaching the end, the queue
// wraps around.
//
// When `top === bottom` the current queue is empty and when
// `top + 1 === bottom` it's full. This wastes a single space of storage
// but allows much quicker checks.

class FixedCircularBuffer {
  constructor() {
    this.bottom = 0;
    this.top = 0;
    this.list = new Array(kSize);
    this.next = null;
  }

  isEmpty() {
    return this.top === this.bottom;
  }

  isFull() {
    return ((this.top + 1) & kMask) === this.bottom;
  }

  push(data) {
    this.list[this.top] = data;
    this.top = (this.top + 1) & kMask;
  }

  shift() {
    const nextItem = this.list[this.bottom];
    if (nextItem === undefined)
      return null;
    this.list[this.bottom] = undefined;
    this.bottom = (this.bottom + 1) & kMask;
    return nextItem;
  }
}

module.exports = class FixedQueue {
  constructor() {
    this.head = this.tail = new FixedCircularBuffer();
  }

  isEmpty() {
    return this.head.isEmpty();
  }

  push(data) {
    if (this.head.isFull()) {
      // Head is full: Creates a new queue, sets the old queue's `.next` to it,
      // and sets it as the new main queue.
      this.head = this.head.next = new FixedCircularBuffer();
    }
    this.head.push(data);
  }

  shift() {
    const tail = this.tail;
    const next = tail.shift();
    if (tail.isEmpty() && tail.next !== null) {
      // If there is another queue, it forms the new tail.
      this.tail = tail.next;
    }
    return next;
  }
};


/***/ }),

/***/ 3198:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const DispatcherBase = __nccwpck_require__(4839)
const FixedQueue = __nccwpck_require__(8266)
const { kConnected, kSize, kRunning, kPending, kQueued, kBusy, kFree, kUrl, kClose, kDestroy, kDispatch } = __nccwpck_require__(2785)
const PoolStats = __nccwpck_require__(9689)

const kClients = Symbol('clients')
const kNeedDrain = Symbol('needDrain')
const kQueue = Symbol('queue')
const kClosedResolve = Symbol('closed resolve')
const kOnDrain = Symbol('onDrain')
const kOnConnect = Symbol('onConnect')
const kOnDisconnect = Symbol('onDisconnect')
const kOnConnectionError = Symbol('onConnectionError')
const kGetDispatcher = Symbol('get dispatcher')
const kAddClient = Symbol('add client')
const kRemoveClient = Symbol('remove client')
const kStats = Symbol('stats')

class PoolBase extends DispatcherBase {
  constructor () {
    super()

    this[kQueue] = new FixedQueue()
    this[kClients] = []
    this[kQueued] = 0

    const pool = this

    this[kOnDrain] = function onDrain (origin, targets) {
      const queue = pool[kQueue]

      let needDrain = false

      while (!needDrain) {
        const item = queue.shift()
        if (!item) {
          break
        }
        pool[kQueued]--
        needDrain = !this.dispatch(item.opts, item.handler)
      }

      this[kNeedDrain] = needDrain

      if (!this[kNeedDrain] && pool[kNeedDrain]) {
        pool[kNeedDrain] = false
        pool.emit('drain', origin, [pool, ...targets])
      }

      if (pool[kClosedResolve] && queue.isEmpty()) {
        Promise
          .all(pool[kClients].map(c => c.close()))
          .then(pool[kClosedResolve])
      }
    }

    this[kOnConnect] = (origin, targets) => {
      pool.emit('connect', origin, [pool, ...targets])
    }

    this[kOnDisconnect] = (origin, targets, err) => {
      pool.emit('disconnect', origin, [pool, ...targets], err)
    }

    this[kOnConnectionError] = (origin, targets, err) => {
      pool.emit('connectionError', origin, [pool, ...targets], err)
    }

    this[kStats] = new PoolStats(this)
  }

  get [kBusy] () {
    return this[kNeedDrain]
  }

  get [kConnected] () {
    return this[kClients].filter(client => client[kConnected]).length
  }

  get [kFree] () {
    return this[kClients].filter(client => client[kConnected] && !client[kNeedDrain]).length
  }

  get [kPending] () {
    let ret = this[kQueued]
    for (const { [kPending]: pending } of this[kClients]) {
      ret += pending
    }
    return ret
  }

  get [kRunning] () {
    let ret = 0
    for (const { [kRunning]: running } of this[kClients]) {
      ret += running
    }
    return ret
  }

  get [kSize] () {
    let ret = this[kQueued]
    for (const { [kSize]: size } of this[kClients]) {
      ret += size
    }
    return ret
  }

  get stats () {
    return this[kStats]
  }

  async [kClose] () {
    if (this[kQueue].isEmpty()) {
      return Promise.all(this[kClients].map(c => c.close()))
    } else {
      return new Promise((resolve) => {
        this[kClosedResolve] = resolve
      })
    }
  }

  async [kDestroy] (err) {
    while (true) {
      const item = this[kQueue].shift()
      if (!item) {
        break
      }
      item.handler.onError(err)
    }

    return Promise.all(this[kClients].map(c => c.destroy(err)))
  }

  [kDispatch] (opts, handler) {
    const dispatcher = this[kGetDispatcher]()

    if (!dispatcher) {
      this[kNeedDrain] = true
      this[kQueue].push({ opts, handler })
      this[kQueued]++
    } else if (!dispatcher.dispatch(opts, handler)) {
      dispatcher[kNeedDrain] = true
      this[kNeedDrain] = !this[kGetDispatcher]()
    }

    return !this[kNeedDrain]
  }

  [kAddClient] (client) {
    client
      .on('drain', this[kOnDrain])
      .on('connect', this[kOnConnect])
      .on('disconnect', this[kOnDisconnect])
      .on('connectionError', this[kOnConnectionError])

    this[kClients].push(client)

    if (this[kNeedDrain]) {
      process.nextTick(() => {
        if (this[kNeedDrain]) {
          this[kOnDrain](client[kUrl], [this, client])
        }
      })
    }

    return this
  }

  [kRemoveClient] (client) {
    client.close(() => {
      const idx = this[kClients].indexOf(client)
      if (idx !== -1) {
        this[kClients].splice(idx, 1)
      }
    })

    this[kNeedDrain] = this[kClients].some(dispatcher => (
      !dispatcher[kNeedDrain] &&
      dispatcher.closed !== true &&
      dispatcher.destroyed !== true
    ))
  }
}

module.exports = {
  PoolBase,
  kClients,
  kNeedDrain,
  kAddClient,
  kRemoveClient,
  kGetDispatcher
}


/***/ }),

/***/ 9689:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const { kFree, kConnected, kPending, kQueued, kRunning, kSize } = __nccwpck_require__(2785)
const kPool = Symbol('pool')

class PoolStats {
  constructor (pool) {
    this[kPool] = pool
  }

  get connected () {
    return this[kPool][kConnected]
  }

  get free () {
    return this[kPool][kFree]
  }

  get pending () {
    return this[kPool][kPending]
  }

  get queued () {
    return this[kPool][kQueued]
  }

  get running () {
    return this[kPool][kRunning]
  }

  get size () {
    return this[kPool][kSize]
  }
}

module.exports = PoolStats


/***/ }),

/***/ 4634:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const {
  PoolBase,
  kClients,
  kNeedDrain,
  kAddClient,
  kGetDispatcher
} = __nccwpck_require__(3198)
const Client = __nccwpck_require__(3598)
const {
  InvalidArgumentError
} = __nccwpck_require__(8045)
const util = __nccwpck_require__(3983)
const { kUrl, kInterceptors } = __nccwpck_require__(2785)
const buildConnector = __nccwpck_require__(2067)

const kOptions = Symbol('options')
const kConnections = Symbol('connections')
const kFactory = Symbol('factory')

function defaultFactory (origin, opts) {
  return new Client(origin, opts)
}

class Pool extends PoolBase {
  constructor (origin, {
    connections,
    factory = defaultFactory,
    connect,
    connectTimeout,
    tls,
    maxCachedSessions,
    socketPath,
    autoSelectFamily,
    autoSelectFamilyAttemptTimeout,
    allowH2,
    ...options
  } = {}) {
    super()

    if (connections != null && (!Number.isFinite(connections) || connections < 0)) {
      throw new InvalidArgumentError('invalid connections')
    }

    if (typeof factory !== 'function') {
      throw new InvalidArgumentError('factory must be a function.')
    }

    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {
      throw new InvalidArgumentError('connect must be a function or an object')
    }

    if (typeof connect !== 'function') {
      connect = buildConnector({
        ...tls,
        maxCachedSessions,
        allowH2,
        socketPath,
        timeout: connectTimeout,
        ...(util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : undefined),
        ...connect
      })
    }

    this[kInterceptors] = options.interceptors && options.interceptors.Pool && Array.isArray(options.interceptors.Pool)
      ? options.interceptors.Pool
      : []
    this[kConnections] = connections || null
    this[kUrl] = util.parseOrigin(origin)
    this[kOptions] = { ...util.deepClone(options), connect, allowH2 }
    this[kOptions].interceptors = options.interceptors
      ? { ...options.interceptors }
      : undefined
    this[kFactory] = factory
  }

  [kGetDispatcher] () {
    let dispatcher = this[kClients].find(dispatcher => !dispatcher[kNeedDrain])

    if (dispatcher) {
      return dispatcher
    }

    if (!this[kConnections] || this[kClients].length < this[kConnections]) {
      dispatcher = this[kFactory](this[kUrl], this[kOptions])
      this[kAddClient](dispatcher)
    }

    return dispatcher
  }
}

module.exports = Pool


/***/ }),

/***/ 7858:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { kProxy, kClose, kDestroy, kInterceptors } = __nccwpck_require__(2785)
const { URL } = __nccwpck_require__(7310)
const Agent = __nccwpck_require__(7890)
const Pool = __nccwpck_require__(4634)
const DispatcherBase = __nccwpck_require__(4839)
const { InvalidArgumentError, RequestAbortedError } = __nccwpck_require__(8045)
const buildConnector = __nccwpck_require__(2067)

const kAgent = Symbol('proxy agent')
const kClient = Symbol('proxy client')
const kProxyHeaders = Symbol('proxy headers')
const kRequestTls = Symbol('request tls settings')
const kProxyTls = Symbol('proxy tls settings')
const kConnectEndpoint = Symbol('connect endpoint function')

function defaultProtocolPort (protocol) {
  return protocol === 'https:' ? 443 : 80
}

function buildProxyOptions (opts) {
  if (typeof opts === 'string') {
    opts = { uri: opts }
  }

  if (!opts || !opts.uri) {
    throw new InvalidArgumentError('Proxy opts.uri is mandatory')
  }

  return {
    uri: opts.uri,
    protocol: opts.protocol || 'https'
  }
}

function defaultFactory (origin, opts) {
  return new Pool(origin, opts)
}

class ProxyAgent extends DispatcherBase {
  constructor (opts) {
    super(opts)
    this[kProxy] = buildProxyOptions(opts)
    this[kAgent] = new Agent(opts)
    this[kInterceptors] = opts.interceptors && opts.interceptors.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent)
      ? opts.interceptors.ProxyAgent
      : []

    if (typeof opts === 'string') {
      opts = { uri: opts }
    }

    if (!opts || !opts.uri) {
      throw new InvalidArgumentError('Proxy opts.uri is mandatory')
    }

    const { clientFactory = defaultFactory } = opts

    if (typeof clientFactory !== 'function') {
      throw new InvalidArgumentError('Proxy opts.clientFactory must be a function.')
    }

    this[kRequestTls] = opts.requestTls
    this[kProxyTls] = opts.proxyTls
    this[kProxyHeaders] = opts.headers || {}

    const resolvedUrl = new URL(opts.uri)
    const { origin, port, host, username, password } = resolvedUrl

    if (opts.auth && opts.token) {
      throw new InvalidArgumentError('opts.auth cannot be used in combination with opts.token')
    } else if (opts.auth) {
      /* @deprecated in favour of opts.token */
      this[kProxyHeaders]['proxy-authorization'] = `Basic ${opts.auth}`
    } else if (opts.token) {
      this[kProxyHeaders]['proxy-authorization'] = opts.token
    } else if (username && password) {
      this[kProxyHeaders]['proxy-authorization'] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString('base64')}`
    }

    const connect = buildConnector({ ...opts.proxyTls })
    this[kConnectEndpoint] = buildConnector({ ...opts.requestTls })
    this[kClient] = clientFactory(resolvedUrl, { connect })
    this[kAgent] = new Agent({
      ...opts,
      connect: async (opts, callback) => {
        let requestedHost = opts.host
        if (!opts.port) {
          requestedHost += `:${defaultProtocolPort(opts.protocol)}`
        }
        try {
          const { socket, statusCode } = await this[kClient].connect({
            origin,
            port,
            path: requestedHost,
            signal: opts.signal,
            headers: {
              ...this[kProxyHeaders],
              host
            }
          })
          if (statusCode !== 200) {
            socket.on('error', () => {}).destroy()
            callback(new RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`))
          }
          if (opts.protocol !== 'https:') {
            callback(null, socket)
            return
          }
          let servername
          if (this[kRequestTls]) {
            servername = this[kRequestTls].servername
          } else {
            servername = opts.servername
          }
          this[kConnectEndpoint]({ ...opts, servername, httpSocket: socket }, callback)
        } catch (err) {
          callback(err)
        }
      }
    })
  }

  dispatch (opts, handler) {
    const { host } = new URL(opts.origin)
    const headers = buildHeaders(opts.headers)
    throwIfProxyAuthIsSent(headers)
    return this[kAgent].dispatch(
      {
        ...opts,
        headers: {
          ...headers,
          host
        }
      },
      handler
    )
  }

  async [kClose] () {
    await this[kAgent].close()
    await this[kClient].close()
  }

  async [kDestroy] () {
    await this[kAgent].destroy()
    await this[kClient].destroy()
  }
}

/**
 * @param {string[] | Record<string, string>} headers
 * @returns {Record<string, string>}
 */
function buildHeaders (headers) {
  // When using undici.fetch, the headers list is stored
  // as an array.
  if (Array.isArray(headers)) {
    /** @type {Record<string, string>} */
    const headersPair = {}

    for (let i = 0; i < headers.length; i += 2) {
      headersPair[headers[i]] = headers[i + 1]
    }

    return headersPair
  }

  return headers
}

/**
 * @param {Record<string, string>} headers
 *
 * Previous versions of ProxyAgent suggests the Proxy-Authorization in request headers
 * Nevertheless, it was changed and to avoid a security vulnerability by end users
 * this check was created.
 * It should be removed in the next major version for performance reasons
 */
function throwIfProxyAuthIsSent (headers) {
  const existProxyAuth = headers && Object.keys(headers)
    .find((key) => key.toLowerCase() === 'proxy-authorization')
  if (existProxyAuth) {
    throw new InvalidArgumentError('Proxy-Authorization should be sent in ProxyAgent constructor')
  }
}

module.exports = ProxyAgent


/***/ }),

/***/ 9459:
/***/ ((module) => {



let fastNow = Date.now()
let fastNowTimeout

const fastTimers = []

function onTimeout () {
  fastNow = Date.now()

  let len = fastTimers.length
  let idx = 0
  while (idx < len) {
    const timer = fastTimers[idx]

    if (timer.state === 0) {
      timer.state = fastNow + timer.delay
    } else if (timer.state > 0 && fastNow >= timer.state) {
      timer.state = -1
      timer.callback(timer.opaque)
    }

    if (timer.state === -1) {
      timer.state = -2
      if (idx !== len - 1) {
        fastTimers[idx] = fastTimers.pop()
      } else {
        fastTimers.pop()
      }
      len -= 1
    } else {
      idx += 1
    }
  }

  if (fastTimers.length > 0) {
    refreshTimeout()
  }
}

function refreshTimeout () {
  if (fastNowTimeout && fastNowTimeout.refresh) {
    fastNowTimeout.refresh()
  } else {
    clearTimeout(fastNowTimeout)
    fastNowTimeout = setTimeout(onTimeout, 1e3)
    if (fastNowTimeout.unref) {
      fastNowTimeout.unref()
    }
  }
}

class Timeout {
  constructor (callback, delay, opaque) {
    this.callback = callback
    this.delay = delay
    this.opaque = opaque

    //  -2 not in timer list
    //  -1 in timer list but inactive
    //   0 in timer list waiting for time
    // > 0 in timer list waiting for time to expire
    this.state = -2

    this.refresh()
  }

  refresh () {
    if (this.state === -2) {
      fastTimers.push(this)
      if (!fastNowTimeout || fastTimers.length === 1) {
        refreshTimeout()
      }
    }

    this.state = 0
  }

  clear () {
    this.state = -1
  }
}

module.exports = {
  setTimeout (callback, delay, opaque) {
    return delay < 1e3
      ? setTimeout(callback, delay, opaque)
      : new Timeout(callback, delay, opaque)
  },
  clearTimeout (timeout) {
    if (timeout instanceof Timeout) {
      timeout.clear()
    } else {
      clearTimeout(timeout)
    }
  }
}


/***/ }),

/***/ 5354:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const diagnosticsChannel = __nccwpck_require__(7643)
const { uid, states } = __nccwpck_require__(9188)
const {
  kReadyState,
  kSentClose,
  kByteParser,
  kReceivedClose
} = __nccwpck_require__(7578)
const { fireEvent, failWebsocketConnection } = __nccwpck_require__(5515)
const { CloseEvent } = __nccwpck_require__(2611)
const { makeRequest } = __nccwpck_require__(8359)
const { fetching } = __nccwpck_require__(4881)
const { Headers } = __nccwpck_require__(554)
const { getGlobalDispatcher } = __nccwpck_require__(1892)
const { kHeadersList } = __nccwpck_require__(2785)

const channels = {}
channels.open = diagnosticsChannel.channel('undici:websocket:open')
channels.close = diagnosticsChannel.channel('undici:websocket:close')
channels.socketError = diagnosticsChannel.channel('undici:websocket:socket_error')

/** @type {import('crypto')} */
let crypto
try {
  crypto = __nccwpck_require__(6113)
} catch {

}

/**
 * @see https://websockets.spec.whatwg.org/#concept-websocket-establish
 * @param {URL} url
 * @param {string|string[]} protocols
 * @param {import('./websocket').WebSocket} ws
 * @param {(response: any) => void} onEstablish
 * @param {Partial<import('../../types/websocket').WebSocketInit>} options
 */
function establishWebSocketConnection (url, protocols, ws, onEstablish, options) {
  // 1. Let requestURL be a copy of url, with its scheme set to "http", if url’s
  //    scheme is "ws", and to "https" otherwise.
  const requestURL = url

  requestURL.protocol = url.protocol === 'ws:' ? 'http:' : 'https:'

  // 2. Let request be a new request, whose URL is requestURL, client is client,
  //    service-workers mode is "none", referrer is "no-referrer", mode is
  //    "websocket", credentials mode is "include", cache mode is "no-store" ,
  //    and redirect mode is "error".
  const request = makeRequest({
    urlList: [requestURL],
    serviceWorkers: 'none',
    referrer: 'no-referrer',
    mode: 'websocket',
    credentials: 'include',
    cache: 'no-store',
    redirect: 'error'
  })

  // Note: undici extension, allow setting custom headers.
  if (options.headers) {
    const headersList = new Headers(options.headers)[kHeadersList]

    request.headersList = headersList
  }

  // 3. Append (`Upgrade`, `websocket`) to request’s header list.
  // 4. Append (`Connection`, `Upgrade`) to request’s header list.
  // Note: both of these are handled by undici currently.
  // https://github.com/nodejs/undici/blob/68c269c4144c446f3f1220951338daef4a6b5ec4/lib/client.js#L1397

  // 5. Let keyValue be a nonce consisting of a randomly selected
  //    16-byte value that has been forgiving-base64-encoded and
  //    isomorphic encoded.
  const keyValue = crypto.randomBytes(16).toString('base64')

  // 6. Append (`Sec-WebSocket-Key`, keyValue) to request’s
  //    header list.
  request.headersList.append('sec-websocket-key', keyValue)

  // 7. Append (`Sec-WebSocket-Version`, `13`) to request’s
  //    header list.
  request.headersList.append('sec-websocket-version', '13')

  // 8. For each protocol in protocols, combine
  //    (`Sec-WebSocket-Protocol`, protocol) in request’s header
  //    list.
  for (const protocol of protocols) {
    request.headersList.append('sec-websocket-protocol', protocol)
  }

  // 9. Let permessageDeflate be a user-agent defined
  //    "permessage-deflate" extension header value.
  // https://github.com/mozilla/gecko-dev/blob/ce78234f5e653a5d3916813ff990f053510227bc/netwerk/protocol/websocket/WebSocketChannel.cpp#L2673
  // TODO: enable once permessage-deflate is supported
  const permessageDeflate = '' // 'permessage-deflate; 15'

  // 10. Append (`Sec-WebSocket-Extensions`, permessageDeflate) to
  //     request’s header list.
  // request.headersList.append('sec-websocket-extensions', permessageDeflate)

  // 11. Fetch request with useParallelQueue set to true, and
  //     processResponse given response being these steps:
  const controller = fetching({
    request,
    useParallelQueue: true,
    dispatcher: options.dispatcher ?? getGlobalDispatcher(),
    processResponse (response) {
      // 1. If response is a network error or its status is not 101,
      //    fail the WebSocket connection.
      if (response.type === 'error' || response.status !== 101) {
        failWebsocketConnection(ws, 'Received network error or non-101 status code.')
        return
      }

      // 2. If protocols is not the empty list and extracting header
      //    list values given `Sec-WebSocket-Protocol` and response’s
      //    header list results in null, failure, or the empty byte
      //    sequence, then fail the WebSocket connection.
      if (protocols.length !== 0 && !response.headersList.get('Sec-WebSocket-Protocol')) {
        failWebsocketConnection(ws, 'Server did not respond with sent protocols.')
        return
      }

      // 3. Follow the requirements stated step 2 to step 6, inclusive,
      //    of the last set of steps in section 4.1 of The WebSocket
      //    Protocol to validate response. This either results in fail
      //    the WebSocket connection or the WebSocket connection is
      //    established.

      // 2. If the response lacks an |Upgrade| header field or the |Upgrade|
      //    header field contains a value that is not an ASCII case-
      //    insensitive match for the value "websocket", the client MUST
      //    _Fail the WebSocket Connection_.
      if (response.headersList.get('Upgrade')?.toLowerCase() !== 'websocket') {
        failWebsocketConnection(ws, 'Server did not set Upgrade header to "websocket".')
        return
      }

      // 3. If the response lacks a |Connection| header field or the
      //    |Connection| header field doesn't contain a token that is an
      //    ASCII case-insensitive match for the value "Upgrade", the client
      //    MUST _Fail the WebSocket Connection_.
      if (response.headersList.get('Connection')?.toLowerCase() !== 'upgrade') {
        failWebsocketConnection(ws, 'Server did not set Connection header to "upgrade".')
        return
      }

      // 4. If the response lacks a |Sec-WebSocket-Accept| header field or
      //    the |Sec-WebSocket-Accept| contains a value other than the
      //    base64-encoded SHA-1 of the concatenation of the |Sec-WebSocket-
      //    Key| (as a string, not base64-decoded) with the string "258EAFA5-
      //    E914-47DA-95CA-C5AB0DC85B11" but ignoring any leading and
      //    trailing whitespace, the client MUST _Fail the WebSocket
      //    Connection_.
      const secWSAccept = response.headersList.get('Sec-WebSocket-Accept')
      const digest = crypto.createHash('sha1').update(keyValue + uid).digest('base64')
      if (secWSAccept !== digest) {
        failWebsocketConnection(ws, 'Incorrect hash received in Sec-WebSocket-Accept header.')
        return
      }

      // 5. If the response includes a |Sec-WebSocket-Extensions| header
      //    field and this header field indicates the use of an extension
      //    that was not present in the client's handshake (the server has
      //    indicated an extension not requested by the client), the client
      //    MUST _Fail the WebSocket Connection_.  (The parsing of this
      //    header field to determine which extensions are requested is
      //    discussed in Section 9.1.)
      const secExtension = response.headersList.get('Sec-WebSocket-Extensions')

      if (secExtension !== null && secExtension !== permessageDeflate) {
        failWebsocketConnection(ws, 'Received different permessage-deflate than the one set.')
        return
      }

      // 6. If the response includes a |Sec-WebSocket-Protocol| header field
      //    and this header field indicates the use of a subprotocol that was
      //    not present in the client's handshake (the server has indicated a
      //    subprotocol not requested by the client), the client MUST _Fail
      //    the WebSocket Connection_.
      const secProtocol = response.headersList.get('Sec-WebSocket-Protocol')

      if (secProtocol !== null && secProtocol !== request.headersList.get('Sec-WebSocket-Protocol')) {
        failWebsocketConnection(ws, 'Protocol was not set in the opening handshake.')
        return
      }

      response.socket.on('data', onSocketData)
      response.socket.on('close', onSocketClose)
      response.socket.on('error', onSocketError)

      if (channels.open.hasSubscribers) {
        channels.open.publish({
          address: response.socket.address(),
          protocol: secProtocol,
          extensions: secExtension
        })
      }

      onEstablish(response)
    }
  })

  return controller
}

/**
 * @param {Buffer} chunk
 */
function onSocketData (chunk) {
  if (!this.ws[kByteParser].write(chunk)) {
    this.pause()
  }
}

/**
 * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
 * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.4
 */
function onSocketClose () {
  const { ws } = this

  // If the TCP connection was closed after the
  // WebSocket closing handshake was completed, the WebSocket connection
  // is said to have been closed _cleanly_.
  const wasClean = ws[kSentClose] && ws[kReceivedClose]

  let code = 1005
  let reason = ''

  const result = ws[kByteParser].closingInfo

  if (result) {
    code = result.code ?? 1005
    reason = result.reason
  } else if (!ws[kSentClose]) {
    // If _The WebSocket
    // Connection is Closed_ and no Close control frame was received by the
    // endpoint (such as could occur if the underlying transport connection
    // is lost), _The WebSocket Connection Close Code_ is considered to be
    // 1006.
    code = 1006
  }

  // 1. Change the ready state to CLOSED (3).
  ws[kReadyState] = states.CLOSED

  // 2. If the user agent was required to fail the WebSocket
  //    connection, or if the WebSocket connection was closed
  //    after being flagged as full, fire an event named error
  //    at the WebSocket object.
  // TODO

  // 3. Fire an event named close at the WebSocket object,
  //    using CloseEvent, with the wasClean attribute
  //    initialized to true if the connection closed cleanly
  //    and false otherwise, the code attribute initialized to
  //    the WebSocket connection close code, and the reason
  //    attribute initialized to the result of applying UTF-8
  //    decode without BOM to the WebSocket connection close
  //    reason.
  fireEvent('close', ws, CloseEvent, {
    wasClean, code, reason
  })

  if (channels.close.hasSubscribers) {
    channels.close.publish({
      websocket: ws,
      code,
      reason
    })
  }
}

function onSocketError (error) {
  const { ws } = this

  ws[kReadyState] = states.CLOSING

  if (channels.socketError.hasSubscribers) {
    channels.socketError.publish(error)
  }

  this.destroy()
}

module.exports = {
  establishWebSocketConnection
}


/***/ }),

/***/ 9188:
/***/ ((module) => {



// This is a Globally Unique Identifier unique used
// to validate that the endpoint accepts websocket
// connections.
// See https://www.rfc-editor.org/rfc/rfc6455.html#section-1.3
const uid = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11'

/** @type {PropertyDescriptor} */
const staticPropertyDescriptors = {
  enumerable: true,
  writable: false,
  configurable: false
}

const states = {
  CONNECTING: 0,
  OPEN: 1,
  CLOSING: 2,
  CLOSED: 3
}

const opcodes = {
  CONTINUATION: 0x0,
  TEXT: 0x1,
  BINARY: 0x2,
  CLOSE: 0x8,
  PING: 0x9,
  PONG: 0xA
}

const maxUnsigned16Bit = 2 ** 16 - 1 // 65535

const parserStates = {
  INFO: 0,
  PAYLOADLENGTH_16: 2,
  PAYLOADLENGTH_64: 3,
  READ_DATA: 4
}

const emptyBuffer = Buffer.allocUnsafe(0)

module.exports = {
  uid,
  staticPropertyDescriptors,
  states,
  opcodes,
  maxUnsigned16Bit,
  parserStates,
  emptyBuffer
}


/***/ }),

/***/ 2611:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { webidl } = __nccwpck_require__(1744)
const { kEnumerableProperty } = __nccwpck_require__(3983)
const { MessagePort } = __nccwpck_require__(1267)

/**
 * @see https://html.spec.whatwg.org/multipage/comms.html#messageevent
 */
class MessageEvent extends Event {
  #eventInit

  constructor (type, eventInitDict = {}) {
    webidl.argumentLengthCheck(arguments, 1, { header: 'MessageEvent constructor' })

    type = webidl.converters.DOMString(type)
    eventInitDict = webidl.converters.MessageEventInit(eventInitDict)

    super(type, eventInitDict)

    this.#eventInit = eventInitDict
  }

  get data () {
    webidl.brandCheck(this, MessageEvent)

    return this.#eventInit.data
  }

  get origin () {
    webidl.brandCheck(this, MessageEvent)

    return this.#eventInit.origin
  }

  get lastEventId () {
    webidl.brandCheck(this, MessageEvent)

    return this.#eventInit.lastEventId
  }

  get source () {
    webidl.brandCheck(this, MessageEvent)

    return this.#eventInit.source
  }

  get ports () {
    webidl.brandCheck(this, MessageEvent)

    if (!Object.isFrozen(this.#eventInit.ports)) {
      Object.freeze(this.#eventInit.ports)
    }

    return this.#eventInit.ports
  }

  initMessageEvent (
    type,
    bubbles = false,
    cancelable = false,
    data = null,
    origin = '',
    lastEventId = '',
    source = null,
    ports = []
  ) {
    webidl.brandCheck(this, MessageEvent)

    webidl.argumentLengthCheck(arguments, 1, { header: 'MessageEvent.initMessageEvent' })

    return new MessageEvent(type, {
      bubbles, cancelable, data, origin, lastEventId, source, ports
    })
  }
}

/**
 * @see https://websockets.spec.whatwg.org/#the-closeevent-interface
 */
class CloseEvent extends Event {
  #eventInit

  constructor (type, eventInitDict = {}) {
    webidl.argumentLengthCheck(arguments, 1, { header: 'CloseEvent constructor' })

    type = webidl.converters.DOMString(type)
    eventInitDict = webidl.converters.CloseEventInit(eventInitDict)

    super(type, eventInitDict)

    this.#eventInit = eventInitDict
  }

  get wasClean () {
    webidl.brandCheck(this, CloseEvent)

    return this.#eventInit.wasClean
  }

  get code () {
    webidl.brandCheck(this, CloseEvent)

    return this.#eventInit.code
  }

  get reason () {
    webidl.brandCheck(this, CloseEvent)

    return this.#eventInit.reason
  }
}

// https://html.spec.whatwg.org/multipage/webappapis.html#the-errorevent-interface
class ErrorEvent extends Event {
  #eventInit

  constructor (type, eventInitDict) {
    webidl.argumentLengthCheck(arguments, 1, { header: 'ErrorEvent constructor' })

    super(type, eventInitDict)

    type = webidl.converters.DOMString(type)
    eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {})

    this.#eventInit = eventInitDict
  }

  get message () {
    webidl.brandCheck(this, ErrorEvent)

    return this.#eventInit.message
  }

  get filename () {
    webidl.brandCheck(this, ErrorEvent)

    return this.#eventInit.filename
  }

  get lineno () {
    webidl.brandCheck(this, ErrorEvent)

    return this.#eventInit.lineno
  }

  get colno () {
    webidl.brandCheck(this, ErrorEvent)

    return this.#eventInit.colno
  }

  get error () {
    webidl.brandCheck(this, ErrorEvent)

    return this.#eventInit.error
  }
}

Object.defineProperties(MessageEvent.prototype, {
  [Symbol.toStringTag]: {
    value: 'MessageEvent',
    configurable: true
  },
  data: kEnumerableProperty,
  origin: kEnumerableProperty,
  lastEventId: kEnumerableProperty,
  source: kEnumerableProperty,
  ports: kEnumerableProperty,
  initMessageEvent: kEnumerableProperty
})

Object.defineProperties(CloseEvent.prototype, {
  [Symbol.toStringTag]: {
    value: 'CloseEvent',
    configurable: true
  },
  reason: kEnumerableProperty,
  code: kEnumerableProperty,
  wasClean: kEnumerableProperty
})

Object.defineProperties(ErrorEvent.prototype, {
  [Symbol.toStringTag]: {
    value: 'ErrorEvent',
    configurable: true
  },
  message: kEnumerableProperty,
  filename: kEnumerableProperty,
  lineno: kEnumerableProperty,
  colno: kEnumerableProperty,
  error: kEnumerableProperty
})

webidl.converters.MessagePort = webidl.interfaceConverter(MessagePort)

webidl.converters['sequence<MessagePort>'] = webidl.sequenceConverter(
  webidl.converters.MessagePort
)

const eventInit = [
  {
    key: 'bubbles',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'cancelable',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'composed',
    converter: webidl.converters.boolean,
    defaultValue: false
  }
]

webidl.converters.MessageEventInit = webidl.dictionaryConverter([
  ...eventInit,
  {
    key: 'data',
    converter: webidl.converters.any,
    defaultValue: null
  },
  {
    key: 'origin',
    converter: webidl.converters.USVString,
    defaultValue: ''
  },
  {
    key: 'lastEventId',
    converter: webidl.converters.DOMString,
    defaultValue: ''
  },
  {
    key: 'source',
    // Node doesn't implement WindowProxy or ServiceWorker, so the only
    // valid value for source is a MessagePort.
    converter: webidl.nullableConverter(webidl.converters.MessagePort),
    defaultValue: null
  },
  {
    key: 'ports',
    converter: webidl.converters['sequence<MessagePort>'],
    get defaultValue () {
      return []
    }
  }
])

webidl.converters.CloseEventInit = webidl.dictionaryConverter([
  ...eventInit,
  {
    key: 'wasClean',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'code',
    converter: webidl.converters['unsigned short'],
    defaultValue: 0
  },
  {
    key: 'reason',
    converter: webidl.converters.USVString,
    defaultValue: ''
  }
])

webidl.converters.ErrorEventInit = webidl.dictionaryConverter([
  ...eventInit,
  {
    key: 'message',
    converter: webidl.converters.DOMString,
    defaultValue: ''
  },
  {
    key: 'filename',
    converter: webidl.converters.USVString,
    defaultValue: ''
  },
  {
    key: 'lineno',
    converter: webidl.converters['unsigned long'],
    defaultValue: 0
  },
  {
    key: 'colno',
    converter: webidl.converters['unsigned long'],
    defaultValue: 0
  },
  {
    key: 'error',
    converter: webidl.converters.any
  }
])

module.exports = {
  MessageEvent,
  CloseEvent,
  ErrorEvent
}


/***/ }),

/***/ 5444:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { maxUnsigned16Bit } = __nccwpck_require__(9188)

/** @type {import('crypto')} */
let crypto
try {
  crypto = __nccwpck_require__(6113)
} catch {

}

class WebsocketFrameSend {
  /**
   * @param {Buffer|undefined} data
   */
  constructor (data) {
    this.frameData = data
    this.maskKey = crypto.randomBytes(4)
  }

  createFrame (opcode) {
    const bodyLength = this.frameData?.byteLength ?? 0

    /** @type {number} */
    let payloadLength = bodyLength // 0-125
    let offset = 6

    if (bodyLength > maxUnsigned16Bit) {
      offset += 8 // payload length is next 8 bytes
      payloadLength = 127
    } else if (bodyLength > 125) {
      offset += 2 // payload length is next 2 bytes
      payloadLength = 126
    }

    const buffer = Buffer.allocUnsafe(bodyLength + offset)

    // Clear first 2 bytes, everything else is overwritten
    buffer[0] = buffer[1] = 0
    buffer[0] |= 0x80 // FIN
    buffer[0] = (buffer[0] & 0xF0) + opcode // opcode

    /*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */
    buffer[offset - 4] = this.maskKey[0]
    buffer[offset - 3] = this.maskKey[1]
    buffer[offset - 2] = this.maskKey[2]
    buffer[offset - 1] = this.maskKey[3]

    buffer[1] = payloadLength

    if (payloadLength === 126) {
      buffer.writeUInt16BE(bodyLength, 2)
    } else if (payloadLength === 127) {
      // Clear extended payload length
      buffer[2] = buffer[3] = 0
      buffer.writeUIntBE(bodyLength, 4, 6)
    }

    buffer[1] |= 0x80 // MASK

    // mask body
    for (let i = 0; i < bodyLength; i++) {
      buffer[offset + i] = this.frameData[i] ^ this.maskKey[i % 4]
    }

    return buffer
  }
}

module.exports = {
  WebsocketFrameSend
}


/***/ }),

/***/ 1688:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { Writable } = __nccwpck_require__(2781)
const diagnosticsChannel = __nccwpck_require__(7643)
const { parserStates, opcodes, states, emptyBuffer } = __nccwpck_require__(9188)
const { kReadyState, kSentClose, kResponse, kReceivedClose } = __nccwpck_require__(7578)
const { isValidStatusCode, failWebsocketConnection, websocketMessageReceived } = __nccwpck_require__(5515)
const { WebsocketFrameSend } = __nccwpck_require__(5444)

// This code was influenced by ws released under the MIT license.
// Copyright (c) 2011 Einar Otto Stangvik <einaros@gmail.com>
// Copyright (c) 2013 Arnout Kazemier and contributors
// Copyright (c) 2016 Luigi Pinca and contributors

const channels = {}
channels.ping = diagnosticsChannel.channel('undici:websocket:ping')
channels.pong = diagnosticsChannel.channel('undici:websocket:pong')

class ByteParser extends Writable {
  #buffers = []
  #byteOffset = 0

  #state = parserStates.INFO

  #info = {}
  #fragments = []

  constructor (ws) {
    super()

    this.ws = ws
  }

  /**
   * @param {Buffer} chunk
   * @param {() => void} callback
   */
  _write (chunk, _, callback) {
    this.#buffers.push(chunk)
    this.#byteOffset += chunk.length

    this.run(callback)
  }

  /**
   * Runs whenever a new chunk is received.
   * Callback is called whenever there are no more chunks buffering,
   * or not enough bytes are buffered to parse.
   */
  run (callback) {
    while (true) {
      if (this.#state === parserStates.INFO) {
        // If there aren't enough bytes to parse the payload length, etc.
        if (this.#byteOffset < 2) {
          return callback()
        }

        const buffer = this.consume(2)

        this.#info.fin = (buffer[0] & 0x80) !== 0
        this.#info.opcode = buffer[0] & 0x0F

        // If we receive a fragmented message, we use the type of the first
        // frame to parse the full message as binary/text, when it's terminated
        this.#info.originalOpcode ??= this.#info.opcode

        this.#info.fragmented = !this.#info.fin && this.#info.opcode !== opcodes.CONTINUATION

        if (this.#info.fragmented && this.#info.opcode !== opcodes.BINARY && this.#info.opcode !== opcodes.TEXT) {
          // Only text and binary frames can be fragmented
          failWebsocketConnection(this.ws, 'Invalid frame type was fragmented.')
          return
        }

        const payloadLength = buffer[1] & 0x7F

        if (payloadLength <= 125) {
          this.#info.payloadLength = payloadLength
          this.#state = parserStates.READ_DATA
        } else if (payloadLength === 126) {
          this.#state = parserStates.PAYLOADLENGTH_16
        } else if (payloadLength === 127) {
          this.#state = parserStates.PAYLOADLENGTH_64
        }

        if (this.#info.fragmented && payloadLength > 125) {
          // A fragmented frame can't be fragmented itself
          failWebsocketConnection(this.ws, 'Fragmented frame exceeded 125 bytes.')
          return
        } else if (
          (this.#info.opcode === opcodes.PING ||
            this.#info.opcode === opcodes.PONG ||
            this.#info.opcode === opcodes.CLOSE) &&
          payloadLength > 125
        ) {
          // Control frames can have a payload length of 125 bytes MAX
          failWebsocketConnection(this.ws, 'Payload length for control frame exceeded 125 bytes.')
          return
        } else if (this.#info.opcode === opcodes.CLOSE) {
          if (payloadLength === 1) {
            failWebsocketConnection(this.ws, 'Received close frame with a 1-byte body.')
            return
          }

          const body = this.consume(payloadLength)

          this.#info.closeInfo = this.parseCloseBody(false, body)

          if (!this.ws[kSentClose]) {
            // If an endpoint receives a Close frame and did not previously send a
            // Close frame, the endpoint MUST send a Close frame in response.  (When
            // sending a Close frame in response, the endpoint typically echos the
            // status code it received.)
            const body = Buffer.allocUnsafe(2)
            body.writeUInt16BE(this.#info.closeInfo.code, 0)
            const closeFrame = new WebsocketFrameSend(body)

            this.ws[kResponse].socket.write(
              closeFrame.createFrame(opcodes.CLOSE),
              (err) => {
                if (!err) {
                  this.ws[kSentClose] = true
                }
              }
            )
          }

          // Upon either sending or receiving a Close control frame, it is said
          // that _The WebSocket Closing Handshake is Started_ and that the
          // WebSocket connection is in the CLOSING state.
          this.ws[kReadyState] = states.CLOSING
          this.ws[kReceivedClose] = true

          this.end()

          return
        } else if (this.#info.opcode === opcodes.PING) {
          // Upon receipt of a Ping frame, an endpoint MUST send a Pong frame in
          // response, unless it already received a Close frame.
          // A Pong frame sent in response to a Ping frame must have identical
          // "Application data"

          const body = this.consume(payloadLength)

          if (!this.ws[kReceivedClose]) {
            const frame = new WebsocketFrameSend(body)

            this.ws[kResponse].socket.write(frame.createFrame(opcodes.PONG))

            if (channels.ping.hasSubscribers) {
              channels.ping.publish({
                payload: body
              })
            }
          }

          this.#state = parserStates.INFO

          if (this.#byteOffset > 0) {
            continue
          } else {
            callback()
            return
          }
        } else if (this.#info.opcode === opcodes.PONG) {
          // A Pong frame MAY be sent unsolicited.  This serves as a
          // unidirectional heartbeat.  A response to an unsolicited Pong frame is
          // not expected.

          const body = this.consume(payloadLength)

          if (channels.pong.hasSubscribers) {
            channels.pong.publish({
              payload: body
            })
          }

          if (this.#byteOffset > 0) {
            continue
          } else {
            callback()
            return
          }
        }
      } else if (this.#state === parserStates.PAYLOADLENGTH_16) {
        if (this.#byteOffset < 2) {
          return callback()
        }

        const buffer = this.consume(2)

        this.#info.payloadLength = buffer.readUInt16BE(0)
        this.#state = parserStates.READ_DATA
      } else if (this.#state === parserStates.PAYLOADLENGTH_64) {
        if (this.#byteOffset < 8) {
          return callback()
        }

        const buffer = this.consume(8)
        const upper = buffer.readUInt32BE(0)

        // 2^31 is the maxinimum bytes an arraybuffer can contain
        // on 32-bit systems. Although, on 64-bit systems, this is
        // 2^53-1 bytes.
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length
        // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/common/globals.h;drc=1946212ac0100668f14eb9e2843bdd846e510a1e;bpv=1;bpt=1;l=1275
        // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/js-array-buffer.h;l=34;drc=1946212ac0100668f14eb9e2843bdd846e510a1e
        if (upper > 2 ** 31 - 1) {
          failWebsocketConnection(this.ws, 'Received payload length > 2^31 bytes.')
          return
        }

        const lower = buffer.readUInt32BE(4)

        this.#info.payloadLength = (upper << 8) + lower
        this.#state = parserStates.READ_DATA
      } else if (this.#state === parserStates.READ_DATA) {
        if (this.#byteOffset < this.#info.payloadLength) {
          // If there is still more data in this chunk that needs to be read
          return callback()
        } else if (this.#byteOffset >= this.#info.payloadLength) {
          // If the server sent multiple frames in a single chunk

          const body = this.consume(this.#info.payloadLength)

          this.#fragments.push(body)

          // If the frame is unfragmented, or a fragmented frame was terminated,
          // a message was received
          if (!this.#info.fragmented || (this.#info.fin && this.#info.opcode === opcodes.CONTINUATION)) {
            const fullMessage = Buffer.concat(this.#fragments)

            websocketMessageReceived(this.ws, this.#info.originalOpcode, fullMessage)

            this.#info = {}
            this.#fragments.length = 0
          }

          this.#state = parserStates.INFO
        }
      }

      if (this.#byteOffset > 0) {
        continue
      } else {
        callback()
        break
      }
    }
  }

  /**
   * Take n bytes from the buffered Buffers
   * @param {number} n
   * @returns {Buffer|null}
   */
  consume (n) {
    if (n > this.#byteOffset) {
      return null
    } else if (n === 0) {
      return emptyBuffer
    }

    if (this.#buffers[0].length === n) {
      this.#byteOffset -= this.#buffers[0].length
      return this.#buffers.shift()
    }

    const buffer = Buffer.allocUnsafe(n)
    let offset = 0

    while (offset !== n) {
      const next = this.#buffers[0]
      const { length } = next

      if (length + offset === n) {
        buffer.set(this.#buffers.shift(), offset)
        break
      } else if (length + offset > n) {
        buffer.set(next.subarray(0, n - offset), offset)
        this.#buffers[0] = next.subarray(n - offset)
        break
      } else {
        buffer.set(this.#buffers.shift(), offset)
        offset += next.length
      }
    }

    this.#byteOffset -= n

    return buffer
  }

  parseCloseBody (onlyCode, data) {
    // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.5
    /** @type {number|undefined} */
    let code

    if (data.length >= 2) {
      // _The WebSocket Connection Close Code_ is
      // defined as the status code (Section 7.4) contained in the first Close
      // control frame received by the application
      code = data.readUInt16BE(0)
    }

    if (onlyCode) {
      if (!isValidStatusCode(code)) {
        return null
      }

      return { code }
    }

    // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.6
    /** @type {Buffer} */
    let reason = data.subarray(2)

    // Remove BOM
    if (reason[0] === 0xEF && reason[1] === 0xBB && reason[2] === 0xBF) {
      reason = reason.subarray(3)
    }

    if (code !== undefined && !isValidStatusCode(code)) {
      return null
    }

    try {
      // TODO: optimize this
      reason = new TextDecoder('utf-8', { fatal: true }).decode(reason)
    } catch {
      return null
    }

    return { code, reason }
  }

  get closingInfo () {
    return this.#info.closeInfo
  }
}

module.exports = {
  ByteParser
}


/***/ }),

/***/ 7578:
/***/ ((module) => {



module.exports = {
  kWebSocketURL: Symbol('url'),
  kReadyState: Symbol('ready state'),
  kController: Symbol('controller'),
  kResponse: Symbol('response'),
  kBinaryType: Symbol('binary type'),
  kSentClose: Symbol('sent close'),
  kReceivedClose: Symbol('received close'),
  kByteParser: Symbol('byte parser')
}


/***/ }),

/***/ 5515:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { kReadyState, kController, kResponse, kBinaryType, kWebSocketURL } = __nccwpck_require__(7578)
const { states, opcodes } = __nccwpck_require__(9188)
const { MessageEvent, ErrorEvent } = __nccwpck_require__(2611)

/* globals Blob */

/**
 * @param {import('./websocket').WebSocket} ws
 */
function isEstablished (ws) {
  // If the server's response is validated as provided for above, it is
  // said that _The WebSocket Connection is Established_ and that the
  // WebSocket Connection is in the OPEN state.
  return ws[kReadyState] === states.OPEN
}

/**
 * @param {import('./websocket').WebSocket} ws
 */
function isClosing (ws) {
  // Upon either sending or receiving a Close control frame, it is said
  // that _The WebSocket Closing Handshake is Started_ and that the
  // WebSocket connection is in the CLOSING state.
  return ws[kReadyState] === states.CLOSING
}

/**
 * @param {import('./websocket').WebSocket} ws
 */
function isClosed (ws) {
  return ws[kReadyState] === states.CLOSED
}

/**
 * @see https://dom.spec.whatwg.org/#concept-event-fire
 * @param {string} e
 * @param {EventTarget} target
 * @param {EventInit | undefined} eventInitDict
 */
function fireEvent (e, target, eventConstructor = Event, eventInitDict) {
  // 1. If eventConstructor is not given, then let eventConstructor be Event.

  // 2. Let event be the result of creating an event given eventConstructor,
  //    in the relevant realm of target.
  // 3. Initialize event’s type attribute to e.
  const event = new eventConstructor(e, eventInitDict) // eslint-disable-line new-cap

  // 4. Initialize any other IDL attributes of event as described in the
  //    invocation of this algorithm.

  // 5. Return the result of dispatching event at target, with legacy target
  //    override flag set if set.
  target.dispatchEvent(event)
}

/**
 * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
 * @param {import('./websocket').WebSocket} ws
 * @param {number} type Opcode
 * @param {Buffer} data application data
 */
function websocketMessageReceived (ws, type, data) {
  // 1. If ready state is not OPEN (1), then return.
  if (ws[kReadyState] !== states.OPEN) {
    return
  }

  // 2. Let dataForEvent be determined by switching on type and binary type:
  let dataForEvent

  if (type === opcodes.TEXT) {
    // -> type indicates that the data is Text
    //      a new DOMString containing data
    try {
      dataForEvent = new TextDecoder('utf-8', { fatal: true }).decode(data)
    } catch {
      failWebsocketConnection(ws, 'Received invalid UTF-8 in text frame.')
      return
    }
  } else if (type === opcodes.BINARY) {
    if (ws[kBinaryType] === 'blob') {
      // -> type indicates that the data is Binary and binary type is "blob"
      //      a new Blob object, created in the relevant Realm of the WebSocket
      //      object, that represents data as its raw data
      dataForEvent = new Blob([data])
    } else {
      // -> type indicates that the data is Binary and binary type is "arraybuffer"
      //      a new ArrayBuffer object, created in the relevant Realm of the
      //      WebSocket object, whose contents are data
      dataForEvent = new Uint8Array(data).buffer
    }
  }

  // 3. Fire an event named message at the WebSocket object, using MessageEvent,
  //    with the origin attribute initialized to the serialization of the WebSocket
  //    object’s url's origin, and the data attribute initialized to dataForEvent.
  fireEvent('message', ws, MessageEvent, {
    origin: ws[kWebSocketURL].origin,
    data: dataForEvent
  })
}

/**
 * @see https://datatracker.ietf.org/doc/html/rfc6455
 * @see https://datatracker.ietf.org/doc/html/rfc2616
 * @see https://bugs.chromium.org/p/chromium/issues/detail?id=398407
 * @param {string} protocol
 */
function isValidSubprotocol (protocol) {
  // If present, this value indicates one
  // or more comma-separated subprotocol the client wishes to speak,
  // ordered by preference.  The elements that comprise this value
  // MUST be non-empty strings with characters in the range U+0021 to
  // U+007E not including separator characters as defined in
  // [RFC2616] and MUST all be unique strings.
  if (protocol.length === 0) {
    return false
  }

  for (const char of protocol) {
    const code = char.charCodeAt(0)

    if (
      code < 0x21 ||
      code > 0x7E ||
      char === '(' ||
      char === ')' ||
      char === '<' ||
      char === '>' ||
      char === '@' ||
      char === ',' ||
      char === ';' ||
      char === ':' ||
      char === '\\' ||
      char === '"' ||
      char === '/' ||
      char === '[' ||
      char === ']' ||
      char === '?' ||
      char === '=' ||
      char === '{' ||
      char === '}' ||
      code === 32 || // SP
      code === 9 // HT
    ) {
      return false
    }
  }

  return true
}

/**
 * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7-4
 * @param {number} code
 */
function isValidStatusCode (code) {
  if (code >= 1000 && code < 1015) {
    return (
      code !== 1004 && // reserved
      code !== 1005 && // "MUST NOT be set as a status code"
      code !== 1006 // "MUST NOT be set as a status code"
    )
  }

  return code >= 3000 && code <= 4999
}

/**
 * @param {import('./websocket').WebSocket} ws
 * @param {string|undefined} reason
 */
function failWebsocketConnection (ws, reason) {
  const { [kController]: controller, [kResponse]: response } = ws

  controller.abort()

  if (response?.socket && !response.socket.destroyed) {
    response.socket.destroy()
  }

  if (reason) {
    fireEvent('error', ws, ErrorEvent, {
      error: new Error(reason)
    })
  }
}

module.exports = {
  isEstablished,
  isClosing,
  isClosed,
  fireEvent,
  isValidSubprotocol,
  isValidStatusCode,
  failWebsocketConnection,
  websocketMessageReceived
}


/***/ }),

/***/ 4284:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { webidl } = __nccwpck_require__(1744)
const { DOMException } = __nccwpck_require__(1037)
const { URLSerializer } = __nccwpck_require__(685)
const { getGlobalOrigin } = __nccwpck_require__(1246)
const { staticPropertyDescriptors, states, opcodes, emptyBuffer } = __nccwpck_require__(9188)
const {
  kWebSocketURL,
  kReadyState,
  kController,
  kBinaryType,
  kResponse,
  kSentClose,
  kByteParser
} = __nccwpck_require__(7578)
const { isEstablished, isClosing, isValidSubprotocol, failWebsocketConnection, fireEvent } = __nccwpck_require__(5515)
const { establishWebSocketConnection } = __nccwpck_require__(5354)
const { WebsocketFrameSend } = __nccwpck_require__(5444)
const { ByteParser } = __nccwpck_require__(1688)
const { kEnumerableProperty, isBlobLike } = __nccwpck_require__(3983)
const { getGlobalDispatcher } = __nccwpck_require__(1892)
const { types } = __nccwpck_require__(3837)

let experimentalWarned = false

// https://websockets.spec.whatwg.org/#interface-definition
class WebSocket extends EventTarget {
  #events = {
    open: null,
    error: null,
    close: null,
    message: null
  }

  #bufferedAmount = 0
  #protocol = ''
  #extensions = ''

  /**
   * @param {string} url
   * @param {string|string[]} protocols
   */
  constructor (url, protocols = []) {
    super()

    webidl.argumentLengthCheck(arguments, 1, { header: 'WebSocket constructor' })

    if (!experimentalWarned) {
      experimentalWarned = true
      process.emitWarning('WebSockets are experimental, expect them to change at any time.', {
        code: 'UNDICI-WS'
      })
    }

    const options = webidl.converters['DOMString or sequence<DOMString> or WebSocketInit'](protocols)

    url = webidl.converters.USVString(url)
    protocols = options.protocols

    // 1. Let baseURL be this's relevant settings object's API base URL.
    const baseURL = getGlobalOrigin()

    // 1. Let urlRecord be the result of applying the URL parser to url with baseURL.
    let urlRecord

    try {
      urlRecord = new URL(url, baseURL)
    } catch (e) {
      // 3. If urlRecord is failure, then throw a "SyntaxError" DOMException.
      throw new DOMException(e, 'SyntaxError')
    }

    // 4. If urlRecord’s scheme is "http", then set urlRecord’s scheme to "ws".
    if (urlRecord.protocol === 'http:') {
      urlRecord.protocol = 'ws:'
    } else if (urlRecord.protocol === 'https:') {
      // 5. Otherwise, if urlRecord’s scheme is "https", set urlRecord’s scheme to "wss".
      urlRecord.protocol = 'wss:'
    }

    // 6. If urlRecord’s scheme is not "ws" or "wss", then throw a "SyntaxError" DOMException.
    if (urlRecord.protocol !== 'ws:' && urlRecord.protocol !== 'wss:') {
      throw new DOMException(
        `Expected a ws: or wss: protocol, got ${urlRecord.protocol}`,
        'SyntaxError'
      )
    }

    // 7. If urlRecord’s fragment is non-null, then throw a "SyntaxError"
    //    DOMException.
    if (urlRecord.hash || urlRecord.href.endsWith('#')) {
      throw new DOMException('Got fragment', 'SyntaxError')
    }

    // 8. If protocols is a string, set protocols to a sequence consisting
    //    of just that string.
    if (typeof protocols === 'string') {
      protocols = [protocols]
    }

    // 9. If any of the values in protocols occur more than once or otherwise
    //    fail to match the requirements for elements that comprise the value
    //    of `Sec-WebSocket-Protocol` fields as defined by The WebSocket
    //    protocol, then throw a "SyntaxError" DOMException.
    if (protocols.length !== new Set(protocols.map(p => p.toLowerCase())).size) {
      throw new DOMException('Invalid Sec-WebSocket-Protocol value', 'SyntaxError')
    }

    if (protocols.length > 0 && !protocols.every(p => isValidSubprotocol(p))) {
      throw new DOMException('Invalid Sec-WebSocket-Protocol value', 'SyntaxError')
    }

    // 10. Set this's url to urlRecord.
    this[kWebSocketURL] = new URL(urlRecord.href)

    // 11. Let client be this's relevant settings object.

    // 12. Run this step in parallel:

    //    1. Establish a WebSocket connection given urlRecord, protocols,
    //       and client.
    this[kController] = establishWebSocketConnection(
      urlRecord,
      protocols,
      this,
      (response) => this.#onConnectionEstablished(response),
      options
    )

    // Each WebSocket object has an associated ready state, which is a
    // number representing the state of the connection. Initially it must
    // be CONNECTING (0).
    this[kReadyState] = WebSocket.CONNECTING

    // The extensions attribute must initially return the empty string.

    // The protocol attribute must initially return the empty string.

    // Each WebSocket object has an associated binary type, which is a
    // BinaryType. Initially it must be "blob".
    this[kBinaryType] = 'blob'
  }

  /**
   * @see https://websockets.spec.whatwg.org/#dom-websocket-close
   * @param {number|undefined} code
   * @param {string|undefined} reason
   */
  close (code = undefined, reason = undefined) {
    webidl.brandCheck(this, WebSocket)

    if (code !== undefined) {
      code = webidl.converters['unsigned short'](code, { clamp: true })
    }

    if (reason !== undefined) {
      reason = webidl.converters.USVString(reason)
    }

    // 1. If code is present, but is neither an integer equal to 1000 nor an
    //    integer in the range 3000 to 4999, inclusive, throw an
    //    "InvalidAccessError" DOMException.
    if (code !== undefined) {
      if (code !== 1000 && (code < 3000 || code > 4999)) {
        throw new DOMException('invalid code', 'InvalidAccessError')
      }
    }

    let reasonByteLength = 0

    // 2. If reason is present, then run these substeps:
    if (reason !== undefined) {
      // 1. Let reasonBytes be the result of encoding reason.
      // 2. If reasonBytes is longer than 123 bytes, then throw a
      //    "SyntaxError" DOMException.
      reasonByteLength = Buffer.byteLength(reason)

      if (reasonByteLength > 123) {
        throw new DOMException(
          `Reason must be less than 123 bytes; received ${reasonByteLength}`,
          'SyntaxError'
        )
      }
    }

    // 3. Run the first matching steps from the following list:
    if (this[kReadyState] === WebSocket.CLOSING || this[kReadyState] === WebSocket.CLOSED) {
      // If this's ready state is CLOSING (2) or CLOSED (3)
      // Do nothing.
    } else if (!isEstablished(this)) {
      // If the WebSocket connection is not yet established
      // Fail the WebSocket connection and set this's ready state
      // to CLOSING (2).
      failWebsocketConnection(this, 'Connection was closed before it was established.')
      this[kReadyState] = WebSocket.CLOSING
    } else if (!isClosing(this)) {
      // If the WebSocket closing handshake has not yet been started
      // Start the WebSocket closing handshake and set this's ready
      // state to CLOSING (2).
      // - If neither code nor reason is present, the WebSocket Close
      //   message must not have a body.
      // - If code is present, then the status code to use in the
      //   WebSocket Close message must be the integer given by code.
      // - If reason is also present, then reasonBytes must be
      //   provided in the Close message after the status code.

      const frame = new WebsocketFrameSend()

      // If neither code nor reason is present, the WebSocket Close
      // message must not have a body.

      // If code is present, then the status code to use in the
      // WebSocket Close message must be the integer given by code.
      if (code !== undefined && reason === undefined) {
        frame.frameData = Buffer.allocUnsafe(2)
        frame.frameData.writeUInt16BE(code, 0)
      } else if (code !== undefined && reason !== undefined) {
        // If reason is also present, then reasonBytes must be
        // provided in the Close message after the status code.
        frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength)
        frame.frameData.writeUInt16BE(code, 0)
        // the body MAY contain UTF-8-encoded data with value /reason/
        frame.frameData.write(reason, 2, 'utf-8')
      } else {
        frame.frameData = emptyBuffer
      }

      /** @type {import('stream').Duplex} */
      const socket = this[kResponse].socket

      socket.write(frame.createFrame(opcodes.CLOSE), (err) => {
        if (!err) {
          this[kSentClose] = true
        }
      })

      // Upon either sending or receiving a Close control frame, it is said
      // that _The WebSocket Closing Handshake is Started_ and that the
      // WebSocket connection is in the CLOSING state.
      this[kReadyState] = states.CLOSING
    } else {
      // Otherwise
      // Set this's ready state to CLOSING (2).
      this[kReadyState] = WebSocket.CLOSING
    }
  }

  /**
   * @see https://websockets.spec.whatwg.org/#dom-websocket-send
   * @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data
   */
  send (data) {
    webidl.brandCheck(this, WebSocket)

    webidl.argumentLengthCheck(arguments, 1, { header: 'WebSocket.send' })

    data = webidl.converters.WebSocketSendData(data)

    // 1. If this's ready state is CONNECTING, then throw an
    //    "InvalidStateError" DOMException.
    if (this[kReadyState] === WebSocket.CONNECTING) {
      throw new DOMException('Sent before connected.', 'InvalidStateError')
    }

    // 2. Run the appropriate set of steps from the following list:
    // https://datatracker.ietf.org/doc/html/rfc6455#section-6.1
    // https://datatracker.ietf.org/doc/html/rfc6455#section-5.2

    if (!isEstablished(this) || isClosing(this)) {
      return
    }

    /** @type {import('stream').Duplex} */
    const socket = this[kResponse].socket

    // If data is a string
    if (typeof data === 'string') {
      // If the WebSocket connection is established and the WebSocket
      // closing handshake has not yet started, then the user agent
      // must send a WebSocket Message comprised of the data argument
      // using a text frame opcode; if the data cannot be sent, e.g.
      // because it would need to be buffered but the buffer is full,
      // the user agent must flag the WebSocket as full and then close
      // the WebSocket connection. Any invocation of this method with a
      // string argument that does not throw an exception must increase
      // the bufferedAmount attribute by the number of bytes needed to
      // express the argument as UTF-8.

      const value = Buffer.from(data)
      const frame = new WebsocketFrameSend(value)
      const buffer = frame.createFrame(opcodes.TEXT)

      this.#bufferedAmount += value.byteLength
      socket.write(buffer, () => {
        this.#bufferedAmount -= value.byteLength
      })
    } else if (types.isArrayBuffer(data)) {
      // If the WebSocket connection is established, and the WebSocket
      // closing handshake has not yet started, then the user agent must
      // send a WebSocket Message comprised of data using a binary frame
      // opcode; if the data cannot be sent, e.g. because it would need
      // to be buffered but the buffer is full, the user agent must flag
      // the WebSocket as full and then close the WebSocket connection.
      // The data to be sent is the data stored in the buffer described
      // by the ArrayBuffer object. Any invocation of this method with an
      // ArrayBuffer argument that does not throw an exception must
      // increase the bufferedAmount attribute by the length of the
      // ArrayBuffer in bytes.

      const value = Buffer.from(data)
      const frame = new WebsocketFrameSend(value)
      const buffer = frame.createFrame(opcodes.BINARY)

      this.#bufferedAmount += value.byteLength
      socket.write(buffer, () => {
        this.#bufferedAmount -= value.byteLength
      })
    } else if (ArrayBuffer.isView(data)) {
      // If the WebSocket connection is established, and the WebSocket
      // closing handshake has not yet started, then the user agent must
      // send a WebSocket Message comprised of data using a binary frame
      // opcode; if the data cannot be sent, e.g. because it would need to
      // be buffered but the buffer is full, the user agent must flag the
      // WebSocket as full and then close the WebSocket connection. The
      // data to be sent is the data stored in the section of the buffer
      // described by the ArrayBuffer object that data references. Any
      // invocation of this method with this kind of argument that does
      // not throw an exception must increase the bufferedAmount attribute
      // by the length of data’s buffer in bytes.

      const ab = Buffer.from(data, data.byteOffset, data.byteLength)

      const frame = new WebsocketFrameSend(ab)
      const buffer = frame.createFrame(opcodes.BINARY)

      this.#bufferedAmount += ab.byteLength
      socket.write(buffer, () => {
        this.#bufferedAmount -= ab.byteLength
      })
    } else if (isBlobLike(data)) {
      // If the WebSocket connection is established, and the WebSocket
      // closing handshake has not yet started, then the user agent must
      // send a WebSocket Message comprised of data using a binary frame
      // opcode; if the data cannot be sent, e.g. because it would need to
      // be buffered but the buffer is full, the user agent must flag the
      // WebSocket as full and then close the WebSocket connection. The data
      // to be sent is the raw data represented by the Blob object. Any
      // invocation of this method with a Blob argument that does not throw
      // an exception must increase the bufferedAmount attribute by the size
      // of the Blob object’s raw data, in bytes.

      const frame = new WebsocketFrameSend()

      data.arrayBuffer().then((ab) => {
        const value = Buffer.from(ab)
        frame.frameData = value
        const buffer = frame.createFrame(opcodes.BINARY)

        this.#bufferedAmount += value.byteLength
        socket.write(buffer, () => {
          this.#bufferedAmount -= value.byteLength
        })
      })
    }
  }

  get readyState () {
    webidl.brandCheck(this, WebSocket)

    // The readyState getter steps are to return this's ready state.
    return this[kReadyState]
  }

  get bufferedAmount () {
    webidl.brandCheck(this, WebSocket)

    return this.#bufferedAmount
  }

  get url () {
    webidl.brandCheck(this, WebSocket)

    // The url getter steps are to return this's url, serialized.
    return URLSerializer(this[kWebSocketURL])
  }

  get extensions () {
    webidl.brandCheck(this, WebSocket)

    return this.#extensions
  }

  get protocol () {
    webidl.brandCheck(this, WebSocket)

    return this.#protocol
  }

  get onopen () {
    webidl.brandCheck(this, WebSocket)

    return this.#events.open
  }

  set onopen (fn) {
    webidl.brandCheck(this, WebSocket)

    if (this.#events.open) {
      this.removeEventListener('open', this.#events.open)
    }

    if (typeof fn === 'function') {
      this.#events.open = fn
      this.addEventListener('open', fn)
    } else {
      this.#events.open = null
    }
  }

  get onerror () {
    webidl.brandCheck(this, WebSocket)

    return this.#events.error
  }

  set onerror (fn) {
    webidl.brandCheck(this, WebSocket)

    if (this.#events.error) {
      this.removeEventListener('error', this.#events.error)
    }

    if (typeof fn === 'function') {
      this.#events.error = fn
      this.addEventListener('error', fn)
    } else {
      this.#events.error = null
    }
  }

  get onclose () {
    webidl.brandCheck(this, WebSocket)

    return this.#events.close
  }

  set onclose (fn) {
    webidl.brandCheck(this, WebSocket)

    if (this.#events.close) {
      this.removeEventListener('close', this.#events.close)
    }

    if (typeof fn === 'function') {
      this.#events.close = fn
      this.addEventListener('close', fn)
    } else {
      this.#events.close = null
    }
  }

  get onmessage () {
    webidl.brandCheck(this, WebSocket)

    return this.#events.message
  }

  set onmessage (fn) {
    webidl.brandCheck(this, WebSocket)

    if (this.#events.message) {
      this.removeEventListener('message', this.#events.message)
    }

    if (typeof fn === 'function') {
      this.#events.message = fn
      this.addEventListener('message', fn)
    } else {
      this.#events.message = null
    }
  }

  get binaryType () {
    webidl.brandCheck(this, WebSocket)

    return this[kBinaryType]
  }

  set binaryType (type) {
    webidl.brandCheck(this, WebSocket)

    if (type !== 'blob' && type !== 'arraybuffer') {
      this[kBinaryType] = 'blob'
    } else {
      this[kBinaryType] = type
    }
  }

  /**
   * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
   */
  #onConnectionEstablished (response) {
    // processResponse is called when the "response’s header list has been received and initialized."
    // once this happens, the connection is open
    this[kResponse] = response

    const parser = new ByteParser(this)
    parser.on('drain', function onParserDrain () {
      this.ws[kResponse].socket.resume()
    })

    response.socket.ws = this
    this[kByteParser] = parser

    // 1. Change the ready state to OPEN (1).
    this[kReadyState] = states.OPEN

    // 2. Change the extensions attribute’s value to the extensions in use, if
    //    it is not the null value.
    // https://datatracker.ietf.org/doc/html/rfc6455#section-9.1
    const extensions = response.headersList.get('sec-websocket-extensions')

    if (extensions !== null) {
      this.#extensions = extensions
    }

    // 3. Change the protocol attribute’s value to the subprotocol in use, if
    //    it is not the null value.
    // https://datatracker.ietf.org/doc/html/rfc6455#section-1.9
    const protocol = response.headersList.get('sec-websocket-protocol')

    if (protocol !== null) {
      this.#protocol = protocol
    }

    // 4. Fire an event named open at the WebSocket object.
    fireEvent('open', this)
  }
}

// https://websockets.spec.whatwg.org/#dom-websocket-connecting
WebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING
// https://websockets.spec.whatwg.org/#dom-websocket-open
WebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN
// https://websockets.spec.whatwg.org/#dom-websocket-closing
WebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING
// https://websockets.spec.whatwg.org/#dom-websocket-closed
WebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED

Object.defineProperties(WebSocket.prototype, {
  CONNECTING: staticPropertyDescriptors,
  OPEN: staticPropertyDescriptors,
  CLOSING: staticPropertyDescriptors,
  CLOSED: staticPropertyDescriptors,
  url: kEnumerableProperty,
  readyState: kEnumerableProperty,
  bufferedAmount: kEnumerableProperty,
  onopen: kEnumerableProperty,
  onerror: kEnumerableProperty,
  onclose: kEnumerableProperty,
  close: kEnumerableProperty,
  onmessage: kEnumerableProperty,
  binaryType: kEnumerableProperty,
  send: kEnumerableProperty,
  extensions: kEnumerableProperty,
  protocol: kEnumerableProperty,
  [Symbol.toStringTag]: {
    value: 'WebSocket',
    writable: false,
    enumerable: false,
    configurable: true
  }
})

Object.defineProperties(WebSocket, {
  CONNECTING: staticPropertyDescriptors,
  OPEN: staticPropertyDescriptors,
  CLOSING: staticPropertyDescriptors,
  CLOSED: staticPropertyDescriptors
})

webidl.converters['sequence<DOMString>'] = webidl.sequenceConverter(
  webidl.converters.DOMString
)

webidl.converters['DOMString or sequence<DOMString>'] = function (V) {
  if (webidl.util.Type(V) === 'Object' && Symbol.iterator in V) {
    return webidl.converters['sequence<DOMString>'](V)
  }

  return webidl.converters.DOMString(V)
}

// This implements the propsal made in https://github.com/whatwg/websockets/issues/42
webidl.converters.WebSocketInit = webidl.dictionaryConverter([
  {
    key: 'protocols',
    converter: webidl.converters['DOMString or sequence<DOMString>'],
    get defaultValue () {
      return []
    }
  },
  {
    key: 'dispatcher',
    converter: (V) => V,
    get defaultValue () {
      return getGlobalDispatcher()
    }
  },
  {
    key: 'headers',
    converter: webidl.nullableConverter(webidl.converters.HeadersInit)
  }
])

webidl.converters['DOMString or sequence<DOMString> or WebSocketInit'] = function (V) {
  if (webidl.util.Type(V) === 'Object' && !(Symbol.iterator in V)) {
    return webidl.converters.WebSocketInit(V)
  }

  return { protocols: webidl.converters['DOMString or sequence<DOMString>'](V) }
}

webidl.converters.WebSocketSendData = function (V) {
  if (webidl.util.Type(V) === 'Object') {
    if (isBlobLike(V)) {
      return webidl.converters.Blob(V, { strict: false })
    }

    if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {
      return webidl.converters.BufferSource(V)
    }
  }

  return webidl.converters.USVString(V)
}

module.exports = {
  WebSocket
}


/***/ }),

/***/ 5840:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "v1", ({
  enumerable: true,
  get: function () {
    return _v.default;
  }
}));
Object.defineProperty(exports, "v3", ({
  enumerable: true,
  get: function () {
    return _v2.default;
  }
}));
Object.defineProperty(exports, "v4", ({
  enumerable: true,
  get: function () {
    return _v3.default;
  }
}));
Object.defineProperty(exports, "v5", ({
  enumerable: true,
  get: function () {
    return _v4.default;
  }
}));
Object.defineProperty(exports, "NIL", ({
  enumerable: true,
  get: function () {
    return _nil.default;
  }
}));
Object.defineProperty(exports, "version", ({
  enumerable: true,
  get: function () {
    return _version.default;
  }
}));
Object.defineProperty(exports, "validate", ({
  enumerable: true,
  get: function () {
    return _validate.default;
  }
}));
Object.defineProperty(exports, "stringify", ({
  enumerable: true,
  get: function () {
    return _stringify.default;
  }
}));
Object.defineProperty(exports, "parse", ({
  enumerable: true,
  get: function () {
    return _parse.default;
  }
}));

var _v = _interopRequireDefault(__nccwpck_require__(8628));

var _v2 = _interopRequireDefault(__nccwpck_require__(6409));

var _v3 = _interopRequireDefault(__nccwpck_require__(5122));

var _v4 = _interopRequireDefault(__nccwpck_require__(9120));

var _nil = _interopRequireDefault(__nccwpck_require__(5332));

var _version = _interopRequireDefault(__nccwpck_require__(1595));

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

var _parse = _interopRequireDefault(__nccwpck_require__(2746));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),

/***/ 4569:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return _crypto.default.createHash('md5').update(bytes).digest();
}

var _default = md5;
exports["default"] = _default;

/***/ }),

/***/ 5332:
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports["default"] = _default;

/***/ }),

/***/ 2746:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

var _default = parse;
exports["default"] = _default;

/***/ }),

/***/ 814:
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports["default"] = _default;

/***/ }),

/***/ 807:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = rng;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate

let poolPtr = rnds8Pool.length;

function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    _crypto.default.randomFillSync(rnds8Pool);

    poolPtr = 0;
  }

  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}

/***/ }),

/***/ 5274:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return _crypto.default.createHash('sha1').update(bytes).digest();
}

var _default = sha1;
exports["default"] = _default;

/***/ }),

/***/ 8950:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

var _default = stringify;
exports["default"] = _default;

/***/ }),

/***/ 8628:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _rng = _interopRequireDefault(__nccwpck_require__(807));

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;

let _clockseq; // Previous uuid creation time


let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _stringify.default)(b);
}

var _default = v1;
exports["default"] = _default;

/***/ }),

/***/ 6409:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__nccwpck_require__(5998));

var _md = _interopRequireDefault(__nccwpck_require__(4569));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports["default"] = _default;

/***/ }),

/***/ 5998:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = _default;
exports.URL = exports.DNS = void 0;

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

var _parse = _interopRequireDefault(__nccwpck_require__(2746));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];

  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;

function _default(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0, _stringify.default)(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

/***/ }),

/***/ 5122:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _rng = _interopRequireDefault(__nccwpck_require__(807));

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.default)(rnds);
}

var _default = v4;
exports["default"] = _default;

/***/ }),

/***/ 9120:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__nccwpck_require__(5998));

var _sha = _interopRequireDefault(__nccwpck_require__(5274));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports["default"] = _default;

/***/ }),

/***/ 6900:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _regex = _interopRequireDefault(__nccwpck_require__(814));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}

var _default = validate;
exports["default"] = _default;

/***/ }),

/***/ 1595:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

var _default = version;
exports["default"] = _default;

/***/ }),

/***/ 9491:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("assert");

/***/ }),

/***/ 852:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("async_hooks");

/***/ }),

/***/ 4300:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("buffer");

/***/ }),

/***/ 6206:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("console");

/***/ }),

/***/ 6113:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("crypto");

/***/ }),

/***/ 7643:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("diagnostics_channel");

/***/ }),

/***/ 2361:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("events");

/***/ }),

/***/ 7147:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("fs");

/***/ }),

/***/ 3685:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("http");

/***/ }),

/***/ 5158:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("http2");

/***/ }),

/***/ 5687:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("https");

/***/ }),

/***/ 1808:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("net");

/***/ }),

/***/ 5673:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:events");

/***/ }),

/***/ 4492:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:stream");

/***/ }),

/***/ 7261:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:util");

/***/ }),

/***/ 2037:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("os");

/***/ }),

/***/ 1017:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("path");

/***/ }),

/***/ 4074:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("perf_hooks");

/***/ }),

/***/ 3477:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("querystring");

/***/ }),

/***/ 2781:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("stream");

/***/ }),

/***/ 5356:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("stream/web");

/***/ }),

/***/ 1576:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("string_decoder");

/***/ }),

/***/ 4404:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("tls");

/***/ }),

/***/ 7310:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("url");

/***/ }),

/***/ 3837:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("util");

/***/ }),

/***/ 9830:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("util/types");

/***/ }),

/***/ 1267:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("worker_threads");

/***/ }),

/***/ 9796:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("zlib");

/***/ }),

/***/ 2960:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const WritableStream = (__nccwpck_require__(4492).Writable)
const inherits = (__nccwpck_require__(7261).inherits)

const StreamSearch = __nccwpck_require__(1142)

const PartStream = __nccwpck_require__(1620)
const HeaderParser = __nccwpck_require__(2032)

const DASH = 45
const B_ONEDASH = Buffer.from('-')
const B_CRLF = Buffer.from('\r\n')
const EMPTY_FN = function () {}

function Dicer (cfg) {
  if (!(this instanceof Dicer)) { return new Dicer(cfg) }
  WritableStream.call(this, cfg)

  if (!cfg || (!cfg.headerFirst && typeof cfg.boundary !== 'string')) { throw new TypeError('Boundary required') }

  if (typeof cfg.boundary === 'string') { this.setBoundary(cfg.boundary) } else { this._bparser = undefined }

  this._headerFirst = cfg.headerFirst

  this._dashes = 0
  this._parts = 0
  this._finished = false
  this._realFinish = false
  this._isPreamble = true
  this._justMatched = false
  this._firstWrite = true
  this._inHeader = true
  this._part = undefined
  this._cb = undefined
  this._ignoreData = false
  this._partOpts = { highWaterMark: cfg.partHwm }
  this._pause = false

  const self = this
  this._hparser = new HeaderParser(cfg)
  this._hparser.on('header', function (header) {
    self._inHeader = false
    self._part.emit('header', header)
  })
}
inherits(Dicer, WritableStream)

Dicer.prototype.emit = function (ev) {
  if (ev === 'finish' && !this._realFinish) {
    if (!this._finished) {
      const self = this
      process.nextTick(function () {
        self.emit('error', new Error('Unexpected end of multipart data'))
        if (self._part && !self._ignoreData) {
          const type = (self._isPreamble ? 'Preamble' : 'Part')
          self._part.emit('error', new Error(type + ' terminated early due to unexpected end of multipart data'))
          self._part.push(null)
          process.nextTick(function () {
            self._realFinish = true
            self.emit('finish')
            self._realFinish = false
          })
          return
        }
        self._realFinish = true
        self.emit('finish')
        self._realFinish = false
      })
    }
  } else { WritableStream.prototype.emit.apply(this, arguments) }
}

Dicer.prototype._write = function (data, encoding, cb) {
  // ignore unexpected data (e.g. extra trailer data after finished)
  if (!this._hparser && !this._bparser) { return cb() }

  if (this._headerFirst && this._isPreamble) {
    if (!this._part) {
      this._part = new PartStream(this._partOpts)
      if (this.listenerCount('preamble') !== 0) { this.emit('preamble', this._part) } else { this._ignore() }
    }
    const r = this._hparser.push(data)
    if (!this._inHeader && r !== undefined && r < data.length) { data = data.slice(r) } else { return cb() }
  }

  // allows for "easier" testing
  if (this._firstWrite) {
    this._bparser.push(B_CRLF)
    this._firstWrite = false
  }

  this._bparser.push(data)

  if (this._pause) { this._cb = cb } else { cb() }
}

Dicer.prototype.reset = function () {
  this._part = undefined
  this._bparser = undefined
  this._hparser = undefined
}

Dicer.prototype.setBoundary = function (boundary) {
  const self = this
  this._bparser = new StreamSearch('\r\n--' + boundary)
  this._bparser.on('info', function (isMatch, data, start, end) {
    self._oninfo(isMatch, data, start, end)
  })
}

Dicer.prototype._ignore = function () {
  if (this._part && !this._ignoreData) {
    this._ignoreData = true
    this._part.on('error', EMPTY_FN)
    // we must perform some kind of read on the stream even though we are
    // ignoring the data, otherwise node's Readable stream will not emit 'end'
    // after pushing null to the stream
    this._part.resume()
  }
}

Dicer.prototype._oninfo = function (isMatch, data, start, end) {
  let buf; const self = this; let i = 0; let r; let shouldWriteMore = true

  if (!this._part && this._justMatched && data) {
    while (this._dashes < 2 && (start + i) < end) {
      if (data[start + i] === DASH) {
        ++i
        ++this._dashes
      } else {
        if (this._dashes) { buf = B_ONEDASH }
        this._dashes = 0
        break
      }
    }
    if (this._dashes === 2) {
      if ((start + i) < end && this.listenerCount('trailer') !== 0) { this.emit('trailer', data.slice(start + i, end)) }
      this.reset()
      this._finished = true
      // no more parts will be added
      if (self._parts === 0) {
        self._realFinish = true
        self.emit('finish')
        self._realFinish = false
      }
    }
    if (this._dashes) { return }
  }
  if (this._justMatched) { this._justMatched = false }
  if (!this._part) {
    this._part = new PartStream(this._partOpts)
    this._part._read = function (n) {
      self._unpause()
    }
    if (this._isPreamble && this.listenerCount('preamble') !== 0) {
      this.emit('preamble', this._part)
    } else if (this._isPreamble !== true && this.listenerCount('part') !== 0) {
      this.emit('part', this._part)
    } else {
      this._ignore()
    }
    if (!this._isPreamble) { this._inHeader = true }
  }
  if (data && start < end && !this._ignoreData) {
    if (this._isPreamble || !this._inHeader) {
      if (buf) { shouldWriteMore = this._part.push(buf) }
      shouldWriteMore = this._part.push(data.slice(start, end))
      if (!shouldWriteMore) { this._pause = true }
    } else if (!this._isPreamble && this._inHeader) {
      if (buf) { this._hparser.push(buf) }
      r = this._hparser.push(data.slice(start, end))
      if (!this._inHeader && r !== undefined && r < end) { this._oninfo(false, data, start + r, end) }
    }
  }
  if (isMatch) {
    this._hparser.reset()
    if (this._isPreamble) { this._isPreamble = false } else {
      if (start !== end) {
        ++this._parts
        this._part.on('end', function () {
          if (--self._parts === 0) {
            if (self._finished) {
              self._realFinish = true
              self.emit('finish')
              self._realFinish = false
            } else {
              self._unpause()
            }
          }
        })
      }
    }
    this._part.push(null)
    this._part = undefined
    this._ignoreData = false
    this._justMatched = true
    this._dashes = 0
  }
}

Dicer.prototype._unpause = function () {
  if (!this._pause) { return }

  this._pause = false
  if (this._cb) {
    const cb = this._cb
    this._cb = undefined
    cb()
  }
}

module.exports = Dicer


/***/ }),

/***/ 2032:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const EventEmitter = (__nccwpck_require__(5673).EventEmitter)
const inherits = (__nccwpck_require__(7261).inherits)
const getLimit = __nccwpck_require__(1467)

const StreamSearch = __nccwpck_require__(1142)

const B_DCRLF = Buffer.from('\r\n\r\n')
const RE_CRLF = /\r\n/g
const RE_HDR = /^([^:]+):[ \t]?([\x00-\xFF]+)?$/ // eslint-disable-line no-control-regex

function HeaderParser (cfg) {
  EventEmitter.call(this)

  cfg = cfg || {}
  const self = this
  this.nread = 0
  this.maxed = false
  this.npairs = 0
  this.maxHeaderPairs = getLimit(cfg, 'maxHeaderPairs', 2000)
  this.maxHeaderSize = getLimit(cfg, 'maxHeaderSize', 80 * 1024)
  this.buffer = ''
  this.header = {}
  this.finished = false
  this.ss = new StreamSearch(B_DCRLF)
  this.ss.on('info', function (isMatch, data, start, end) {
    if (data && !self.maxed) {
      if (self.nread + end - start >= self.maxHeaderSize) {
        end = self.maxHeaderSize - self.nread + start
        self.nread = self.maxHeaderSize
        self.maxed = true
      } else { self.nread += (end - start) }

      self.buffer += data.toString('binary', start, end)
    }
    if (isMatch) { self._finish() }
  })
}
inherits(HeaderParser, EventEmitter)

HeaderParser.prototype.push = function (data) {
  const r = this.ss.push(data)
  if (this.finished) { return r }
}

HeaderParser.prototype.reset = function () {
  this.finished = false
  this.buffer = ''
  this.header = {}
  this.ss.reset()
}

HeaderParser.prototype._finish = function () {
  if (this.buffer) { this._parseHeader() }
  this.ss.matches = this.ss.maxMatches
  const header = this.header
  this.header = {}
  this.buffer = ''
  this.finished = true
  this.nread = this.npairs = 0
  this.maxed = false
  this.emit('header', header)
}

HeaderParser.prototype._parseHeader = function () {
  if (this.npairs === this.maxHeaderPairs) { return }

  const lines = this.buffer.split(RE_CRLF)
  const len = lines.length
  let m, h

  for (var i = 0; i < len; ++i) { // eslint-disable-line no-var
    if (lines[i].length === 0) { continue }
    if (lines[i][0] === '\t' || lines[i][0] === ' ') {
      // folded header content
      // RFC2822 says to just remove the CRLF and not the whitespace following
      // it, so we follow the RFC and include the leading whitespace ...
      if (h) {
        this.header[h][this.header[h].length - 1] += lines[i]
        continue
      }
    }

    const posColon = lines[i].indexOf(':')
    if (
      posColon === -1 ||
      posColon === 0
    ) {
      return
    }
    m = RE_HDR.exec(lines[i])
    h = m[1].toLowerCase()
    this.header[h] = this.header[h] || []
    this.header[h].push((m[2] || ''))
    if (++this.npairs === this.maxHeaderPairs) { break }
  }
}

module.exports = HeaderParser


/***/ }),

/***/ 1620:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const inherits = (__nccwpck_require__(7261).inherits)
const ReadableStream = (__nccwpck_require__(4492).Readable)

function PartStream (opts) {
  ReadableStream.call(this, opts)
}
inherits(PartStream, ReadableStream)

PartStream.prototype._read = function (n) {}

module.exports = PartStream


/***/ }),

/***/ 1142:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



/**
 * Copyright Brian White. All rights reserved.
 *
 * @see https://github.com/mscdex/streamsearch
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * Based heavily on the Streaming Boyer-Moore-Horspool C++ implementation
 * by Hongli Lai at: https://github.com/FooBarWidget/boyer-moore-horspool
 */
const EventEmitter = (__nccwpck_require__(5673).EventEmitter)
const inherits = (__nccwpck_require__(7261).inherits)

function SBMH (needle) {
  if (typeof needle === 'string') {
    needle = Buffer.from(needle)
  }

  if (!Buffer.isBuffer(needle)) {
    throw new TypeError('The needle has to be a String or a Buffer.')
  }

  const needleLength = needle.length

  if (needleLength === 0) {
    throw new Error('The needle cannot be an empty String/Buffer.')
  }

  if (needleLength > 256) {
    throw new Error('The needle cannot have a length bigger than 256.')
  }

  this.maxMatches = Infinity
  this.matches = 0

  this._occ = new Array(256)
    .fill(needleLength) // Initialize occurrence table.
  this._lookbehind_size = 0
  this._needle = needle
  this._bufpos = 0

  this._lookbehind = Buffer.alloc(needleLength)

  // Populate occurrence table with analysis of the needle,
  // ignoring last letter.
  for (var i = 0; i < needleLength - 1; ++i) { // eslint-disable-line no-var
    this._occ[needle[i]] = needleLength - 1 - i
  }
}
inherits(SBMH, EventEmitter)

SBMH.prototype.reset = function () {
  this._lookbehind_size = 0
  this.matches = 0
  this._bufpos = 0
}

SBMH.prototype.push = function (chunk, pos) {
  if (!Buffer.isBuffer(chunk)) {
    chunk = Buffer.from(chunk, 'binary')
  }
  const chlen = chunk.length
  this._bufpos = pos || 0
  let r
  while (r !== chlen && this.matches < this.maxMatches) { r = this._sbmh_feed(chunk) }
  return r
}

SBMH.prototype._sbmh_feed = function (data) {
  const len = data.length
  const needle = this._needle
  const needleLength = needle.length
  const lastNeedleChar = needle[needleLength - 1]

  // Positive: points to a position in `data`
  //           pos == 3 points to data[3]
  // Negative: points to a position in the lookbehind buffer
  //           pos == -2 points to lookbehind[lookbehind_size - 2]
  let pos = -this._lookbehind_size
  let ch

  if (pos < 0) {
    // Lookbehind buffer is not empty. Perform Boyer-Moore-Horspool
    // search with character lookup code that considers both the
    // lookbehind buffer and the current round's haystack data.
    //
    // Loop until
    //   there is a match.
    // or until
    //   we've moved past the position that requires the
    //   lookbehind buffer. In this case we switch to the
    //   optimized loop.
    // or until
    //   the character to look at lies outside the haystack.
    while (pos < 0 && pos <= len - needleLength) {
      ch = this._sbmh_lookup_char(data, pos + needleLength - 1)

      if (
        ch === lastNeedleChar &&
        this._sbmh_memcmp(data, pos, needleLength - 1)
      ) {
        this._lookbehind_size = 0
        ++this.matches
        this.emit('info', true)

        return (this._bufpos = pos + needleLength)
      }
      pos += this._occ[ch]
    }

    // No match.

    if (pos < 0) {
      // There's too few data for Boyer-Moore-Horspool to run,
      // so let's use a different algorithm to skip as much as
      // we can.
      // Forward pos until
      //   the trailing part of lookbehind + data
      //   looks like the beginning of the needle
      // or until
      //   pos == 0
      while (pos < 0 && !this._sbmh_memcmp(data, pos, len - pos)) { ++pos }
    }

    if (pos >= 0) {
      // Discard lookbehind buffer.
      this.emit('info', false, this._lookbehind, 0, this._lookbehind_size)
      this._lookbehind_size = 0
    } else {
      // Cut off part of the lookbehind buffer that has
      // been processed and append the entire haystack
      // into it.
      const bytesToCutOff = this._lookbehind_size + pos
      if (bytesToCutOff > 0) {
        // The cut off data is guaranteed not to contain the needle.
        this.emit('info', false, this._lookbehind, 0, bytesToCutOff)
      }

      this._lookbehind.copy(this._lookbehind, 0, bytesToCutOff,
        this._lookbehind_size - bytesToCutOff)
      this._lookbehind_size -= bytesToCutOff

      data.copy(this._lookbehind, this._lookbehind_size)
      this._lookbehind_size += len

      this._bufpos = len
      return len
    }
  }

  pos += (pos >= 0) * this._bufpos

  // Lookbehind buffer is now empty. We only need to check if the
  // needle is in the haystack.
  if (data.indexOf(needle, pos) !== -1) {
    pos = data.indexOf(needle, pos)
    ++this.matches
    if (pos > 0) { this.emit('info', true, data, this._bufpos, pos) } else { this.emit('info', true) }

    return (this._bufpos = pos + needleLength)
  } else {
    pos = len - needleLength
  }

  // There was no match. If there's trailing haystack data that we cannot
  // match yet using the Boyer-Moore-Horspool algorithm (because the trailing
  // data is less than the needle size) then match using a modified
  // algorithm that starts matching from the beginning instead of the end.
  // Whatever trailing data is left after running this algorithm is added to
  // the lookbehind buffer.
  while (
    pos < len &&
    (
      data[pos] !== needle[0] ||
      (
        (Buffer.compare(
          data.subarray(pos, pos + len - pos),
          needle.subarray(0, len - pos)
        ) !== 0)
      )
    )
  ) {
    ++pos
  }
  if (pos < len) {
    data.copy(this._lookbehind, 0, pos, pos + (len - pos))
    this._lookbehind_size = len - pos
  }

  // Everything until pos is guaranteed not to contain needle data.
  if (pos > 0) { this.emit('info', false, data, this._bufpos, pos < len ? pos : len) }

  this._bufpos = len
  return len
}

SBMH.prototype._sbmh_lookup_char = function (data, pos) {
  return (pos < 0)
    ? this._lookbehind[this._lookbehind_size + pos]
    : data[pos]
}

SBMH.prototype._sbmh_memcmp = function (data, pos, len) {
  for (var i = 0; i < len; ++i) { // eslint-disable-line no-var
    if (this._sbmh_lookup_char(data, pos + i) !== this._needle[i]) { return false }
  }
  return true
}

module.exports = SBMH


/***/ }),

/***/ 727:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const WritableStream = (__nccwpck_require__(4492).Writable)
const { inherits } = __nccwpck_require__(7261)
const Dicer = __nccwpck_require__(2960)

const MultipartParser = __nccwpck_require__(2183)
const UrlencodedParser = __nccwpck_require__(8306)
const parseParams = __nccwpck_require__(1854)

function Busboy (opts) {
  if (!(this instanceof Busboy)) { return new Busboy(opts) }

  if (typeof opts !== 'object') {
    throw new TypeError('Busboy expected an options-Object.')
  }
  if (typeof opts.headers !== 'object') {
    throw new TypeError('Busboy expected an options-Object with headers-attribute.')
  }
  if (typeof opts.headers['content-type'] !== 'string') {
    throw new TypeError('Missing Content-Type-header.')
  }

  const {
    headers,
    ...streamOptions
  } = opts

  this.opts = {
    autoDestroy: false,
    ...streamOptions
  }
  WritableStream.call(this, this.opts)

  this._done = false
  this._parser = this.getParserByHeaders(headers)
  this._finished = false
}
inherits(Busboy, WritableStream)

Busboy.prototype.emit = function (ev) {
  if (ev === 'finish') {
    if (!this._done) {
      this._parser?.end()
      return
    } else if (this._finished) {
      return
    }
    this._finished = true
  }
  WritableStream.prototype.emit.apply(this, arguments)
}

Busboy.prototype.getParserByHeaders = function (headers) {
  const parsed = parseParams(headers['content-type'])

  const cfg = {
    defCharset: this.opts.defCharset,
    fileHwm: this.opts.fileHwm,
    headers,
    highWaterMark: this.opts.highWaterMark,
    isPartAFile: this.opts.isPartAFile,
    limits: this.opts.limits,
    parsedConType: parsed,
    preservePath: this.opts.preservePath
  }

  if (MultipartParser.detect.test(parsed[0])) {
    return new MultipartParser(this, cfg)
  }
  if (UrlencodedParser.detect.test(parsed[0])) {
    return new UrlencodedParser(this, cfg)
  }
  throw new Error('Unsupported Content-Type.')
}

Busboy.prototype._write = function (chunk, encoding, cb) {
  this._parser.write(chunk, cb)
}

module.exports = Busboy
module.exports["default"] = Busboy
module.exports.Busboy = Busboy

module.exports.Dicer = Dicer


/***/ }),

/***/ 2183:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



// TODO:
//  * support 1 nested multipart level
//    (see second multipart example here:
//     http://www.w3.org/TR/html401/interact/forms.html#didx-multipartform-data)
//  * support limits.fieldNameSize
//     -- this will require modifications to utils.parseParams

const { Readable } = __nccwpck_require__(4492)
const { inherits } = __nccwpck_require__(7261)

const Dicer = __nccwpck_require__(2960)

const parseParams = __nccwpck_require__(1854)
const decodeText = __nccwpck_require__(4619)
const basename = __nccwpck_require__(8647)
const getLimit = __nccwpck_require__(1467)

const RE_BOUNDARY = /^boundary$/i
const RE_FIELD = /^form-data$/i
const RE_CHARSET = /^charset$/i
const RE_FILENAME = /^filename$/i
const RE_NAME = /^name$/i

Multipart.detect = /^multipart\/form-data/i
function Multipart (boy, cfg) {
  let i
  let len
  const self = this
  let boundary
  const limits = cfg.limits
  const isPartAFile = cfg.isPartAFile || ((fieldName, contentType, fileName) => (contentType === 'application/octet-stream' || fileName !== undefined))
  const parsedConType = cfg.parsedConType || []
  const defCharset = cfg.defCharset || 'utf8'
  const preservePath = cfg.preservePath
  const fileOpts = { highWaterMark: cfg.fileHwm }

  for (i = 0, len = parsedConType.length; i < len; ++i) {
    if (Array.isArray(parsedConType[i]) &&
      RE_BOUNDARY.test(parsedConType[i][0])) {
      boundary = parsedConType[i][1]
      break
    }
  }

  function checkFinished () {
    if (nends === 0 && finished && !boy._done) {
      finished = false
      self.end()
    }
  }

  if (typeof boundary !== 'string') { throw new Error('Multipart: Boundary not found') }

  const fieldSizeLimit = getLimit(limits, 'fieldSize', 1 * 1024 * 1024)
  const fileSizeLimit = getLimit(limits, 'fileSize', Infinity)
  const filesLimit = getLimit(limits, 'files', Infinity)
  const fieldsLimit = getLimit(limits, 'fields', Infinity)
  const partsLimit = getLimit(limits, 'parts', Infinity)
  const headerPairsLimit = getLimit(limits, 'headerPairs', 2000)
  const headerSizeLimit = getLimit(limits, 'headerSize', 80 * 1024)

  let nfiles = 0
  let nfields = 0
  let nends = 0
  let curFile
  let curField
  let finished = false

  this._needDrain = false
  this._pause = false
  this._cb = undefined
  this._nparts = 0
  this._boy = boy

  const parserCfg = {
    boundary,
    maxHeaderPairs: headerPairsLimit,
    maxHeaderSize: headerSizeLimit,
    partHwm: fileOpts.highWaterMark,
    highWaterMark: cfg.highWaterMark
  }

  this.parser = new Dicer(parserCfg)
  this.parser.on('drain', function () {
    self._needDrain = false
    if (self._cb && !self._pause) {
      const cb = self._cb
      self._cb = undefined
      cb()
    }
  }).on('part', function onPart (part) {
    if (++self._nparts > partsLimit) {
      self.parser.removeListener('part', onPart)
      self.parser.on('part', skipPart)
      boy.hitPartsLimit = true
      boy.emit('partsLimit')
      return skipPart(part)
    }

    // hack because streams2 _always_ doesn't emit 'end' until nextTick, so let
    // us emit 'end' early since we know the part has ended if we are already
    // seeing the next part
    if (curField) {
      const field = curField
      field.emit('end')
      field.removeAllListeners('end')
    }

    part.on('header', function (header) {
      let contype
      let fieldname
      let parsed
      let charset
      let encoding
      let filename
      let nsize = 0

      if (header['content-type']) {
        parsed = parseParams(header['content-type'][0])
        if (parsed[0]) {
          contype = parsed[0].toLowerCase()
          for (i = 0, len = parsed.length; i < len; ++i) {
            if (RE_CHARSET.test(parsed[i][0])) {
              charset = parsed[i][1].toLowerCase()
              break
            }
          }
        }
      }

      if (contype === undefined) { contype = 'text/plain' }
      if (charset === undefined) { charset = defCharset }

      if (header['content-disposition']) {
        parsed = parseParams(header['content-disposition'][0])
        if (!RE_FIELD.test(parsed[0])) { return skipPart(part) }
        for (i = 0, len = parsed.length; i < len; ++i) {
          if (RE_NAME.test(parsed[i][0])) {
            fieldname = parsed[i][1]
          } else if (RE_FILENAME.test(parsed[i][0])) {
            filename = parsed[i][1]
            if (!preservePath) { filename = basename(filename) }
          }
        }
      } else { return skipPart(part) }

      if (header['content-transfer-encoding']) { encoding = header['content-transfer-encoding'][0].toLowerCase() } else { encoding = '7bit' }

      let onData,
        onEnd

      if (isPartAFile(fieldname, contype, filename)) {
        // file/binary field
        if (nfiles === filesLimit) {
          if (!boy.hitFilesLimit) {
            boy.hitFilesLimit = true
            boy.emit('filesLimit')
          }
          return skipPart(part)
        }

        ++nfiles

        if (boy.listenerCount('file') === 0) {
          self.parser._ignore()
          return
        }

        ++nends
        const file = new FileStream(fileOpts)
        curFile = file
        file.on('end', function () {
          --nends
          self._pause = false
          checkFinished()
          if (self._cb && !self._needDrain) {
            const cb = self._cb
            self._cb = undefined
            cb()
          }
        })
        file._read = function (n) {
          if (!self._pause) { return }
          self._pause = false
          if (self._cb && !self._needDrain) {
            const cb = self._cb
            self._cb = undefined
            cb()
          }
        }
        boy.emit('file', fieldname, file, filename, encoding, contype)

        onData = function (data) {
          if ((nsize += data.length) > fileSizeLimit) {
            const extralen = fileSizeLimit - nsize + data.length
            if (extralen > 0) { file.push(data.slice(0, extralen)) }
            file.truncated = true
            file.bytesRead = fileSizeLimit
            part.removeAllListeners('data')
            file.emit('limit')
            return
          } else if (!file.push(data)) { self._pause = true }

          file.bytesRead = nsize
        }

        onEnd = function () {
          curFile = undefined
          file.push(null)
        }
      } else {
        // non-file field
        if (nfields === fieldsLimit) {
          if (!boy.hitFieldsLimit) {
            boy.hitFieldsLimit = true
            boy.emit('fieldsLimit')
          }
          return skipPart(part)
        }

        ++nfields
        ++nends
        let buffer = ''
        let truncated = false
        curField = part

        onData = function (data) {
          if ((nsize += data.length) > fieldSizeLimit) {
            const extralen = (fieldSizeLimit - (nsize - data.length))
            buffer += data.toString('binary', 0, extralen)
            truncated = true
            part.removeAllListeners('data')
          } else { buffer += data.toString('binary') }
        }

        onEnd = function () {
          curField = undefined
          if (buffer.length) { buffer = decodeText(buffer, 'binary', charset) }
          boy.emit('field', fieldname, buffer, false, truncated, encoding, contype)
          --nends
          checkFinished()
        }
      }

      /* As of node@2efe4ab761666 (v0.10.29+/v0.11.14+), busboy had become
         broken. Streams2/streams3 is a huge black box of confusion, but
         somehow overriding the sync state seems to fix things again (and still
         seems to work for previous node versions).
      */
      part._readableState.sync = false

      part.on('data', onData)
      part.on('end', onEnd)
    }).on('error', function (err) {
      if (curFile) { curFile.emit('error', err) }
    })
  }).on('error', function (err) {
    boy.emit('error', err)
  }).on('finish', function () {
    finished = true
    checkFinished()
  })
}

Multipart.prototype.write = function (chunk, cb) {
  const r = this.parser.write(chunk)
  if (r && !this._pause) {
    cb()
  } else {
    this._needDrain = !r
    this._cb = cb
  }
}

Multipart.prototype.end = function () {
  const self = this

  if (self.parser.writable) {
    self.parser.end()
  } else if (!self._boy._done) {
    process.nextTick(function () {
      self._boy._done = true
      self._boy.emit('finish')
    })
  }
}

function skipPart (part) {
  part.resume()
}

function FileStream (opts) {
  Readable.call(this, opts)

  this.bytesRead = 0

  this.truncated = false
}

inherits(FileStream, Readable)

FileStream.prototype._read = function (n) {}

module.exports = Multipart


/***/ }),

/***/ 8306:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const Decoder = __nccwpck_require__(7100)
const decodeText = __nccwpck_require__(4619)
const getLimit = __nccwpck_require__(1467)

const RE_CHARSET = /^charset$/i

UrlEncoded.detect = /^application\/x-www-form-urlencoded/i
function UrlEncoded (boy, cfg) {
  const limits = cfg.limits
  const parsedConType = cfg.parsedConType
  this.boy = boy

  this.fieldSizeLimit = getLimit(limits, 'fieldSize', 1 * 1024 * 1024)
  this.fieldNameSizeLimit = getLimit(limits, 'fieldNameSize', 100)
  this.fieldsLimit = getLimit(limits, 'fields', Infinity)

  let charset
  for (var i = 0, len = parsedConType.length; i < len; ++i) { // eslint-disable-line no-var
    if (Array.isArray(parsedConType[i]) &&
        RE_CHARSET.test(parsedConType[i][0])) {
      charset = parsedConType[i][1].toLowerCase()
      break
    }
  }

  if (charset === undefined) { charset = cfg.defCharset || 'utf8' }

  this.decoder = new Decoder()
  this.charset = charset
  this._fields = 0
  this._state = 'key'
  this._checkingBytes = true
  this._bytesKey = 0
  this._bytesVal = 0
  this._key = ''
  this._val = ''
  this._keyTrunc = false
  this._valTrunc = false
  this._hitLimit = false
}

UrlEncoded.prototype.write = function (data, cb) {
  if (this._fields === this.fieldsLimit) {
    if (!this.boy.hitFieldsLimit) {
      this.boy.hitFieldsLimit = true
      this.boy.emit('fieldsLimit')
    }
    return cb()
  }

  let idxeq; let idxamp; let i; let p = 0; const len = data.length

  while (p < len) {
    if (this._state === 'key') {
      idxeq = idxamp = undefined
      for (i = p; i < len; ++i) {
        if (!this._checkingBytes) { ++p }
        if (data[i] === 0x3D/* = */) {
          idxeq = i
          break
        } else if (data[i] === 0x26/* & */) {
          idxamp = i
          break
        }
        if (this._checkingBytes && this._bytesKey === this.fieldNameSizeLimit) {
          this._hitLimit = true
          break
        } else if (this._checkingBytes) { ++this._bytesKey }
      }

      if (idxeq !== undefined) {
        // key with assignment
        if (idxeq > p) { this._key += this.decoder.write(data.toString('binary', p, idxeq)) }
        this._state = 'val'

        this._hitLimit = false
        this._checkingBytes = true
        this._val = ''
        this._bytesVal = 0
        this._valTrunc = false
        this.decoder.reset()

        p = idxeq + 1
      } else if (idxamp !== undefined) {
        // key with no assignment
        ++this._fields
        let key; const keyTrunc = this._keyTrunc
        if (idxamp > p) { key = (this._key += this.decoder.write(data.toString('binary', p, idxamp))) } else { key = this._key }

        this._hitLimit = false
        this._checkingBytes = true
        this._key = ''
        this._bytesKey = 0
        this._keyTrunc = false
        this.decoder.reset()

        if (key.length) {
          this.boy.emit('field', decodeText(key, 'binary', this.charset),
            '',
            keyTrunc,
            false)
        }

        p = idxamp + 1
        if (this._fields === this.fieldsLimit) { return cb() }
      } else if (this._hitLimit) {
        // we may not have hit the actual limit if there are encoded bytes...
        if (i > p) { this._key += this.decoder.write(data.toString('binary', p, i)) }
        p = i
        if ((this._bytesKey = this._key.length) === this.fieldNameSizeLimit) {
          // yep, we actually did hit the limit
          this._checkingBytes = false
          this._keyTrunc = true
        }
      } else {
        if (p < len) { this._key += this.decoder.write(data.toString('binary', p)) }
        p = len
      }
    } else {
      idxamp = undefined
      for (i = p; i < len; ++i) {
        if (!this._checkingBytes) { ++p }
        if (data[i] === 0x26/* & */) {
          idxamp = i
          break
        }
        if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {
          this._hitLimit = true
          break
        } else if (this._checkingBytes) { ++this._bytesVal }
      }

      if (idxamp !== undefined) {
        ++this._fields
        if (idxamp > p) { this._val += this.decoder.write(data.toString('binary', p, idxamp)) }
        this.boy.emit('field', decodeText(this._key, 'binary', this.charset),
          decodeText(this._val, 'binary', this.charset),
          this._keyTrunc,
          this._valTrunc)
        this._state = 'key'

        this._hitLimit = false
        this._checkingBytes = true
        this._key = ''
        this._bytesKey = 0
        this._keyTrunc = false
        this.decoder.reset()

        p = idxamp + 1
        if (this._fields === this.fieldsLimit) { return cb() }
      } else if (this._hitLimit) {
        // we may not have hit the actual limit if there are encoded bytes...
        if (i > p) { this._val += this.decoder.write(data.toString('binary', p, i)) }
        p = i
        if ((this._val === '' && this.fieldSizeLimit === 0) ||
            (this._bytesVal = this._val.length) === this.fieldSizeLimit) {
          // yep, we actually did hit the limit
          this._checkingBytes = false
          this._valTrunc = true
        }
      } else {
        if (p < len) { this._val += this.decoder.write(data.toString('binary', p)) }
        p = len
      }
    }
  }
  cb()
}

UrlEncoded.prototype.end = function () {
  if (this.boy._done) { return }

  if (this._state === 'key' && this._key.length > 0) {
    this.boy.emit('field', decodeText(this._key, 'binary', this.charset),
      '',
      this._keyTrunc,
      false)
  } else if (this._state === 'val') {
    this.boy.emit('field', decodeText(this._key, 'binary', this.charset),
      decodeText(this._val, 'binary', this.charset),
      this._keyTrunc,
      this._valTrunc)
  }
  this.boy._done = true
  this.boy.emit('finish')
}

module.exports = UrlEncoded


/***/ }),

/***/ 7100:
/***/ ((module) => {



const RE_PLUS = /\+/g

const HEX = [
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
]

function Decoder () {
  this.buffer = undefined
}
Decoder.prototype.write = function (str) {
  // Replace '+' with ' ' before decoding
  str = str.replace(RE_PLUS, ' ')
  let res = ''
  let i = 0; let p = 0; const len = str.length
  for (; i < len; ++i) {
    if (this.buffer !== undefined) {
      if (!HEX[str.charCodeAt(i)]) {
        res += '%' + this.buffer
        this.buffer = undefined
        --i // retry character
      } else {
        this.buffer += str[i]
        ++p
        if (this.buffer.length === 2) {
          res += String.fromCharCode(parseInt(this.buffer, 16))
          this.buffer = undefined
        }
      }
    } else if (str[i] === '%') {
      if (i > p) {
        res += str.substring(p, i)
        p = i
      }
      this.buffer = ''
      ++p
    }
  }
  if (p < len && this.buffer === undefined) { res += str.substring(p) }
  return res
}
Decoder.prototype.reset = function () {
  this.buffer = undefined
}

module.exports = Decoder


/***/ }),

/***/ 8647:
/***/ ((module) => {



module.exports = function basename (path) {
  if (typeof path !== 'string') { return '' }
  for (var i = path.length - 1; i >= 0; --i) { // eslint-disable-line no-var
    switch (path.charCodeAt(i)) {
      case 0x2F: // '/'
      case 0x5C: // '\'
        path = path.slice(i + 1)
        return (path === '..' || path === '.' ? '' : path)
    }
  }
  return (path === '..' || path === '.' ? '' : path)
}


/***/ }),

/***/ 4619:
/***/ (function(module) {



// Node has always utf-8
const utf8Decoder = new TextDecoder('utf-8')
const textDecoders = new Map([
  ['utf-8', utf8Decoder],
  ['utf8', utf8Decoder]
])

function getDecoder (charset) {
  let lc
  while (true) {
    switch (charset) {
      case 'utf-8':
      case 'utf8':
        return decoders.utf8
      case 'latin1':
      case 'ascii': // TODO: Make these a separate, strict decoder?
      case 'us-ascii':
      case 'iso-8859-1':
      case 'iso8859-1':
      case 'iso88591':
      case 'iso_8859-1':
      case 'windows-1252':
      case 'iso_8859-1:1987':
      case 'cp1252':
      case 'x-cp1252':
        return decoders.latin1
      case 'utf16le':
      case 'utf-16le':
      case 'ucs2':
      case 'ucs-2':
        return decoders.utf16le
      case 'base64':
        return decoders.base64
      default:
        if (lc === undefined) {
          lc = true
          charset = charset.toLowerCase()
          continue
        }
        return decoders.other.bind(charset)
    }
  }
}

const decoders = {
  utf8: (data, sourceEncoding) => {
    if (data.length === 0) {
      return ''
    }
    if (typeof data === 'string') {
      data = Buffer.from(data, sourceEncoding)
    }
    return data.utf8Slice(0, data.length)
  },

  latin1: (data, sourceEncoding) => {
    if (data.length === 0) {
      return ''
    }
    if (typeof data === 'string') {
      return data
    }
    return data.latin1Slice(0, data.length)
  },

  utf16le: (data, sourceEncoding) => {
    if (data.length === 0) {
      return ''
    }
    if (typeof data === 'string') {
      data = Buffer.from(data, sourceEncoding)
    }
    return data.ucs2Slice(0, data.length)
  },

  base64: (data, sourceEncoding) => {
    if (data.length === 0) {
      return ''
    }
    if (typeof data === 'string') {
      data = Buffer.from(data, sourceEncoding)
    }
    return data.base64Slice(0, data.length)
  },

  other: (data, sourceEncoding) => {
    if (data.length === 0) {
      return ''
    }
    if (typeof data === 'string') {
      data = Buffer.from(data, sourceEncoding)
    }

    if (textDecoders.has(this.toString())) {
      try {
        return textDecoders.get(this).decode(data)
      } catch {}
    }
    return typeof data === 'string'
      ? data
      : data.toString()
  }
}

function decodeText (text, sourceEncoding, destEncoding) {
  if (text) {
    return getDecoder(destEncoding)(text, sourceEncoding)
  }
  return text
}

module.exports = decodeText


/***/ }),

/***/ 1467:
/***/ ((module) => {



module.exports = function getLimit (limits, name, defaultLimit) {
  if (
    !limits ||
    limits[name] === undefined ||
    limits[name] === null
  ) { return defaultLimit }

  if (
    typeof limits[name] !== 'number' ||
    isNaN(limits[name])
  ) { throw new TypeError('Limit ' + name + ' is not a valid number') }

  return limits[name]
}


/***/ }),

/***/ 1854:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* eslint-disable object-property-newline */


const decodeText = __nccwpck_require__(4619)

const RE_ENCODED = /%[a-fA-F0-9][a-fA-F0-9]/g

const EncodedLookup = {
  '%00': '\x00', '%01': '\x01', '%02': '\x02', '%03': '\x03', '%04': '\x04',
  '%05': '\x05', '%06': '\x06', '%07': '\x07', '%08': '\x08', '%09': '\x09',
  '%0a': '\x0a', '%0A': '\x0a', '%0b': '\x0b', '%0B': '\x0b', '%0c': '\x0c',
  '%0C': '\x0c', '%0d': '\x0d', '%0D': '\x0d', '%0e': '\x0e', '%0E': '\x0e',
  '%0f': '\x0f', '%0F': '\x0f', '%10': '\x10', '%11': '\x11', '%12': '\x12',
  '%13': '\x13', '%14': '\x14', '%15': '\x15', '%16': '\x16', '%17': '\x17',
  '%18': '\x18', '%19': '\x19', '%1a': '\x1a', '%1A': '\x1a', '%1b': '\x1b',
  '%1B': '\x1b', '%1c': '\x1c', '%1C': '\x1c', '%1d': '\x1d', '%1D': '\x1d',
  '%1e': '\x1e', '%1E': '\x1e', '%1f': '\x1f', '%1F': '\x1f', '%20': '\x20',
  '%21': '\x21', '%22': '\x22', '%23': '\x23', '%24': '\x24', '%25': '\x25',
  '%26': '\x26', '%27': '\x27', '%28': '\x28', '%29': '\x29', '%2a': '\x2a',
  '%2A': '\x2a', '%2b': '\x2b', '%2B': '\x2b', '%2c': '\x2c', '%2C': '\x2c',
  '%2d': '\x2d', '%2D': '\x2d', '%2e': '\x2e', '%2E': '\x2e', '%2f': '\x2f',
  '%2F': '\x2f', '%30': '\x30', '%31': '\x31', '%32': '\x32', '%33': '\x33',
  '%34': '\x34', '%35': '\x35', '%36': '\x36', '%37': '\x37', '%38': '\x38',
  '%39': '\x39', '%3a': '\x3a', '%3A': '\x3a', '%3b': '\x3b', '%3B': '\x3b',
  '%3c': '\x3c', '%3C': '\x3c', '%3d': '\x3d', '%3D': '\x3d', '%3e': '\x3e',
  '%3E': '\x3e', '%3f': '\x3f', '%3F': '\x3f', '%40': '\x40', '%41': '\x41',
  '%42': '\x42', '%43': '\x43', '%44': '\x44', '%45': '\x45', '%46': '\x46',
  '%47': '\x47', '%48': '\x48', '%49': '\x49', '%4a': '\x4a', '%4A': '\x4a',
  '%4b': '\x4b', '%4B': '\x4b', '%4c': '\x4c', '%4C': '\x4c', '%4d': '\x4d',
  '%4D': '\x4d', '%4e': '\x4e', '%4E': '\x4e', '%4f': '\x4f', '%4F': '\x4f',
  '%50': '\x50', '%51': '\x51', '%52': '\x52', '%53': '\x53', '%54': '\x54',
  '%55': '\x55', '%56': '\x56', '%57': '\x57', '%58': '\x58', '%59': '\x59',
  '%5a': '\x5a', '%5A': '\x5a', '%5b': '\x5b', '%5B': '\x5b', '%5c': '\x5c',
  '%5C': '\x5c', '%5d': '\x5d', '%5D': '\x5d', '%5e': '\x5e', '%5E': '\x5e',
  '%5f': '\x5f', '%5F': '\x5f', '%60': '\x60', '%61': '\x61', '%62': '\x62',
  '%63': '\x63', '%64': '\x64', '%65': '\x65', '%66': '\x66', '%67': '\x67',
  '%68': '\x68', '%69': '\x69', '%6a': '\x6a', '%6A': '\x6a', '%6b': '\x6b',
  '%6B': '\x6b', '%6c': '\x6c', '%6C': '\x6c', '%6d': '\x6d', '%6D': '\x6d',
  '%6e': '\x6e', '%6E': '\x6e', '%6f': '\x6f', '%6F': '\x6f', '%70': '\x70',
  '%71': '\x71', '%72': '\x72', '%73': '\x73', '%74': '\x74', '%75': '\x75',
  '%76': '\x76', '%77': '\x77', '%78': '\x78', '%79': '\x79', '%7a': '\x7a',
  '%7A': '\x7a', '%7b': '\x7b', '%7B': '\x7b', '%7c': '\x7c', '%7C': '\x7c',
  '%7d': '\x7d', '%7D': '\x7d', '%7e': '\x7e', '%7E': '\x7e', '%7f': '\x7f',
  '%7F': '\x7f', '%80': '\x80', '%81': '\x81', '%82': '\x82', '%83': '\x83',
  '%84': '\x84', '%85': '\x85', '%86': '\x86', '%87': '\x87', '%88': '\x88',
  '%89': '\x89', '%8a': '\x8a', '%8A': '\x8a', '%8b': '\x8b', '%8B': '\x8b',
  '%8c': '\x8c', '%8C': '\x8c', '%8d': '\x8d', '%8D': '\x8d', '%8e': '\x8e',
  '%8E': '\x8e', '%8f': '\x8f', '%8F': '\x8f', '%90': '\x90', '%91': '\x91',
  '%92': '\x92', '%93': '\x93', '%94': '\x94', '%95': '\x95', '%96': '\x96',
  '%97': '\x97', '%98': '\x98', '%99': '\x99', '%9a': '\x9a', '%9A': '\x9a',
  '%9b': '\x9b', '%9B': '\x9b', '%9c': '\x9c', '%9C': '\x9c', '%9d': '\x9d',
  '%9D': '\x9d', '%9e': '\x9e', '%9E': '\x9e', '%9f': '\x9f', '%9F': '\x9f',
  '%a0': '\xa0', '%A0': '\xa0', '%a1': '\xa1', '%A1': '\xa1', '%a2': '\xa2',
  '%A2': '\xa2', '%a3': '\xa3', '%A3': '\xa3', '%a4': '\xa4', '%A4': '\xa4',
  '%a5': '\xa5', '%A5': '\xa5', '%a6': '\xa6', '%A6': '\xa6', '%a7': '\xa7',
  '%A7': '\xa7', '%a8': '\xa8', '%A8': '\xa8', '%a9': '\xa9', '%A9': '\xa9',
  '%aa': '\xaa', '%Aa': '\xaa', '%aA': '\xaa', '%AA': '\xaa', '%ab': '\xab',
  '%Ab': '\xab', '%aB': '\xab', '%AB': '\xab', '%ac': '\xac', '%Ac': '\xac',
  '%aC': '\xac', '%AC': '\xac', '%ad': '\xad', '%Ad': '\xad', '%aD': '\xad',
  '%AD': '\xad', '%ae': '\xae', '%Ae': '\xae', '%aE': '\xae', '%AE': '\xae',
  '%af': '\xaf', '%Af': '\xaf', '%aF': '\xaf', '%AF': '\xaf', '%b0': '\xb0',
  '%B0': '\xb0', '%b1': '\xb1', '%B1': '\xb1', '%b2': '\xb2', '%B2': '\xb2',
  '%b3': '\xb3', '%B3': '\xb3', '%b4': '\xb4', '%B4': '\xb4', '%b5': '\xb5',
  '%B5': '\xb5', '%b6': '\xb6', '%B6': '\xb6', '%b7': '\xb7', '%B7': '\xb7',
  '%b8': '\xb8', '%B8': '\xb8', '%b9': '\xb9', '%B9': '\xb9', '%ba': '\xba',
  '%Ba': '\xba', '%bA': '\xba', '%BA': '\xba', '%bb': '\xbb', '%Bb': '\xbb',
  '%bB': '\xbb', '%BB': '\xbb', '%bc': '\xbc', '%Bc': '\xbc', '%bC': '\xbc',
  '%BC': '\xbc', '%bd': '\xbd', '%Bd': '\xbd', '%bD': '\xbd', '%BD': '\xbd',
  '%be': '\xbe', '%Be': '\xbe', '%bE': '\xbe', '%BE': '\xbe', '%bf': '\xbf',
  '%Bf': '\xbf', '%bF': '\xbf', '%BF': '\xbf', '%c0': '\xc0', '%C0': '\xc0',
  '%c1': '\xc1', '%C1': '\xc1', '%c2': '\xc2', '%C2': '\xc2', '%c3': '\xc3',
  '%C3': '\xc3', '%c4': '\xc4', '%C4': '\xc4', '%c5': '\xc5', '%C5': '\xc5',
  '%c6': '\xc6', '%C6': '\xc6', '%c7': '\xc7', '%C7': '\xc7', '%c8': '\xc8',
  '%C8': '\xc8', '%c9': '\xc9', '%C9': '\xc9', '%ca': '\xca', '%Ca': '\xca',
  '%cA': '\xca', '%CA': '\xca', '%cb': '\xcb', '%Cb': '\xcb', '%cB': '\xcb',
  '%CB': '\xcb', '%cc': '\xcc', '%Cc': '\xcc', '%cC': '\xcc', '%CC': '\xcc',
  '%cd': '\xcd', '%Cd': '\xcd', '%cD': '\xcd', '%CD': '\xcd', '%ce': '\xce',
  '%Ce': '\xce', '%cE': '\xce', '%CE': '\xce', '%cf': '\xcf', '%Cf': '\xcf',
  '%cF': '\xcf', '%CF': '\xcf', '%d0': '\xd0', '%D0': '\xd0', '%d1': '\xd1',
  '%D1': '\xd1', '%d2': '\xd2', '%D2': '\xd2', '%d3': '\xd3', '%D3': '\xd3',
  '%d4': '\xd4', '%D4': '\xd4', '%d5': '\xd5', '%D5': '\xd5', '%d6': '\xd6',
  '%D6': '\xd6', '%d7': '\xd7', '%D7': '\xd7', '%d8': '\xd8', '%D8': '\xd8',
  '%d9': '\xd9', '%D9': '\xd9', '%da': '\xda', '%Da': '\xda', '%dA': '\xda',
  '%DA': '\xda', '%db': '\xdb', '%Db': '\xdb', '%dB': '\xdb', '%DB': '\xdb',
  '%dc': '\xdc', '%Dc': '\xdc', '%dC': '\xdc', '%DC': '\xdc', '%dd': '\xdd',
  '%Dd': '\xdd', '%dD': '\xdd', '%DD': '\xdd', '%de': '\xde', '%De': '\xde',
  '%dE': '\xde', '%DE': '\xde', '%df': '\xdf', '%Df': '\xdf', '%dF': '\xdf',
  '%DF': '\xdf', '%e0': '\xe0', '%E0': '\xe0', '%e1': '\xe1', '%E1': '\xe1',
  '%e2': '\xe2', '%E2': '\xe2', '%e3': '\xe3', '%E3': '\xe3', '%e4': '\xe4',
  '%E4': '\xe4', '%e5': '\xe5', '%E5': '\xe5', '%e6': '\xe6', '%E6': '\xe6',
  '%e7': '\xe7', '%E7': '\xe7', '%e8': '\xe8', '%E8': '\xe8', '%e9': '\xe9',
  '%E9': '\xe9', '%ea': '\xea', '%Ea': '\xea', '%eA': '\xea', '%EA': '\xea',
  '%eb': '\xeb', '%Eb': '\xeb', '%eB': '\xeb', '%EB': '\xeb', '%ec': '\xec',
  '%Ec': '\xec', '%eC': '\xec', '%EC': '\xec', '%ed': '\xed', '%Ed': '\xed',
  '%eD': '\xed', '%ED': '\xed', '%ee': '\xee', '%Ee': '\xee', '%eE': '\xee',
  '%EE': '\xee', '%ef': '\xef', '%Ef': '\xef', '%eF': '\xef', '%EF': '\xef',
  '%f0': '\xf0', '%F0': '\xf0', '%f1': '\xf1', '%F1': '\xf1', '%f2': '\xf2',
  '%F2': '\xf2', '%f3': '\xf3', '%F3': '\xf3', '%f4': '\xf4', '%F4': '\xf4',
  '%f5': '\xf5', '%F5': '\xf5', '%f6': '\xf6', '%F6': '\xf6', '%f7': '\xf7',
  '%F7': '\xf7', '%f8': '\xf8', '%F8': '\xf8', '%f9': '\xf9', '%F9': '\xf9',
  '%fa': '\xfa', '%Fa': '\xfa', '%fA': '\xfa', '%FA': '\xfa', '%fb': '\xfb',
  '%Fb': '\xfb', '%fB': '\xfb', '%FB': '\xfb', '%fc': '\xfc', '%Fc': '\xfc',
  '%fC': '\xfc', '%FC': '\xfc', '%fd': '\xfd', '%Fd': '\xfd', '%fD': '\xfd',
  '%FD': '\xfd', '%fe': '\xfe', '%Fe': '\xfe', '%fE': '\xfe', '%FE': '\xfe',
  '%ff': '\xff', '%Ff': '\xff', '%fF': '\xff', '%FF': '\xff'
}

function encodedReplacer (match) {
  return EncodedLookup[match]
}

const STATE_KEY = 0
const STATE_VALUE = 1
const STATE_CHARSET = 2
const STATE_LANG = 3

function parseParams (str) {
  const res = []
  let state = STATE_KEY
  let charset = ''
  let inquote = false
  let escaping = false
  let p = 0
  let tmp = ''
  const len = str.length

  for (var i = 0; i < len; ++i) { // eslint-disable-line no-var
    const char = str[i]
    if (char === '\\' && inquote) {
      if (escaping) { escaping = false } else {
        escaping = true
        continue
      }
    } else if (char === '"') {
      if (!escaping) {
        if (inquote) {
          inquote = false
          state = STATE_KEY
        } else { inquote = true }
        continue
      } else { escaping = false }
    } else {
      if (escaping && inquote) { tmp += '\\' }
      escaping = false
      if ((state === STATE_CHARSET || state === STATE_LANG) && char === "'") {
        if (state === STATE_CHARSET) {
          state = STATE_LANG
          charset = tmp.substring(1)
        } else { state = STATE_VALUE }
        tmp = ''
        continue
      } else if (state === STATE_KEY &&
        (char === '*' || char === '=') &&
        res.length) {
        state = char === '*'
          ? STATE_CHARSET
          : STATE_VALUE
        res[p] = [tmp, undefined]
        tmp = ''
        continue
      } else if (!inquote && char === ';') {
        state = STATE_KEY
        if (charset) {
          if (tmp.length) {
            tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer),
              'binary',
              charset)
          }
          charset = ''
        } else if (tmp.length) {
          tmp = decodeText(tmp, 'binary', 'utf8')
        }
        if (res[p] === undefined) { res[p] = tmp } else { res[p][1] = tmp }
        tmp = ''
        ++p
        continue
      } else if (!inquote && (char === ' ' || char === '\t')) { continue }
    }
    tmp += char
  }
  if (charset && tmp.length) {
    tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer),
      'binary',
      charset)
  } else if (tmp) {
    tmp = decodeText(tmp, 'binary', 'utf8')
  }

  if (res[p] === undefined) {
    if (tmp) { res[p] = tmp }
  } else { res[p][1] = tmp }

  return res
}

module.exports = parseParams


/***/ }),

/***/ 9370:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(3649);
const index_gen$1 = __nccwpck_require__(7831);
exports.v2 = index_gen;
exports.v3 = index_gen$1;


/***/ }),

/***/ 6149:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const marshalling_gen = __nccwpck_require__(469);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /**
   * Create a new Project for an Organization. Deprecated in favor of Account
   * API v3. Generate a new Project for an Organization, specifying its
   * configuration including name and description.
   *
   * @deprecated
   * @param request - The request {@link CreateProjectRequest}
   * @returns A Promise of Project
   */
  createProject = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateProjectRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/account/v2/projects`
    },
    marshalling_gen.unmarshalProject
  );
  pageOfListProjects = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/account/v2/projects`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        [
          "organization_id",
          request.organizationId ?? this.client.settings.defaultOrganizationId
        ],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_ids", request.projectIds]
      )
    },
    marshalling_gen.unmarshalListProjectsResponse
  );
  /**
   * List all Projects of an Organization. Deprecated in favor of Account API
   * v3. List all Projects of an Organization. The response will include the
   * total number of Projects as well as their associated Organizations, names
   * and IDs. Other information include the creation and update date of the
   * Project.
   *
   * @deprecated
   * @param request - The request {@link ListProjectsRequest}
   * @returns A Promise of ListProjectsResponse
   */
  listProjects = (request = {}) => resourcePaginator.enrichForPagination("projects", this.pageOfListProjects, request);
  /**
   * Get an existing Project. Deprecated in favor of Account API v3. Retrieve
   * information about an existing Project, specified by its Project ID. Its
   * full details, including ID, name and description, are returned in the
   * response object.
   *
   * @deprecated
   * @param request - The request {@link GetProjectRequest}
   * @returns A Promise of Project
   */
  getProject = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/account/v2/projects/${marshalling.validatePathParam("projectId", request.projectId ?? this.client.settings.defaultProjectId)}`
    },
    marshalling_gen.unmarshalProject
  );
  /**
   * Delete an existing Project. Deprecated in favor of Account API v3. Delete
   * an existing Project, specified by its Project ID. The Project needs to be
   * empty (meaning there are no resources left in it) to be deleted
   * effectively. Note that deleting a Project is permanent, and cannot be
   * undone.
   *
   * @deprecated
   * @param request - The request {@link DeleteProjectRequest}
   */
  deleteProject = (request = {}) => this.client.fetch({
    method: "DELETE",
    path: `/account/v2/projects/${marshalling.validatePathParam("projectId", request.projectId ?? this.client.settings.defaultProjectId)}`
  });
  /**
   * Update Project. Deprecated in favor of Account API v3. Update the
   * parameters of an existing Project, specified by its Project ID. These
   * parameters include the name and description.
   *
   * @deprecated
   * @param request - The request {@link UpdateProjectRequest}
   * @returns A Promise of Project
   */
  updateProject = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateProjectRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/account/v2/projects/${marshalling.validatePathParam("projectId", request.projectId ?? this.client.settings.defaultProjectId)}`
    },
    marshalling_gen.unmarshalProject
  );
}
exports.API = API;


/***/ }),

/***/ 3649:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(6149);
exports.API = api_gen.API;


/***/ }),

/***/ 469:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const randomName = __nccwpck_require__(8118);
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalProject = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Project' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    description: data.description,
    id: data.id,
    name: data.name,
    organizationId: data.organization_id,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalListProjectsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListProjectsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    projects: marshalling.unmarshalArrayOfObject(data.projects, unmarshalProject),
    totalCount: data.total_count
  };
};
const marshalCreateProjectRequest = (request, defaults) => ({
  description: request.description,
  name: request.name || randomName("proj"),
  organization_id: request.organizationId ?? defaults.defaultOrganizationId
});
const marshalUpdateProjectRequest = (request, defaults) => ({
  description: request.description,
  name: request.name
});
exports.marshalCreateProjectRequest = marshalCreateProjectRequest;
exports.marshalUpdateProjectRequest = marshalUpdateProjectRequest;
exports.unmarshalListProjectsResponse = unmarshalListProjectsResponse;
exports.unmarshalProject = unmarshalProject;


/***/ }),

/***/ 8702:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const marshalling_gen = __nccwpck_require__(653);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class ProjectAPI extends api.API {
  /**
   * Create a new Project for an Organization. Generate a new Project for an
   * Organization, specifying its configuration including name and description.
   *
   * @param request - The request {@link ProjectApiCreateProjectRequest}
   * @returns A Promise of Project
   */
  createProject = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalProjectApiCreateProjectRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/account/v3/projects`
    },
    marshalling_gen.unmarshalProject
  );
  pageOfListProjects = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/account/v3/projects`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        [
          "organization_id",
          request.organizationId ?? this.client.settings.defaultOrganizationId
        ],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_ids", request.projectIds]
      )
    },
    marshalling_gen.unmarshalListProjectsResponse
  );
  /**
   * List all Projects of an Organization. List all Projects of an Organization.
   * The response will include the total number of Projects as well as their
   * associated Organizations, names, and IDs. Other information includes the
   * creation and update date of the Project.
   *
   * @param request - The request {@link ProjectApiListProjectsRequest}
   * @returns A Promise of ListProjectsResponse
   */
  listProjects = (request = {}) => resourcePaginator.enrichForPagination("projects", this.pageOfListProjects, request);
  /**
   * Get an existing Project. Retrieve information about an existing Project,
   * specified by its Project ID. Its full details, including ID, name and
   * description, are returned in the response object.
   *
   * @param request - The request {@link ProjectApiGetProjectRequest}
   * @returns A Promise of Project
   */
  getProject = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/account/v3/projects/${marshalling.validatePathParam("projectId", request.projectId ?? this.client.settings.defaultProjectId)}`
    },
    marshalling_gen.unmarshalProject
  );
  /**
   * Delete an existing Project. Delete an existing Project, specified by its
   * Project ID. The Project needs to be empty (meaning there are no resources
   * left in it) to be deleted effectively. Note that deleting a Project is
   * permanent, and cannot be undone.
   *
   * @param request - The request {@link ProjectApiDeleteProjectRequest}
   */
  deleteProject = (request = {}) => this.client.fetch({
    method: "DELETE",
    path: `/account/v3/projects/${marshalling.validatePathParam("projectId", request.projectId ?? this.client.settings.defaultProjectId)}`
  });
  /**
   * Update Project. Update the parameters of an existing Project, specified by
   * its Project ID. These parameters include the name and description.
   *
   * @param request - The request {@link ProjectApiUpdateProjectRequest}
   * @returns A Promise of Project
   */
  updateProject = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalProjectApiUpdateProjectRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/account/v3/projects/${marshalling.validatePathParam("projectId", request.projectId ?? this.client.settings.defaultProjectId)}`
    },
    marshalling_gen.unmarshalProject
  );
}
exports.ProjectAPI = ProjectAPI;


/***/ }),

/***/ 7831:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(8702);
const validationRules_gen = __nccwpck_require__(7693);
exports.ProjectAPI = api_gen.ProjectAPI;
exports.ValidationRules = validationRules_gen;


/***/ }),

/***/ 653:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const randomName = __nccwpck_require__(8118);
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalProject = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Project' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    description: data.description,
    id: data.id,
    name: data.name,
    organizationId: data.organization_id,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalListProjectsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListProjectsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    projects: marshalling.unmarshalArrayOfObject(data.projects, unmarshalProject),
    totalCount: data.total_count
  };
};
const marshalProjectApiCreateProjectRequest = (request, defaults) => ({
  description: request.description,
  name: request.name || randomName("proj"),
  organization_id: request.organizationId ?? defaults.defaultOrganizationId
});
const marshalProjectApiUpdateProjectRequest = (request, defaults) => ({
  description: request.description,
  name: request.name
});
exports.marshalProjectApiCreateProjectRequest = marshalProjectApiCreateProjectRequest;
exports.marshalProjectApiUpdateProjectRequest = marshalProjectApiUpdateProjectRequest;
exports.unmarshalListProjectsResponse = unmarshalListProjectsResponse;
exports.unmarshalProject = unmarshalProject;


/***/ }),

/***/ 7693:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const ProjectApiCreateProjectRequest = {
  description: {
    maxLength: 200
  },
  name: {
    maxLength: 64,
    minLength: 1,
    pattern: /^[a-zA-Z0-9\._\- ]+$/
  }
};
const ProjectApiListProjectsRequest = {
  name: {
    maxLength: 64,
    minLength: 1,
    pattern: /^[a-zA-Z0-9\._\- ]+$/
  },
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 100
  }
};
const ProjectApiUpdateProjectRequest = {
  description: {
    maxLength: 200
  },
  name: {
    maxLength: 64,
    minLength: 1,
    pattern: /^[a-zA-Z0-9\._\- ]+$/
  }
};
exports.ProjectApiCreateProjectRequest = ProjectApiCreateProjectRequest;
exports.ProjectApiListProjectsRequest = ProjectApiListProjectsRequest;
exports.ProjectApiUpdateProjectRequest = ProjectApiUpdateProjectRequest;


/***/ }),

/***/ 7224:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(6286);
exports.v1alpha1 = index_gen;


/***/ }),

/***/ 4119:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const content_gen = __nccwpck_require__(3571);
const marshalling_gen = __nccwpck_require__(4240);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available zones of the API. */
  static LOCALITIES = ["fr-par-3"];
  /**
   * List server types. List all technical details about Apple silicon server
   * types available in the specified zone. Since there is only one Availability
   * Zone for Apple silicon servers, the targeted value is `fr-par-3`.
   *
   * @param request - The request {@link ListServerTypesRequest}
   * @returns A Promise of ListServerTypesResponse
   */
  listServerTypes = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/apple-silicon/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/server-types`
    },
    marshalling_gen.unmarshalListServerTypesResponse
  );
  /**
   * Get a server type. Get technical details (CPU, disk size etc.) of a server
   * type.
   *
   * @param request - The request {@link GetServerTypeRequest}
   * @returns A Promise of ServerType
   */
  getServerType = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/apple-silicon/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/server-type/${marshalling.validatePathParam("serverType", request.serverType)}`
    },
    marshalling_gen.unmarshalServerType
  );
  /**
   * Create a server. Create a new server in the targeted zone, specifying its
   * configuration including name and type.
   *
   * @param request - The request {@link CreateServerRequest}
   * @returns A Promise of Server
   */
  createServer = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateServerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/apple-silicon/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers`
    },
    marshalling_gen.unmarshalServer
  );
  pageOfListServers = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/apple-silicon/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListServersResponse
  );
  /**
   * List all servers. List all servers in the specified zone. By default,
   * returned servers in the list are ordered by creation date in ascending
   * order, though this can be modified via the `order_by` field.
   *
   * @param request - The request {@link ListServersRequest}
   * @returns A Promise of ListServersResponse
   */
  listServers = (request = {}) => resourcePaginator.enrichForPagination("servers", this.pageOfListServers, request);
  pageOfListOS = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/apple-silicon/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/os`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["server_type", request.serverType]
      )
    },
    marshalling_gen.unmarshalListOSResponse
  );
  /**
   * List all Operating Systems (OS). List all Operating Systems (OS). The
   * response will include the total number of OS as well as their associated
   * IDs, names and labels.
   *
   * @param request - The request {@link ListOSRequest}
   * @returns A Promise of ListOSResponse
   */
  listOS = (request = {}) => resourcePaginator.enrichForPagination("os", this.pageOfListOS, request);
  /**
   * Get an Operating System (OS). Get an Operating System (OS). The response
   * will include the OS's unique ID as well as its name and label.
   *
   * @param request - The request {@link GetOSRequest}
   * @returns A Promise of OS
   */
  getOS = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/apple-silicon/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/os/${marshalling.validatePathParam("osId", request.osId)}`
    },
    marshalling_gen.unmarshalOS
  );
  /**
   * Get a server. Retrieve information about an existing Apple silicon server,
   * specified by its server ID. Its full details, including name, status and IP
   * address, are returned in the response object.
   *
   * @param request - The request {@link GetServerRequest}
   * @returns A Promise of Server
   */
  getServer = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/apple-silicon/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}`
    },
    marshalling_gen.unmarshalServer
  );
  /**
   * Waits for {@link Server} to be in a final state.
   *
   * @param request - The request {@link GetServerRequest}
   * @param options - The waiting options
   * @returns A Promise of Server
   */
  waitForServer = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.SERVER_TRANSIENT_STATUSES.includes(res.status))),
    this.getServer,
    request,
    options
  );
  /**
   * Update a server. Update the parameters of an existing Apple silicon server,
   * specified by its server ID.
   *
   * @param request - The request {@link UpdateServerRequest}
   * @returns A Promise of Server
   */
  updateServer = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateServerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/apple-silicon/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}`
    },
    marshalling_gen.unmarshalServer
  );
  /**
   * Delete a server. Delete an existing Apple silicon server, specified by its
   * server ID. Deleting a server is permanent, and cannot be undone. Note that
   * the minimum allocation period for Apple silicon-as-a-service is 24 hours,
   * meaning you cannot delete your server prior to that.
   *
   * @param request - The request {@link DeleteServerRequest}
   */
  deleteServer = (request) => this.client.fetch({
    method: "DELETE",
    path: `/apple-silicon/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}`
  });
  /**
   * Reboot a server. Reboot an existing Apple silicon server, specified by its
   * server ID.
   *
   * @param request - The request {@link RebootServerRequest}
   * @returns A Promise of Server
   */
  rebootServer = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/apple-silicon/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/reboot`
    },
    marshalling_gen.unmarshalServer
  );
  /**
   * Reinstall a server. Reinstall an existing Apple silicon server (specified
   * by its server ID) from a new image (OS). All the data on the disk is
   * deleted and all configuration is reset to the defailt configuration values
   * of the image (OS).
   *
   * @param request - The request {@link ReinstallServerRequest}
   * @returns A Promise of Server
   */
  reinstallServer = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalReinstallServerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/apple-silicon/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/reinstall`
    },
    marshalling_gen.unmarshalServer
  );
}
exports.API = API;


/***/ }),

/***/ 3571:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const SERVER_TRANSIENT_STATUSES = [
  "starting",
  "rebooting",
  "updating",
  "locking",
  "unlocking",
  "reinstalling"
];
exports.SERVER_TRANSIENT_STATUSES = SERVER_TRANSIENT_STATUSES;


/***/ }),

/***/ 6286:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(4119);
const content_gen = __nccwpck_require__(3571);
exports.API = api_gen.API;
exports.SERVER_TRANSIENT_STATUSES = content_gen.SERVER_TRANSIENT_STATUSES;


/***/ }),

/***/ 4240:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const randomName = __nccwpck_require__(8118);
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalOS = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'OS' failed as data isn't a dictionary.`
    );
  }
  return {
    compatibleServerTypes: data.compatible_server_types,
    family: data.family,
    id: data.id,
    imageUrl: data.image_url,
    isBeta: data.is_beta,
    label: data.label,
    name: data.name,
    version: data.version,
    xcodeVersion: data.xcode_version
  };
};
const unmarshalServerTypeCPU = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerTypeCPU' failed as data isn't a dictionary.`
    );
  }
  return {
    coreCount: data.core_count,
    frequency: data.frequency,
    name: data.name
  };
};
const unmarshalServerTypeDisk = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerTypeDisk' failed as data isn't a dictionary.`
    );
  }
  return {
    capacity: data.capacity,
    type: data.type
  };
};
const unmarshalServerTypeGPU = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerTypeGPU' failed as data isn't a dictionary.`
    );
  }
  return {
    count: data.count
  };
};
const unmarshalServerTypeMemory = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerTypeMemory' failed as data isn't a dictionary.`
    );
  }
  return {
    capacity: data.capacity,
    type: data.type
  };
};
const unmarshalServerTypeNetwork = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerTypeNetwork' failed as data isn't a dictionary.`
    );
  }
  return {
    publicBandwidthBps: data.public_bandwidth_bps
  };
};
const unmarshalServerType = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerType' failed as data isn't a dictionary.`
    );
  }
  return {
    cpu: data.cpu ? unmarshalServerTypeCPU(data.cpu) : void 0,
    defaultOs: data.default_os ? unmarshalOS(data.default_os) : void 0,
    disk: data.disk ? unmarshalServerTypeDisk(data.disk) : void 0,
    gpu: data.gpu ? unmarshalServerTypeGPU(data.gpu) : void 0,
    memory: data.memory ? unmarshalServerTypeMemory(data.memory) : void 0,
    minimumLeaseDuration: data.minimum_lease_duration,
    name: data.name,
    network: data.network ? unmarshalServerTypeNetwork(data.network) : void 0,
    stock: data.stock
  };
};
const unmarshalServer = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Server' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    deletableAt: marshalling.unmarshalDate(data.deletable_at),
    deletionScheduled: data.deletion_scheduled,
    id: data.id,
    ip: data.ip,
    name: data.name,
    organizationId: data.organization_id,
    os: data.os ? unmarshalOS(data.os) : void 0,
    projectId: data.project_id,
    sshUsername: data.ssh_username,
    status: data.status,
    sudoPassword: data.sudo_password,
    type: data.type,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    vncUrl: data.vnc_url,
    zone: data.zone
  };
};
const unmarshalListOSResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListOSResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    os: marshalling.unmarshalArrayOfObject(data.os, unmarshalOS),
    totalCount: data.total_count
  };
};
const unmarshalListServerTypesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListServerTypesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    serverTypes: marshalling.unmarshalArrayOfObject(data.server_types, unmarshalServerType)
  };
};
const unmarshalListServersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListServersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    servers: marshalling.unmarshalArrayOfObject(data.servers, unmarshalServer),
    totalCount: data.total_count
  };
};
const marshalCreateServerRequest = (request, defaults) => ({
  name: request.name || randomName("as"),
  os_id: request.osId,
  project_id: request.projectId ?? defaults.defaultProjectId,
  type: request.type
});
const marshalReinstallServerRequest = (request, defaults) => ({
  os_id: request.osId
});
const marshalUpdateServerRequest = (request, defaults) => ({
  name: request.name,
  schedule_deletion: request.scheduleDeletion
});
exports.marshalCreateServerRequest = marshalCreateServerRequest;
exports.marshalReinstallServerRequest = marshalReinstallServerRequest;
exports.marshalUpdateServerRequest = marshalUpdateServerRequest;
exports.unmarshalListOSResponse = unmarshalListOSResponse;
exports.unmarshalListServerTypesResponse = unmarshalListServerTypesResponse;
exports.unmarshalListServersResponse = unmarshalListServersResponse;
exports.unmarshalOS = unmarshalOS;
exports.unmarshalServer = unmarshalServer;
exports.unmarshalServerType = unmarshalServerType;


/***/ }),

/***/ 4230:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index = __nccwpck_require__(2210);
exports.v1 = index;


/***/ }),

/***/ 6385:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const content_gen = __nccwpck_require__(883);
const marshalling_gen = __nccwpck_require__(5178);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available zones of the API. */
  static LOCALITIES = [
    "fr-par-1",
    "fr-par-2",
    "nl-ams-1",
    "nl-ams-2"
  ];
  pageOfListServers = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["option_id", request.optionId],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["status", request.status],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListServersResponse
  );
  /**
   * List Elastic Metal servers for an Organization. List Elastic Metal servers
   * for a specific Organization.
   *
   * @param request - The request {@link ListServersRequest}
   * @returns A Promise of ListServersResponse
   */
  listServers = (request = {}) => resourcePaginator.enrichForPagination("servers", this.pageOfListServers, request);
  /**
   * Get a specific Elastic Metal server. Get full details of an existing
   * Elastic Metal server associated with the ID.
   *
   * @param request - The request {@link GetServerRequest}
   * @returns A Promise of Server
   */
  getServer = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}`
    },
    marshalling_gen.unmarshalServer
  );
  /**
   * Waits for {@link Server} to be in a final state.
   *
   * @param request - The request {@link GetServerRequest}
   * @param options - The waiting options
   * @returns A Promise of Server
   */
  waitForServer = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.SERVER_TRANSIENT_STATUSES.includes(res.status))),
    this.getServer,
    request,
    options
  );
  /**
   * Create an Elastic Metal server. Create a new Elastic Metal server. Once the
   * server is created, proceed with the [installation of an OS](#post-3e949e).
   *
   * @param request - The request {@link CreateServerRequest}
   * @returns A Promise of Server
   */
  createServer = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateServerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers`
    },
    marshalling_gen.unmarshalServer
  );
  /**
   * Update an Elastic Metal server. Update the server associated with the ID.
   * You can update parameters such as the server's name, tags and description.
   * Any parameters left null in the request body are not updated.
   *
   * @param request - The request {@link UpdateServerRequest}
   * @returns A Promise of Server
   */
  updateServer = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateServerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}`
    },
    marshalling_gen.unmarshalServer
  );
  /**
   * Install an Elastic Metal server. Install an Operating System (OS) on the
   * Elastic Metal server with a specific ID.
   *
   * @param request - The request {@link InstallServerRequest}
   * @returns A Promise of Server
   */
  installServer = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalInstallServerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/install`
    },
    marshalling_gen.unmarshalServer
  );
  /**
   * Return server metrics. Get the ping status of the server associated with
   * the ID.
   *
   * @param request - The request {@link GetServerMetricsRequest}
   * @returns A Promise of GetServerMetricsResponse
   */
  getServerMetrics = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/metrics`
    },
    marshalling_gen.unmarshalGetServerMetricsResponse
  );
  /**
   * Delete an Elastic Metal server. Delete the server associated with the ID.
   *
   * @param request - The request {@link DeleteServerRequest}
   * @returns A Promise of Server
   */
  deleteServer = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}`
    },
    marshalling_gen.unmarshalServer
  );
  /**
   * Reboot an Elastic Metal server. Reboot the Elastic Metal server associated
   * with the ID, use the `boot_type` `rescue` to reboot the server in rescue
   * mode.
   *
   * @param request - The request {@link RebootServerRequest}
   * @returns A Promise of Server
   */
  rebootServer = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRebootServerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/reboot`
    },
    marshalling_gen.unmarshalServer
  );
  /**
   * Start an Elastic Metal server. Start the server associated with the ID.
   *
   * @param request - The request {@link StartServerRequest}
   * @returns A Promise of Server
   */
  startServer = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalStartServerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/start`
    },
    marshalling_gen.unmarshalServer
  );
  /**
   * Stop an Elastic Metal server. Stop the server associated with the ID. The
   * server remains allocated to your account and all data remains on the local
   * storage of the server.
   *
   * @param request - The request {@link StopServerRequest}
   * @returns A Promise of Server
   */
  stopServer = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/stop`
    },
    marshalling_gen.unmarshalServer
  );
  pageOfListServerEvents = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/events`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListServerEventsResponse
  );
  /**
   * List server events. List event (i.e. start/stop/reboot) associated to the
   * server ID.
   *
   * @param request - The request {@link ListServerEventsRequest}
   * @returns A Promise of ListServerEventsResponse
   */
  listServerEvents = (request) => resourcePaginator.enrichForPagination("events", this.pageOfListServerEvents, request);
  /**
   * Start BMC access. Start BMC (Baseboard Management Controller) access
   * associated with the ID. The BMC (Baseboard Management Controller) access is
   * available one hour after the installation of the server. You need first to
   * create an option Remote Access. You will find the ID and the price with a
   * call to listOffers
   * (https://developers.scaleway.com/en/products/baremetal/api/#get-78db92).
   * Then add the option
   * https://developers.scaleway.com/en/products/baremetal/api/#post-b14abd.
   * After adding the BMC option, you need to Get Remote Access to get the
   * login/password
   * https://developers.scaleway.com/en/products/baremetal/api/#get-cefc0f. Do
   * not forget to delete the Option after use.
   *
   * @param request - The request {@link StartBMCAccessRequest}
   * @returns A Promise of BMCAccess
   */
  startBMCAccess = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalStartBMCAccessRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/bmc-access`
    },
    marshalling_gen.unmarshalBMCAccess
  );
  /**
   * Get BMC access. Get the BMC (Baseboard Management Controller) access
   * associated with the ID, including the URL and login information needed to
   * connect.
   *
   * @param request - The request {@link GetBMCAccessRequest}
   * @returns A Promise of BMCAccess
   */
  getBMCAccess = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/bmc-access`
    },
    marshalling_gen.unmarshalBMCAccess
  );
  /**
   * Stop BMC access. Stop BMC (Baseboard Management Controller) access
   * associated with the ID.
   *
   * @param request - The request {@link StopBMCAccessRequest}
   */
  stopBMCAccess = (request) => this.client.fetch({
    method: "DELETE",
    path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/bmc-access`
  });
  /**
   * Update IP. Configure the IP address associated with the server ID and IP
   * ID. You can use this method to set a reverse DNS for an IP address.
   *
   * @param request - The request {@link UpdateIPRequest}
   * @returns A Promise of IP
   */
  updateIP = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateIPRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/ips/${marshalling.validatePathParam("ipId", request.ipId)}`
    },
    marshalling_gen.unmarshalIP
  );
  /**
   * Add server option. Add an option, such as Private Networks, to a specific
   * server.
   *
   * @param request - The request {@link AddOptionServerRequest}
   * @returns A Promise of Server
   */
  addOptionServer = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalAddOptionServerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/options/${marshalling.validatePathParam("optionId", request.optionId)}`
    },
    marshalling_gen.unmarshalServer
  );
  /**
   * Delete server option. Delete an option from a specific server.
   *
   * @param request - The request {@link DeleteOptionServerRequest}
   * @returns A Promise of Server
   */
  deleteOptionServer = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/options/${marshalling.validatePathParam("optionId", request.optionId)}`
    },
    marshalling_gen.unmarshalServer
  );
  pageOfListOffers = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/offers`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["subscription_period", request.subscriptionPeriod]
      )
    },
    marshalling_gen.unmarshalListOffersResponse
  );
  /**
   * List offers. List all available Elastic Metal server configurations.
   *
   * @param request - The request {@link ListOffersRequest}
   * @returns A Promise of ListOffersResponse
   */
  listOffers = (request = {}) => resourcePaginator.enrichForPagination("offers", this.pageOfListOffers, request);
  /**
   * Get offer. Get details of an offer identified by its offer ID.
   *
   * @param request - The request {@link GetOfferRequest}
   * @returns A Promise of Offer
   */
  getOffer = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/offers/${marshalling.validatePathParam("offerId", request.offerId)}`
    },
    marshalling_gen.unmarshalOffer
  );
  /**
   * Get option. Return specific option for the ID.
   *
   * @param request - The request {@link GetOptionRequest}
   * @returns A Promise of Option
   */
  getOption = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/options/${marshalling.validatePathParam("optionId", request.optionId)}`
    },
    marshalling_gen.unmarshalOption
  );
  pageOfListOptions = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/options`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["offer_id", request.offerId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListOptionsResponse
  );
  /**
   * List options. List all options matching with filters.
   *
   * @param request - The request {@link ListOptionsRequest}
   * @returns A Promise of ListOptionsResponse
   */
  listOptions = (request = {}) => resourcePaginator.enrichForPagination("options", this.pageOfListOptions, request);
  pageOfListSettings = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/settings`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ]
      )
    },
    marshalling_gen.unmarshalListSettingsResponse
  );
  /**
   * List all settings. Return all settings for a Project ID.
   *
   * @param request - The request {@link ListSettingsRequest}
   * @returns A Promise of ListSettingsResponse
   */
  listSettings = (request = {}) => resourcePaginator.enrichForPagination("settings", this.pageOfListSettings, request);
  /**
   * Update setting. Update a setting for a Project ID (enable or disable).
   *
   * @param request - The request {@link UpdateSettingRequest}
   * @returns A Promise of Setting
   */
  updateSetting = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateSettingRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/settings/${marshalling.validatePathParam("settingId", request.settingId)}`
    },
    marshalling_gen.unmarshalSetting
  );
  pageOfListOS = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/os`,
      urlParams: marshalling.urlParams(
        ["offer_id", request.offerId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListOSResponse
  );
  /**
   * List available OSes. List all OSes that are available for installation on
   * Elastic Metal servers.
   *
   * @param request - The request {@link ListOSRequest}
   * @returns A Promise of ListOSResponse
   */
  listOS = (request = {}) => resourcePaginator.enrichForPagination("os", this.pageOfListOS, request);
  /**
   * Get OS with an ID. Return the specific OS for the ID.
   *
   * @param request - The request {@link GetOSRequest}
   * @returns A Promise of OS
   */
  getOS = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/os/${marshalling.validatePathParam("osId", request.osId)}`
    },
    marshalling_gen.unmarshalOS
  );
}
class PrivateNetworkAPI extends api.API {
  /** Lists the available zones of the API. */
  static LOCALITIES = ["fr-par-2"];
  /**
   * Add a server to a Private Network.
   *
   * @param request - The request
   *   {@link PrivateNetworkApiAddServerPrivateNetworkRequest}
   * @returns A Promise of ServerPrivateNetwork
   */
  addServerPrivateNetwork = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalPrivateNetworkApiAddServerPrivateNetworkRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/private-networks`
    },
    marshalling_gen.unmarshalServerPrivateNetwork
  );
  /**
   * Set multiple Private Networks on a server.
   *
   * @param request - The request
   *   {@link PrivateNetworkApiSetServerPrivateNetworksRequest}
   * @returns A Promise of SetServerPrivateNetworksResponse
   */
  setServerPrivateNetworks = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalPrivateNetworkApiSetServerPrivateNetworksRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/private-networks`
    },
    marshalling_gen.unmarshalSetServerPrivateNetworksResponse
  );
  pageOfListServerPrivateNetworks = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/server-private-networks`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["private_network_id", request.privateNetworkId],
        ["project_id", request.projectId],
        ["server_id", request.serverId]
      )
    },
    marshalling_gen.unmarshalListServerPrivateNetworksResponse
  );
  /**
   * List the Private Networks of a server.
   *
   * @param request - The request
   *   {@link PrivateNetworkApiListServerPrivateNetworksRequest}
   * @returns A Promise of ListServerPrivateNetworksResponse
   */
  listServerPrivateNetworks = (request = {}) => resourcePaginator.enrichForPagination(
    "serverPrivateNetworks",
    this.pageOfListServerPrivateNetworks,
    request
  );
  /**
   * Delete a Private Network.
   *
   * @param request - The request
   *   {@link PrivateNetworkApiDeleteServerPrivateNetworkRequest}
   */
  deleteServerPrivateNetwork = (request) => this.client.fetch({
    method: "DELETE",
    path: `/baremetal/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/private-networks/${marshalling.validatePathParam("privateNetworkId", request.privateNetworkId)}`
  });
}
exports.API = API;
exports.PrivateNetworkAPI = PrivateNetworkAPI;


/***/ }),

/***/ 4860:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api_gen = __nccwpck_require__(6385);
const content_gen = __nccwpck_require__(883);
class BaremetalV1UtilsAPI extends api_gen.API {
  /**
   * Waits for {@link ServerInstall} to be in a final state.
   *
   * @param request - The request {@link GetServerRequest}
   * @param options - The waiting options
   * @returns A Promise of ServerInstall
   */
  waitForServerInstall = (request, options) => intervalRetrier.tryAtIntervals(
    async () => {
      const value = await this.getServer(request).then((server) => {
        if (!server.install) {
          throw new Error(
            `Server creation has not begun for server ${request.serverId}`
          );
        }
        return server.install;
      });
      return {
        done: !content_gen.SERVER_INSTALL_TRANSIENT_STATUSES.includes(value.status),
        value
      };
    },
    intervalRetrier.createExponentialBackoffStrategy(
      options?.minDelay ?? 1,
      options?.maxDelay ?? 30
    ),
    options?.timeout
  );
}
exports.BaremetalV1UtilsAPI = BaremetalV1UtilsAPI;


/***/ }),

/***/ 883:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const SERVER_INSTALL_TRANSIENT_STATUSES = [
  "to_install",
  "installing"
];
const SERVER_PRIVATE_NETWORK_TRANSIENT_STATUSES = ["attaching", "detaching"];
const SERVER_TRANSIENT_STATUSES = [
  "delivering",
  "stopping",
  "starting",
  "deleting",
  "ordered",
  "resetting"
];
exports.SERVER_INSTALL_TRANSIENT_STATUSES = SERVER_INSTALL_TRANSIENT_STATUSES;
exports.SERVER_PRIVATE_NETWORK_TRANSIENT_STATUSES = SERVER_PRIVATE_NETWORK_TRANSIENT_STATUSES;
exports.SERVER_TRANSIENT_STATUSES = SERVER_TRANSIENT_STATUSES;


/***/ }),

/***/ 2210:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_utils = __nccwpck_require__(4860);
const api_gen = __nccwpck_require__(6385);
const content_gen = __nccwpck_require__(883);
const validationRules_gen = __nccwpck_require__(2036);
exports.API = api_utils.BaremetalV1UtilsAPI;
exports.PrivateNetworkAPI = api_gen.PrivateNetworkAPI;
exports.SERVER_INSTALL_TRANSIENT_STATUSES = content_gen.SERVER_INSTALL_TRANSIENT_STATUSES;
exports.SERVER_PRIVATE_NETWORK_TRANSIENT_STATUSES = content_gen.SERVER_PRIVATE_NETWORK_TRANSIENT_STATUSES;
exports.SERVER_TRANSIENT_STATUSES = content_gen.SERVER_TRANSIENT_STATUSES;
exports.ValidationRules = validationRules_gen;


/***/ }),

/***/ 5178:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const customMarshalling = __nccwpck_require__(5667);
const marshalling = __nccwpck_require__(1502);
const unmarshalIP = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'IP' failed as data isn't a dictionary.`
    );
  }
  return {
    address: data.address,
    id: data.id,
    reverse: data.reverse,
    reverseStatus: data.reverse_status,
    reverseStatusMessage: data.reverse_status_message,
    version: data.version
  };
};
const unmarshalOSOSField = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'OSOSField' failed as data isn't a dictionary.`
    );
  }
  return {
    defaultValue: data.default_value,
    editable: data.editable,
    required: data.required
  };
};
const unmarshalOS = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'OS' failed as data isn't a dictionary.`
    );
  }
  return {
    allowed: data.allowed,
    enabled: data.enabled,
    id: data.id,
    licenseRequired: data.license_required,
    logoUrl: data.logo_url,
    name: data.name,
    password: data.password ? unmarshalOSOSField(data.password) : void 0,
    servicePassword: data.service_password ? unmarshalOSOSField(data.service_password) : void 0,
    serviceUser: data.service_user ? unmarshalOSOSField(data.service_user) : void 0,
    ssh: data.ssh ? unmarshalOSOSField(data.ssh) : void 0,
    user: data.user ? unmarshalOSOSField(data.user) : void 0,
    version: data.version
  };
};
const unmarshalCPU = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CPU' failed as data isn't a dictionary.`
    );
  }
  return {
    benchmark: data.benchmark,
    coreCount: data.core_count,
    frequency: data.frequency,
    name: data.name,
    threadCount: data.thread_count
  };
};
const unmarshalDisk = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Disk' failed as data isn't a dictionary.`
    );
  }
  return {
    capacity: data.capacity,
    type: data.type
  };
};
const unmarshalMemory = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Memory' failed as data isn't a dictionary.`
    );
  }
  return {
    capacity: data.capacity,
    frequency: data.frequency,
    isEcc: data.is_ecc,
    type: data.type
  };
};
const unmarshalOfferOptionOffer = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'OfferOptionOffer' failed as data isn't a dictionary.`
    );
  }
  return {
    enabled: data.enabled,
    id: data.id,
    manageable: data.manageable,
    name: data.name,
    osId: data.os_id,
    price: data.price ? customMarshalling.unmarshalMoney(data.price) : void 0,
    subscriptionPeriod: data.subscription_period
  };
};
const unmarshalPersistentMemory = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PersistentMemory' failed as data isn't a dictionary.`
    );
  }
  return {
    capacity: data.capacity,
    frequency: data.frequency,
    type: data.type
  };
};
const unmarshalRaidController = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RaidController' failed as data isn't a dictionary.`
    );
  }
  return {
    model: data.model,
    raidLevel: data.raid_level
  };
};
const unmarshalOffer = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Offer' failed as data isn't a dictionary.`
    );
  }
  return {
    bandwidth: data.bandwidth,
    commercialRange: data.commercial_range,
    cpus: marshalling.unmarshalArrayOfObject(data.cpus, unmarshalCPU),
    disks: marshalling.unmarshalArrayOfObject(data.disks, unmarshalDisk),
    enable: data.enable,
    fee: data.fee ? customMarshalling.unmarshalMoney(data.fee) : void 0,
    id: data.id,
    incompatibleOsIds: data.incompatible_os_ids,
    maxBandwidth: data.max_bandwidth,
    memories: marshalling.unmarshalArrayOfObject(data.memories, unmarshalMemory),
    name: data.name,
    operationPath: data.operation_path,
    options: marshalling.unmarshalArrayOfObject(data.options, unmarshalOfferOptionOffer),
    persistentMemories: marshalling.unmarshalArrayOfObject(
      data.persistent_memories,
      unmarshalPersistentMemory
    ),
    pricePerHour: data.price_per_hour ? customMarshalling.unmarshalMoney(data.price_per_hour) : void 0,
    pricePerMonth: data.price_per_month ? customMarshalling.unmarshalMoney(data.price_per_month) : void 0,
    privateBandwidth: data.private_bandwidth,
    quotaName: data.quota_name,
    raidControllers: marshalling.unmarshalArrayOfObject(
      data.raid_controllers,
      unmarshalRaidController
    ),
    sharedBandwidth: data.shared_bandwidth,
    stock: data.stock,
    subscriptionPeriod: data.subscription_period,
    tags: data.tags
  };
};
const unmarshalOption = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Option' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    manageable: data.manageable,
    name: data.name
  };
};
const unmarshalServerPrivateNetwork = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerPrivateNetwork' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    privateNetworkId: data.private_network_id,
    projectId: data.project_id,
    serverId: data.server_id,
    status: data.status,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    vlan: data.vlan
  };
};
const unmarshalServerInstall = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerInstall' failed as data isn't a dictionary.`
    );
  }
  return {
    hostname: data.hostname,
    osId: data.os_id,
    serviceUrl: data.service_url,
    serviceUser: data.service_user,
    sshKeyIds: data.ssh_key_ids,
    status: data.status,
    user: data.user
  };
};
const unmarshalServerOption = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerOption' failed as data isn't a dictionary.`
    );
  }
  return {
    expiresAt: marshalling.unmarshalDate(data.expires_at),
    id: data.id,
    manageable: data.manageable,
    name: data.name,
    status: data.status
  };
};
const unmarshalServerRescueServer = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerRescueServer' failed as data isn't a dictionary.`
    );
  }
  return {
    password: data.password,
    user: data.user
  };
};
const unmarshalServer = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Server' failed as data isn't a dictionary.`
    );
  }
  return {
    bootType: data.boot_type,
    createdAt: marshalling.unmarshalDate(data.created_at),
    description: data.description,
    domain: data.domain,
    id: data.id,
    install: data.install ? unmarshalServerInstall(data.install) : void 0,
    ips: marshalling.unmarshalArrayOfObject(data.ips, unmarshalIP),
    name: data.name,
    offerId: data.offer_id,
    offerName: data.offer_name,
    options: marshalling.unmarshalArrayOfObject(data.options, unmarshalServerOption),
    organizationId: data.organization_id,
    pingStatus: data.ping_status,
    projectId: data.project_id,
    rescueServer: data.rescue_server ? unmarshalServerRescueServer(data.rescue_server) : void 0,
    status: data.status,
    tags: data.tags,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    zone: data.zone
  };
};
const unmarshalSetting = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Setting' failed as data isn't a dictionary.`
    );
  }
  return {
    enabled: data.enabled,
    id: data.id,
    projectId: data.project_id,
    type: data.type
  };
};
const unmarshalBMCAccess = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'BMCAccess' failed as data isn't a dictionary.`
    );
  }
  return {
    expiresAt: marshalling.unmarshalDate(data.expires_at),
    login: data.login,
    password: data.password,
    url: data.url
  };
};
const unmarshalGetServerMetricsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetServerMetricsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    pings: data.pings ? customMarshalling.unmarshalTimeSeries(data.pings) : void 0
  };
};
const unmarshalListOSResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListOSResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    os: marshalling.unmarshalArrayOfObject(data.os, unmarshalOS),
    totalCount: data.total_count
  };
};
const unmarshalListOffersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListOffersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    offers: marshalling.unmarshalArrayOfObject(data.offers, unmarshalOffer),
    totalCount: data.total_count
  };
};
const unmarshalListOptionsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListOptionsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    options: marshalling.unmarshalArrayOfObject(data.options, unmarshalOption),
    totalCount: data.total_count
  };
};
const unmarshalServerEvent = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerEvent' failed as data isn't a dictionary.`
    );
  }
  return {
    action: data.action,
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalListServerEventsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListServerEventsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    events: marshalling.unmarshalArrayOfObject(data.events, unmarshalServerEvent),
    totalCount: data.total_count
  };
};
const unmarshalListServerPrivateNetworksResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListServerPrivateNetworksResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    serverPrivateNetworks: marshalling.unmarshalArrayOfObject(
      data.server_private_networks,
      unmarshalServerPrivateNetwork
    ),
    totalCount: data.total_count
  };
};
const unmarshalListServersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListServersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    servers: marshalling.unmarshalArrayOfObject(data.servers, unmarshalServer),
    totalCount: data.total_count
  };
};
const unmarshalListSettingsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSettingsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    settings: marshalling.unmarshalArrayOfObject(data.settings, unmarshalSetting),
    totalCount: data.total_count
  };
};
const unmarshalSetServerPrivateNetworksResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetServerPrivateNetworksResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    serverPrivateNetworks: marshalling.unmarshalArrayOfObject(
      data.server_private_networks,
      unmarshalServerPrivateNetwork
    )
  };
};
const marshalAddOptionServerRequest = (request, defaults) => ({
  expires_at: request.expiresAt
});
const marshalCreateServerRequestInstall = (request, defaults) => ({
  hostname: request.hostname,
  os_id: request.osId,
  password: request.password,
  service_password: request.servicePassword,
  service_user: request.serviceUser,
  ssh_key_ids: request.sshKeyIds,
  user: request.user
});
const marshalCreateServerRequest = (request, defaults) => ({
  description: request.description,
  install: request.install !== void 0 ? marshalCreateServerRequestInstall(request.install) : void 0,
  name: request.name,
  offer_id: request.offerId,
  option_ids: request.optionIds,
  tags: request.tags,
  ...marshalling.resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project_id",
      value: request.projectId
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization_id",
      value: request.organizationId
    }
  ])
});
const marshalInstallServerRequest = (request, defaults) => ({
  hostname: request.hostname,
  os_id: request.osId,
  password: request.password,
  service_password: request.servicePassword,
  service_user: request.serviceUser,
  ssh_key_ids: request.sshKeyIds,
  user: request.user
});
const marshalPrivateNetworkApiAddServerPrivateNetworkRequest = (request, defaults) => ({
  private_network_id: request.privateNetworkId
});
const marshalPrivateNetworkApiSetServerPrivateNetworksRequest = (request, defaults) => ({
  private_network_ids: request.privateNetworkIds
});
const marshalRebootServerRequest = (request, defaults) => ({
  boot_type: request.bootType
});
const marshalStartBMCAccessRequest = (request, defaults) => ({
  ip: request.ip
});
const marshalStartServerRequest = (request, defaults) => ({
  boot_type: request.bootType
});
const marshalUpdateIPRequest = (request, defaults) => ({
  reverse: request.reverse
});
const marshalUpdateServerRequest = (request, defaults) => ({
  description: request.description,
  name: request.name,
  tags: request.tags
});
const marshalUpdateSettingRequest = (request, defaults) => ({
  enabled: request.enabled
});
exports.marshalAddOptionServerRequest = marshalAddOptionServerRequest;
exports.marshalCreateServerRequest = marshalCreateServerRequest;
exports.marshalInstallServerRequest = marshalInstallServerRequest;
exports.marshalPrivateNetworkApiAddServerPrivateNetworkRequest = marshalPrivateNetworkApiAddServerPrivateNetworkRequest;
exports.marshalPrivateNetworkApiSetServerPrivateNetworksRequest = marshalPrivateNetworkApiSetServerPrivateNetworksRequest;
exports.marshalRebootServerRequest = marshalRebootServerRequest;
exports.marshalStartBMCAccessRequest = marshalStartBMCAccessRequest;
exports.marshalStartServerRequest = marshalStartServerRequest;
exports.marshalUpdateIPRequest = marshalUpdateIPRequest;
exports.marshalUpdateServerRequest = marshalUpdateServerRequest;
exports.marshalUpdateSettingRequest = marshalUpdateSettingRequest;
exports.unmarshalBMCAccess = unmarshalBMCAccess;
exports.unmarshalGetServerMetricsResponse = unmarshalGetServerMetricsResponse;
exports.unmarshalIP = unmarshalIP;
exports.unmarshalListOSResponse = unmarshalListOSResponse;
exports.unmarshalListOffersResponse = unmarshalListOffersResponse;
exports.unmarshalListOptionsResponse = unmarshalListOptionsResponse;
exports.unmarshalListServerEventsResponse = unmarshalListServerEventsResponse;
exports.unmarshalListServerPrivateNetworksResponse = unmarshalListServerPrivateNetworksResponse;
exports.unmarshalListServersResponse = unmarshalListServersResponse;
exports.unmarshalListSettingsResponse = unmarshalListSettingsResponse;
exports.unmarshalOS = unmarshalOS;
exports.unmarshalOffer = unmarshalOffer;
exports.unmarshalOption = unmarshalOption;
exports.unmarshalServer = unmarshalServer;
exports.unmarshalServerPrivateNetwork = unmarshalServerPrivateNetwork;
exports.unmarshalSetServerPrivateNetworksResponse = unmarshalSetServerPrivateNetworksResponse;
exports.unmarshalSetting = unmarshalSetting;


/***/ }),

/***/ 2036:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const CreateServerRequest = {
  description: {
    maxLength: 255
  },
  name: {
    minLength: 1
  }
};
const CreateServerRequestInstall = {
  hostname: {
    maxLength: 255
  },
  password: {
    maxLength: 255
  },
  servicePassword: {
    maxLength: 255
  },
  serviceUser: {
    maxLength: 255
  },
  user: {
    maxLength: 255
  }
};
const InstallServerRequest = {
  hostname: {
    maxLength: 255
  },
  password: {
    maxLength: 255
  },
  servicePassword: {
    maxLength: 255
  },
  serviceUser: {
    maxLength: 255
  },
  user: {
    maxLength: 255
  }
};
const ListOSRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const ListOffersRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const ListOptionsRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const ListServerEventsRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const ListServersRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const ListSettingsRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const UpdateServerRequest = {
  description: {
    maxLength: 255
  },
  name: {
    maxLength: 255
  }
};
exports.CreateServerRequest = CreateServerRequest;
exports.CreateServerRequestInstall = CreateServerRequestInstall;
exports.InstallServerRequest = InstallServerRequest;
exports.ListOSRequest = ListOSRequest;
exports.ListOffersRequest = ListOffersRequest;
exports.ListOptionsRequest = ListOptionsRequest;
exports.ListServerEventsRequest = ListServerEventsRequest;
exports.ListServersRequest = ListServersRequest;
exports.ListSettingsRequest = ListSettingsRequest;
exports.UpdateServerRequest = UpdateServerRequest;


/***/ }),

/***/ 2515:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(2410);
const index_gen$1 = __nccwpck_require__(7979);
exports.v2alpha1 = index_gen;
exports.v2beta1 = index_gen$1;


/***/ }),

/***/ 1661:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const marshalling_gen = __nccwpck_require__(7807);
class API extends api.API {
  /**
   * Get current month's consumption. The consumption reflects the amount of
   * money you have spent for the products you have used. The consumption value
   * is monetary and is not computed in real time.
   *
   * @param request - The request {@link GetConsumptionRequest}
   * @returns A Promise of GetConsumptionResponse
   */
  getConsumption = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/billing/v2alpha1/consumption`,
      urlParams: marshalling.urlParams([
        "organization_id",
        request.organizationId ?? this.client.settings.defaultOrganizationId
      ])
    },
    marshalling_gen.unmarshalGetConsumptionResponse
  );
  pageOfListInvoices = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/billing/v2alpha1/invoices`,
      urlParams: marshalling.urlParams(
        ["invoice_type", request.invoiceType],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["started_after", request.startedAfter],
        ["started_before", request.startedBefore]
      )
    },
    marshalling_gen.unmarshalListInvoicesResponse
  );
  /**
   * List invoices. List all your invoices, filtering by `start_date` and
   * `invoice_type`. Each invoice has its own ID.
   *
   * @param request - The request {@link ListInvoicesRequest}
   * @returns A Promise of ListInvoicesResponse
   */
  listInvoices = (request = {}) => resourcePaginator.enrichForPagination("invoices", this.pageOfListInvoices, request);
  /**
   * Download an invoice. Download a specific invoice, specified by its ID.
   *
   * @param request - The request {@link DownloadInvoiceRequest}
   * @returns A Promise of Blob
   */
  downloadInvoice = (request) => this.client.fetch({
    method: "GET",
    path: `/billing/v2alpha1/invoices/${marshalling.validatePathParam("invoiceId", request.invoiceId)}/download`,
    urlParams: marshalling.urlParams(["dl", 1], ["file_type", request.fileType]),
    responseType: "blob"
  });
  pageOfListDiscounts = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/billing/v2alpha1/discounts`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListDiscountsResponse
  );
  /**
   * List all user's discounts. List all discounts for an organization and
   * usable categories/products/offers/references/regions/zones where the
   * discount can be applied.
   *
   * @param request - The request {@link ListDiscountsRequest}
   * @returns A Promise of ListDiscountsResponse
   */
  listDiscounts = (request = {}) => resourcePaginator.enrichForPagination("discounts", this.pageOfListDiscounts, request);
}
exports.API = API;


/***/ }),

/***/ 2410:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(1661);
exports.API = api_gen.API;


/***/ }),

/***/ 7807:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const customMarshalling = __nccwpck_require__(5667);
const marshalling = __nccwpck_require__(1502);
const unmarshalGetConsumptionResponseConsumption = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetConsumptionResponseConsumption' failed as data isn't a dictionary.`
    );
  }
  return {
    category: data.category,
    description: data.description,
    operationPath: data.operation_path,
    projectId: data.project_id,
    value: data.value ? customMarshalling.unmarshalMoney(data.value) : void 0
  };
};
const unmarshalGetConsumptionResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetConsumptionResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    consumptions: marshalling.unmarshalArrayOfObject(
      data.consumptions,
      unmarshalGetConsumptionResponseConsumption
    ),
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalDiscountCoupon = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DiscountCoupon' failed as data isn't a dictionary.`
    );
  }
  return {
    description: data.description
  };
};
const unmarshalDiscountFilter = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DiscountFilter' failed as data isn't a dictionary.`
    );
  }
  return {
    type: data.type,
    value: data.value
  };
};
const unmarshalDiscount = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Discount' failed as data isn't a dictionary.`
    );
  }
  return {
    coupon: data.coupon ? unmarshalDiscountCoupon(data.coupon) : void 0,
    creationDate: marshalling.unmarshalDate(data.creation_date),
    description: data.description,
    filters: marshalling.unmarshalArrayOfObject(data.filters, unmarshalDiscountFilter),
    id: data.id,
    mode: data.mode,
    organizationId: data.organization_id,
    startDate: marshalling.unmarshalDate(data.start_date),
    stopDate: marshalling.unmarshalDate(data.stop_date),
    value: data.value,
    valueRemaining: data.value_remaining,
    valueUsed: data.value_used
  };
};
const unmarshalListDiscountsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDiscountsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    discounts: marshalling.unmarshalArrayOfObject(data.discounts, unmarshalDiscount),
    totalCount: data.total_count
  };
};
const unmarshalInvoice = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Invoice' failed as data isn't a dictionary.`
    );
  }
  return {
    dueDate: marshalling.unmarshalDate(data.due_date),
    id: data.id,
    invoiceType: data.invoice_type,
    issuedDate: marshalling.unmarshalDate(data.issued_date),
    number: data.number,
    startDate: marshalling.unmarshalDate(data.start_date),
    totalTaxed: data.total_taxed ? customMarshalling.unmarshalMoney(data.total_taxed) : void 0,
    totalUntaxed: data.total_untaxed ? customMarshalling.unmarshalMoney(data.total_untaxed) : void 0
  };
};
const unmarshalListInvoicesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListInvoicesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    invoices: marshalling.unmarshalArrayOfObject(data.invoices, unmarshalInvoice),
    totalCount: data.total_count
  };
};
exports.unmarshalGetConsumptionResponse = unmarshalGetConsumptionResponse;
exports.unmarshalListDiscountsResponse = unmarshalListDiscountsResponse;
exports.unmarshalListInvoicesResponse = unmarshalListInvoicesResponse;


/***/ }),

/***/ 3726:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const marshalling_gen = __nccwpck_require__(3012);
class API extends api.API {
  pageOfListConsumptions = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/billing/v2beta1/consumptions`,
      urlParams: marshalling.urlParams(
        ["billing_period", request.billingPeriod],
        ["category_name", request.categoryName],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ...Object.entries(
          marshalling.resolveOneOf([
            {
              default: this.client.settings.defaultOrganizationId,
              param: "organization_id",
              value: request.organizationId
            },
            {
              default: this.client.settings.defaultProjectId,
              param: "project_id",
              value: request.projectId
            }
          ])
        )
      )
    },
    marshalling_gen.unmarshalListConsumptionsResponse
  );
  /**
   * Get monthly consumption. Consumption allows you to retrieve your past or
   * current consumption cost, by project or category.
   *
   * @param request - The request {@link ListConsumptionsRequest}
   * @returns A Promise of ListConsumptionsResponse
   */
  listConsumptions = (request = {}) => resourcePaginator.enrichForPagination("consumptions", this.pageOfListConsumptions, request);
  pageOfListTaxes = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/billing/v2beta1/taxes`,
      urlParams: marshalling.urlParams(
        ["billing_period", request.billingPeriod],
        ["order_by", request.orderBy],
        [
          "organization_id",
          request.organizationId ?? this.client.settings.defaultOrganizationId
        ],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListTaxesResponse
  );
  /**
   * Get monthly consumption taxes. Consumption Tax allows you to retrieve your
   * past or current tax charges, by project or category.
   *
   * @param request - The request {@link ListTaxesRequest}
   * @returns A Promise of ListTaxesResponse
   */
  listTaxes = (request = {}) => resourcePaginator.enrichForPagination("taxes", this.pageOfListTaxes, request);
  pageOfListInvoices = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/billing/v2beta1/invoices`,
      urlParams: marshalling.urlParams(
        ["billing_period_start_after", request.billingPeriodStartAfter],
        ["billing_period_start_before", request.billingPeriodStartBefore],
        ["invoice_type", request.invoiceType],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListInvoicesResponse
  );
  /**
   * List invoices. List all your invoices, filtering by `start_date` and
   * `invoice_type`. Each invoice has its own ID.
   *
   * @param request - The request {@link ListInvoicesRequest}
   * @returns A Promise of ListInvoicesResponse
   */
  listInvoices = (request = {}) => resourcePaginator.enrichForPagination("invoices", this.pageOfListInvoices, request);
  /**
   * Export invoices. Export invoices in a CSV file.
   *
   * @param request - The request {@link ExportInvoicesRequest}
   * @returns A Promise of Blob
   */
  exportInvoices = (request = {}) => this.client.fetch({
    method: "GET",
    path: `/billing/v2beta1/export-invoices`,
    urlParams: marshalling.urlParams(
      ["dl", 1],
      ["billing_period_start_after", request.billingPeriodStartAfter],
      ["billing_period_start_before", request.billingPeriodStartBefore],
      ["file_type", request.fileType],
      ["invoice_type", request.invoiceType],
      ["order_by", request.orderBy],
      ["organization_id", request.organizationId],
      ["page", request.page],
      ["page_size", request.pageSize ?? this.client.settings.defaultPageSize]
    ),
    responseType: "blob"
  });
  /**
   * Get an invoice. Get a specific invoice, specified by its ID.
   *
   * @param request - The request {@link GetInvoiceRequest}
   * @returns A Promise of Invoice
   */
  getInvoice = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/billing/v2beta1/invoices/${marshalling.validatePathParam("invoiceId", request.invoiceId)}`
    },
    marshalling_gen.unmarshalInvoice
  );
  /**
   * Download an invoice. Download a specific invoice, specified by its ID.
   *
   * @param request - The request {@link DownloadInvoiceRequest}
   * @returns A Promise of Blob
   */
  downloadInvoice = (request) => this.client.fetch({
    method: "GET",
    path: `/billing/v2beta1/invoices/${marshalling.validatePathParam("invoiceId", request.invoiceId)}/download`,
    urlParams: marshalling.urlParams(["dl", 1], ["file_type", request.fileType]),
    responseType: "blob"
  });
  pageOfListDiscounts = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/billing/v2beta1/discounts`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListDiscountsResponse
  );
  /**
   * List discounts. List all discounts for your organization and usable
   * categories, products, offers, references, regions and zones where the
   * discount can be applied.
   *
   * @param request - The request {@link ListDiscountsRequest}
   * @returns A Promise of ListDiscountsResponse
   */
  listDiscounts = (request = {}) => resourcePaginator.enrichForPagination("discounts", this.pageOfListDiscounts, request);
}
exports.API = API;


/***/ }),

/***/ 7979:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(3726);
exports.API = api_gen.API;


/***/ }),

/***/ 3012:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const customMarshalling = __nccwpck_require__(5667);
const marshalling = __nccwpck_require__(1502);
const unmarshalInvoice = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Invoice' failed as data isn't a dictionary.`
    );
  }
  return {
    billingPeriod: marshalling.unmarshalDate(data.billing_period),
    dueDate: marshalling.unmarshalDate(data.due_date),
    id: data.id,
    issuedDate: marshalling.unmarshalDate(data.issued_date),
    number: data.number,
    organizationId: data.organization_id,
    organizationName: data.organization_name,
    sellerName: data.seller_name,
    startDate: marshalling.unmarshalDate(data.start_date),
    state: data.state,
    stopDate: marshalling.unmarshalDate(data.stop_date),
    totalDiscount: data.total_discount ? customMarshalling.unmarshalMoney(data.total_discount) : void 0,
    totalTax: data.total_tax ? customMarshalling.unmarshalMoney(data.total_tax) : void 0,
    totalTaxed: data.total_taxed ? customMarshalling.unmarshalMoney(data.total_taxed) : void 0,
    totalUndiscount: data.total_undiscount ? customMarshalling.unmarshalMoney(data.total_undiscount) : void 0,
    totalUntaxed: data.total_untaxed ? customMarshalling.unmarshalMoney(data.total_untaxed) : void 0,
    type: data.type
  };
};
const unmarshalListConsumptionsResponseConsumption = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListConsumptionsResponseConsumption' failed as data isn't a dictionary.`
    );
  }
  return {
    billedQuantity: data.billed_quantity,
    categoryName: data.category_name,
    productName: data.product_name,
    projectId: data.project_id,
    resourceName: data.resource_name,
    sku: data.sku,
    unit: data.unit,
    value: data.value ? customMarshalling.unmarshalMoney(data.value) : void 0
  };
};
const unmarshalListConsumptionsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListConsumptionsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    consumptions: marshalling.unmarshalArrayOfObject(
      data.consumptions,
      unmarshalListConsumptionsResponseConsumption
    ),
    totalCount: data.total_count,
    totalDiscountUntaxedValue: data.total_discount_untaxed_value,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalDiscountCoupon = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DiscountCoupon' failed as data isn't a dictionary.`
    );
  }
  return {
    description: data.description
  };
};
const unmarshalDiscountFilter = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DiscountFilter' failed as data isn't a dictionary.`
    );
  }
  return {
    type: data.type,
    value: data.value
  };
};
const unmarshalDiscount = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Discount' failed as data isn't a dictionary.`
    );
  }
  return {
    coupon: data.coupon ? unmarshalDiscountCoupon(data.coupon) : void 0,
    creationDate: marshalling.unmarshalDate(data.creation_date),
    description: data.description,
    filters: marshalling.unmarshalArrayOfObject(data.filters, unmarshalDiscountFilter),
    id: data.id,
    mode: data.mode,
    organizationId: data.organization_id,
    startDate: marshalling.unmarshalDate(data.start_date),
    stopDate: marshalling.unmarshalDate(data.stop_date),
    value: data.value,
    valueRemaining: data.value_remaining,
    valueUsed: data.value_used
  };
};
const unmarshalListDiscountsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDiscountsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    discounts: marshalling.unmarshalArrayOfObject(data.discounts, unmarshalDiscount),
    totalCount: data.total_count
  };
};
const unmarshalListInvoicesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListInvoicesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    invoices: marshalling.unmarshalArrayOfObject(data.invoices, unmarshalInvoice),
    totalCount: data.total_count
  };
};
const unmarshalListTaxesResponseTax = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListTaxesResponseTax' failed as data isn't a dictionary.`
    );
  }
  return {
    currency: data.currency,
    description: data.description,
    rate: data.rate,
    totalTaxValue: data.total_tax_value
  };
};
const unmarshalListTaxesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListTaxesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    taxes: marshalling.unmarshalArrayOfObject(data.taxes, unmarshalListTaxesResponseTax),
    totalCount: data.total_count,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
exports.unmarshalInvoice = unmarshalInvoice;
exports.unmarshalListConsumptionsResponse = unmarshalListConsumptionsResponse;
exports.unmarshalListDiscountsResponse = unmarshalListDiscountsResponse;
exports.unmarshalListInvoicesResponse = unmarshalListInvoicesResponse;
exports.unmarshalListTaxesResponse = unmarshalListTaxesResponse;


/***/ }),

/***/ 8332:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(6873);
exports.v1alpha1 = index_gen;


/***/ }),

/***/ 7554:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const content_gen = __nccwpck_require__(3305);
const marshalling_gen = __nccwpck_require__(7238);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available zones of the API. */
  static LOCALITIES = [
    "fr-par-1",
    "fr-par-2",
    "nl-ams-1",
    "nl-ams-2",
    "nl-ams-3",
    "pl-waw-3"
  ];
  pageOfListVolumeTypes = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/block/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/volume-types`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListVolumeTypesResponse
  );
  /**
   * List volume types. List all available volume types in a specified zone. The
   * volume types listed are ordered by name in ascending order.
   *
   * @param request - The request {@link ListVolumeTypesRequest}
   * @returns A Promise of ListVolumeTypesResponse
   */
  listVolumeTypes = (request = {}) => resourcePaginator.enrichForPagination("volumeTypes", this.pageOfListVolumeTypes, request);
  pageOfListVolumes = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/block/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/volumes`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["product_resource_id", request.productResourceId],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListVolumesResponse
  );
  /**
   * List volumes. List all existing volumes in a specified zone. By default,
   * the volumes listed are ordered by creation date in ascending order. This
   * can be modified via the `order_by` field.
   *
   * @param request - The request {@link ListVolumesRequest}
   * @returns A Promise of ListVolumesResponse
   */
  listVolumes = (request = {}) => resourcePaginator.enrichForPagination("volumes", this.pageOfListVolumes, request);
  /**
   * Create a volume. To create a new volume from scratch, you must specify
   * `from_empty` and the `size`. To create a volume from an existing snapshot,
   * specify `from_snapshot` and the `snapshot_id` in the request payload
   * instead, size is optional and can be specified if you need to extend the
   * original size. The volume will take on the same volume class and underlying
   * IOPS limitations as the original snapshot.
   *
   * @param request - The request {@link CreateVolumeRequest}
   * @returns A Promise of Volume
   */
  createVolume = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateVolumeRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/block/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/volumes`
    },
    marshalling_gen.unmarshalVolume
  );
  /**
   * Get a volume. Retrieve technical information about a specific volume.
   * Details such as size, type, and status are returned in the response.
   *
   * @param request - The request {@link GetVolumeRequest}
   * @returns A Promise of Volume
   */
  getVolume = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/block/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/volumes/${marshalling.validatePathParam("volumeId", request.volumeId)}`
    },
    marshalling_gen.unmarshalVolume
  );
  /**
   * Waits for {@link Volume} to be in a final state.
   *
   * @param request - The request {@link GetVolumeRequest}
   * @param options - The waiting options
   * @returns A Promise of Volume
   */
  waitForVolume = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.VOLUME_TRANSIENT_STATUSES.includes(res.status))),
    this.getVolume,
    request,
    options
  );
  /**
   * Delete a detached volume. You must specify the `volume_id` of the volume
   * you want to delete. The volume must not be in the `in_use` status.
   *
   * @param request - The request {@link DeleteVolumeRequest}
   */
  deleteVolume = (request) => this.client.fetch({
    method: "DELETE",
    path: `/block/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/volumes/${marshalling.validatePathParam("volumeId", request.volumeId)}`
  });
  /**
   * Update a volume. Update the technical details of a volume, such as its
   * name, tags, or its new size and `volume_type` (within the same Block
   * Storage class). You can only resize a volume to a larger size. It is
   * currently not possible to change your Block Storage Class.
   *
   * @param request - The request {@link UpdateVolumeRequest}
   * @returns A Promise of Volume
   */
  updateVolume = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateVolumeRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/block/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/volumes/${marshalling.validatePathParam("volumeId", request.volumeId)}`
    },
    marshalling_gen.unmarshalVolume
  );
  pageOfListSnapshots = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/block/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/snapshots`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["volume_id", request.volumeId]
      )
    },
    marshalling_gen.unmarshalListSnapshotsResponse
  );
  /**
   * List all snapshots. List all available snapshots in a specified zone. By
   * default, the snapshots listed are ordered by creation date in ascending
   * order. This can be modified via the `order_by` field.
   *
   * @param request - The request {@link ListSnapshotsRequest}
   * @returns A Promise of ListSnapshotsResponse
   */
  listSnapshots = (request = {}) => resourcePaginator.enrichForPagination("snapshots", this.pageOfListSnapshots, request);
  /**
   * Get a snapshot. Retrieve technical information about a specific snapshot.
   * Details such as size, volume type, and status are returned in the
   * response.
   *
   * @param request - The request {@link GetSnapshotRequest}
   * @returns A Promise of Snapshot
   */
  getSnapshot = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/block/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/snapshots/${marshalling.validatePathParam("snapshotId", request.snapshotId)}`
    },
    marshalling_gen.unmarshalSnapshot
  );
  /**
   * Waits for {@link Snapshot} to be in a final state.
   *
   * @param request - The request {@link GetSnapshotRequest}
   * @param options - The waiting options
   * @returns A Promise of Snapshot
   */
  waitForSnapshot = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.SNAPSHOT_TRANSIENT_STATUSES.includes(res.status))),
    this.getSnapshot,
    request,
    options
  );
  /**
   * Create a snapshot of a volume. To create a snapshot, the volume must be in
   * the `in_use` or the `available` status. If your volume is in a transient
   * state, you need to wait until the end of the current operation.
   *
   * @param request - The request {@link CreateSnapshotRequest}
   * @returns A Promise of Snapshot
   */
  createSnapshot = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateSnapshotRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/block/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/snapshots`
    },
    marshalling_gen.unmarshalSnapshot
  );
  /**
   * (Deprecated in favor of `ImportSnapshotFromObjectStorage`). Import a
   * snapshot from a Scaleway Object Storage bucket The bucket must contain a
   * QCOW2 image. The bucket can be imported into any Availability Zone as long
   * as it is in the same region as the bucket.
   *
   * @deprecated
   * @param request - The request {@link ImportSnapshotFromS3Request}
   * @returns A Promise of Snapshot
   */
  importSnapshotFromS3 = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalImportSnapshotFromS3Request(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/block/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/snapshots/import-from-s3`
    },
    marshalling_gen.unmarshalSnapshot
  );
  /**
   * Import a snapshot from a Scaleway Object Storage bucket. The bucket must
   * contain a QCOW2 image. The bucket can be imported into any Availability
   * Zone as long as it is in the same region as the bucket.
   *
   * @param request - The request {@link ImportSnapshotFromObjectStorageRequest}
   * @returns A Promise of Snapshot
   */
  importSnapshotFromObjectStorage = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalImportSnapshotFromObjectStorageRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/block/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/snapshots/import-from-object-storage`
    },
    marshalling_gen.unmarshalSnapshot
  );
  /**
   * Export a snapshot to a Scaleway Object Storage bucket. The snapshot is
   * exported in QCOW2 format. The snapshot must not be in transient state.
   *
   * @param request - The request {@link ExportSnapshotToObjectStorageRequest}
   * @returns A Promise of Snapshot
   */
  exportSnapshotToObjectStorage = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalExportSnapshotToObjectStorageRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/block/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/snapshots/${marshalling.validatePathParam("snapshotId", request.snapshotId)}/export-to-object-storage`
    },
    marshalling_gen.unmarshalSnapshot
  );
  /**
   * Delete a snapshot. You must specify the `snapshot_id` of the snapshot you
   * want to delete. The snapshot must not be in use.
   *
   * @param request - The request {@link DeleteSnapshotRequest}
   */
  deleteSnapshot = (request) => this.client.fetch({
    method: "DELETE",
    path: `/block/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/snapshots/${marshalling.validatePathParam("snapshotId", request.snapshotId)}`
  });
  /**
   * Update a snapshot. Update the name or tags of the snapshot.
   *
   * @param request - The request {@link UpdateSnapshotRequest}
   * @returns A Promise of Snapshot
   */
  updateSnapshot = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateSnapshotRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/block/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/snapshots/${marshalling.validatePathParam("snapshotId", request.snapshotId)}`
    },
    marshalling_gen.unmarshalSnapshot
  );
}
exports.API = API;


/***/ }),

/***/ 3305:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const REFERENCE_TRANSIENT_STATUSES = [
  "attaching",
  "detaching",
  "creating"
];
const SNAPSHOT_TRANSIENT_STATUSES = [
  "creating",
  "deleting",
  "exporting"
];
const VOLUME_TRANSIENT_STATUSES = [
  "creating",
  "deleting",
  "resizing",
  "snapshotting",
  "updating"
];
exports.REFERENCE_TRANSIENT_STATUSES = REFERENCE_TRANSIENT_STATUSES;
exports.SNAPSHOT_TRANSIENT_STATUSES = SNAPSHOT_TRANSIENT_STATUSES;
exports.VOLUME_TRANSIENT_STATUSES = VOLUME_TRANSIENT_STATUSES;


/***/ }),

/***/ 6873:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(7554);
const content_gen = __nccwpck_require__(3305);
const validationRules_gen = __nccwpck_require__(4588);
exports.API = api_gen.API;
exports.REFERENCE_TRANSIENT_STATUSES = content_gen.REFERENCE_TRANSIENT_STATUSES;
exports.SNAPSHOT_TRANSIENT_STATUSES = content_gen.SNAPSHOT_TRANSIENT_STATUSES;
exports.VOLUME_TRANSIENT_STATUSES = content_gen.VOLUME_TRANSIENT_STATUSES;
exports.ValidationRules = validationRules_gen;


/***/ }),

/***/ 7238:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const customMarshalling = __nccwpck_require__(5667);
const marshalling = __nccwpck_require__(1502);
const unmarshalReference = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Reference' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    productResourceId: data.product_resource_id,
    productResourceType: data.product_resource_type,
    status: data.status,
    type: data.type
  };
};
const unmarshalSnapshotParentVolume = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SnapshotParentVolume' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    name: data.name,
    status: data.status,
    type: data.type
  };
};
const unmarshalSnapshot = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Snapshot' failed as data isn't a dictionary.`
    );
  }
  return {
    class: data.class,
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    name: data.name,
    parentVolume: data.parent_volume ? unmarshalSnapshotParentVolume(data.parent_volume) : void 0,
    projectId: data.project_id,
    references: marshalling.unmarshalArrayOfObject(data.references, unmarshalReference),
    size: data.size,
    status: data.status,
    tags: data.tags,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    zone: data.zone
  };
};
const unmarshalVolumeSpecifications = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'VolumeSpecifications' failed as data isn't a dictionary.`
    );
  }
  return {
    class: data.class,
    perfIops: data.perf_iops
  };
};
const unmarshalVolume = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Volume' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    lastDetachedAt: marshalling.unmarshalDate(data.last_detached_at),
    name: data.name,
    parentSnapshotId: data.parent_snapshot_id,
    projectId: data.project_id,
    references: marshalling.unmarshalArrayOfObject(data.references, unmarshalReference),
    size: data.size,
    specs: data.specs ? unmarshalVolumeSpecifications(data.specs) : void 0,
    status: data.status,
    tags: data.tags,
    type: data.type,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    zone: data.zone
  };
};
const unmarshalListSnapshotsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSnapshotsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    snapshots: marshalling.unmarshalArrayOfObject(data.snapshots, unmarshalSnapshot),
    totalCount: data.total_count
  };
};
const unmarshalVolumeType = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'VolumeType' failed as data isn't a dictionary.`
    );
  }
  return {
    pricing: data.pricing ? customMarshalling.unmarshalMoney(data.pricing) : void 0,
    snapshotPricing: data.snapshot_pricing ? customMarshalling.unmarshalMoney(data.snapshot_pricing) : void 0,
    specs: data.specs ? unmarshalVolumeSpecifications(data.specs) : void 0,
    type: data.type
  };
};
const unmarshalListVolumeTypesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListVolumeTypesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    volumeTypes: marshalling.unmarshalArrayOfObject(data.volume_types, unmarshalVolumeType)
  };
};
const unmarshalListVolumesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListVolumesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    volumes: marshalling.unmarshalArrayOfObject(data.volumes, unmarshalVolume)
  };
};
const marshalCreateSnapshotRequest = (request, defaults) => ({
  name: request.name,
  project_id: request.projectId ?? defaults.defaultProjectId,
  tags: request.tags,
  volume_id: request.volumeId
});
const marshalCreateVolumeRequestFromEmpty = (request, defaults) => ({
  size: request.size
});
const marshalCreateVolumeRequestFromSnapshot = (request, defaults) => ({
  size: request.size,
  snapshot_id: request.snapshotId
});
const marshalCreateVolumeRequest = (request, defaults) => ({
  name: request.name,
  project_id: request.projectId ?? defaults.defaultProjectId,
  tags: request.tags,
  ...marshalling.resolveOneOf([
    {
      param: "from_empty",
      value: request.fromEmpty !== void 0 ? marshalCreateVolumeRequestFromEmpty(request.fromEmpty) : void 0
    },
    {
      param: "from_snapshot",
      value: request.fromSnapshot !== void 0 ? marshalCreateVolumeRequestFromSnapshot(
        request.fromSnapshot
      ) : void 0
    }
  ]),
  ...marshalling.resolveOneOf([{ param: "perf_iops", value: request.perfIops }])
});
const marshalExportSnapshotToObjectStorageRequest = (request, defaults) => ({
  bucket: request.bucket,
  key: request.key
});
const marshalImportSnapshotFromObjectStorageRequest = (request, defaults) => ({
  bucket: request.bucket,
  key: request.key,
  name: request.name,
  project_id: request.projectId ?? defaults.defaultProjectId,
  size: request.size,
  tags: request.tags
});
const marshalImportSnapshotFromS3Request = (request, defaults) => ({
  bucket: request.bucket,
  key: request.key,
  name: request.name,
  project_id: request.projectId ?? defaults.defaultProjectId,
  size: request.size,
  tags: request.tags
});
const marshalUpdateSnapshotRequest = (request, defaults) => ({
  name: request.name,
  tags: request.tags
});
const marshalUpdateVolumeRequest = (request, defaults) => ({
  name: request.name,
  perf_iops: request.perfIops,
  size: request.size,
  tags: request.tags
});
exports.marshalCreateSnapshotRequest = marshalCreateSnapshotRequest;
exports.marshalCreateVolumeRequest = marshalCreateVolumeRequest;
exports.marshalExportSnapshotToObjectStorageRequest = marshalExportSnapshotToObjectStorageRequest;
exports.marshalImportSnapshotFromObjectStorageRequest = marshalImportSnapshotFromObjectStorageRequest;
exports.marshalImportSnapshotFromS3Request = marshalImportSnapshotFromS3Request;
exports.marshalUpdateSnapshotRequest = marshalUpdateSnapshotRequest;
exports.marshalUpdateVolumeRequest = marshalUpdateVolumeRequest;
exports.unmarshalListSnapshotsResponse = unmarshalListSnapshotsResponse;
exports.unmarshalListVolumeTypesResponse = unmarshalListVolumeTypesResponse;
exports.unmarshalListVolumesResponse = unmarshalListVolumesResponse;
exports.unmarshalReference = unmarshalReference;
exports.unmarshalSnapshot = unmarshalSnapshot;
exports.unmarshalVolume = unmarshalVolume;


/***/ }),

/***/ 4588:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const CreateSnapshotRequest = {
  name: {
    minLength: 1
  }
};
const CreateVolumeRequest = {
  name: {
    minLength: 1
  }
};
const ImportSnapshotFromObjectStorageRequest = {
  name: {
    minLength: 1
  }
};
const ImportSnapshotFromS3Request = {
  name: {
    minLength: 1
  }
};
const ListSnapshotsRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const ListVolumeTypesRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const ListVolumesRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const Reference = {
  productResourceType: {
    minLength: 1
  }
};
exports.CreateSnapshotRequest = CreateSnapshotRequest;
exports.CreateVolumeRequest = CreateVolumeRequest;
exports.ImportSnapshotFromObjectStorageRequest = ImportSnapshotFromObjectStorageRequest;
exports.ImportSnapshotFromS3Request = ImportSnapshotFromS3Request;
exports.ListSnapshotsRequest = ListSnapshotsRequest;
exports.ListVolumeTypesRequest = ListVolumeTypesRequest;
exports.ListVolumesRequest = ListVolumesRequest;
exports.Reference = Reference;


/***/ }),

/***/ 1028:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(751);
const index_gen$1 = __nccwpck_require__(7219);
exports.v1 = index_gen;
exports.v1beta1 = index_gen$1;


/***/ }),

/***/ 6337:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const marshalling_gen = __nccwpck_require__(7418);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class GlobalAPI extends api.API {
  /**
   * Get your Cockpit's Grafana. Retrieve information on your Cockpit's Grafana,
   * specified by the ID of the Project the Cockpit belongs to. The output
   * returned displays the URL to access your Cockpit's Grafana.
   *
   * @param request - The request {@link GlobalApiGetGrafanaRequest}
   * @returns A Promise of Grafana
   */
  getGrafana = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1/grafana`,
      urlParams: marshalling.urlParams([
        "project_id",
        request.projectId ?? this.client.settings.defaultProjectId
      ])
    },
    marshalling_gen.unmarshalGrafana
  );
  /**
   * Synchronize Grafana data sources. Trigger the synchronization of all your
   * data sources and the alert manager in the relevant regions. The alert
   * manager will only be synchronized if you have enabled it.
   *
   * @param request - The request {@link GlobalApiSyncGrafanaDataSourcesRequest}
   */
  syncGrafanaDataSources = (request = {}) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalGlobalApiSyncGrafanaDataSourcesRequest(
        request,
        this.client.settings
      )
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/cockpit/v1/grafana/sync-data-sources`
  });
  /**
   * Create a Grafana user. Create a Grafana user to connect to your Cockpit's
   * Grafana. Upon creation, your user password displays only once, so make sure
   * that you save it. Each Grafana user is associated with a role: viewer or
   * editor. A viewer can only view dashboards, whereas an editor can create and
   * edit dashboards. Note that the `admin` username is not available for
   * creation.
   *
   * @param request - The request {@link GlobalApiCreateGrafanaUserRequest}
   * @returns A Promise of GrafanaUser
   */
  createGrafanaUser = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalGlobalApiCreateGrafanaUserRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/cockpit/v1/grafana/users`
    },
    marshalling_gen.unmarshalGrafanaUser
  );
  pageOfListGrafanaUsers = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1/grafana/users`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ]
      )
    },
    marshalling_gen.unmarshalListGrafanaUsersResponse
  );
  /**
   * List Grafana users. List all Grafana users created in your Cockpit's
   * Grafana. By default, the Grafana users returned in the list are ordered in
   * ascending order.
   *
   * @param request - The request {@link GlobalApiListGrafanaUsersRequest}
   * @returns A Promise of ListGrafanaUsersResponse
   */
  listGrafanaUsers = (request = {}) => resourcePaginator.enrichForPagination("grafanaUsers", this.pageOfListGrafanaUsers, request);
  /**
   * Delete a Grafana user. Delete a Grafana user from your Cockpit's Grafana,
   * specified by the ID of the Project the Cockpit belongs to, and the ID of
   * the Grafana user.
   *
   * @param request - The request {@link GlobalApiDeleteGrafanaUserRequest}
   */
  deleteGrafanaUser = (request) => this.client.fetch({
    method: "DELETE",
    path: `/cockpit/v1/grafana/users/${marshalling.validatePathParam("grafanaUserId", request.grafanaUserId)}`,
    urlParams: marshalling.urlParams([
      "project_id",
      request.projectId ?? this.client.settings.defaultProjectId
    ])
  });
  /**
   * Reset a Grafana user password. Reset the password of a Grafana user,
   * specified by the ID of the Project the Cockpit belongs to, and the ID of
   * the Grafana user. A new password regenerates and only displays once. Make
   * sure that you save it.
   *
   * @param request - The request
   *   {@link GlobalApiResetGrafanaUserPasswordRequest}
   * @returns A Promise of GrafanaUser
   */
  resetGrafanaUserPassword = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalGlobalApiResetGrafanaUserPasswordRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/cockpit/v1/grafana/users/${marshalling.validatePathParam("grafanaUserId", request.grafanaUserId)}/reset-password`
    },
    marshalling_gen.unmarshalGrafanaUser
  );
  pageOfListGrafanaProductDashboards = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1/grafana/product-dashboards`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListGrafanaProductDashboardsResponse
  );
  /**
   * List Scaleway resources dashboards. Retrieve a list of available dashboards
   * in Grafana, for all Scaleway resources which are integrated with Cockpit.
   *
   * @param request - The request
   *   {@link GlobalApiListGrafanaProductDashboardsRequest}
   * @returns A Promise of ListGrafanaProductDashboardsResponse
   */
  listGrafanaProductDashboards = (request = {}) => resourcePaginator.enrichForPagination(
    "dashboards",
    this.pageOfListGrafanaProductDashboards,
    request
  );
  /**
   * Get Scaleway resource dashboard. Retrieve information about the dashboard
   * of a Scaleway resource in Grafana, specified by the ID of the Project the
   * Cockpit belongs to, and the name of the dashboard.
   *
   * @param request - The request
   *   {@link GlobalApiGetGrafanaProductDashboardRequest}
   * @returns A Promise of GrafanaProductDashboard
   */
  getGrafanaProductDashboard = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1/grafana/product-dashboards/${marshalling.validatePathParam("dashboardName", request.dashboardName)}`,
      urlParams: marshalling.urlParams([
        "project_id",
        request.projectId ?? this.client.settings.defaultProjectId
      ])
    },
    marshalling_gen.unmarshalGrafanaProductDashboard
  );
  pageOfListPlans = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1/plans`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListPlansResponse
  );
  /**
   * List plan types. Retrieve a list of available pricing plan types.
   *
   * @param request - The request {@link GlobalApiListPlansRequest}
   * @returns A Promise of ListPlansResponse
   */
  listPlans = (request = {}) => resourcePaginator.enrichForPagination("plans", this.pageOfListPlans, request);
  /**
   * Apply a pricing plan. Apply a pricing plan on a given Project. You must
   * specify the ID of the pricing plan type. Note that you will be billed for
   * the plan you apply.
   *
   * @param request - The request {@link GlobalApiSelectPlanRequest}
   * @returns A Promise of Plan
   */
  selectPlan = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalGlobalApiSelectPlanRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/cockpit/v1/plans`
    },
    marshalling_gen.unmarshalPlan
  );
  /**
   * Get current plan. Retrieve a pricing plan for the given Project, specified
   * by the ID of the Project.
   *
   * @param request - The request {@link GlobalApiGetCurrentPlanRequest}
   * @returns A Promise of Plan
   */
  getCurrentPlan = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1/current-plan`,
      urlParams: marshalling.urlParams([
        "project_id",
        request.projectId ?? this.client.settings.defaultProjectId
      ])
    },
    marshalling_gen.unmarshalPlan
  );
}
class RegionalAPI extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par", "nl-ams", "pl-waw"];
  /**
   * Create a data source. You must specify the data source type upon creation.
   * Available data source types include:
   *
   * - Metrics
   * - Logs
   * - Traces The name of the data source will then be used as reference to name
   *   the associated Grafana data source.
   *
   * @param request - The request {@link RegionalApiCreateDataSourceRequest}
   * @returns A Promise of DataSource
   */
  createDataSource = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRegionalApiCreateDataSourceRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/cockpit/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/data-sources`
    },
    marshalling_gen.unmarshalDataSource
  );
  /**
   * Get a data source. Retrieve information about a given data source,
   * specified by the data source ID. The data source's information such as its
   * name, type, URL, origin, and retention period, is returned.
   *
   * @param request - The request {@link RegionalApiGetDataSourceRequest}
   * @returns A Promise of DataSource
   */
  getDataSource = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/data-sources/${marshalling.validatePathParam("dataSourceId", request.dataSourceId)}`
    },
    marshalling_gen.unmarshalDataSource
  );
  /**
   * Delete a data source. Delete a given data source, specified by the data
   * source ID. Note that deleting a data source is irreversible, and cannot be
   * undone.
   *
   * @param request - The request {@link RegionalApiDeleteDataSourceRequest}
   */
  deleteDataSource = (request) => this.client.fetch({
    method: "DELETE",
    path: `/cockpit/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/data-sources/${marshalling.validatePathParam("dataSourceId", request.dataSourceId)}`
  });
  pageOfListDataSources = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/data-sources`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["origin", request.origin],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ],
        ["types", request.types]
      )
    },
    marshalling_gen.unmarshalListDataSourcesResponse
  );
  /**
   * List data sources. Retrieve the list of data sources available in the
   * specified region. By default, the data sources returned in the list are
   * ordered by creation date, in ascending order. You can list data sources by
   * Project, type and origin.
   *
   * @param request - The request {@link RegionalApiListDataSourcesRequest}
   * @returns A Promise of ListDataSourcesResponse
   */
  listDataSources = (request = {}) => resourcePaginator.enrichForPagination("dataSources", this.pageOfListDataSources, request);
  /**
   * Update a data source. Update a given data source name, specified by the
   * data source ID.
   *
   * @param request - The request {@link RegionalApiUpdateDataSourceRequest}
   * @returns A Promise of DataSource
   */
  updateDataSource = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRegionalApiUpdateDataSourceRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/cockpit/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/data-sources/${marshalling.validatePathParam("dataSourceId", request.dataSourceId)}`
    },
    marshalling_gen.unmarshalDataSource
  );
  /**
   * Get data source usage overview. Retrieve the data source usage overview per
   * type for the specified Project.
   *
   * @param request - The request {@link RegionalApiGetUsageOverviewRequest}
   * @returns A Promise of UsageOverview
   */
  getUsageOverview = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/usage-overview`,
      urlParams: marshalling.urlParams(
        ["interval", request.interval],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ]
      )
    },
    marshalling_gen.unmarshalUsageOverview
  );
  /**
   * Create a token. Give your token the relevant scopes to ensure it has the
   * right permissions to interact with your data sources and the Alert manager.
   * Make sure that you create your token in the same regions as the data
   * sources you want to use it for. Upon creation, your token's secret key
   * display only once. Make sure that you save it.
   *
   * @param request - The request {@link RegionalApiCreateTokenRequest}
   * @returns A Promise of Token
   */
  createToken = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRegionalApiCreateTokenRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/cockpit/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/tokens`
    },
    marshalling_gen.unmarshalToken
  );
  pageOfListTokens = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/tokens`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ],
        ["token_scopes", request.tokenScopes]
      )
    },
    marshalling_gen.unmarshalListTokensResponse
  );
  /**
   * List tokens. Retrieve a list of all tokens in the specified region. By
   * default, tokens returned in the list are ordered by creation date, in
   * ascending order. You can filter tokens by Project ID and token scopes.
   *
   * @param request - The request {@link RegionalApiListTokensRequest}
   * @returns A Promise of ListTokensResponse
   */
  listTokens = (request = {}) => resourcePaginator.enrichForPagination("tokens", this.pageOfListTokens, request);
  /**
   * Get a token. Retrieve information about a given token, specified by the
   * token ID. The token's information such as its scopes, is returned.
   *
   * @param request - The request {@link RegionalApiGetTokenRequest}
   * @returns A Promise of Token
   */
  getToken = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/tokens/${marshalling.validatePathParam("tokenId", request.tokenId)}`
    },
    marshalling_gen.unmarshalToken
  );
  /**
   * Delete a token. Delete a given token, specified by the token ID. Deleting a
   * token is irreversible and cannot be undone.
   *
   * @param request - The request {@link RegionalApiDeleteTokenRequest}
   */
  deleteToken = (request) => this.client.fetch({
    method: "DELETE",
    path: `/cockpit/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/tokens/${marshalling.validatePathParam("tokenId", request.tokenId)}`
  });
  /**
   * Get the Alert manager. Retrieve information about the Alert manager which
   * is unique per Project and region. By default the Alert manager is disabled.
   * The output returned displays a URL to access the Alert manager, and whether
   * the Alert manager and managed alerts are enabled.
   *
   * @param request - The request {@link RegionalApiGetAlertManagerRequest}
   * @returns A Promise of AlertManager
   */
  getAlertManager = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/alert-manager`,
      urlParams: marshalling.urlParams([
        "project_id",
        request.projectId ?? this.client.settings.defaultProjectId
      ])
    },
    marshalling_gen.unmarshalAlertManager
  );
  /**
   * Enable the Alert manager. Enabling the Alert manager allows you to enable
   * managed alerts and create contact points in the specified Project and
   * region, to be notified when your Scaleway resources may require your
   * attention.
   *
   * @param request - The request {@link RegionalApiEnableAlertManagerRequest}
   * @returns A Promise of AlertManager
   */
  enableAlertManager = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRegionalApiEnableAlertManagerRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/cockpit/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/alert-manager/enable`
    },
    marshalling_gen.unmarshalAlertManager
  );
  /**
   * Disable the Alert manager. Disabling the Alert manager deletes the contact
   * points you have created and disables managed alerts in the specified
   * Project and region.
   *
   * @param request - The request {@link RegionalApiDisableAlertManagerRequest}
   * @returns A Promise of AlertManager
   */
  disableAlertManager = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRegionalApiDisableAlertManagerRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/cockpit/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/alert-manager/disable`
    },
    marshalling_gen.unmarshalAlertManager
  );
  /**
   * Create a contact point. Contact points are email addresses associated with
   * the default receiver, that the Alert manager sends alerts to. The source of
   * the alerts are data sources within the same Project and region as the Alert
   * manager. If you need to receive alerts for other receivers, you can create
   * additional contact points and receivers in Grafana. Make sure that you
   * select the Scaleway Alert manager.
   *
   * @param request - The request {@link RegionalApiCreateContactPointRequest}
   * @returns A Promise of ContactPoint
   */
  createContactPoint = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRegionalApiCreateContactPointRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/cockpit/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/alert-manager/contact-points`
    },
    marshalling_gen.unmarshalContactPoint
  );
  pageOfListContactPoints = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/alert-manager/contact-points`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ]
      )
    },
    marshalling_gen.unmarshalListContactPointsResponse
  );
  /**
   * List contact points. Retrieve a list of contact points for the specified
   * Project. The response lists all contact points and receivers created in
   * Grafana or via the API.
   *
   * @param request - The request {@link RegionalApiListContactPointsRequest}
   * @returns A Promise of ListContactPointsResponse
   */
  listContactPoints = (request = {}) => resourcePaginator.enrichForPagination("contactPoints", this.pageOfListContactPoints, request);
  /**
   * Delete a contact point. Delete a contact point associated with the default
   * receiver.
   *
   * @param request - The request {@link RegionalApiDeleteContactPointRequest}
   */
  deleteContactPoint = (request = {}) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalRegionalApiDeleteContactPointRequest(
        request,
        this.client.settings
      )
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/cockpit/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/alert-manager/contact-points/delete`
  });
  pageOfListManagedAlerts = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/managed-alerts`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ]
      )
    },
    marshalling_gen.unmarshalListManagedAlertsResponse
  );
  /**
   * List managed alerts. List all managed alerts for the specified Project.
   *
   * @param request - The request {@link RegionalApiListManagedAlertsRequest}
   * @returns A Promise of ListManagedAlertsResponse
   */
  listManagedAlerts = (request = {}) => resourcePaginator.enrichForPagination("alerts", this.pageOfListManagedAlerts, request);
  /**
   * Enable managed alerts. Enable the sending of managed alerts for the
   * specified Project. Managed alerts are predefined alerts that apply to
   * Scaleway recources integrated with Cockpit by default.
   *
   * @param request - The request {@link RegionalApiEnableManagedAlertsRequest}
   * @returns A Promise of AlertManager
   */
  enableManagedAlerts = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRegionalApiEnableManagedAlertsRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/cockpit/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/alert-manager/managed-alerts/enable`
    },
    marshalling_gen.unmarshalAlertManager
  );
  /**
   * Disable managed alerts. Disable the sending of managed alerts for the
   * specified Project.
   *
   * @param request - The request {@link RegionalApiDisableManagedAlertsRequest}
   * @returns A Promise of AlertManager
   */
  disableManagedAlerts = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRegionalApiDisableManagedAlertsRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/cockpit/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/alert-manager/managed-alerts/disable`
    },
    marshalling_gen.unmarshalAlertManager
  );
  /**
   * Trigger a test alert. Send a test alert to the Alert manager to make sure
   * your contact points get notified.
   *
   * @param request - The request {@link RegionalApiTriggerTestAlertRequest}
   */
  triggerTestAlert = (request = {}) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalRegionalApiTriggerTestAlertRequest(
        request,
        this.client.settings
      )
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/cockpit/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/alert-manager/trigger-test-alert`
  });
}
exports.GlobalAPI = GlobalAPI;
exports.RegionalAPI = RegionalAPI;


/***/ }),

/***/ 751:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(6337);
const validationRules_gen = __nccwpck_require__(4523);
exports.GlobalAPI = api_gen.GlobalAPI;
exports.RegionalAPI = api_gen.RegionalAPI;
exports.ValidationRules = validationRules_gen;


/***/ }),

/***/ 7418:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalContactPointEmail = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ContactPointEmail' failed as data isn't a dictionary.`
    );
  }
  return {
    to: data.to
  };
};
const unmarshalContactPoint = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ContactPoint' failed as data isn't a dictionary.`
    );
  }
  return {
    email: data.email ? unmarshalContactPointEmail(data.email) : void 0,
    region: data.region
  };
};
const unmarshalDataSource = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DataSource' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    name: data.name,
    origin: data.origin,
    projectId: data.project_id,
    region: data.region,
    synchronizedWithGrafana: data.synchronized_with_grafana,
    type: data.type,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    url: data.url
  };
};
const unmarshalGrafanaProductDashboard = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GrafanaProductDashboard' failed as data isn't a dictionary.`
    );
  }
  return {
    name: data.name,
    tags: data.tags,
    title: data.title,
    url: data.url,
    variables: data.variables
  };
};
const unmarshalGrafanaUser = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GrafanaUser' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    login: data.login,
    password: data.password,
    role: data.role
  };
};
const unmarshalPlan = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Plan' failed as data isn't a dictionary.`
    );
  }
  return {
    logsIngestionPrice: data.logs_ingestion_price,
    monthlyPrice: data.monthly_price,
    name: data.name,
    retentionLogsInterval: data.retention_logs_interval,
    retentionMetricsInterval: data.retention_metrics_interval,
    retentionTracesInterval: data.retention_traces_interval,
    sampleIngestionPrice: data.sample_ingestion_price,
    tracesIngestionPrice: data.traces_ingestion_price
  };
};
const unmarshalToken = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Token' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    name: data.name,
    projectId: data.project_id,
    region: data.region,
    scopes: data.scopes,
    secretKey: data.secret_key,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalAlertManager = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'AlertManager' failed as data isn't a dictionary.`
    );
  }
  return {
    alertManagerEnabled: data.alert_manager_enabled,
    alertManagerUrl: data.alert_manager_url,
    managedAlertsEnabled: data.managed_alerts_enabled,
    region: data.region
  };
};
const unmarshalGrafana = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Grafana' failed as data isn't a dictionary.`
    );
  }
  return {
    grafanaUrl: data.grafana_url
  };
};
const unmarshalListContactPointsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListContactPointsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    contactPoints: marshalling.unmarshalArrayOfObject(
      data.contact_points,
      unmarshalContactPoint
    ),
    hasAdditionalContactPoints: data.has_additional_contact_points,
    hasAdditionalReceivers: data.has_additional_receivers,
    totalCount: data.total_count
  };
};
const unmarshalListDataSourcesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDataSourcesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    dataSources: marshalling.unmarshalArrayOfObject(data.data_sources, unmarshalDataSource),
    totalCount: data.total_count
  };
};
const unmarshalListGrafanaProductDashboardsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListGrafanaProductDashboardsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    dashboards: marshalling.unmarshalArrayOfObject(
      data.dashboards,
      unmarshalGrafanaProductDashboard
    ),
    totalCount: data.total_count
  };
};
const unmarshalListGrafanaUsersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListGrafanaUsersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    grafanaUsers: marshalling.unmarshalArrayOfObject(
      data.grafana_users,
      unmarshalGrafanaUser
    ),
    totalCount: data.total_count
  };
};
const unmarshalAlert = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Alert' failed as data isn't a dictionary.`
    );
  }
  return {
    description: data.description,
    name: data.name,
    product: data.product,
    productFamily: data.product_family,
    rule: data.rule
  };
};
const unmarshalListManagedAlertsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListManagedAlertsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    alerts: marshalling.unmarshalArrayOfObject(data.alerts, unmarshalAlert),
    totalCount: data.total_count
  };
};
const unmarshalListPlansResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListPlansResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    plans: marshalling.unmarshalArrayOfObject(data.plans, unmarshalPlan),
    totalCount: data.total_count
  };
};
const unmarshalListTokensResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListTokensResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    tokens: marshalling.unmarshalArrayOfObject(data.tokens, unmarshalToken),
    totalCount: data.total_count
  };
};
const unmarshalUsage = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Usage' failed as data isn't a dictionary.`
    );
  }
  return {
    dataSourceId: data.data_source_id,
    dataSourceOrigin: data.data_source_origin,
    dataSourceType: data.data_source_type,
    interval: data.interval,
    projectId: data.project_id,
    quantityOverInterval: data.quantity_over_interval,
    region: data.region,
    unit: data.unit
  };
};
const unmarshalUsageOverview = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UsageOverview' failed as data isn't a dictionary.`
    );
  }
  return {
    externalLogsUsage: data.external_logs_usage ? unmarshalUsage(data.external_logs_usage) : void 0,
    externalMetricsUsage: data.external_metrics_usage ? unmarshalUsage(data.external_metrics_usage) : void 0,
    externalTracesUsage: data.external_traces_usage ? unmarshalUsage(data.external_traces_usage) : void 0,
    scalewayLogsUsage: data.scaleway_logs_usage ? unmarshalUsage(data.scaleway_logs_usage) : void 0,
    scalewayMetricsUsage: data.scaleway_metrics_usage ? unmarshalUsage(data.scaleway_metrics_usage) : void 0
  };
};
const marshalGlobalApiCreateGrafanaUserRequest = (request, defaults) => ({
  login: request.login,
  project_id: request.projectId ?? defaults.defaultProjectId,
  role: request.role
});
const marshalGlobalApiResetGrafanaUserPasswordRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalGlobalApiSelectPlanRequest = (request, defaults) => ({
  plan_name: request.planName,
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalGlobalApiSyncGrafanaDataSourcesRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalContactPointEmail = (request, defaults) => ({
  to: request.to
});
const marshalRegionalApiCreateContactPointRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId,
  ...marshalling.resolveOneOf([
    {
      param: "email",
      value: request.email !== void 0 ? marshalContactPointEmail(request.email) : void 0
    }
  ])
});
const marshalRegionalApiCreateDataSourceRequest = (request, defaults) => ({
  name: request.name,
  project_id: request.projectId ?? defaults.defaultProjectId,
  type: request.type
});
const marshalRegionalApiCreateTokenRequest = (request, defaults) => ({
  name: request.name,
  project_id: request.projectId ?? defaults.defaultProjectId,
  token_scopes: request.tokenScopes !== void 0 ? request.tokenScopes : void 0
});
const marshalRegionalApiDeleteContactPointRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId,
  ...marshalling.resolveOneOf([
    {
      param: "email",
      value: request.email !== void 0 ? marshalContactPointEmail(request.email) : void 0
    }
  ])
});
const marshalRegionalApiDisableAlertManagerRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalRegionalApiDisableManagedAlertsRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalRegionalApiEnableAlertManagerRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalRegionalApiEnableManagedAlertsRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalRegionalApiTriggerTestAlertRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalRegionalApiUpdateDataSourceRequest = (request, defaults) => ({
  name: request.name
});
exports.marshalGlobalApiCreateGrafanaUserRequest = marshalGlobalApiCreateGrafanaUserRequest;
exports.marshalGlobalApiResetGrafanaUserPasswordRequest = marshalGlobalApiResetGrafanaUserPasswordRequest;
exports.marshalGlobalApiSelectPlanRequest = marshalGlobalApiSelectPlanRequest;
exports.marshalGlobalApiSyncGrafanaDataSourcesRequest = marshalGlobalApiSyncGrafanaDataSourcesRequest;
exports.marshalRegionalApiCreateContactPointRequest = marshalRegionalApiCreateContactPointRequest;
exports.marshalRegionalApiCreateDataSourceRequest = marshalRegionalApiCreateDataSourceRequest;
exports.marshalRegionalApiCreateTokenRequest = marshalRegionalApiCreateTokenRequest;
exports.marshalRegionalApiDeleteContactPointRequest = marshalRegionalApiDeleteContactPointRequest;
exports.marshalRegionalApiDisableAlertManagerRequest = marshalRegionalApiDisableAlertManagerRequest;
exports.marshalRegionalApiDisableManagedAlertsRequest = marshalRegionalApiDisableManagedAlertsRequest;
exports.marshalRegionalApiEnableAlertManagerRequest = marshalRegionalApiEnableAlertManagerRequest;
exports.marshalRegionalApiEnableManagedAlertsRequest = marshalRegionalApiEnableManagedAlertsRequest;
exports.marshalRegionalApiTriggerTestAlertRequest = marshalRegionalApiTriggerTestAlertRequest;
exports.marshalRegionalApiUpdateDataSourceRequest = marshalRegionalApiUpdateDataSourceRequest;
exports.unmarshalAlertManager = unmarshalAlertManager;
exports.unmarshalContactPoint = unmarshalContactPoint;
exports.unmarshalDataSource = unmarshalDataSource;
exports.unmarshalGrafana = unmarshalGrafana;
exports.unmarshalGrafanaProductDashboard = unmarshalGrafanaProductDashboard;
exports.unmarshalGrafanaUser = unmarshalGrafanaUser;
exports.unmarshalListContactPointsResponse = unmarshalListContactPointsResponse;
exports.unmarshalListDataSourcesResponse = unmarshalListDataSourcesResponse;
exports.unmarshalListGrafanaProductDashboardsResponse = unmarshalListGrafanaProductDashboardsResponse;
exports.unmarshalListGrafanaUsersResponse = unmarshalListGrafanaUsersResponse;
exports.unmarshalListManagedAlertsResponse = unmarshalListManagedAlertsResponse;
exports.unmarshalListPlansResponse = unmarshalListPlansResponse;
exports.unmarshalListTokensResponse = unmarshalListTokensResponse;
exports.unmarshalPlan = unmarshalPlan;
exports.unmarshalToken = unmarshalToken;
exports.unmarshalUsageOverview = unmarshalUsageOverview;


/***/ }),

/***/ 4523:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const RegionalApiCreateDataSourceRequest = {
  name: {
    maxLength: 50,
    minLength: 3,
    pattern: /^[A-Za-z0-9-_. ]+$/
  }
};
const RegionalApiCreateTokenRequest = {
  name: {
    maxLength: 50,
    minLength: 3,
    pattern: /^[A-Za-z0-9-_]+$/
  }
};
const RegionalApiListContactPointsRequest = {
  page: {
    greaterThanOrEqual: 1
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 1e3
  }
};
const RegionalApiListDataSourcesRequest = {
  page: {
    greaterThanOrEqual: 1
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 1e3
  }
};
const RegionalApiListManagedAlertsRequest = {
  page: {
    greaterThanOrEqual: 1
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 1e3
  }
};
const RegionalApiListTokensRequest = {
  page: {
    greaterThanOrEqual: 1
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 1e3
  }
};
const RegionalApiUpdateDataSourceRequest = {
  name: {
    maxLength: 50,
    minLength: 3,
    pattern: /^[A-Za-z0-9-_. ]+$/
  }
};
exports.RegionalApiCreateDataSourceRequest = RegionalApiCreateDataSourceRequest;
exports.RegionalApiCreateTokenRequest = RegionalApiCreateTokenRequest;
exports.RegionalApiListContactPointsRequest = RegionalApiListContactPointsRequest;
exports.RegionalApiListDataSourcesRequest = RegionalApiListDataSourcesRequest;
exports.RegionalApiListManagedAlertsRequest = RegionalApiListManagedAlertsRequest;
exports.RegionalApiListTokensRequest = RegionalApiListTokensRequest;
exports.RegionalApiUpdateDataSourceRequest = RegionalApiUpdateDataSourceRequest;


/***/ }),

/***/ 3904:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const content_gen = __nccwpck_require__(3840);
const marshalling_gen = __nccwpck_require__(4919);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /**
   * Activate the Cockpit of a given Project specified by the Project ID.
   *
   * @param request - The request {@link ActivateCockpitRequest}
   * @returns A Promise of Cockpit
   */
  activateCockpit = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalActivateCockpitRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/cockpit/v1beta1/activate`
    },
    marshalling_gen.unmarshalCockpit
  );
  /**
   * Retrieve the Cockpit of a given Project specified by the Project ID.
   *
   * @param request - The request {@link GetCockpitRequest}
   * @returns A Promise of Cockpit
   */
  getCockpit = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1beta1/cockpit`,
      urlParams: marshalling.urlParams([
        "project_id",
        request.projectId ?? this.client.settings.defaultProjectId
      ])
    },
    marshalling_gen.unmarshalCockpit
  );
  /**
   * Waits for {@link Cockpit} to be in a final state.
   *
   * @param request - The request {@link GetCockpitRequest}
   * @param options - The waiting options
   * @returns A Promise of Cockpit
   */
  waitForCockpit = (request = {}, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.COCKPIT_TRANSIENT_STATUSES.includes(res.status))),
    this.getCockpit,
    request,
    options
  );
  /**
   * Retrieve metrics from your Cockpit specified by the ID of the Project the
   * Cockpit belongs to.
   *
   * @param request - The request {@link GetCockpitMetricsRequest}
   * @returns A Promise of CockpitMetrics
   */
  getCockpitMetrics = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1beta1/cockpit/metrics`,
      urlParams: marshalling.urlParams(
        ["end_date", request.endDate],
        ["metric_name", request.metricName],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ],
        ["start_date", request.startDate]
      )
    },
    marshalling_gen.unmarshalCockpitMetrics
  );
  /**
   * Deactivate the Cockpit of a given Project specified by the Project ID.
   *
   * @param request - The request {@link DeactivateCockpitRequest}
   * @returns A Promise of Cockpit
   */
  deactivateCockpit = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalDeactivateCockpitRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/cockpit/v1beta1/deactivate`
    },
    marshalling_gen.unmarshalCockpit
  );
  /**
   * Create a data source for a given Project specified by the Project ID and
   * the data source type.
   *
   * @param request - The request {@link CreateDatasourceRequest}
   * @returns A Promise of Datasource
   */
  createDatasource = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateDatasourceRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/cockpit/v1beta1/datasources`
    },
    marshalling_gen.unmarshalDatasource
  );
  /**
   * Delete a given data source specified by the data source ID.
   *
   * @param request - The request {@link DeleteDatasourceRequest}
   */
  deleteDatasource = (request) => this.client.fetch({
    method: "DELETE",
    path: `/cockpit/v1beta1/datasources/${marshalling.validatePathParam("datasourceId", request.datasourceId)}`
  });
  pageOfListDatasources = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1beta1/datasources`,
      urlParams: marshalling.urlParams(
        ["is_managed_by_scaleway", request.isManagedByScaleway],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ],
        ["types", request.types]
      )
    },
    marshalling_gen.unmarshalListDatasourcesResponse
  );
  /**
   * Get a list of data sources for the specified Project ID.
   *
   * @param request - The request {@link ListDatasourcesRequest}
   * @returns A Promise of ListDatasourcesResponse
   */
  listDatasources = (request = {}) => resourcePaginator.enrichForPagination("datasources", this.pageOfListDatasources, request);
  /**
   * Create a token in a given Project specified by the Project ID.
   *
   * @param request - The request {@link CreateTokenRequest}
   * @returns A Promise of Token
   */
  createToken = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateTokenRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/cockpit/v1beta1/tokens`
    },
    marshalling_gen.unmarshalToken
  );
  pageOfListTokens = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1beta1/tokens`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ]
      )
    },
    marshalling_gen.unmarshalListTokensResponse
  );
  /**
   * Get a list of tokens in a given Project specified by the Project ID.
   *
   * @param request - The request {@link ListTokensRequest}
   * @returns A Promise of ListTokensResponse
   */
  listTokens = (request = {}) => resourcePaginator.enrichForPagination("tokens", this.pageOfListTokens, request);
  /**
   * Retrieve a given token specified by the token ID.
   *
   * @param request - The request {@link GetTokenRequest}
   * @returns A Promise of Token
   */
  getToken = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1beta1/tokens/${marshalling.validatePathParam("tokenId", request.tokenId)}`
    },
    marshalling_gen.unmarshalToken
  );
  /**
   * Delete a given token specified by the token ID.
   *
   * @param request - The request {@link DeleteTokenRequest}
   */
  deleteToken = (request) => this.client.fetch({
    method: "DELETE",
    path: `/cockpit/v1beta1/tokens/${marshalling.validatePathParam("tokenId", request.tokenId)}`
  });
  /**
   * Create a contact point associated with the default receiver, to receive
   * alerts.
   *
   * @param request - The request {@link CreateContactPointRequest}
   * @returns A Promise of ContactPoint
   */
  createContactPoint = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateContactPointRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/cockpit/v1beta1/contact-points`
    },
    marshalling_gen.unmarshalContactPoint
  );
  pageOfListContactPoints = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1beta1/contact-points`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ]
      )
    },
    marshalling_gen.unmarshalListContactPointsResponse
  );
  /**
   * Get a list of contact points created for a given Cockpit, specified by the
   * ID of the Project the Cockpit belongs to.
   *
   * @param request - The request {@link ListContactPointsRequest}
   * @returns A Promise of ListContactPointsResponse
   */
  listContactPoints = (request = {}) => resourcePaginator.enrichForPagination("contactPoints", this.pageOfListContactPoints, request);
  /**
   * Delete a contact point associated with the default receiver.
   *
   * @param request - The request {@link DeleteContactPointRequest}
   */
  deleteContactPoint = (request = {}) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalDeleteContactPointRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/cockpit/v1beta1/delete-contact-point`
  });
  /**
   * Enable the sending of managed alerts for a given Cockpit, specified by the
   * ID of the Project the Cockpit belongs to.
   *
   * @param request - The request {@link EnableManagedAlertsRequest}
   */
  enableManagedAlerts = (request = {}) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalEnableManagedAlertsRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/cockpit/v1beta1/enable-managed-alerts`
  });
  /**
   * Disable the sending of managed alerts for a given Cockpit, specified by the
   * ID of the Project the Cockpit belongs to.
   *
   * @param request - The request {@link DisableManagedAlertsRequest}
   */
  disableManagedAlerts = (request = {}) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalDisableManagedAlertsRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/cockpit/v1beta1/disable-managed-alerts`
  });
  /**
   * Send a test alert to make sure your contact points get notified when an
   * actual alert is triggered.
   *
   * @param request - The request {@link TriggerTestAlertRequest}
   */
  triggerTestAlert = (request = {}) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalTriggerTestAlertRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/cockpit/v1beta1/trigger-test-alert`
  });
  /**
   * Create a Grafana user for your Cockpit's Grafana. Make sure you save the
   * automatically-generated password and the Grafana user ID.
   *
   * @param request - The request {@link CreateGrafanaUserRequest}
   * @returns A Promise of GrafanaUser
   */
  createGrafanaUser = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateGrafanaUserRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/cockpit/v1beta1/grafana-users`
    },
    marshalling_gen.unmarshalGrafanaUser
  );
  pageOfListGrafanaUsers = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1beta1/grafana-users`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ]
      )
    },
    marshalling_gen.unmarshalListGrafanaUsersResponse
  );
  /**
   * Get a list of all Grafana users created in your Cockpit's Grafana.
   *
   * @param request - The request {@link ListGrafanaUsersRequest}
   * @returns A Promise of ListGrafanaUsersResponse
   */
  listGrafanaUsers = (request = {}) => resourcePaginator.enrichForPagination("grafanaUsers", this.pageOfListGrafanaUsers, request);
  /**
   * Delete a Grafana user from your Cockpit's Grafana, specified by the ID of
   * the Project the Cockpit belongs to, and the ID of the Grafana user.
   *
   * @param request - The request {@link DeleteGrafanaUserRequest}
   */
  deleteGrafanaUser = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalDeleteGrafanaUserRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/cockpit/v1beta1/grafana-users/${marshalling.validatePathParam("grafanaUserId", request.grafanaUserId)}/delete`
  });
  /**
   * Reset the password of a Grafana user, specified by the ID of the Project
   * the Cockpit belongs to, and the ID of the Grafana user.
   *
   * @param request - The request {@link ResetGrafanaUserPasswordRequest}
   * @returns A Promise of GrafanaUser
   */
  resetGrafanaUserPassword = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalResetGrafanaUserPasswordRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/cockpit/v1beta1/grafana-users/${marshalling.validatePathParam("grafanaUserId", request.grafanaUserId)}/reset-password`
    },
    marshalling_gen.unmarshalGrafanaUser
  );
  pageOfListPlans = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1beta1/plans`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListPlansResponse
  );
  /**
   * Get a list of all pricing plans available.
   *
   * @param request - The request {@link ListPlansRequest}
   * @returns A Promise of ListPlansResponse
   */
  listPlans = (request = {}) => resourcePaginator.enrichForPagination("plans", this.pageOfListPlans, request);
  /**
   * Select your chosen pricing plan for your Cockpit, specifying the Cockpit's
   * Project ID and the pricing plan's ID in the request.
   *
   * @param request - The request {@link SelectPlanRequest}
   * @returns A Promise of SelectPlanResponse
   */
  selectPlan = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSelectPlanRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/cockpit/v1beta1/select-plan`
    },
    marshalling_gen.unmarshalSelectPlanResponse
  );
  pageOfListGrafanaProductDashboards = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1beta1/grafana-product-dashboards`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListGrafanaProductDashboardsResponse
  );
  /**
   * List product dashboards. Get a list of available product dashboards.
   *
   * @param request - The request {@link ListGrafanaProductDashboardsRequest}
   * @returns A Promise of ListGrafanaProductDashboardsResponse
   */
  listGrafanaProductDashboards = (request = {}) => resourcePaginator.enrichForPagination(
    "dashboards",
    this.pageOfListGrafanaProductDashboards,
    request
  );
  /**
   * Get a product dashboard. Get a product dashboard specified by the dashboard
   * ID.
   *
   * @param request - The request {@link GetGrafanaProductDashboardRequest}
   * @returns A Promise of GrafanaProductDashboard
   */
  getGrafanaProductDashboard = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/cockpit/v1beta1/grafana-product-dashboards/${marshalling.validatePathParam("dashboardName", request.dashboardName)}`,
      urlParams: marshalling.urlParams([
        "project_id",
        request.projectId ?? this.client.settings.defaultProjectId
      ])
    },
    marshalling_gen.unmarshalGrafanaProductDashboard
  );
}
exports.API = API;


/***/ }),

/***/ 3840:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const COCKPIT_TRANSIENT_STATUSES = [
  "creating",
  "deleting",
  "updating"
];
exports.COCKPIT_TRANSIENT_STATUSES = COCKPIT_TRANSIENT_STATUSES;


/***/ }),

/***/ 7219:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(3904);
const content_gen = __nccwpck_require__(3840);
exports.API = api_gen.API;
exports.COCKPIT_TRANSIENT_STATUSES = content_gen.COCKPIT_TRANSIENT_STATUSES;


/***/ }),

/***/ 4919:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const randomName = __nccwpck_require__(8118);
const json = __nccwpck_require__(2362);
const customMarshalling = __nccwpck_require__(5667);
const marshalling = __nccwpck_require__(1502);
const unmarshalContactPointEmail = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ContactPointEmail' failed as data isn't a dictionary.`
    );
  }
  return {
    to: data.to
  };
};
const unmarshalContactPoint = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ContactPoint' failed as data isn't a dictionary.`
    );
  }
  return {
    email: data.email ? unmarshalContactPointEmail(data.email) : void 0
  };
};
const unmarshalDatasource = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Datasource' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    isManagedByScaleway: data.is_managed_by_scaleway,
    name: data.name,
    projectId: data.project_id,
    type: data.type,
    url: data.url
  };
};
const unmarshalGrafanaProductDashboard = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GrafanaProductDashboard' failed as data isn't a dictionary.`
    );
  }
  return {
    dashboardName: data.dashboard_name,
    tags: data.tags,
    title: data.title,
    url: data.url,
    variables: data.variables
  };
};
const unmarshalGrafanaUser = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GrafanaUser' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    login: data.login,
    password: data.password,
    role: data.role
  };
};
const unmarshalTokenScopes = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'TokenScopes' failed as data isn't a dictionary.`
    );
  }
  return {
    queryLogs: data.query_logs,
    queryMetrics: data.query_metrics,
    queryTraces: data.query_traces,
    setupAlerts: data.setup_alerts,
    setupLogsRules: data.setup_logs_rules,
    setupMetricsRules: data.setup_metrics_rules,
    writeLogs: data.write_logs,
    writeMetrics: data.write_metrics,
    writeTraces: data.write_traces
  };
};
const unmarshalToken = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Token' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    name: data.name,
    projectId: data.project_id,
    scopes: data.scopes ? unmarshalTokenScopes(data.scopes) : void 0,
    secretKey: data.secret_key,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalCockpitEndpoints = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CockpitEndpoints' failed as data isn't a dictionary.`
    );
  }
  return {
    alertmanagerUrl: data.alertmanager_url,
    grafanaUrl: data.grafana_url,
    logsUrl: data.logs_url,
    metricsUrl: data.metrics_url,
    tracesUrl: data.traces_url
  };
};
const unmarshalPlan = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Plan' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    logsIngestionPrice: data.logs_ingestion_price,
    name: data.name,
    retentionLogsInterval: data.retention_logs_interval,
    retentionMetricsInterval: data.retention_metrics_interval,
    retentionPrice: data.retention_price,
    retentionTracesInterval: data.retention_traces_interval,
    sampleIngestionPrice: data.sample_ingestion_price,
    tracesIngestionPrice: data.traces_ingestion_price
  };
};
const unmarshalCockpit = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Cockpit' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    endpoints: data.endpoints ? unmarshalCockpitEndpoints(data.endpoints) : void 0,
    managedAlertsEnabled: data.managed_alerts_enabled,
    plan: data.plan ? unmarshalPlan(data.plan) : void 0,
    projectId: data.project_id,
    status: data.status,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalCockpitMetrics = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CockpitMetrics' failed as data isn't a dictionary.`
    );
  }
  return {
    timeseries: marshalling.unmarshalArrayOfObject(data.timeseries, customMarshalling.unmarshalTimeSeries)
  };
};
const unmarshalListContactPointsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListContactPointsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    contactPoints: marshalling.unmarshalArrayOfObject(
      data.contact_points,
      unmarshalContactPoint
    ),
    hasAdditionalContactPoints: data.has_additional_contact_points,
    hasAdditionalReceivers: data.has_additional_receivers,
    totalCount: data.total_count
  };
};
const unmarshalListDatasourcesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDatasourcesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    datasources: marshalling.unmarshalArrayOfObject(data.datasources, unmarshalDatasource),
    totalCount: data.total_count
  };
};
const unmarshalListGrafanaProductDashboardsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListGrafanaProductDashboardsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    dashboards: marshalling.unmarshalArrayOfObject(
      data.dashboards,
      unmarshalGrafanaProductDashboard
    ),
    totalCount: data.total_count
  };
};
const unmarshalListGrafanaUsersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListGrafanaUsersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    grafanaUsers: marshalling.unmarshalArrayOfObject(
      data.grafana_users,
      unmarshalGrafanaUser
    ),
    totalCount: data.total_count
  };
};
const unmarshalListPlansResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListPlansResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    plans: marshalling.unmarshalArrayOfObject(data.plans, unmarshalPlan),
    totalCount: data.total_count
  };
};
const unmarshalListTokensResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListTokensResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    tokens: marshalling.unmarshalArrayOfObject(data.tokens, unmarshalToken),
    totalCount: data.total_count
  };
};
const unmarshalSelectPlanResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SelectPlanResponse' failed as data isn't a dictionary.`
    );
  }
  return {};
};
const marshalActivateCockpitRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalContactPointEmail = (request, defaults) => ({
  to: request.to
});
const marshalContactPoint = (request, defaults) => ({
  ...marshalling.resolveOneOf([
    {
      param: "email",
      value: request.email !== void 0 ? marshalContactPointEmail(request.email) : void 0
    }
  ])
});
const marshalCreateContactPointRequest = (request, defaults) => ({
  contact_point: request.contactPoint !== void 0 ? marshalContactPoint(request.contactPoint) : void 0,
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalCreateDatasourceRequest = (request, defaults) => ({
  is_default: request.isDefault,
  name: request.name,
  project_id: request.projectId ?? defaults.defaultProjectId,
  type: request.type
});
const marshalCreateGrafanaUserRequest = (request, defaults) => ({
  login: request.login,
  project_id: request.projectId ?? defaults.defaultProjectId,
  role: request.role
});
const marshalTokenScopes = (request, defaults) => ({
  query_logs: request.queryLogs,
  query_metrics: request.queryMetrics,
  query_traces: request.queryTraces,
  setup_alerts: request.setupAlerts,
  setup_logs_rules: request.setupLogsRules,
  setup_metrics_rules: request.setupMetricsRules,
  write_logs: request.writeLogs,
  write_metrics: request.writeMetrics,
  write_traces: request.writeTraces
});
const marshalCreateTokenRequest = (request, defaults) => ({
  name: request.name || randomName("token"),
  project_id: request.projectId ?? defaults.defaultProjectId,
  scopes: request.scopes !== void 0 ? marshalTokenScopes(request.scopes) : void 0
});
const marshalDeactivateCockpitRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalDeleteContactPointRequest = (request, defaults) => ({
  contact_point: request.contactPoint !== void 0 ? marshalContactPoint(request.contactPoint) : void 0,
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalDeleteGrafanaUserRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalDisableManagedAlertsRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalEnableManagedAlertsRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalResetGrafanaUserPasswordRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalSelectPlanRequest = (request, defaults) => ({
  plan_id: request.planId,
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalTriggerTestAlertRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId
});
exports.marshalActivateCockpitRequest = marshalActivateCockpitRequest;
exports.marshalCreateContactPointRequest = marshalCreateContactPointRequest;
exports.marshalCreateDatasourceRequest = marshalCreateDatasourceRequest;
exports.marshalCreateGrafanaUserRequest = marshalCreateGrafanaUserRequest;
exports.marshalCreateTokenRequest = marshalCreateTokenRequest;
exports.marshalDeactivateCockpitRequest = marshalDeactivateCockpitRequest;
exports.marshalDeleteContactPointRequest = marshalDeleteContactPointRequest;
exports.marshalDeleteGrafanaUserRequest = marshalDeleteGrafanaUserRequest;
exports.marshalDisableManagedAlertsRequest = marshalDisableManagedAlertsRequest;
exports.marshalEnableManagedAlertsRequest = marshalEnableManagedAlertsRequest;
exports.marshalResetGrafanaUserPasswordRequest = marshalResetGrafanaUserPasswordRequest;
exports.marshalSelectPlanRequest = marshalSelectPlanRequest;
exports.marshalTriggerTestAlertRequest = marshalTriggerTestAlertRequest;
exports.unmarshalCockpit = unmarshalCockpit;
exports.unmarshalCockpitMetrics = unmarshalCockpitMetrics;
exports.unmarshalContactPoint = unmarshalContactPoint;
exports.unmarshalDatasource = unmarshalDatasource;
exports.unmarshalGrafanaProductDashboard = unmarshalGrafanaProductDashboard;
exports.unmarshalGrafanaUser = unmarshalGrafanaUser;
exports.unmarshalListContactPointsResponse = unmarshalListContactPointsResponse;
exports.unmarshalListDatasourcesResponse = unmarshalListDatasourcesResponse;
exports.unmarshalListGrafanaProductDashboardsResponse = unmarshalListGrafanaProductDashboardsResponse;
exports.unmarshalListGrafanaUsersResponse = unmarshalListGrafanaUsersResponse;
exports.unmarshalListPlansResponse = unmarshalListPlansResponse;
exports.unmarshalListTokensResponse = unmarshalListTokensResponse;
exports.unmarshalSelectPlanResponse = unmarshalSelectPlanResponse;
exports.unmarshalToken = unmarshalToken;


/***/ }),

/***/ 6210:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(1923);
exports.v1beta1 = index_gen;


/***/ }),

/***/ 58:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const content_gen = __nccwpck_require__(7361);
const marshalling_gen = __nccwpck_require__(7887);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par", "nl-ams", "pl-waw"];
  pageOfListNamespaces = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/namespaces`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListNamespacesResponse
  );
  /**
   * List all your namespaces. List all namespaces in a specified region.
   *
   * @param request - The request {@link ListNamespacesRequest}
   * @returns A Promise of ListNamespacesResponse
   */
  listNamespaces = (request = {}) => resourcePaginator.enrichForPagination("namespaces", this.pageOfListNamespaces, request);
  /**
   * Get a namespace. Get the namespace associated with the specified ID.
   *
   * @param request - The request {@link GetNamespaceRequest}
   * @returns A Promise of Namespace
   */
  getNamespace = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/namespaces/${marshalling.validatePathParam("namespaceId", request.namespaceId)}`
    },
    marshalling_gen.unmarshalNamespace
  );
  /**
   * Waits for {@link Namespace} to be in a final state.
   *
   * @param request - The request {@link GetNamespaceRequest}
   * @param options - The waiting options
   * @returns A Promise of Namespace
   */
  waitForNamespace = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.NAMESPACE_TRANSIENT_STATUSES.includes(res.status))),
    this.getNamespace,
    request,
    options
  );
  /**
   * Create a new namespace. Create a new namespace in a specified region.
   *
   * @param request - The request {@link CreateNamespaceRequest}
   * @returns A Promise of Namespace
   */
  createNamespace = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateNamespaceRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/namespaces`
    },
    marshalling_gen.unmarshalNamespace
  );
  /**
   * Update an existing namespace. Update the space associated with the
   * specified ID.
   *
   * @param request - The request {@link UpdateNamespaceRequest}
   * @returns A Promise of Namespace
   */
  updateNamespace = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateNamespaceRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/namespaces/${marshalling.validatePathParam("namespaceId", request.namespaceId)}`
    },
    marshalling_gen.unmarshalNamespace
  );
  /**
   * Delete an existing namespace. Delete the namespace associated with the
   * specified ID.
   *
   * @param request - The request {@link DeleteNamespaceRequest}
   * @returns A Promise of Namespace
   */
  deleteNamespace = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/namespaces/${marshalling.validatePathParam("namespaceId", request.namespaceId)}`
    },
    marshalling_gen.unmarshalNamespace
  );
  pageOfListContainers = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/containers`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["namespace_id", request.namespaceId],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListContainersResponse
  );
  /**
   * List all your containers. List all containers for a specified region.
   *
   * @param request - The request {@link ListContainersRequest}
   * @returns A Promise of ListContainersResponse
   */
  listContainers = (request) => resourcePaginator.enrichForPagination("containers", this.pageOfListContainers, request);
  /**
   * Get a container. Get the container associated with the specified ID.
   *
   * @param request - The request {@link GetContainerRequest}
   * @returns A Promise of Container
   */
  getContainer = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/containers/${marshalling.validatePathParam("containerId", request.containerId)}`
    },
    marshalling_gen.unmarshalContainer
  );
  /**
   * Waits for {@link Container} to be in a final state.
   *
   * @param request - The request {@link GetContainerRequest}
   * @param options - The waiting options
   * @returns A Promise of Container
   */
  waitForContainer = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.CONTAINER_TRANSIENT_STATUSES.includes(res.status))),
    this.getContainer,
    request,
    options
  );
  /**
   * Create a new container. Create a new container in the specified region.
   *
   * @param request - The request {@link CreateContainerRequest}
   * @returns A Promise of Container
   */
  createContainer = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateContainerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/containers`
    },
    marshalling_gen.unmarshalContainer
  );
  /**
   * Update an existing container. Update the container associated with the
   * specified ID.
   *
   * @param request - The request {@link UpdateContainerRequest}
   * @returns A Promise of Container
   */
  updateContainer = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateContainerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/containers/${marshalling.validatePathParam("containerId", request.containerId)}`
    },
    marshalling_gen.unmarshalContainer
  );
  /**
   * Delete a container. Delete the container associated with the specified ID.
   *
   * @param request - The request {@link DeleteContainerRequest}
   * @returns A Promise of Container
   */
  deleteContainer = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/containers/${marshalling.validatePathParam("containerId", request.containerId)}`
    },
    marshalling_gen.unmarshalContainer
  );
  /**
   * Deploy a container. Deploy a container associated with the specified ID.
   *
   * @param request - The request {@link DeployContainerRequest}
   * @returns A Promise of Container
   */
  deployContainer = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/containers/${marshalling.validatePathParam("containerId", request.containerId)}/deploy`
    },
    marshalling_gen.unmarshalContainer
  );
  pageOfListCrons = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/crons`,
      urlParams: marshalling.urlParams(
        ["container_id", request.containerId],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListCronsResponse
  );
  /**
   * List all your crons.
   *
   * @param request - The request {@link ListCronsRequest}
   * @returns A Promise of ListCronsResponse
   */
  listCrons = (request) => resourcePaginator.enrichForPagination("crons", this.pageOfListCrons, request);
  /**
   * Get a cron. Get the cron associated with the specified ID.
   *
   * @param request - The request {@link GetCronRequest}
   * @returns A Promise of Cron
   */
  getCron = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/crons/${marshalling.validatePathParam("cronId", request.cronId)}`
    },
    marshalling_gen.unmarshalCron
  );
  /**
   * Waits for {@link Cron} to be in a final state.
   *
   * @param request - The request {@link GetCronRequest}
   * @param options - The waiting options
   * @returns A Promise of Cron
   */
  waitForCron = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.CRON_TRANSIENT_STATUSES.includes(res.status))),
    this.getCron,
    request,
    options
  );
  /**
   * Create a new cron.
   *
   * @param request - The request {@link CreateCronRequest}
   * @returns A Promise of Cron
   */
  createCron = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateCronRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/crons`
    },
    marshalling_gen.unmarshalCron
  );
  /**
   * Update an existing cron. Update the cron associated with the specified ID.
   *
   * @param request - The request {@link UpdateCronRequest}
   * @returns A Promise of Cron
   */
  updateCron = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateCronRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/crons/${marshalling.validatePathParam("cronId", request.cronId)}`
    },
    marshalling_gen.unmarshalCron
  );
  /**
   * Delete an existing cron. Delete the cron associated with the specified ID.
   *
   * @param request - The request {@link DeleteCronRequest}
   * @returns A Promise of Cron
   */
  deleteCron = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/crons/${marshalling.validatePathParam("cronId", request.cronId)}`
    },
    marshalling_gen.unmarshalCron
  );
  pageOfListDomains = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/domains`,
      urlParams: marshalling.urlParams(
        ["container_id", request.containerId],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListDomainsResponse
  );
  /**
   * List all domain name bindings. List all domain name bindings in a specified
   * region.
   *
   * @param request - The request {@link ListDomainsRequest}
   * @returns A Promise of ListDomainsResponse
   */
  listDomains = (request) => resourcePaginator.enrichForPagination("domains", this.pageOfListDomains, request);
  /**
   * Get a domain name binding. Get a domain name binding for the container with
   * the specified ID.
   *
   * @param request - The request {@link GetDomainRequest}
   * @returns A Promise of Domain
   */
  getDomain = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/domains/${marshalling.validatePathParam("domainId", request.domainId)}`
    },
    marshalling_gen.unmarshalDomain
  );
  /**
   * Waits for {@link Domain} to be in a final state.
   *
   * @param request - The request {@link GetDomainRequest}
   * @param options - The waiting options
   * @returns A Promise of Domain
   */
  waitForDomain = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.DOMAIN_TRANSIENT_STATUSES.includes(res.status))),
    this.getDomain,
    request,
    options
  );
  /**
   * Create a domain name binding. Create a domain name binding for the
   * container with the specified ID.
   *
   * @param request - The request {@link CreateDomainRequest}
   * @returns A Promise of Domain
   */
  createDomain = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateDomainRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/domains`
    },
    marshalling_gen.unmarshalDomain
  );
  /**
   * Delete a domain name binding. Delete the domain name binding with the
   * specific ID.
   *
   * @param request - The request {@link DeleteDomainRequest}
   * @returns A Promise of Domain
   */
  deleteDomain = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/domains/${marshalling.validatePathParam("domainId", request.domainId)}`
    },
    marshalling_gen.unmarshalDomain
  );
  /**
   * Create a JWT token. Deprecated in favor of CreateToken.
   *
   * @deprecated
   * @param request - The request {@link IssueJWTRequest}
   * @returns A Promise of Token
   */
  issueJWT = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/issue-jwt`,
      urlParams: marshalling.urlParams(
        ["expires_at", request.expiresAt],
        ...Object.entries(
          marshalling.resolveOneOf([
            { param: "container_id", value: request.containerId },
            { param: "namespace_id", value: request.namespaceId }
          ])
        )
      )
    },
    marshalling_gen.unmarshalToken
  );
  /**
   * Create a new revocable token.
   *
   * @param request - The request {@link CreateTokenRequest}
   * @returns A Promise of Token
   */
  createToken = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateTokenRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/tokens`
    },
    marshalling_gen.unmarshalToken
  );
  /**
   * Get a token. Get a token with a specified ID.
   *
   * @param request - The request {@link GetTokenRequest}
   * @returns A Promise of Token
   */
  getToken = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/tokens/${marshalling.validatePathParam("tokenId", request.tokenId)}`
    },
    marshalling_gen.unmarshalToken
  );
  /**
   * Waits for {@link Token} to be in a final state.
   *
   * @param request - The request {@link GetTokenRequest}
   * @param options - The waiting options
   * @returns A Promise of Token
   */
  waitForToken = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.TOKEN_TRANSIENT_STATUSES.includes(res.status))),
    this.getToken,
    request,
    options
  );
  pageOfListTokens = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/tokens`,
      urlParams: marshalling.urlParams(
        ["container_id", request.containerId],
        ["namespace_id", request.namespaceId],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListTokensResponse
  );
  /**
   * List all tokens. List all tokens belonging to a specified Organization or
   * Project.
   *
   * @param request - The request {@link ListTokensRequest}
   * @returns A Promise of ListTokensResponse
   */
  listTokens = (request = {}) => resourcePaginator.enrichForPagination("tokens", this.pageOfListTokens, request);
  /**
   * Delete a token. Delete a token with a specified ID.
   *
   * @param request - The request {@link DeleteTokenRequest}
   * @returns A Promise of Token
   */
  deleteToken = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/tokens/${marshalling.validatePathParam("tokenId", request.tokenId)}`
    },
    marshalling_gen.unmarshalToken
  );
  /**
   * Create a trigger. Create a new trigger for a specified container.
   *
   * @param request - The request {@link CreateTriggerRequest}
   * @returns A Promise of Trigger
   */
  createTrigger = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateTriggerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/triggers`
    },
    marshalling_gen.unmarshalTrigger
  );
  /**
   * Get a trigger. Get a trigger with a specified ID.
   *
   * @param request - The request {@link GetTriggerRequest}
   * @returns A Promise of Trigger
   */
  getTrigger = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/triggers/${marshalling.validatePathParam("triggerId", request.triggerId)}`
    },
    marshalling_gen.unmarshalTrigger
  );
  /**
   * Waits for {@link Trigger} to be in a final state.
   *
   * @param request - The request {@link GetTriggerRequest}
   * @param options - The waiting options
   * @returns A Promise of Trigger
   */
  waitForTrigger = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.TRIGGER_TRANSIENT_STATUSES.includes(res.status))),
    this.getTrigger,
    request,
    options
  );
  pageOfListTriggers = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/triggers`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ...Object.entries(
          marshalling.resolveOneOf([
            { param: "container_id", value: request.containerId },
            { param: "namespace_id", value: request.namespaceId },
            {
              default: this.client.settings.defaultProjectId,
              param: "project_id",
              value: request.projectId
            }
          ])
        )
      )
    },
    marshalling_gen.unmarshalListTriggersResponse
  );
  /**
   * List all triggers. List all triggers belonging to a specified Organization
   * or Project.
   *
   * @param request - The request {@link ListTriggersRequest}
   * @returns A Promise of ListTriggersResponse
   */
  listTriggers = (request = {}) => resourcePaginator.enrichForPagination("triggers", this.pageOfListTriggers, request);
  /**
   * Update a trigger. Update a trigger with a specified ID.
   *
   * @param request - The request {@link UpdateTriggerRequest}
   * @returns A Promise of Trigger
   */
  updateTrigger = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateTriggerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/triggers/${marshalling.validatePathParam("triggerId", request.triggerId)}`
    },
    marshalling_gen.unmarshalTrigger
  );
  /**
   * Delete a trigger. Delete a trigger with a specified ID.
   *
   * @param request - The request {@link DeleteTriggerRequest}
   * @returns A Promise of Trigger
   */
  deleteTrigger = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/containers/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/triggers/${marshalling.validatePathParam("triggerId", request.triggerId)}`
    },
    marshalling_gen.unmarshalTrigger
  );
}
exports.API = API;


/***/ }),

/***/ 7361:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const CONTAINER_TRANSIENT_STATUSES = [
  "deleting",
  "creating",
  "pending"
];
const CRON_TRANSIENT_STATUSES = [
  "deleting",
  "creating",
  "pending"
];
const DOMAIN_TRANSIENT_STATUSES = [
  "deleting",
  "creating",
  "pending"
];
const NAMESPACE_TRANSIENT_STATUSES = [
  "deleting",
  "creating",
  "pending"
];
const TOKEN_TRANSIENT_STATUSES = ["deleting", "creating"];
const TRIGGER_TRANSIENT_STATUSES = [
  "deleting",
  "creating",
  "pending"
];
exports.CONTAINER_TRANSIENT_STATUSES = CONTAINER_TRANSIENT_STATUSES;
exports.CRON_TRANSIENT_STATUSES = CRON_TRANSIENT_STATUSES;
exports.DOMAIN_TRANSIENT_STATUSES = DOMAIN_TRANSIENT_STATUSES;
exports.NAMESPACE_TRANSIENT_STATUSES = NAMESPACE_TRANSIENT_STATUSES;
exports.TOKEN_TRANSIENT_STATUSES = TOKEN_TRANSIENT_STATUSES;
exports.TRIGGER_TRANSIENT_STATUSES = TRIGGER_TRANSIENT_STATUSES;


/***/ }),

/***/ 1923:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(58);
const content_gen = __nccwpck_require__(7361);
const validationRules_gen = __nccwpck_require__(1254);
exports.API = api_gen.API;
exports.CONTAINER_TRANSIENT_STATUSES = content_gen.CONTAINER_TRANSIENT_STATUSES;
exports.CRON_TRANSIENT_STATUSES = content_gen.CRON_TRANSIENT_STATUSES;
exports.DOMAIN_TRANSIENT_STATUSES = content_gen.DOMAIN_TRANSIENT_STATUSES;
exports.NAMESPACE_TRANSIENT_STATUSES = content_gen.NAMESPACE_TRANSIENT_STATUSES;
exports.TOKEN_TRANSIENT_STATUSES = content_gen.TOKEN_TRANSIENT_STATUSES;
exports.TRIGGER_TRANSIENT_STATUSES = content_gen.TRIGGER_TRANSIENT_STATUSES;
exports.ValidationRules = validationRules_gen;


/***/ }),

/***/ 7887:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const randomName = __nccwpck_require__(8118);
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalSecretHashedValue = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SecretHashedValue' failed as data isn't a dictionary.`
    );
  }
  return {
    hashedValue: data.hashed_value,
    key: data.key
  };
};
const unmarshalContainer = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Container' failed as data isn't a dictionary.`
    );
  }
  return {
    cpuLimit: data.cpu_limit,
    description: data.description,
    domainName: data.domain_name,
    environmentVariables: data.environment_variables,
    errorMessage: data.error_message,
    httpOption: data.http_option,
    id: data.id,
    localStorageLimit: data.local_storage_limit,
    maxConcurrency: data.max_concurrency,
    maxScale: data.max_scale,
    memoryLimit: data.memory_limit,
    minScale: data.min_scale,
    name: data.name,
    namespaceId: data.namespace_id,
    port: data.port,
    privacy: data.privacy,
    protocol: data.protocol,
    region: data.region,
    registryImage: data.registry_image,
    sandbox: data.sandbox,
    secretEnvironmentVariables: marshalling.unmarshalArrayOfObject(
      data.secret_environment_variables,
      unmarshalSecretHashedValue
    ),
    status: data.status,
    timeout: data.timeout
  };
};
const unmarshalCron = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Cron' failed as data isn't a dictionary.`
    );
  }
  return {
    args: data.args,
    containerId: data.container_id,
    id: data.id,
    name: data.name,
    schedule: data.schedule,
    status: data.status
  };
};
const unmarshalDomain = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Domain' failed as data isn't a dictionary.`
    );
  }
  return {
    containerId: data.container_id,
    errorMessage: data.error_message,
    hostname: data.hostname,
    id: data.id,
    status: data.status,
    url: data.url
  };
};
const unmarshalNamespace = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Namespace' failed as data isn't a dictionary.`
    );
  }
  return {
    description: data.description,
    environmentVariables: data.environment_variables,
    errorMessage: data.error_message,
    id: data.id,
    name: data.name,
    organizationId: data.organization_id,
    projectId: data.project_id,
    region: data.region,
    registryEndpoint: data.registry_endpoint,
    registryNamespaceId: data.registry_namespace_id,
    secretEnvironmentVariables: marshalling.unmarshalArrayOfObject(
      data.secret_environment_variables,
      unmarshalSecretHashedValue
    ),
    status: data.status
  };
};
const unmarshalToken = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Token' failed as data isn't a dictionary.`
    );
  }
  return {
    containerId: data.container_id,
    description: data.description,
    expiresAt: marshalling.unmarshalDate(data.expires_at),
    id: data.id,
    namespaceId: data.namespace_id,
    publicKey: data.public_key,
    status: data.status,
    token: data.token
  };
};
const unmarshalTriggerMnqNatsClientConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'TriggerMnqNatsClientConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    mnqCredentialId: data.mnq_credential_id,
    mnqNatsAccountId: data.mnq_nats_account_id,
    mnqProjectId: data.mnq_project_id,
    mnqRegion: data.mnq_region,
    subject: data.subject
  };
};
const unmarshalTriggerMnqSqsClientConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'TriggerMnqSqsClientConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    mnqCredentialId: data.mnq_credential_id,
    mnqProjectId: data.mnq_project_id,
    mnqRegion: data.mnq_region,
    queue: data.queue
  };
};
const unmarshalTriggerSqsClientConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'TriggerSqsClientConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    accessKey: data.access_key,
    endpoint: data.endpoint,
    queueUrl: data.queue_url,
    secretKey: data.secret_key
  };
};
const unmarshalTrigger = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Trigger' failed as data isn't a dictionary.`
    );
  }
  return {
    containerId: data.container_id,
    description: data.description,
    errorMessage: data.error_message,
    id: data.id,
    inputType: data.input_type,
    name: data.name,
    scwNatsConfig: data.scw_nats_config ? unmarshalTriggerMnqNatsClientConfig(data.scw_nats_config) : void 0,
    scwSqsConfig: data.scw_sqs_config ? unmarshalTriggerMnqSqsClientConfig(data.scw_sqs_config) : void 0,
    sqsConfig: data.sqs_config ? unmarshalTriggerSqsClientConfig(data.sqs_config) : void 0,
    status: data.status
  };
};
const unmarshalListContainersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListContainersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    containers: marshalling.unmarshalArrayOfObject(data.containers, unmarshalContainer),
    totalCount: data.total_count
  };
};
const unmarshalListCronsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListCronsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    crons: marshalling.unmarshalArrayOfObject(data.crons, unmarshalCron),
    totalCount: data.total_count
  };
};
const unmarshalListDomainsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDomainsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    domains: marshalling.unmarshalArrayOfObject(data.domains, unmarshalDomain),
    totalCount: data.total_count
  };
};
const unmarshalListNamespacesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListNamespacesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    namespaces: marshalling.unmarshalArrayOfObject(data.namespaces, unmarshalNamespace),
    totalCount: data.total_count
  };
};
const unmarshalListTokensResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListTokensResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    tokens: marshalling.unmarshalArrayOfObject(data.tokens, unmarshalToken),
    totalCount: data.total_count
  };
};
const unmarshalListTriggersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListTriggersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    triggers: marshalling.unmarshalArrayOfObject(data.triggers, unmarshalTrigger)
  };
};
const marshalSecret = (request, defaults) => ({
  key: request.key,
  value: request.value
});
const marshalCreateContainerRequest = (request, defaults) => ({
  cpu_limit: request.cpuLimit,
  description: request.description,
  environment_variables: request.environmentVariables,
  http_option: request.httpOption,
  local_storage_limit: request.localStorageLimit,
  max_concurrency: request.maxConcurrency,
  max_scale: request.maxScale,
  memory_limit: request.memoryLimit,
  min_scale: request.minScale,
  name: request.name,
  namespace_id: request.namespaceId,
  port: request.port,
  privacy: request.privacy,
  protocol: request.protocol,
  registry_image: request.registryImage,
  sandbox: request.sandbox,
  secret_environment_variables: request.secretEnvironmentVariables !== void 0 ? request.secretEnvironmentVariables.map(
    (elt) => marshalSecret(elt)
  ) : void 0,
  timeout: request.timeout
});
const marshalCreateCronRequest = (request, defaults) => ({
  args: request.args,
  container_id: request.containerId,
  name: request.name,
  schedule: request.schedule
});
const marshalCreateDomainRequest = (request, defaults) => ({
  container_id: request.containerId,
  hostname: request.hostname
});
const marshalCreateNamespaceRequest = (request, defaults) => ({
  description: request.description,
  environment_variables: request.environmentVariables,
  name: request.name || randomName("cns"),
  project_id: request.projectId ?? defaults.defaultProjectId,
  secret_environment_variables: request.secretEnvironmentVariables !== void 0 ? request.secretEnvironmentVariables.map(
    (elt) => marshalSecret(elt)
  ) : void 0
});
const marshalCreateTokenRequest = (request, defaults) => ({
  description: request.description,
  expires_at: request.expiresAt,
  ...marshalling.resolveOneOf([
    { param: "container_id", value: request.containerId },
    { param: "namespace_id", value: request.namespaceId }
  ])
});
const marshalCreateTriggerRequestMnqNatsClientConfig = (request, defaults) => ({
  mnq_nats_account_id: request.mnqNatsAccountId,
  mnq_project_id: request.mnqProjectId,
  mnq_region: request.mnqRegion,
  subject: request.subject
});
const marshalCreateTriggerRequestMnqSqsClientConfig = (request, defaults) => ({
  mnq_project_id: request.mnqProjectId,
  mnq_region: request.mnqRegion,
  queue: request.queue
});
const marshalCreateTriggerRequestSqsClientConfig = (request, defaults) => ({
  access_key: request.accessKey,
  endpoint: request.endpoint,
  queue_url: request.queueUrl,
  secret_key: request.secretKey
});
const marshalCreateTriggerRequest = (request, defaults) => ({
  container_id: request.containerId,
  description: request.description,
  name: request.name,
  ...marshalling.resolveOneOf([
    {
      param: "scw_sqs_config",
      value: request.scwSqsConfig !== void 0 ? marshalCreateTriggerRequestMnqSqsClientConfig(
        request.scwSqsConfig
      ) : void 0
    },
    {
      param: "scw_nats_config",
      value: request.scwNatsConfig !== void 0 ? marshalCreateTriggerRequestMnqNatsClientConfig(
        request.scwNatsConfig
      ) : void 0
    },
    {
      param: "sqs_config",
      value: request.sqsConfig !== void 0 ? marshalCreateTriggerRequestSqsClientConfig(
        request.sqsConfig
      ) : void 0
    }
  ])
});
const marshalUpdateContainerRequest = (request, defaults) => ({
  cpu_limit: request.cpuLimit,
  description: request.description,
  environment_variables: request.environmentVariables,
  http_option: request.httpOption,
  local_storage_limit: request.localStorageLimit,
  max_concurrency: request.maxConcurrency,
  max_scale: request.maxScale,
  memory_limit: request.memoryLimit,
  min_scale: request.minScale,
  port: request.port,
  privacy: request.privacy,
  protocol: request.protocol,
  redeploy: request.redeploy,
  registry_image: request.registryImage,
  sandbox: request.sandbox,
  secret_environment_variables: request.secretEnvironmentVariables !== void 0 ? request.secretEnvironmentVariables.map(
    (elt) => marshalSecret(elt)
  ) : void 0,
  timeout: request.timeout
});
const marshalUpdateCronRequest = (request, defaults) => ({
  args: request.args,
  container_id: request.containerId,
  name: request.name,
  schedule: request.schedule
});
const marshalUpdateNamespaceRequest = (request, defaults) => ({
  description: request.description,
  environment_variables: request.environmentVariables,
  secret_environment_variables: request.secretEnvironmentVariables !== void 0 ? request.secretEnvironmentVariables.map(
    (elt) => marshalSecret(elt)
  ) : void 0
});
const marshalUpdateTriggerRequestSqsClientConfig = (request, defaults) => ({
  access_key: request.accessKey,
  secret_key: request.secretKey
});
const marshalUpdateTriggerRequest = (request, defaults) => ({
  description: request.description,
  name: request.name,
  ...marshalling.resolveOneOf([
    {
      param: "sqs_config",
      value: request.sqsConfig !== void 0 ? marshalUpdateTriggerRequestSqsClientConfig(
        request.sqsConfig
      ) : void 0
    }
  ])
});
exports.marshalCreateContainerRequest = marshalCreateContainerRequest;
exports.marshalCreateCronRequest = marshalCreateCronRequest;
exports.marshalCreateDomainRequest = marshalCreateDomainRequest;
exports.marshalCreateNamespaceRequest = marshalCreateNamespaceRequest;
exports.marshalCreateTokenRequest = marshalCreateTokenRequest;
exports.marshalCreateTriggerRequest = marshalCreateTriggerRequest;
exports.marshalUpdateContainerRequest = marshalUpdateContainerRequest;
exports.marshalUpdateCronRequest = marshalUpdateCronRequest;
exports.marshalUpdateNamespaceRequest = marshalUpdateNamespaceRequest;
exports.marshalUpdateTriggerRequest = marshalUpdateTriggerRequest;
exports.unmarshalContainer = unmarshalContainer;
exports.unmarshalCron = unmarshalCron;
exports.unmarshalDomain = unmarshalDomain;
exports.unmarshalListContainersResponse = unmarshalListContainersResponse;
exports.unmarshalListCronsResponse = unmarshalListCronsResponse;
exports.unmarshalListDomainsResponse = unmarshalListDomainsResponse;
exports.unmarshalListNamespacesResponse = unmarshalListNamespacesResponse;
exports.unmarshalListTokensResponse = unmarshalListTokensResponse;
exports.unmarshalListTriggersResponse = unmarshalListTriggersResponse;
exports.unmarshalNamespace = unmarshalNamespace;
exports.unmarshalToken = unmarshalToken;
exports.unmarshalTrigger = unmarshalTrigger;


/***/ }),

/***/ 1254:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const CreateTriggerRequest = {
  description: {
    maxLength: 255
  },
  name: {
    maxLength: 50,
    minLength: 1
  }
};
const CreateTriggerRequestMnqNatsClientConfig = {
  mnqRegion: {
    maxLength: 20,
    minLength: 1
  },
  subject: {
    maxLength: 100,
    minLength: 1,
    pattern: /^[^\s]+$/
  }
};
const CreateTriggerRequestMnqSqsClientConfig = {
  mnqRegion: {
    maxLength: 20,
    minLength: 1
  },
  queue: {
    maxLength: 100,
    minLength: 1
  }
};
const UpdateTriggerRequest = {
  description: {
    maxLength: 255
  },
  name: {
    maxLength: 50,
    minLength: 1
  }
};
exports.CreateTriggerRequest = CreateTriggerRequest;
exports.CreateTriggerRequestMnqNatsClientConfig = CreateTriggerRequestMnqNatsClientConfig;
exports.CreateTriggerRequestMnqSqsClientConfig = CreateTriggerRequestMnqSqsClientConfig;
exports.UpdateTriggerRequest = UpdateTriggerRequest;


/***/ }),

/***/ 3411:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(4887);
exports.v1 = index_gen;


/***/ }),

/***/ 6344:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const content_gen = __nccwpck_require__(7208);
const marshalling_gen = __nccwpck_require__(6954);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available zones of the API. */
  static LOCALITIES = [
    "fr-par-1",
    "fr-par-2",
    "nl-ams-1"
  ];
  pageOfListServers = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ],
        ["search", request.search]
      )
    },
    marshalling_gen.unmarshalListServersResponse
  );
  /**
   * List baremetal servers for project.
   *
   * @param request - The request {@link ListServersRequest}
   * @returns A Promise of ListServersResponse
   */
  listServers = (request = {}) => resourcePaginator.enrichForPagination("servers", this.pageOfListServers, request);
  /**
   * Get a specific baremetal server. Get the server associated with the given
   * ID.
   *
   * @param request - The request {@link GetServerRequest}
   * @returns A Promise of Server
   */
  getServer = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}`
    },
    marshalling_gen.unmarshalServer
  );
  /**
   * Waits for {@link Server} to be in a final state.
   *
   * @param request - The request {@link GetServerRequest}
   * @param options - The waiting options
   * @returns A Promise of Server
   */
  waitForServer = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.SERVER_TRANSIENT_STATUSES.includes(res.status))),
    this.getServer,
    request,
    options
  );
  getServerBackup = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/backups`
    },
    marshalling_gen.unmarshalBackup
  );
  updateServerBackup = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateServerBackupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/backups`
    },
    marshalling_gen.unmarshalBackup
  );
  pageOfListSubscribableServerOptions = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/subscribable-server-options`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListSubscribableServerOptionsResponse
  );
  /**
   * List subscribable server options. List subscribable options associated to
   * the given server ID.
   *
   * @param request - The request {@link ListSubscribableServerOptionsRequest}
   * @returns A Promise of ListSubscribableServerOptionsResponse
   */
  listSubscribableServerOptions = (request) => resourcePaginator.enrichForPagination(
    "serverOptions",
    this.pageOfListSubscribableServerOptions,
    request
  );
  /**
   * Subscribe server option. Subscribe option for the given server ID.
   *
   * @param request - The request {@link SubscribeServerOptionRequest}
   * @returns A Promise of Service
   */
  subscribeServerOption = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSubscribeServerOptionRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/subscribe-server-option`
    },
    marshalling_gen.unmarshalService
  );
  /**
   * Create a baremetal server. Create a new baremetal server. The order return
   * you a service ID to follow the provisionning status you could call
   * GetService.
   *
   * @param request - The request {@link CreateServerRequest}
   * @returns A Promise of Service
   */
  createServer = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateServerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers`
    },
    marshalling_gen.unmarshalService
  );
  /**
   * Subscribe storage server option. Subscribe storage option for the given
   * server ID.
   *
   * @param request - The request {@link SubscribeStorageOptionsRequest}
   * @returns A Promise of SubscribeStorageOptionsResponse
   */
  subscribeStorageOptions = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSubscribeStorageOptionsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/subscribe-storage-options`
    },
    marshalling_gen.unmarshalSubscribeStorageOptionsResponse
  );
  /**
   * Update a baremetal server. Update the server associated with the given ID.
   *
   * @param request - The request {@link UpdateServerRequest}
   * @returns A Promise of Server
   */
  updateServer = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateServerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}`
    },
    marshalling_gen.unmarshalServer
  );
  updateServerTags = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateServerTagsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/tags`
    },
    marshalling_gen.unmarshalServer
  );
  /**
   * Reboot a baremetal server. Reboot the server associated with the given ID,
   * use boot param to reboot in rescue.
   *
   * @param request - The request {@link RebootServerRequest}
   */
  rebootServer = (request) => this.client.fetch({
    body: "{}",
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/reboot`
  });
  /**
   * Start a baremetal server. Start the server associated with the given ID.
   *
   * @param request - The request {@link StartServerRequest}
   */
  startServer = (request) => this.client.fetch({
    body: "{}",
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/start`
  });
  /**
   * Stop a baremetal server. Stop the server associated with the given ID.
   *
   * @param request - The request {@link StopServerRequest}
   */
  stopServer = (request) => this.client.fetch({
    body: "{}",
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/stop`
  });
  /**
   * Delete a baremetal server. Delete the server associated with the given ID.
   *
   * @param request - The request {@link DeleteServerRequest}
   */
  deleteServer = (request) => this.client.fetch({
    method: "DELETE",
    path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}`
  });
  pageOfListServerEvents = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/events`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListServerEventsResponse
  );
  /**
   * List server events. List events associated to the given server ID.
   *
   * @param request - The request {@link ListServerEventsRequest}
   * @returns A Promise of ListServerEventsResponse
   */
  listServerEvents = (request) => resourcePaginator.enrichForPagination("events", this.pageOfListServerEvents, request);
  pageOfListServerDisks = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/disks`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListServerDisksResponse
  );
  /**
   * List server disks. List disks associated to the given server ID.
   *
   * @param request - The request {@link ListServerDisksRequest}
   * @returns A Promise of ListServerDisksResponse
   */
  listServerDisks = (request) => resourcePaginator.enrichForPagination("disks", this.pageOfListServerDisks, request);
  getOrderedService = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/ordered-services/${marshalling.validatePathParam("orderedServiceId", request.orderedServiceId)}`
    },
    marshalling_gen.unmarshalService
  );
  /**
   * Get a specific service. Get the service associated with the given ID.
   *
   * @param request - The request {@link GetServiceRequest}
   * @returns A Promise of Service
   */
  getService = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/services/${marshalling.validatePathParam("serviceId", request.serviceId)}`
    },
    marshalling_gen.unmarshalService
  );
  /**
   * Delete a specific service. Delete the service associated with the given ID.
   *
   * @param request - The request {@link DeleteServiceRequest}
   * @returns A Promise of Service
   */
  deleteService = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/services/${marshalling.validatePathParam("serviceId", request.serviceId)}`
    },
    marshalling_gen.unmarshalService
  );
  pageOfListServices = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/services`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListServicesResponse
  );
  /**
   * List services.
   *
   * @param request - The request {@link ListServicesRequest}
   * @returns A Promise of ListServicesResponse
   */
  listServices = (request = {}) => resourcePaginator.enrichForPagination("services", this.pageOfListServices, request);
  /**
   * Install a baremetal server. Install an OS on the server associated with the
   * given ID.
   *
   * @param request - The request {@link InstallServerRequest}
   * @returns A Promise of ServerInstall
   */
  installServer = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalInstallServerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/install`
    },
    marshalling_gen.unmarshalServerInstall
  );
  /**
   * Get a specific server installation status. Get the server installation
   * status associated with the given server ID.
   *
   * @param request - The request {@link GetServerInstallRequest}
   * @returns A Promise of ServerInstall
   */
  getServerInstall = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/install`
    },
    marshalling_gen.unmarshalServerInstall
  );
  /**
   * Waits for {@link ServerInstall} to be in a final state.
   *
   * @param request - The request {@link GetServerInstallRequest}
   * @param options - The waiting options
   * @returns A Promise of ServerInstall
   */
  waitForServerInstall = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(
      !content_gen.SERVER_INSTALL_TRANSIENT_STATUSES.includes(res.status)
    )),
    this.getServerInstall,
    request,
    options
  );
  /**
   * Cancels the current (running) server installation. Cancels the current
   * server installation associated with the given server ID.
   *
   * @param request - The request {@link CancelServerInstallRequest}
   */
  cancelServerInstall = (request) => this.client.fetch({
    method: "POST",
    path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/cancel-install`
  });
  /**
   * Get server default partitioning. Get the server default partitioning schema
   * associated with the given server ID and OS ID.
   *
   * @param request - The request {@link GetServerDefaultPartitioningRequest}
   * @returns A Promise of ServerDefaultPartitioning
   */
  getServerDefaultPartitioning = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/partitioning/${marshalling.validatePathParam("osId", request.osId)}`
    },
    marshalling_gen.unmarshalServerDefaultPartitioning
  );
  /**
   * Start BMC (Baseboard Management Controller) access for a given baremetal
   * server. Start BMC (Baseboard Management Controller) access associated with
   * the given ID. The BMC (Baseboard Management Controller) access is available
   * one hour after the installation of the server.
   *
   * @param request - The request {@link StartBMCAccessRequest}
   */
  startBMCAccess = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalStartBMCAccessRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/bmc-access`
  });
  /**
   * Get BMC (Baseboard Management Controller) access for a given baremetal
   * server. Get the BMC (Baseboard Management Controller) access associated
   * with the given ID.
   *
   * @param request - The request {@link GetBMCAccessRequest}
   * @returns A Promise of BMCAccess
   */
  getBMCAccess = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/bmc-access`
    },
    marshalling_gen.unmarshalBMCAccess
  );
  /**
   * Waits for {@link BMCAccess} to be in a final state.
   *
   * @param request - The request {@link GetBMCAccessRequest}
   * @param options - The waiting options
   * @returns A Promise of BMCAccess
   */
  waitForBMCAccess = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.BMC_ACCESS_TRANSIENT_STATUSES.includes(res.status))),
    this.getBMCAccess,
    request,
    options
  );
  /**
   * Stop BMC (Baseboard Management Controller) access for a given baremetal
   * server. Stop BMC (Baseboard Management Controller) access associated with
   * the given ID.
   *
   * @param request - The request {@link StopBMCAccessRequest}
   */
  stopBMCAccess = (request) => this.client.fetch({
    method: "DELETE",
    path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/bmc-access`
  });
  pageOfListOffers = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/offers`,
      urlParams: marshalling.urlParams(
        ["available_only", request.availableOnly],
        ["catalog", request.catalog],
        ["commercial_range", request.commercialRange],
        ["is_failover_block", request.isFailoverBlock],
        ["is_failover_ip", request.isFailoverIp],
        ["is_rpn_san", request.isRpnSan],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        [
          "sold_in",
          request.soldIn && request.soldIn.length > 0 ? request.soldIn.join(",") : void 0
        ]
      )
    },
    marshalling_gen.unmarshalListOffersResponse
  );
  /**
   * List offers. List all available server offers.
   *
   * @param request - The request {@link ListOffersRequest}
   * @returns A Promise of ListOffersResponse
   */
  listOffers = (request = {}) => resourcePaginator.enrichForPagination("offers", this.pageOfListOffers, request);
  /**
   * Get offer. Return specific offer for the given ID.
   *
   * @param request - The request {@link GetOfferRequest}
   * @returns A Promise of Offer
   */
  getOffer = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/offers/${marshalling.validatePathParam("offerId", request.offerId)}`,
      urlParams: marshalling.urlParams(["project_id", request.projectId])
    },
    marshalling_gen.unmarshalOffer
  );
  pageOfListOS = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/os`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["server_id", request.serverId],
        ["type", request.type]
      )
    },
    marshalling_gen.unmarshalListOSResponse
  );
  /**
   * List all available OS that can be install on a baremetal server.
   *
   * @param request - The request {@link ListOSRequest}
   * @returns A Promise of ListOSResponse
   */
  listOS = (request) => resourcePaginator.enrichForPagination("os", this.pageOfListOS, request);
  /**
   * Get an OS with a given ID. Return specific OS for the given ID.
   *
   * @param request - The request {@link GetOSRequest}
   * @returns A Promise of OS
   */
  getOS = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/os/${marshalling.validatePathParam("osId", request.osId)}`,
      urlParams: marshalling.urlParams(
        ["project_id", request.projectId],
        ["server_id", request.serverId]
      )
    },
    marshalling_gen.unmarshalOS
  );
  /**
   * Update reverse of ip. Update reverse of ip associated with the given ID.
   *
   * @param request - The request {@link UpdateReverseRequest}
   * @returns A Promise of IP
   */
  updateReverse = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateReverseRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/reverses/${marshalling.validatePathParam("ipId", request.ipId)}`
    },
    marshalling_gen.unmarshalIP
  );
  /**
   * Order failover IPs. Order X failover IPs.
   *
   * @param request - The request {@link CreateFailoverIPsRequest}
   * @returns A Promise of CreateFailoverIPsResponse
   */
  createFailoverIPs = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateFailoverIPsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/failover-ips`
    },
    marshalling_gen.unmarshalCreateFailoverIPsResponse
  );
  /**
   * Attach failovers on baremetal server. Attach failovers on the server
   * associated with the given ID.
   *
   * @param request - The request {@link AttachFailoverIPsRequest}
   */
  attachFailoverIPs = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalAttachFailoverIPsRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/failover-ips/attach`
  });
  /**
   * Detach failovers on baremetal server. Detach failovers on the server
   * associated with the given ID.
   *
   * @param request - The request {@link DetachFailoverIPsRequest}
   */
  detachFailoverIPs = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalDetachFailoverIPsRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/failover-ips/detach`
  });
  /**
   * Attach a failover IP to a MAC address.
   *
   * @param request - The request {@link AttachFailoverIPToMacAddressRequest}
   * @returns A Promise of IP
   */
  attachFailoverIPToMacAddress = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalAttachFailoverIPToMacAddressRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/failover-ips/${marshalling.validatePathParam("ipId", request.ipId)}/attach-to-mac-address`
    },
    marshalling_gen.unmarshalIP
  );
  /**
   * Detach a failover IP from a MAC address.
   *
   * @param request - The request {@link DetachFailoverIPFromMacAddressRequest}
   * @returns A Promise of IP
   */
  detachFailoverIPFromMacAddress = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/failover-ips/${marshalling.validatePathParam("ipId", request.ipId)}/detach-from-mac-address`
    },
    marshalling_gen.unmarshalIP
  );
  /**
   * Delete a failover server. Delete the failover associated with the given ID.
   *
   * @param request - The request {@link DeleteFailoverIPRequest}
   */
  deleteFailoverIP = (request) => this.client.fetch({
    method: "DELETE",
    path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/failover-ips/${marshalling.validatePathParam("ipId", request.ipId)}`
  });
  pageOfListFailoverIPs = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/failover-ips`,
      urlParams: marshalling.urlParams(
        ["only_available", request.onlyAvailable],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ],
        ["search", request.search]
      )
    },
    marshalling_gen.unmarshalListFailoverIPsResponse
  );
  /**
   * List failovers for project. List failovers servers for project.
   *
   * @param request - The request {@link ListFailoverIPsRequest}
   * @returns A Promise of ListFailoverIPsResponse
   */
  listFailoverIPs = (request = {}) => resourcePaginator.enrichForPagination("failoverIps", this.pageOfListFailoverIPs, request);
  /**
   * Get a specific baremetal server. Get the server associated with the given
   * ID.
   *
   * @param request - The request {@link GetFailoverIPRequest}
   * @returns A Promise of FailoverIP
   */
  getFailoverIP = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/failover-ips/${marshalling.validatePathParam("ipId", request.ipId)}`
    },
    marshalling_gen.unmarshalFailoverIP
  );
  /**
   * Get remaining quota.
   *
   * @param request - The request {@link GetRemainingQuotaRequest}
   * @returns A Promise of GetRemainingQuotaResponse
   */
  getRemainingQuota = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/remaining-quota`,
      urlParams: marshalling.urlParams(["project_id", request.projectId])
    },
    marshalling_gen.unmarshalGetRemainingQuotaResponse
  );
  /**
   * Get raid. Return raid for the given server ID.
   *
   * @param request - The request {@link GetRaidRequest}
   * @returns A Promise of Raid
   */
  getRaid = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/raid`
    },
    marshalling_gen.unmarshalRaid
  );
  /**
   * Update RAID. Update RAID associated with the given server ID.
   *
   * @param request - The request {@link UpdateRaidRequest}
   */
  updateRaid = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalUpdateRaidRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/update-raid`
  });
  /**
   * Start in rescue baremetal server. Start in rescue the server associated
   * with the given ID.
   *
   * @param request - The request {@link StartRescueRequest}
   * @returns A Promise of Rescue
   */
  startRescue = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalStartRescueRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/rescue`
    },
    marshalling_gen.unmarshalRescue
  );
  /**
   * Get rescue information. Return rescue information for the given server ID.
   *
   * @param request - The request {@link GetRescueRequest}
   * @returns A Promise of Rescue
   */
  getRescue = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/rescue`
    },
    marshalling_gen.unmarshalRescue
  );
  /**
   * Stop rescue on baremetal server. Stop rescue on the server associated with
   * the given ID.
   *
   * @param request - The request {@link StopRescueRequest}
   */
  stopRescue = (request) => this.client.fetch({
    method: "DELETE",
    path: `/dedibox/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/rescue`
  });
}
class BillingAPI extends api.API {
  pageOfListInvoices = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/invoices`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListInvoicesResponse
  );
  listInvoices = (request = {}) => resourcePaginator.enrichForPagination("invoices", this.pageOfListInvoices, request);
  getInvoice = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/invoices/${marshalling.validatePathParam("invoiceId", request.invoiceId)}`
    },
    marshalling_gen.unmarshalInvoice
  );
  downloadInvoice = (request) => this.client.fetch({
    method: "GET",
    path: `/dedibox/v1/invoices/${marshalling.validatePathParam("invoiceId", request.invoiceId)}/download`,
    urlParams: marshalling.urlParams(["dl", 1]),
    responseType: "blob"
  });
  pageOfListRefunds = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/refunds`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListRefundsResponse
  );
  listRefunds = (request = {}) => resourcePaginator.enrichForPagination("refunds", this.pageOfListRefunds, request);
  getRefund = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/refunds/${marshalling.validatePathParam("refundId", request.refundId)}`
    },
    marshalling_gen.unmarshalRefund
  );
  downloadRefund = (request) => this.client.fetch({
    method: "GET",
    path: `/dedibox/v1/refunds/${marshalling.validatePathParam("refundId", request.refundId)}/download`,
    urlParams: marshalling.urlParams(["dl", 1]),
    responseType: "blob"
  });
  canOrder = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/can-order`,
      urlParams: marshalling.urlParams([
        "project_id",
        request.projectId ?? this.client.settings.defaultProjectId
      ])
    },
    marshalling_gen.unmarshalCanOrderResponse
  );
}
class IPv6BlockAPI extends api.API {
  /**
   * Get IPv6 block quota. Get IPv6 block quota with the given project ID. /48
   * one per organization. /56 link to your number of server. /64 link to your
   * number of failover IP.
   *
   * @param request - The request {@link IPv6BlockApiGetIPv6BlockQuotasRequest}
   * @returns A Promise of GetIPv6BlockQuotasResponse
   */
  getIPv6BlockQuotas = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/ipv6-block-quotas`,
      urlParams: marshalling.urlParams(["project_id", request.projectId])
    },
    marshalling_gen.unmarshalGetIPv6BlockQuotasResponse
  );
  /**
   * Create IPv6 block for baremetal server. Create IPv6 block associated with
   * the given project ID.
   *
   * @param request - The request {@link IPv6BlockApiCreateIPv6BlockRequest}
   * @returns A Promise of IPv6Block
   */
  createIPv6Block = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalIPv6BlockApiCreateIPv6BlockRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/ipv6-block`
    },
    marshalling_gen.unmarshalIPv6Block
  );
  /**
   * Get a specific IPv6 block. Get the IPv6 block associated with the given ID.
   *
   * @param request - The request {@link IPv6BlockApiGetIPv6BlockRequest}
   * @returns A Promise of IPv6Block
   */
  getIPv6Block = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/ipv6-block`,
      urlParams: marshalling.urlParams(["project_id", request.projectId])
    },
    marshalling_gen.unmarshalIPv6Block
  );
  /**
   * Update IPv6 block. Update DNS associated to IPv6 block. If DNS is used,
   * minimum of 2 is necessary and maximum of 5 (no duplicate).
   *
   * @param request - The request {@link IPv6BlockApiUpdateIPv6BlockRequest}
   * @returns A Promise of IPv6Block
   */
  updateIPv6Block = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalIPv6BlockApiUpdateIPv6BlockRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/dedibox/v1/ipv6-blocks/${marshalling.validatePathParam("blockId", request.blockId)}`
    },
    marshalling_gen.unmarshalIPv6Block
  );
  /**
   * Delete IPv6 block. Delete IPv6 block subnet with the given ID.
   *
   * @param request - The request {@link IPv6BlockApiDeleteIPv6BlockRequest}
   */
  deleteIPv6Block = (request) => this.client.fetch({
    method: "DELETE",
    path: `/dedibox/v1/ipv6-blocks/${marshalling.validatePathParam("blockId", request.blockId)}`
  });
  /**
   * Create IPv6 block subnet. Create IPv6 block subnet for the given IP ID. /48
   * could create subnet in /56 (quota link to your number of server). /56 could
   * create subnet in /64 (quota link to your number of failover IP).
   *
   * @param request - The request
   *   {@link IPv6BlockApiCreateIPv6BlockSubnetRequest}
   * @returns A Promise of IPv6Block
   */
  createIPv6BlockSubnet = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalIPv6BlockApiCreateIPv6BlockSubnetRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/ipv6-blocks/${marshalling.validatePathParam("blockId", request.blockId)}/subnets`
    },
    marshalling_gen.unmarshalIPv6Block
  );
  /**
   * List available IPv6 block subnets. List all available IPv6 block subnets
   * for given IP ID.
   *
   * @param request - The request
   *   {@link IPv6BlockApiListIPv6BlockSubnetsAvailableRequest}
   * @returns A Promise of ListIPv6BlockSubnetsAvailableResponse
   */
  listIPv6BlockSubnetsAvailable = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/ipv6-blocks/${marshalling.validatePathParam("blockId", request.blockId)}/subnets`
    },
    marshalling_gen.unmarshalListIPv6BlockSubnetsAvailableResponse
  );
}
class RpnAPI extends api.API {
  pageOfListRpnServerCapabilities = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpn/server-capabilities`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListRpnServerCapabilitiesResponse
  );
  listRpnServerCapabilities = (request = {}) => resourcePaginator.enrichForPagination(
    "servers",
    this.pageOfListRpnServerCapabilities,
    request
  );
  getRpnStatus = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpn/status`,
      urlParams: marshalling.urlParams(
        ["project_id", request.projectId],
        ["rpnv1_group_id", request.rpnv1GroupId],
        ["rpnv2_group_id", request.rpnv2GroupId]
      )
    },
    marshalling_gen.unmarshalGetRpnStatusResponse
  );
}
class RpnSanAPI extends api.API {
  pageOfListRpnSans = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpn-sans`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListRpnSansResponse
  );
  listRpnSans = (request = {}) => resourcePaginator.enrichForPagination("rpnSans", this.pageOfListRpnSans, request);
  getRpnSan = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpn-sans/${marshalling.validatePathParam("rpnSanId", request.rpnSanId)}`
    },
    marshalling_gen.unmarshalRpnSan
  );
  /**
   * Waits for {@link RpnSan} to be in a final state.
   *
   * @param request - The request {@link RpnSanApiGetRpnSanRequest}
   * @param options - The waiting options
   * @returns A Promise of RpnSan
   */
  waitForRpnSan = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.RPN_SAN_TRANSIENT_STATUSES.includes(res.status))),
    this.getRpnSan,
    request,
    options
  );
  deleteRpnSan = (request) => this.client.fetch({
    method: "DELETE",
    path: `/dedibox/v1/rpn-sans/${marshalling.validatePathParam("rpnSanId", request.rpnSanId)}`
  });
  createRpnSan = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRpnSanApiCreateRpnSanRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/rpn-sans`
    },
    marshalling_gen.unmarshalService
  );
  listIps = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpn-sans/${marshalling.validatePathParam("rpnSanId", request.rpnSanId)}/ips`,
      urlParams: marshalling.urlParams(["type", request.type])
    },
    marshalling_gen.unmarshalListIpsResponse
  );
  addIp = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalRpnSanApiAddIpRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/rpn-sans/${marshalling.validatePathParam("rpnSanId", request.rpnSanId)}/ips`
  });
  removeIp = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalRpnSanApiRemoveIpRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "DELETE",
    path: `/dedibox/v1/rpn-sans/${marshalling.validatePathParam("rpnSanId", request.rpnSanId)}/ips`
  });
  listAvailableIps = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpn-sans/${marshalling.validatePathParam("rpnSanId", request.rpnSanId)}/available-ips`,
      urlParams: marshalling.urlParams(["type", request.type])
    },
    marshalling_gen.unmarshalListIpsResponse
  );
}
class RpnV1API extends api.API {
  pageOfListRpnGroups = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpnv1/groups`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListRpnGroupsResponse
  );
  listRpnGroups = (request = {}) => resourcePaginator.enrichForPagination("rpnGroups", this.pageOfListRpnGroups, request);
  getRpnGroup = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpnv1/groups/${marshalling.validatePathParam("groupId", request.groupId)}`
    },
    marshalling_gen.unmarshalRpnGroup
  );
  createRpnGroup = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRpnV1ApiCreateRpnGroupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/rpnv1/groups`
    },
    marshalling_gen.unmarshalRpnGroup
  );
  deleteRpnGroup = (request) => this.client.fetch({
    method: "DELETE",
    path: `/dedibox/v1/rpnv1/groups/${marshalling.validatePathParam("groupId", request.groupId)}`
  });
  updateRpnGroupName = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRpnV1ApiUpdateRpnGroupNameRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/dedibox/v1/rpnv1/groups/${marshalling.validatePathParam("groupId", request.groupId)}`
    },
    marshalling_gen.unmarshalRpnGroup
  );
  pageOfListRpnGroupMembers = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpnv1/groups/${marshalling.validatePathParam("groupId", request.groupId)}/members`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListRpnGroupMembersResponse
  );
  listRpnGroupMembers = (request) => resourcePaginator.enrichForPagination("members", this.pageOfListRpnGroupMembers, request);
  rpnGroupInvite = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalRpnV1ApiRpnGroupInviteRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/rpnv1/groups/${marshalling.validatePathParam("groupId", request.groupId)}/invite`
  });
  leaveRpnGroup = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalRpnV1ApiLeaveRpnGroupRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/rpnv1/groups/${marshalling.validatePathParam("groupId", request.groupId)}/leave`
  });
  addRpnGroupMembers = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRpnV1ApiAddRpnGroupMembersRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/rpnv1/groups/${marshalling.validatePathParam("groupId", request.groupId)}/members`
    },
    marshalling_gen.unmarshalRpnGroup
  );
  deleteRpnGroupMembers = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRpnV1ApiDeleteRpnGroupMembersRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "DELETE",
      path: `/dedibox/v1/rpnv1/groups/${marshalling.validatePathParam("groupId", request.groupId)}/members`
    },
    marshalling_gen.unmarshalRpnGroup
  );
  pageOfListRpnCapableServers = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpnv1/capable-servers`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListRpnCapableServersResponse
  );
  listRpnCapableServers = (request = {}) => resourcePaginator.enrichForPagination("servers", this.pageOfListRpnCapableServers, request);
  pageOfListRpnCapableSanServers = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpnv1/capable-san-servers`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListRpnCapableSanServersResponse
  );
  listRpnCapableSanServers = (request = {}) => resourcePaginator.enrichForPagination(
    "sanServers",
    this.pageOfListRpnCapableSanServers,
    request
  );
  pageOfListRpnInvites = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpnv1/invites`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ]
      )
    },
    marshalling_gen.unmarshalListRpnInvitesResponse
  );
  listRpnInvites = (request = {}) => resourcePaginator.enrichForPagination("members", this.pageOfListRpnInvites, request);
  acceptRpnInvite = (request) => this.client.fetch({
    method: "POST",
    path: `/dedibox/v1/rpnv1/invites/${marshalling.validatePathParam("memberId", request.memberId)}/accept`
  });
  refuseRpnInvite = (request) => this.client.fetch({
    method: "POST",
    path: `/dedibox/v1/rpnv1/invites/${marshalling.validatePathParam("memberId", request.memberId)}/refuse`
  });
}
class RpnV2API extends api.API {
  pageOfListRpnV2Groups = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpnv2/groups`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListRpnV2GroupsResponse
  );
  listRpnV2Groups = (request = {}) => resourcePaginator.enrichForPagination("rpnGroups", this.pageOfListRpnV2Groups, request);
  pageOfListRpnV2Members = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpnv2/groups/${marshalling.validatePathParam("groupId", request.groupId)}/members`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["type", request.type]
      )
    },
    marshalling_gen.unmarshalListRpnV2MembersResponse
  );
  listRpnV2Members = (request) => resourcePaginator.enrichForPagination("members", this.pageOfListRpnV2Members, request);
  getRpnV2Group = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpnv2/groups/${marshalling.validatePathParam("groupId", request.groupId)}`
    },
    marshalling_gen.unmarshalRpnV2Group
  );
  /**
   * Waits for {@link RpnV2Group} to be in a final state.
   *
   * @param request - The request {@link RpnV2ApiGetRpnV2GroupRequest}
   * @param options - The waiting options
   * @returns A Promise of RpnV2Group
   */
  waitForRpnV2Group = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(
      !content_gen.RPN_V2_GROUP_TRANSIENT_STATUSES.includes(res.status)
    )),
    this.getRpnV2Group,
    request,
    options
  );
  createRpnV2Group = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRpnV2ApiCreateRpnV2GroupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/dedibox/v1/rpnv2/groups`
    },
    marshalling_gen.unmarshalRpnV2Group
  );
  deleteRpnV2Group = (request) => this.client.fetch({
    method: "DELETE",
    path: `/dedibox/v1/rpnv2/groups/${marshalling.validatePathParam("groupId", request.groupId)}`
  });
  updateRpnV2GroupName = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRpnV2ApiUpdateRpnV2GroupNameRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/dedibox/v1/rpnv2/groups/${marshalling.validatePathParam("groupId", request.groupId)}`
    },
    marshalling_gen.unmarshalRpnV2Group
  );
  addRpnV2Members = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalRpnV2ApiAddRpnV2MembersRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/rpnv2/groups/${marshalling.validatePathParam("groupId", request.groupId)}/members`
  });
  deleteRpnV2Members = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalRpnV2ApiDeleteRpnV2MembersRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "DELETE",
    path: `/dedibox/v1/rpnv2/groups/${marshalling.validatePathParam("groupId", request.groupId)}/members`
  });
  pageOfListRpnV2CapableResources = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpnv2/groups/capable`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListRpnV2CapableResourcesResponse
  );
  listRpnV2CapableResources = (request = {}) => resourcePaginator.enrichForPagination(
    "servers",
    this.pageOfListRpnV2CapableResources,
    request
  );
  pageOfListRpnV2GroupLogs = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/dedibox/v1/rpnv2/groups/${marshalling.validatePathParam("groupId", request.groupId)}/logs`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListRpnV2GroupLogsResponse
  );
  listRpnV2GroupLogs = (request) => resourcePaginator.enrichForPagination("logs", this.pageOfListRpnV2GroupLogs, request);
  updateRpnV2VlanForMembers = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalRpnV2ApiUpdateRpnV2VlanForMembersRequest(
        request,
        this.client.settings
      )
    ),
    headers: jsonContentHeaders,
    method: "PATCH",
    path: `/dedibox/v1/rpnv2/groups/${marshalling.validatePathParam("groupId", request.groupId)}/vlan`
  });
  enableRpnV2GroupCompatibility = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalRpnV2ApiEnableRpnV2GroupCompatibilityRequest(
        request,
        this.client.settings
      )
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/rpnv2/groups/${marshalling.validatePathParam("groupId", request.groupId)}/enable-compatibility`
  });
  disableRpnV2GroupCompatibility = (request) => this.client.fetch({
    body: "{}",
    headers: jsonContentHeaders,
    method: "POST",
    path: `/dedibox/v1/rpnv2/groups/${marshalling.validatePathParam("groupId", request.groupId)}/disable-compatibility`
  });
}
exports.API = API;
exports.BillingAPI = BillingAPI;
exports.IPv6BlockAPI = IPv6BlockAPI;
exports.RpnAPI = RpnAPI;
exports.RpnSanAPI = RpnSanAPI;
exports.RpnV1API = RpnV1API;
exports.RpnV2API = RpnV2API;


/***/ }),

/***/ 7208:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const BMC_ACCESS_TRANSIENT_STATUSES = [
  "creating",
  "deleting"
];
const I_PV6_BLOCK_DELEGATION_TRANSIENT_STATUSES = ["updating"];
const RPN_GROUP_MEMBER_TRANSIENT_STATUSES = [
  "creating",
  "deleting"
];
const RPN_SAN_TRANSIENT_STATUSES = [
  "creating",
  "deleting"
];
const RPN_V2_GROUP_TRANSIENT_STATUSES = [
  "creating",
  "updating",
  "deleting"
];
const RPN_V2_MEMBER_TRANSIENT_STATUSES = [
  "creating",
  "updating",
  "deleting"
];
const SERVER_INSTALL_TRANSIENT_STATUSES = [
  "booting",
  "setting_up_raid",
  "partitioning",
  "formatting",
  "installing",
  "configuring",
  "configuring_bootloader",
  "rebooting"
];
const SERVER_TRANSIENT_STATUSES = [
  "delivering",
  "installing"
];
const SERVICE_PROVISIONING_TRANSIENT_STATUSES = ["delivering", "expiring"];
exports.BMC_ACCESS_TRANSIENT_STATUSES = BMC_ACCESS_TRANSIENT_STATUSES;
exports.I_PV6_BLOCK_DELEGATION_TRANSIENT_STATUSES = I_PV6_BLOCK_DELEGATION_TRANSIENT_STATUSES;
exports.RPN_GROUP_MEMBER_TRANSIENT_STATUSES = RPN_GROUP_MEMBER_TRANSIENT_STATUSES;
exports.RPN_SAN_TRANSIENT_STATUSES = RPN_SAN_TRANSIENT_STATUSES;
exports.RPN_V2_GROUP_TRANSIENT_STATUSES = RPN_V2_GROUP_TRANSIENT_STATUSES;
exports.RPN_V2_MEMBER_TRANSIENT_STATUSES = RPN_V2_MEMBER_TRANSIENT_STATUSES;
exports.SERVER_INSTALL_TRANSIENT_STATUSES = SERVER_INSTALL_TRANSIENT_STATUSES;
exports.SERVER_TRANSIENT_STATUSES = SERVER_TRANSIENT_STATUSES;
exports.SERVICE_PROVISIONING_TRANSIENT_STATUSES = SERVICE_PROVISIONING_TRANSIENT_STATUSES;


/***/ }),

/***/ 4887:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(6344);
const content_gen = __nccwpck_require__(7208);
const validationRules_gen = __nccwpck_require__(1826);
exports.API = api_gen.API;
exports.BillingAPI = api_gen.BillingAPI;
exports.IPv6BlockAPI = api_gen.IPv6BlockAPI;
exports.RpnAPI = api_gen.RpnAPI;
exports.RpnSanAPI = api_gen.RpnSanAPI;
exports.RpnV1API = api_gen.RpnV1API;
exports.RpnV2API = api_gen.RpnV2API;
exports.BMC_ACCESS_TRANSIENT_STATUSES = content_gen.BMC_ACCESS_TRANSIENT_STATUSES;
exports.I_PV6_BLOCK_DELEGATION_TRANSIENT_STATUSES = content_gen.I_PV6_BLOCK_DELEGATION_TRANSIENT_STATUSES;
exports.RPN_GROUP_MEMBER_TRANSIENT_STATUSES = content_gen.RPN_GROUP_MEMBER_TRANSIENT_STATUSES;
exports.RPN_SAN_TRANSIENT_STATUSES = content_gen.RPN_SAN_TRANSIENT_STATUSES;
exports.RPN_V2_GROUP_TRANSIENT_STATUSES = content_gen.RPN_V2_GROUP_TRANSIENT_STATUSES;
exports.RPN_V2_MEMBER_TRANSIENT_STATUSES = content_gen.RPN_V2_MEMBER_TRANSIENT_STATUSES;
exports.SERVER_INSTALL_TRANSIENT_STATUSES = content_gen.SERVER_INSTALL_TRANSIENT_STATUSES;
exports.SERVER_TRANSIENT_STATUSES = content_gen.SERVER_TRANSIENT_STATUSES;
exports.SERVICE_PROVISIONING_TRANSIENT_STATUSES = content_gen.SERVICE_PROVISIONING_TRANSIENT_STATUSES;
exports.ValidationRules = validationRules_gen;


/***/ }),

/***/ 6954:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const customMarshalling = __nccwpck_require__(5667);
const marshalling = __nccwpck_require__(1502);
const unmarshalIP = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'IP' failed as data isn't a dictionary.`
    );
  }
  return {
    address: data.address,
    cidr: data.cidr,
    gateway: data.gateway,
    ipId: data.ip_id,
    netmask: data.netmask,
    reverse: data.reverse,
    semantic: data.semantic,
    status: data.status,
    version: data.version
  };
};
const unmarshalCPU = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CPU' failed as data isn't a dictionary.`
    );
  }
  return {
    coreCount: data.core_count,
    frequency: data.frequency,
    name: data.name,
    threadCount: data.thread_count
  };
};
const unmarshalDisk = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Disk' failed as data isn't a dictionary.`
    );
  }
  return {
    capacity: data.capacity,
    type: data.type
  };
};
const unmarshalMemory = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Memory' failed as data isn't a dictionary.`
    );
  }
  return {
    capacity: data.capacity,
    frequency: data.frequency,
    isEcc: data.is_ecc,
    type: data.type
  };
};
const unmarshalPersistentMemory = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PersistentMemory' failed as data isn't a dictionary.`
    );
  }
  return {
    capacity: data.capacity,
    frequency: data.frequency,
    model: data.model
  };
};
const unmarshalRaidController = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RaidController' failed as data isn't a dictionary.`
    );
  }
  return {
    model: data.model,
    raidLevel: data.raid_level
  };
};
const unmarshalOfferAntiDosInfo = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'OfferAntiDosInfo' failed as data isn't a dictionary.`
    );
  }
  return {
    type: data.type
  };
};
const unmarshalOfferBackupInfo = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'OfferBackupInfo' failed as data isn't a dictionary.`
    );
  }
  return {
    size: data.size
  };
};
const unmarshalOfferBandwidthInfo = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'OfferBandwidthInfo' failed as data isn't a dictionary.`
    );
  }
  return {
    speed: data.speed
  };
};
const unmarshalOfferFailoverBlockInfo = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'OfferFailoverBlockInfo' failed as data isn't a dictionary.`
    );
  }
  return {
    onetimeFees: data.onetime_fees ? unmarshalOffer(data.onetime_fees) : void 0
  };
};
const unmarshalOfferFailoverIpInfo = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'OfferFailoverIpInfo' failed as data isn't a dictionary.`
    );
  }
  return {
    onetimeFees: data.onetime_fees ? unmarshalOffer(data.onetime_fees) : void 0
  };
};
const unmarshalOfferLicenseInfo = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'OfferLicenseInfo' failed as data isn't a dictionary.`
    );
  }
  return {
    boundToIp: data.bound_to_ip
  };
};
const unmarshalOfferRPNInfo = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'OfferRPNInfo' failed as data isn't a dictionary.`
    );
  }
  return {
    speed: data.speed
  };
};
const unmarshalOfferSANInfo = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'OfferSANInfo' failed as data isn't a dictionary.`
    );
  }
  return {
    deviceType: data.device_type,
    ha: data.ha,
    size: data.size
  };
};
const unmarshalOfferServerInfo = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'OfferServerInfo' failed as data isn't a dictionary.`
    );
  }
  return {
    availableOptions: marshalling.unmarshalArrayOfObject(
      data.available_options,
      unmarshalOffer
    ),
    bandwidth: data.bandwidth,
    commercialRange: data.commercial_range,
    connectivity: data.connectivity,
    cpus: marshalling.unmarshalArrayOfObject(data.cpus, unmarshalCPU),
    disks: marshalling.unmarshalArrayOfObject(data.disks, unmarshalDisk),
    memories: marshalling.unmarshalArrayOfObject(data.memories, unmarshalMemory),
    onetimeFees: data.onetime_fees ? unmarshalOffer(data.onetime_fees) : void 0,
    persistentMemories: marshalling.unmarshalArrayOfObject(
      data.persistent_memories,
      unmarshalPersistentMemory
    ),
    raidControllers: marshalling.unmarshalArrayOfObject(
      data.raid_controllers,
      unmarshalRaidController
    ),
    rpnVersion: data.rpn_version,
    stock: data.stock,
    stockByDatacenter: data.stock_by_datacenter
  };
};
const unmarshalOfferServiceLevelInfo = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'OfferServiceLevelInfo' failed as data isn't a dictionary.`
    );
  }
  return {
    antidos: data.antidos,
    availableOptions: marshalling.unmarshalArrayOfObject(
      data.available_options,
      unmarshalOffer
    ),
    customization: data.customization,
    extraFailoverQuota: data.extra_failover_quota,
    git: data.git,
    highRpnBandwidth: data.high_rpn_bandwidth,
    prioritySupport: data.priority_support,
    salesSupport: data.sales_support,
    sla: data.sla,
    supportPhone: data.support_phone,
    supportTicket: data.support_ticket
  };
};
const unmarshalOfferStorageInfo = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'OfferStorageInfo' failed as data isn't a dictionary.`
    );
  }
  return {
    maxQuota: data.max_quota,
    size: data.size
  };
};
const unmarshalOffer = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Offer' failed as data isn't a dictionary.`
    );
  }
  return {
    antidosInfo: data.antidos_info ? unmarshalOfferAntiDosInfo(data.antidos_info) : void 0,
    backupInfo: data.backup_info ? unmarshalOfferBackupInfo(data.backup_info) : void 0,
    bandwidthInfo: data.bandwidth_info ? unmarshalOfferBandwidthInfo(data.bandwidth_info) : void 0,
    catalog: data.catalog,
    failoverBlockInfo: data.failover_block_info ? unmarshalOfferFailoverBlockInfo(data.failover_block_info) : void 0,
    failoverIpInfo: data.failover_ip_info ? unmarshalOfferFailoverIpInfo(data.failover_ip_info) : void 0,
    id: data.id,
    licenseInfo: data.license_info ? unmarshalOfferLicenseInfo(data.license_info) : void 0,
    name: data.name,
    paymentFrequency: data.payment_frequency,
    pricing: data.pricing ? customMarshalling.unmarshalMoney(data.pricing) : void 0,
    rpnInfo: data.rpn_info ? unmarshalOfferRPNInfo(data.rpn_info) : void 0,
    sanInfo: data.san_info ? unmarshalOfferSANInfo(data.san_info) : void 0,
    serverInfo: data.server_info ? unmarshalOfferServerInfo(data.server_info) : void 0,
    serviceLevelInfo: data.service_level_info ? unmarshalOfferServiceLevelInfo(data.service_level_info) : void 0,
    storageInfo: data.storage_info ? unmarshalOfferStorageInfo(data.storage_info) : void 0,
    usbStorageInfo: data.usb_storage_info ? unmarshalOfferStorageInfo(data.usb_storage_info) : void 0
  };
};
const unmarshalOS = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'OS' failed as data isn't a dictionary.`
    );
  }
  return {
    allowCustomPartitioning: data.allow_custom_partitioning,
    allowSshKeys: data.allow_ssh_keys,
    allowedFilesystems: data.allowed_filesystems,
    arch: data.arch,
    displayName: data.display_name,
    hostnameMaxLength: data.hostname_max_length,
    hostnameRegex: data.hostname_regex,
    id: data.id,
    licenseOffers: marshalling.unmarshalArrayOfObject(data.license_offers, unmarshalOffer),
    maxPartitions: data.max_partitions,
    name: data.name,
    panelPasswordRegex: data.panel_password_regex,
    passwordRegex: data.password_regex,
    releasedAt: marshalling.unmarshalDate(data.released_at),
    requiresAdminPassword: data.requires_admin_password,
    requiresLicense: data.requires_license,
    requiresPanelPassword: data.requires_panel_password,
    requiresUser: data.requires_user,
    requiresValidHostname: data.requires_valid_hostname,
    type: data.type,
    version: data.version
  };
};
const unmarshalRpnSan = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RpnSan' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    datacenterName: data.datacenter_name,
    deliveredAt: marshalling.unmarshalDate(data.delivered_at),
    expiresAt: marshalling.unmarshalDate(data.expires_at),
    id: data.id,
    iqn: data.iqn,
    iqnSuffix: data.iqn_suffix,
    offer: data.offer ? unmarshalOffer(data.offer) : void 0,
    offerId: data.offer_id,
    offerName: data.offer_name,
    organizationId: data.organization_id,
    projectId: data.project_id,
    rpnv1Compatible: data.rpnv1_compatible,
    rpnv1Implicit: data.rpnv1_implicit,
    serverHostname: data.server_hostname,
    status: data.status,
    storageSize: data.storage_size,
    terminatedAt: marshalling.unmarshalDate(data.terminated_at)
  };
};
const unmarshalRpnGroup = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RpnGroup' failed as data isn't a dictionary.`
    );
  }
  return {
    active: data.active,
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    membersCount: data.members_count,
    name: data.name,
    organizationId: data.organization_id,
    owner: data.owner,
    projectId: data.project_id,
    type: data.type
  };
};
const unmarshalNetworkInterface = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'NetworkInterface' failed as data isn't a dictionary.`
    );
  }
  return {
    cardId: data.card_id,
    deviceId: data.device_id,
    ips: marshalling.unmarshalArrayOfObject(data.ips, unmarshalIP),
    mac: data.mac,
    type: data.type
  };
};
const unmarshalServerLocation = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerLocation' failed as data isn't a dictionary.`
    );
  }
  return {
    datacenterName: data.datacenter_name,
    rack: data.rack,
    room: data.room
  };
};
const unmarshalServerOption = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerOption' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    expiredAt: marshalling.unmarshalDate(data.expired_at),
    offer: data.offer ? unmarshalOffer(data.offer) : void 0,
    options: marshalling.unmarshalArrayOfObject(data.options, unmarshalServerOption),
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalServiceLevel = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServiceLevel' failed as data isn't a dictionary.`
    );
  }
  return {
    level: data.level,
    offerId: data.offer_id
  };
};
const unmarshalServer = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Server' failed as data isn't a dictionary.`
    );
  }
  return {
    abuseContact: data.abuse_contact,
    createdAt: marshalling.unmarshalDate(data.created_at),
    expiredAt: marshalling.unmarshalDate(data.expired_at),
    hasBmc: data.has_bmc,
    hostname: data.hostname,
    id: data.id,
    interfaces: marshalling.unmarshalArrayOfObject(
      data.interfaces,
      unmarshalNetworkInterface
    ),
    ipv6Slaac: data.ipv6_slaac,
    isOutsourced: data.is_outsourced,
    isRpnv2Member: data.is_rpnv2_member,
    level: data.level ? unmarshalServiceLevel(data.level) : void 0,
    location: data.location ? unmarshalServerLocation(data.location) : void 0,
    offer: data.offer ? unmarshalOffer(data.offer) : void 0,
    options: marshalling.unmarshalArrayOfObject(data.options, unmarshalServerOption),
    organizationId: data.organization_id,
    os: data.os ? unmarshalOS(data.os) : void 0,
    projectId: data.project_id,
    qinq: data.qinq,
    rebootedAt: marshalling.unmarshalDate(data.rebooted_at),
    rescueOs: data.rescue_os ? unmarshalOS(data.rescue_os) : void 0,
    status: data.status,
    tags: data.tags,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    zone: data.zone
  };
};
const unmarshalRpnV2GroupSubnet = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RpnV2GroupSubnet' failed as data isn't a dictionary.`
    );
  }
  return {
    address: data.address,
    cidr: data.cidr
  };
};
const unmarshalRpnV2Group = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RpnV2Group' failed as data isn't a dictionary.`
    );
  }
  return {
    compatibleRpnv1: data.compatible_rpnv1,
    gateway: data.gateway,
    id: data.id,
    membersCount: data.members_count,
    name: data.name,
    organizationId: data.organization_id,
    owner: data.owner,
    projectId: data.project_id,
    rpnv1Group: data.rpnv1_group ? unmarshalRpnGroup(data.rpnv1_group) : void 0,
    status: data.status,
    subnet: data.subnet ? unmarshalRpnV2GroupSubnet(data.subnet) : void 0,
    type: data.type
  };
};
const unmarshalService = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Service' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    deliveredAt: marshalling.unmarshalDate(data.delivered_at),
    expiresAt: marshalling.unmarshalDate(data.expires_at),
    id: data.id,
    offer: data.offer ? unmarshalOffer(data.offer) : void 0,
    provisioningStatus: data.provisioning_status,
    resourceId: data.resource_id,
    terminatedAt: marshalling.unmarshalDate(data.terminated_at),
    type: data.type
  };
};
const unmarshalFailoverBlock = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'FailoverBlock' failed as data isn't a dictionary.`
    );
  }
  return {
    address: data.address,
    cidr: data.cidr,
    gatewayIp: data.gateway_ip,
    id: data.id,
    ipVersion: data.ip_version,
    nameservers: data.nameservers,
    netmask: data.netmask
  };
};
const unmarshalFailoverIP = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'FailoverIP' failed as data isn't a dictionary.`
    );
  }
  return {
    address: data.address,
    block: data.block ? unmarshalFailoverBlock(data.block) : void 0,
    cidr: data.cidr,
    gatewayIp: data.gateway_ip,
    id: data.id,
    ipVersion: data.ip_version,
    mac: data.mac,
    netmask: data.netmask,
    reverse: data.reverse,
    serverId: data.server_id,
    serverZone: data.server_zone,
    status: data.status,
    type: data.type
  };
};
const unmarshalBMCAccess = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'BMCAccess' failed as data isn't a dictionary.`
    );
  }
  return {
    expiresAt: marshalling.unmarshalDate(data.expires_at),
    login: data.login,
    password: data.password,
    status: data.status,
    url: data.url
  };
};
const unmarshalBackup = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Backup' failed as data isn't a dictionary.`
    );
  }
  return {
    aclEnabled: data.acl_enabled,
    autologin: data.autologin,
    id: data.id,
    login: data.login,
    quotaFiles: data.quota_files,
    quotaFilesUsed: data.quota_files_used,
    quotaSpace: data.quota_space,
    quotaSpaceUsed: data.quota_space_used,
    server: data.server,
    status: data.status
  };
};
const unmarshalCanOrderResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CanOrderResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    billingOk: data.billing_ok,
    canOrder: data.can_order,
    emailConfirmed: data.email_confirmed,
    message: data.message,
    paymentMode: data.payment_mode,
    phoneConfirmed: data.phone_confirmed,
    quotaOk: data.quota_ok,
    userConfirmed: data.user_confirmed
  };
};
const unmarshalCreateFailoverIPsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CreateFailoverIPsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    services: marshalling.unmarshalArrayOfObject(data.services, unmarshalService),
    totalCount: data.total_count
  };
};
const unmarshalGetIPv6BlockQuotasResponseQuota = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetIPv6BlockQuotasResponseQuota' failed as data isn't a dictionary.`
    );
  }
  return {
    cidr: data.cidr,
    quota: data.quota
  };
};
const unmarshalGetIPv6BlockQuotasResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetIPv6BlockQuotasResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    quotas: marshalling.unmarshalArrayOfObject(
      data.quotas,
      unmarshalGetIPv6BlockQuotasResponseQuota
    ),
    totalCount: data.total_count
  };
};
const unmarshalGetRemainingQuotaResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetRemainingQuotaResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    failoverBlockQuota: data.failover_block_quota,
    failoverBlockRemainingQuota: data.failover_block_remaining_quota,
    failoverIpQuota: data.failover_ip_quota,
    failoverIpRemainingQuota: data.failover_ip_remaining_quota
  };
};
const unmarshalGetRpnStatusResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetRpnStatusResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    operationsLeft: data.operations_left,
    status: data.status
  };
};
const unmarshalIPv6Block = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'IPv6Block' failed as data isn't a dictionary.`
    );
  }
  return {
    address: data.address,
    cidr: data.cidr,
    delegationStatus: data.delegation_status,
    duid: data.duid,
    id: data.id,
    nameservers: data.nameservers,
    subnets: marshalling.unmarshalArrayOfObject(data.subnets, unmarshalIPv6Block)
  };
};
const unmarshalInvoice = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Invoice' failed as data isn't a dictionary.`
    );
  }
  return {
    content: data.content,
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    paidAt: marshalling.unmarshalDate(data.paid_at),
    paymentMethod: data.payment_method,
    status: data.status,
    totalWithTaxes: data.total_with_taxes ? customMarshalling.unmarshalMoney(data.total_with_taxes) : void 0,
    totalWithoutTaxes: data.total_without_taxes ? customMarshalling.unmarshalMoney(data.total_without_taxes) : void 0,
    transactionId: data.transaction_id
  };
};
const unmarshalListFailoverIPsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListFailoverIPsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    failoverIps: marshalling.unmarshalArrayOfObject(data.failover_ips, unmarshalFailoverIP),
    totalCount: data.total_count
  };
};
const unmarshalListIPv6BlockSubnetsAvailableResponseSubnet = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListIPv6BlockSubnetsAvailableResponseSubnet' failed as data isn't a dictionary.`
    );
  }
  return {
    address: data.address,
    cidr: data.cidr
  };
};
const unmarshalListIPv6BlockSubnetsAvailableResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListIPv6BlockSubnetsAvailableResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    subnetAvailables: marshalling.unmarshalArrayOfObject(
      data.subnet_availables,
      unmarshalListIPv6BlockSubnetsAvailableResponseSubnet
    ),
    totalCount: data.total_count
  };
};
const unmarshalInvoiceSummary = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'InvoiceSummary' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    paidAt: marshalling.unmarshalDate(data.paid_at),
    paymentMethod: data.payment_method,
    status: data.status,
    totalWithTaxes: data.total_with_taxes ? customMarshalling.unmarshalMoney(data.total_with_taxes) : void 0,
    totalWithoutTaxes: data.total_without_taxes ? customMarshalling.unmarshalMoney(data.total_without_taxes) : void 0,
    transactionId: data.transaction_id
  };
};
const unmarshalListInvoicesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListInvoicesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    invoices: marshalling.unmarshalArrayOfObject(data.invoices, unmarshalInvoiceSummary),
    totalCount: data.total_count
  };
};
const unmarshalRpnSanIpRpnV2Group = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RpnSanIpRpnV2Group' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    name: data.name
  };
};
const unmarshalRpnSanIpServer = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RpnSanIpServer' failed as data isn't a dictionary.`
    );
  }
  return {
    datacenterName: data.datacenter_name,
    hostname: data.hostname,
    id: data.id
  };
};
const unmarshalRpnSanIp = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RpnSanIp' failed as data isn't a dictionary.`
    );
  }
  return {
    ip: data.ip ? unmarshalIP(data.ip) : void 0,
    rpnv2Group: data.rpnv2_group ? unmarshalRpnSanIpRpnV2Group(data.rpnv2_group) : void 0,
    server: data.server ? unmarshalRpnSanIpServer(data.server) : void 0,
    type: data.type
  };
};
const unmarshalListIpsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListIpsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    ips: marshalling.unmarshalArrayOfObject(data.ips, unmarshalRpnSanIp),
    totalCount: data.total_count
  };
};
const unmarshalListOSResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListOSResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    os: marshalling.unmarshalArrayOfObject(data.os, unmarshalOS),
    totalCount: data.total_count
  };
};
const unmarshalListOffersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListOffersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    offers: marshalling.unmarshalArrayOfObject(data.offers, unmarshalOffer),
    totalCount: data.total_count
  };
};
const unmarshalRefundSummary = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RefundSummary' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    method: data.method,
    refundedAt: marshalling.unmarshalDate(data.refunded_at),
    status: data.status,
    totalWithTaxes: data.total_with_taxes ? customMarshalling.unmarshalMoney(data.total_with_taxes) : void 0,
    totalWithoutTaxes: data.total_without_taxes ? customMarshalling.unmarshalMoney(data.total_without_taxes) : void 0
  };
};
const unmarshalListRefundsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListRefundsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    refunds: marshalling.unmarshalArrayOfObject(data.refunds, unmarshalRefundSummary),
    totalCount: data.total_count
  };
};
const unmarshalRpnSanServer = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RpnSanServer' failed as data isn't a dictionary.`
    );
  }
  return {
    datacenterName: data.datacenter_name,
    hostname: data.hostname,
    id: data.id,
    sans: marshalling.unmarshalArrayOfObject(data.sans, unmarshalRpnSan),
    zone: data.zone
  };
};
const unmarshalListRpnCapableSanServersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListRpnCapableSanServersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    sanServers: marshalling.unmarshalArrayOfObject(data.san_servers, unmarshalRpnSanServer),
    totalCount: data.total_count
  };
};
const unmarshalListRpnCapableServersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListRpnCapableServersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    servers: marshalling.unmarshalArrayOfObject(data.servers, unmarshalServer),
    totalCount: data.total_count
  };
};
const unmarshalRpnGroupMember = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RpnGroupMember' failed as data isn't a dictionary.`
    );
  }
  return {
    groupId: data.group_id,
    groupName: data.group_name,
    groupOwner: data.group_owner,
    id: data.id,
    owner: data.owner,
    sanServer: data.san_server ? unmarshalRpnSanServer(data.san_server) : void 0,
    server: data.server ? unmarshalServer(data.server) : void 0,
    speed: data.speed,
    status: data.status
  };
};
const unmarshalListRpnGroupMembersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListRpnGroupMembersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    members: marshalling.unmarshalArrayOfObject(data.members, unmarshalRpnGroupMember),
    totalCount: data.total_count
  };
};
const unmarshalListRpnGroupsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListRpnGroupsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rpnGroups: marshalling.unmarshalArrayOfObject(data.rpn_groups, unmarshalRpnGroup),
    totalCount: data.total_count
  };
};
const unmarshalListRpnInvitesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListRpnInvitesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    members: marshalling.unmarshalArrayOfObject(data.members, unmarshalRpnGroupMember),
    totalCount: data.total_count
  };
};
const unmarshalRpnSanSummary = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RpnSanSummary' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    datacenterName: data.datacenter_name,
    deliveredAt: marshalling.unmarshalDate(data.delivered_at),
    expiresAt: marshalling.unmarshalDate(data.expires_at),
    id: data.id,
    iqnSuffix: data.iqn_suffix,
    offerId: data.offer_id,
    offerName: data.offer_name,
    organizationId: data.organization_id,
    projectId: data.project_id,
    rpnv1Compatible: data.rpnv1_compatible,
    rpnv1Implicit: data.rpnv1_implicit,
    serverHostname: data.server_hostname,
    status: data.status,
    storageSize: data.storage_size,
    terminatedAt: marshalling.unmarshalDate(data.terminated_at)
  };
};
const unmarshalListRpnSansResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListRpnSansResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rpnSans: marshalling.unmarshalArrayOfObject(data.rpn_sans, unmarshalRpnSanSummary),
    totalCount: data.total_count
  };
};
const unmarshalRpnServerCapability = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RpnServerCapability' failed as data isn't a dictionary.`
    );
  }
  return {
    canJoinQinqGroup: data.can_join_qinq_group,
    canJoinRpnv2Group: data.can_join_rpnv2_group,
    compatibleQinq: data.compatible_qinq,
    datacenterName: data.datacenter_name,
    hostname: data.hostname,
    id: data.id,
    ipAddress: data.ip_address,
    rpnVersion: data.rpn_version,
    rpnv1GroupCount: data.rpnv1_group_count,
    rpnv2GroupCount: data.rpnv2_group_count,
    zone: data.zone
  };
};
const unmarshalListRpnServerCapabilitiesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListRpnServerCapabilitiesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    servers: marshalling.unmarshalArrayOfObject(data.servers, unmarshalRpnServerCapability),
    totalCount: data.total_count
  };
};
const unmarshalListRpnV2CapableResourcesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListRpnV2CapableResourcesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    servers: marshalling.unmarshalArrayOfObject(data.servers, unmarshalServer),
    totalCount: data.total_count
  };
};
const unmarshalRpnV2Member = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RpnV2Member' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    rpnv1Group: data.rpnv1_group ? unmarshalRpnGroup(data.rpnv1_group) : void 0,
    server: data.server ? unmarshalServer(data.server) : void 0,
    speed: data.speed,
    status: data.status,
    vlan: data.vlan
  };
};
const unmarshalLog = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Log' failed as data isn't a dictionary.`
    );
  }
  return {
    action: data.action,
    createdAt: marshalling.unmarshalDate(data.created_at),
    finishedAt: marshalling.unmarshalDate(data.finished_at),
    group: data.group ? unmarshalRpnV2Group(data.group) : void 0,
    id: data.id,
    member: data.member ? unmarshalRpnV2Member(data.member) : void 0,
    status: data.status
  };
};
const unmarshalListRpnV2GroupLogsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListRpnV2GroupLogsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    logs: marshalling.unmarshalArrayOfObject(data.logs, unmarshalLog),
    totalCount: data.total_count
  };
};
const unmarshalListRpnV2GroupsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListRpnV2GroupsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rpnGroups: marshalling.unmarshalArrayOfObject(data.rpn_groups, unmarshalRpnV2Group),
    totalCount: data.total_count
  };
};
const unmarshalListRpnV2MembersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListRpnV2MembersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    members: marshalling.unmarshalArrayOfObject(data.members, unmarshalRpnV2Member),
    totalCount: data.total_count
  };
};
const unmarshalServerDisk = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerDisk' failed as data isn't a dictionary.`
    );
  }
  return {
    capacity: data.capacity,
    connector: data.connector,
    id: data.id,
    isAddon: data.is_addon,
    type: data.type
  };
};
const unmarshalListServerDisksResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListServerDisksResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    disks: marshalling.unmarshalArrayOfObject(data.disks, unmarshalServerDisk),
    totalCount: data.total_count
  };
};
const unmarshalServerEvent = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerEvent' failed as data isn't a dictionary.`
    );
  }
  return {
    date: marshalling.unmarshalDate(data.date),
    description: data.description,
    eventId: data.event_id
  };
};
const unmarshalListServerEventsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListServerEventsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    events: marshalling.unmarshalArrayOfObject(data.events, unmarshalServerEvent),
    totalCount: data.total_count
  };
};
const unmarshalServerSummary = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerSummary' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    datacenterName: data.datacenter_name,
    expiredAt: marshalling.unmarshalDate(data.expired_at),
    hostname: data.hostname,
    id: data.id,
    interfaces: marshalling.unmarshalArrayOfObject(
      data.interfaces,
      unmarshalNetworkInterface
    ),
    isOutsourced: data.is_outsourced,
    level: data.level ? unmarshalServiceLevel(data.level) : void 0,
    offerId: data.offer_id,
    offerName: data.offer_name,
    organizationId: data.organization_id,
    osId: data.os_id,
    projectId: data.project_id,
    qinq: data.qinq,
    rpnVersion: data.rpn_version,
    status: data.status,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    zone: data.zone
  };
};
const unmarshalListServersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListServersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    servers: marshalling.unmarshalArrayOfObject(data.servers, unmarshalServerSummary),
    totalCount: data.total_count
  };
};
const unmarshalListServicesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListServicesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    services: marshalling.unmarshalArrayOfObject(data.services, unmarshalService),
    totalCount: data.total_count
  };
};
const unmarshalListSubscribableServerOptionsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSubscribableServerOptionsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    serverOptions: marshalling.unmarshalArrayOfObject(data.server_options, unmarshalOffer),
    totalCount: data.total_count
  };
};
const unmarshalRaidArray = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RaidArray' failed as data isn't a dictionary.`
    );
  }
  return {
    disks: marshalling.unmarshalArrayOfObject(data.disks, unmarshalServerDisk),
    raidLevel: data.raid_level
  };
};
const unmarshalRaid = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Raid' failed as data isn't a dictionary.`
    );
  }
  return {
    raidArrays: marshalling.unmarshalArrayOfObject(data.raid_arrays, unmarshalRaidArray)
  };
};
const unmarshalRefund = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Refund' failed as data isn't a dictionary.`
    );
  }
  return {
    content: data.content,
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    method: data.method,
    refundedAt: marshalling.unmarshalDate(data.refunded_at),
    status: data.status,
    totalWithTaxes: data.total_with_taxes ? customMarshalling.unmarshalMoney(data.total_with_taxes) : void 0,
    totalWithoutTaxes: data.total_without_taxes ? customMarshalling.unmarshalMoney(data.total_without_taxes) : void 0
  };
};
const unmarshalRescue = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Rescue' failed as data isn't a dictionary.`
    );
  }
  return {
    login: data.login,
    osId: data.os_id,
    password: data.password,
    protocol: data.protocol
  };
};
const unmarshalPartition = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Partition' failed as data isn't a dictionary.`
    );
  }
  return {
    capacity: data.capacity,
    connectors: data.connectors,
    fileSystem: data.file_system,
    mountPoint: data.mount_point,
    raidLevel: data.raid_level,
    type: data.type
  };
};
const unmarshalServerDefaultPartitioning = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerDefaultPartitioning' failed as data isn't a dictionary.`
    );
  }
  return {
    partitions: marshalling.unmarshalArrayOfObject(data.partitions, unmarshalPartition)
  };
};
const unmarshalServerInstall = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerInstall' failed as data isn't a dictionary.`
    );
  }
  return {
    hostname: data.hostname,
    osId: data.os_id,
    panelUrl: data.panel_url,
    partitions: marshalling.unmarshalArrayOfObject(data.partitions, unmarshalPartition),
    sshKeyIds: data.ssh_key_ids,
    status: data.status,
    userLogin: data.user_login
  };
};
const unmarshalSubscribeStorageOptionsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SubscribeStorageOptionsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    services: marshalling.unmarshalArrayOfObject(data.services, unmarshalService)
  };
};
const marshalAttachFailoverIPToMacAddressRequest = (request, defaults) => ({
  mac: request.mac,
  type: request.type
});
const marshalAttachFailoverIPsRequest = (request, defaults) => ({
  fips_ids: request.fipsIds,
  server_id: request.serverId
});
const marshalCreateFailoverIPsRequest = (request, defaults) => ({
  offer_id: request.offerId,
  project_id: request.projectId ?? defaults.defaultProjectId,
  quantity: request.quantity
});
const marshalCreateServerRequest = (request, defaults) => ({
  datacenter_name: request.datacenterName,
  offer_id: request.offerId,
  project_id: request.projectId ?? defaults.defaultProjectId,
  server_option_ids: request.serverOptionIds
});
const marshalDetachFailoverIPsRequest = (request, defaults) => ({
  fips_ids: request.fipsIds
});
const marshalIPv6BlockApiCreateIPv6BlockRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalIPv6BlockApiCreateIPv6BlockSubnetRequest = (request, defaults) => ({
  address: request.address,
  cidr: request.cidr
});
const marshalIPv6BlockApiUpdateIPv6BlockRequest = (request, defaults) => ({
  nameservers: request.nameservers
});
const marshalInstallPartition = (request, defaults) => ({
  capacity: request.capacity,
  connectors: request.connectors,
  file_system: request.fileSystem,
  mount_point: request.mountPoint,
  raid_level: request.raidLevel
});
const marshalInstallServerRequest = (request, defaults) => ({
  hostname: request.hostname,
  ip_id: request.ipId,
  license_offer_id: request.licenseOfferId,
  os_id: request.osId,
  panel_password: request.panelPassword,
  partitions: request.partitions !== void 0 ? request.partitions.map((elt) => marshalInstallPartition(elt)) : void 0,
  root_password: request.rootPassword,
  ssh_key_ids: request.sshKeyIds,
  user_login: request.userLogin,
  user_password: request.userPassword
});
const marshalRpnSanApiAddIpRequest = (request, defaults) => ({
  ip_ids: request.ipIds
});
const marshalRpnSanApiCreateRpnSanRequest = (request, defaults) => ({
  offer_id: request.offerId,
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalRpnSanApiRemoveIpRequest = (request, defaults) => ({
  ip_ids: request.ipIds
});
const marshalRpnV1ApiAddRpnGroupMembersRequest = (request, defaults) => ({
  san_server_ids: request.sanServerIds,
  server_ids: request.serverIds
});
const marshalRpnV1ApiCreateRpnGroupRequest = (request, defaults) => ({
  name: request.name,
  project_id: request.projectId ?? defaults.defaultProjectId,
  san_server_ids: request.sanServerIds,
  server_ids: request.serverIds
});
const marshalRpnV1ApiDeleteRpnGroupMembersRequest = (request, defaults) => ({
  member_ids: request.memberIds
});
const marshalRpnV1ApiLeaveRpnGroupRequest = (request, defaults) => ({
  member_ids: request.memberIds,
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalRpnV1ApiRpnGroupInviteRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId,
  server_ids: request.serverIds
});
const marshalRpnV1ApiUpdateRpnGroupNameRequest = (request, defaults) => ({
  name: request.name
});
const marshalRpnV2ApiAddRpnV2MembersRequest = (request, defaults) => ({
  servers: request.servers
});
const marshalRpnV2ApiCreateRpnV2GroupRequest = (request, defaults) => ({
  name: request.name,
  project_id: request.projectId ?? defaults.defaultProjectId,
  servers: request.servers,
  type: request.type
});
const marshalRpnV2ApiDeleteRpnV2MembersRequest = (request, defaults) => ({
  member_ids: request.memberIds
});
const marshalRpnV2ApiEnableRpnV2GroupCompatibilityRequest = (request, defaults) => ({
  rpnv1_group_id: request.rpnv1GroupId
});
const marshalRpnV2ApiUpdateRpnV2GroupNameRequest = (request, defaults) => ({
  name: request.name
});
const marshalRpnV2ApiUpdateRpnV2VlanForMembersRequest = (request, defaults) => ({
  member_ids: request.memberIds,
  vlan: request.vlan
});
const marshalStartBMCAccessRequest = (request, defaults) => ({
  ip: request.ip
});
const marshalStartRescueRequest = (request, defaults) => ({
  os_id: request.osId
});
const marshalSubscribeServerOptionRequest = (request, defaults) => ({
  option_id: request.optionId
});
const marshalSubscribeStorageOptionsRequest = (request, defaults) => ({
  options_ids: request.optionsIds
});
const marshalUpdatableRaidArray = (request, defaults) => ({
  disk_ids: request.diskIds,
  raid_level: request.raidLevel
});
const marshalUpdateRaidRequest = (request, defaults) => ({
  raid_arrays: request.raidArrays.map(
    (elt) => marshalUpdatableRaidArray(elt)
  )
});
const marshalUpdateReverseRequest = (request, defaults) => ({
  reverse: request.reverse
});
const marshalUpdateServerBackupRequest = (request, defaults) => ({
  acl_enabled: request.aclEnabled,
  autologin: request.autologin,
  password: request.password
});
const marshalUpdateServerRequest = (request, defaults) => ({
  enable_ipv6: request.enableIpv6,
  hostname: request.hostname
});
const marshalUpdateServerTagsRequest = (request, defaults) => ({
  tags: request.tags
});
exports.marshalAttachFailoverIPToMacAddressRequest = marshalAttachFailoverIPToMacAddressRequest;
exports.marshalAttachFailoverIPsRequest = marshalAttachFailoverIPsRequest;
exports.marshalCreateFailoverIPsRequest = marshalCreateFailoverIPsRequest;
exports.marshalCreateServerRequest = marshalCreateServerRequest;
exports.marshalDetachFailoverIPsRequest = marshalDetachFailoverIPsRequest;
exports.marshalIPv6BlockApiCreateIPv6BlockRequest = marshalIPv6BlockApiCreateIPv6BlockRequest;
exports.marshalIPv6BlockApiCreateIPv6BlockSubnetRequest = marshalIPv6BlockApiCreateIPv6BlockSubnetRequest;
exports.marshalIPv6BlockApiUpdateIPv6BlockRequest = marshalIPv6BlockApiUpdateIPv6BlockRequest;
exports.marshalInstallServerRequest = marshalInstallServerRequest;
exports.marshalRpnSanApiAddIpRequest = marshalRpnSanApiAddIpRequest;
exports.marshalRpnSanApiCreateRpnSanRequest = marshalRpnSanApiCreateRpnSanRequest;
exports.marshalRpnSanApiRemoveIpRequest = marshalRpnSanApiRemoveIpRequest;
exports.marshalRpnV1ApiAddRpnGroupMembersRequest = marshalRpnV1ApiAddRpnGroupMembersRequest;
exports.marshalRpnV1ApiCreateRpnGroupRequest = marshalRpnV1ApiCreateRpnGroupRequest;
exports.marshalRpnV1ApiDeleteRpnGroupMembersRequest = marshalRpnV1ApiDeleteRpnGroupMembersRequest;
exports.marshalRpnV1ApiLeaveRpnGroupRequest = marshalRpnV1ApiLeaveRpnGroupRequest;
exports.marshalRpnV1ApiRpnGroupInviteRequest = marshalRpnV1ApiRpnGroupInviteRequest;
exports.marshalRpnV1ApiUpdateRpnGroupNameRequest = marshalRpnV1ApiUpdateRpnGroupNameRequest;
exports.marshalRpnV2ApiAddRpnV2MembersRequest = marshalRpnV2ApiAddRpnV2MembersRequest;
exports.marshalRpnV2ApiCreateRpnV2GroupRequest = marshalRpnV2ApiCreateRpnV2GroupRequest;
exports.marshalRpnV2ApiDeleteRpnV2MembersRequest = marshalRpnV2ApiDeleteRpnV2MembersRequest;
exports.marshalRpnV2ApiEnableRpnV2GroupCompatibilityRequest = marshalRpnV2ApiEnableRpnV2GroupCompatibilityRequest;
exports.marshalRpnV2ApiUpdateRpnV2GroupNameRequest = marshalRpnV2ApiUpdateRpnV2GroupNameRequest;
exports.marshalRpnV2ApiUpdateRpnV2VlanForMembersRequest = marshalRpnV2ApiUpdateRpnV2VlanForMembersRequest;
exports.marshalStartBMCAccessRequest = marshalStartBMCAccessRequest;
exports.marshalStartRescueRequest = marshalStartRescueRequest;
exports.marshalSubscribeServerOptionRequest = marshalSubscribeServerOptionRequest;
exports.marshalSubscribeStorageOptionsRequest = marshalSubscribeStorageOptionsRequest;
exports.marshalUpdateRaidRequest = marshalUpdateRaidRequest;
exports.marshalUpdateReverseRequest = marshalUpdateReverseRequest;
exports.marshalUpdateServerBackupRequest = marshalUpdateServerBackupRequest;
exports.marshalUpdateServerRequest = marshalUpdateServerRequest;
exports.marshalUpdateServerTagsRequest = marshalUpdateServerTagsRequest;
exports.unmarshalBMCAccess = unmarshalBMCAccess;
exports.unmarshalBackup = unmarshalBackup;
exports.unmarshalCanOrderResponse = unmarshalCanOrderResponse;
exports.unmarshalCreateFailoverIPsResponse = unmarshalCreateFailoverIPsResponse;
exports.unmarshalFailoverIP = unmarshalFailoverIP;
exports.unmarshalGetIPv6BlockQuotasResponse = unmarshalGetIPv6BlockQuotasResponse;
exports.unmarshalGetRemainingQuotaResponse = unmarshalGetRemainingQuotaResponse;
exports.unmarshalGetRpnStatusResponse = unmarshalGetRpnStatusResponse;
exports.unmarshalIP = unmarshalIP;
exports.unmarshalIPv6Block = unmarshalIPv6Block;
exports.unmarshalInvoice = unmarshalInvoice;
exports.unmarshalListFailoverIPsResponse = unmarshalListFailoverIPsResponse;
exports.unmarshalListIPv6BlockSubnetsAvailableResponse = unmarshalListIPv6BlockSubnetsAvailableResponse;
exports.unmarshalListInvoicesResponse = unmarshalListInvoicesResponse;
exports.unmarshalListIpsResponse = unmarshalListIpsResponse;
exports.unmarshalListOSResponse = unmarshalListOSResponse;
exports.unmarshalListOffersResponse = unmarshalListOffersResponse;
exports.unmarshalListRefundsResponse = unmarshalListRefundsResponse;
exports.unmarshalListRpnCapableSanServersResponse = unmarshalListRpnCapableSanServersResponse;
exports.unmarshalListRpnCapableServersResponse = unmarshalListRpnCapableServersResponse;
exports.unmarshalListRpnGroupMembersResponse = unmarshalListRpnGroupMembersResponse;
exports.unmarshalListRpnGroupsResponse = unmarshalListRpnGroupsResponse;
exports.unmarshalListRpnInvitesResponse = unmarshalListRpnInvitesResponse;
exports.unmarshalListRpnSansResponse = unmarshalListRpnSansResponse;
exports.unmarshalListRpnServerCapabilitiesResponse = unmarshalListRpnServerCapabilitiesResponse;
exports.unmarshalListRpnV2CapableResourcesResponse = unmarshalListRpnV2CapableResourcesResponse;
exports.unmarshalListRpnV2GroupLogsResponse = unmarshalListRpnV2GroupLogsResponse;
exports.unmarshalListRpnV2GroupsResponse = unmarshalListRpnV2GroupsResponse;
exports.unmarshalListRpnV2MembersResponse = unmarshalListRpnV2MembersResponse;
exports.unmarshalListServerDisksResponse = unmarshalListServerDisksResponse;
exports.unmarshalListServerEventsResponse = unmarshalListServerEventsResponse;
exports.unmarshalListServersResponse = unmarshalListServersResponse;
exports.unmarshalListServicesResponse = unmarshalListServicesResponse;
exports.unmarshalListSubscribableServerOptionsResponse = unmarshalListSubscribableServerOptionsResponse;
exports.unmarshalOS = unmarshalOS;
exports.unmarshalOffer = unmarshalOffer;
exports.unmarshalRaid = unmarshalRaid;
exports.unmarshalRefund = unmarshalRefund;
exports.unmarshalRescue = unmarshalRescue;
exports.unmarshalRpnGroup = unmarshalRpnGroup;
exports.unmarshalRpnSan = unmarshalRpnSan;
exports.unmarshalRpnV2Group = unmarshalRpnV2Group;
exports.unmarshalServer = unmarshalServer;
exports.unmarshalServerDefaultPartitioning = unmarshalServerDefaultPartitioning;
exports.unmarshalServerInstall = unmarshalServerInstall;
exports.unmarshalService = unmarshalService;
exports.unmarshalSubscribeStorageOptionsResponse = unmarshalSubscribeStorageOptionsResponse;


/***/ }),

/***/ 1826:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const AttachFailoverIPToMacAddressRequest = {
  ipId: {
    greaterThan: 0
  }
};
const AttachFailoverIPsRequest = {
  serverId: {
    greaterThan: 0
  }
};
const BillingApiDownloadInvoiceRequest = {
  invoiceId: {
    greaterThan: 0
  }
};
const BillingApiDownloadRefundRequest = {
  refundId: {
    greaterThan: 0
  }
};
const BillingApiGetInvoiceRequest = {
  invoiceId: {
    greaterThan: 0
  }
};
const BillingApiGetRefundRequest = {
  refundId: {
    greaterThan: 0
  }
};
const BillingApiListInvoicesRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const BillingApiListRefundsRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const CancelServerInstallRequest = {
  serverId: {
    greaterThan: 0
  }
};
const DeleteFailoverIPRequest = {
  ipId: {
    greaterThan: 0
  }
};
const DeleteServerRequest = {
  serverId: {
    greaterThan: 0
  }
};
const DeleteServiceRequest = {
  serviceId: {
    greaterThan: 0
  }
};
const DetachFailoverIPFromMacAddressRequest = {
  ipId: {
    greaterThan: 0
  }
};
const GetBMCAccessRequest = {
  serverId: {
    greaterThan: 0
  }
};
const GetFailoverIPRequest = {
  ipId: {
    greaterThan: 0
  }
};
const GetOSRequest = {
  osId: {
    greaterThan: 0
  },
  serverId: {
    greaterThan: 0
  }
};
const GetOfferRequest = {
  offerId: {
    greaterThan: 0
  }
};
const GetOrderedServiceRequest = {
  orderedServiceId: {
    greaterThan: 0
  }
};
const GetRaidRequest = {
  serverId: {
    greaterThan: 0
  }
};
const GetRescueRequest = {
  serverId: {
    greaterThan: 0
  }
};
const GetServerBackupRequest = {
  serverId: {
    greaterThan: 0
  }
};
const GetServerInstallRequest = {
  serverId: {
    greaterThan: 0
  }
};
const GetServerRequest = {
  serverId: {
    greaterThan: 0
  }
};
const GetServiceRequest = {
  serviceId: {
    greaterThan: 0
  }
};
const IPv6Block = {
  id: {
    greaterThan: 0
  }
};
const IPv6BlockApiCreateIPv6BlockSubnetRequest = {
  blockId: {
    greaterThan: 0
  }
};
const IPv6BlockApiDeleteIPv6BlockRequest = {
  blockId: {
    greaterThan: 0
  }
};
const IPv6BlockApiListIPv6BlockSubnetsAvailableRequest = {
  blockId: {
    greaterThan: 0
  }
};
const IPv6BlockApiUpdateIPv6BlockRequest = {
  blockId: {
    greaterThan: 0
  }
};
const InstallServerRequest = {
  osId: {
    greaterThan: 0
  },
  serverId: {
    greaterThan: 0
  }
};
const ListFailoverIPsRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const ListOSRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  },
  serverId: {
    greaterThan: 0
  }
};
const ListOffersRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const ListServerDisksRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  },
  serverId: {
    greaterThan: 0
  }
};
const ListServerEventsRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  },
  serverId: {
    greaterThan: 0
  }
};
const ListServersRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const ListServicesRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const ListSubscribableServerOptionsRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  },
  serverId: {
    greaterThan: 0
  }
};
const RebootServerRequest = {
  serverId: {
    greaterThan: 0
  }
};
const RpnApiListRpnServerCapabilitiesRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const RpnSanApiAddIpRequest = {
  rpnSanId: {
    greaterThan: 0
  }
};
const RpnSanApiDeleteRpnSanRequest = {
  rpnSanId: {
    greaterThan: 0
  }
};
const RpnSanApiGetRpnSanRequest = {
  rpnSanId: {
    greaterThan: 0
  }
};
const RpnSanApiListAvailableIpsRequest = {
  rpnSanId: {
    greaterThan: 0
  }
};
const RpnSanApiListIpsRequest = {
  rpnSanId: {
    greaterThan: 0
  }
};
const RpnSanApiListRpnSansRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const RpnSanApiRemoveIpRequest = {
  rpnSanId: {
    greaterThan: 0
  }
};
const RpnV1ApiAcceptRpnInviteRequest = {
  memberId: {
    greaterThan: 0
  }
};
const RpnV1ApiAddRpnGroupMembersRequest = {
  groupId: {
    greaterThan: 0
  }
};
const RpnV1ApiDeleteRpnGroupMembersRequest = {
  groupId: {
    greaterThan: 0
  }
};
const RpnV1ApiDeleteRpnGroupRequest = {
  groupId: {
    greaterThan: 0
  }
};
const RpnV1ApiGetRpnGroupRequest = {
  groupId: {
    greaterThan: 0
  }
};
const RpnV1ApiLeaveRpnGroupRequest = {
  groupId: {
    greaterThan: 0
  }
};
const RpnV1ApiListRpnCapableSanServersRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const RpnV1ApiListRpnCapableServersRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const RpnV1ApiListRpnGroupMembersRequest = {
  groupId: {
    greaterThan: 0
  },
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const RpnV1ApiListRpnGroupsRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const RpnV1ApiListRpnInvitesRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const RpnV1ApiRefuseRpnInviteRequest = {
  memberId: {
    greaterThan: 0
  }
};
const RpnV1ApiRpnGroupInviteRequest = {
  groupId: {
    greaterThan: 0
  }
};
const RpnV1ApiUpdateRpnGroupNameRequest = {
  groupId: {
    greaterThan: 0
  }
};
const RpnV2ApiAddRpnV2MembersRequest = {
  groupId: {
    greaterThan: 0
  }
};
const RpnV2ApiDeleteRpnV2GroupRequest = {
  groupId: {
    greaterThan: 0
  }
};
const RpnV2ApiDeleteRpnV2MembersRequest = {
  groupId: {
    greaterThan: 0
  }
};
const RpnV2ApiDisableRpnV2GroupCompatibilityRequest = {
  groupId: {
    greaterThan: 0
  }
};
const RpnV2ApiEnableRpnV2GroupCompatibilityRequest = {
  groupId: {
    greaterThan: 0
  }
};
const RpnV2ApiGetRpnV2GroupRequest = {
  groupId: {
    greaterThan: 0
  }
};
const RpnV2ApiListRpnV2CapableResourcesRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const RpnV2ApiListRpnV2GroupLogsRequest = {
  groupId: {
    greaterThan: 0
  },
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const RpnV2ApiListRpnV2GroupsRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const RpnV2ApiListRpnV2MembersRequest = {
  groupId: {
    greaterThan: 0
  },
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const RpnV2ApiUpdateRpnV2GroupNameRequest = {
  groupId: {
    greaterThan: 0
  }
};
const RpnV2ApiUpdateRpnV2VlanForMembersRequest = {
  groupId: {
    greaterThan: 0
  }
};
const StartRescueRequest = {
  serverId: {
    greaterThan: 0
  }
};
const StartServerRequest = {
  serverId: {
    greaterThan: 0
  }
};
const StopBMCAccessRequest = {
  serverId: {
    greaterThan: 0
  }
};
const StopRescueRequest = {
  serverId: {
    greaterThan: 0
  }
};
const StopServerRequest = {
  serverId: {
    greaterThan: 0
  }
};
const SubscribeServerOptionRequest = {
  optionId: {
    greaterThan: 0
  },
  serverId: {
    greaterThan: 0
  }
};
const SubscribeStorageOptionsRequest = {
  serverId: {
    greaterThan: 0
  }
};
const UpdateRaidRequest = {
  serverId: {
    greaterThan: 0
  }
};
const UpdateReverseRequest = {
  ipId: {
    greaterThan: 0
  }
};
const UpdateServerBackupRequest = {
  serverId: {
    greaterThan: 0
  }
};
const UpdateServerRequest = {
  serverId: {
    greaterThan: 0
  }
};
const UpdateServerTagsRequest = {
  serverId: {
    greaterThan: 0
  }
};
exports.AttachFailoverIPToMacAddressRequest = AttachFailoverIPToMacAddressRequest;
exports.AttachFailoverIPsRequest = AttachFailoverIPsRequest;
exports.BillingApiDownloadInvoiceRequest = BillingApiDownloadInvoiceRequest;
exports.BillingApiDownloadRefundRequest = BillingApiDownloadRefundRequest;
exports.BillingApiGetInvoiceRequest = BillingApiGetInvoiceRequest;
exports.BillingApiGetRefundRequest = BillingApiGetRefundRequest;
exports.BillingApiListInvoicesRequest = BillingApiListInvoicesRequest;
exports.BillingApiListRefundsRequest = BillingApiListRefundsRequest;
exports.CancelServerInstallRequest = CancelServerInstallRequest;
exports.DeleteFailoverIPRequest = DeleteFailoverIPRequest;
exports.DeleteServerRequest = DeleteServerRequest;
exports.DeleteServiceRequest = DeleteServiceRequest;
exports.DetachFailoverIPFromMacAddressRequest = DetachFailoverIPFromMacAddressRequest;
exports.GetBMCAccessRequest = GetBMCAccessRequest;
exports.GetFailoverIPRequest = GetFailoverIPRequest;
exports.GetOSRequest = GetOSRequest;
exports.GetOfferRequest = GetOfferRequest;
exports.GetOrderedServiceRequest = GetOrderedServiceRequest;
exports.GetRaidRequest = GetRaidRequest;
exports.GetRescueRequest = GetRescueRequest;
exports.GetServerBackupRequest = GetServerBackupRequest;
exports.GetServerInstallRequest = GetServerInstallRequest;
exports.GetServerRequest = GetServerRequest;
exports.GetServiceRequest = GetServiceRequest;
exports.IPv6Block = IPv6Block;
exports.IPv6BlockApiCreateIPv6BlockSubnetRequest = IPv6BlockApiCreateIPv6BlockSubnetRequest;
exports.IPv6BlockApiDeleteIPv6BlockRequest = IPv6BlockApiDeleteIPv6BlockRequest;
exports.IPv6BlockApiListIPv6BlockSubnetsAvailableRequest = IPv6BlockApiListIPv6BlockSubnetsAvailableRequest;
exports.IPv6BlockApiUpdateIPv6BlockRequest = IPv6BlockApiUpdateIPv6BlockRequest;
exports.InstallServerRequest = InstallServerRequest;
exports.ListFailoverIPsRequest = ListFailoverIPsRequest;
exports.ListOSRequest = ListOSRequest;
exports.ListOffersRequest = ListOffersRequest;
exports.ListServerDisksRequest = ListServerDisksRequest;
exports.ListServerEventsRequest = ListServerEventsRequest;
exports.ListServersRequest = ListServersRequest;
exports.ListServicesRequest = ListServicesRequest;
exports.ListSubscribableServerOptionsRequest = ListSubscribableServerOptionsRequest;
exports.RebootServerRequest = RebootServerRequest;
exports.RpnApiListRpnServerCapabilitiesRequest = RpnApiListRpnServerCapabilitiesRequest;
exports.RpnSanApiAddIpRequest = RpnSanApiAddIpRequest;
exports.RpnSanApiDeleteRpnSanRequest = RpnSanApiDeleteRpnSanRequest;
exports.RpnSanApiGetRpnSanRequest = RpnSanApiGetRpnSanRequest;
exports.RpnSanApiListAvailableIpsRequest = RpnSanApiListAvailableIpsRequest;
exports.RpnSanApiListIpsRequest = RpnSanApiListIpsRequest;
exports.RpnSanApiListRpnSansRequest = RpnSanApiListRpnSansRequest;
exports.RpnSanApiRemoveIpRequest = RpnSanApiRemoveIpRequest;
exports.RpnV1ApiAcceptRpnInviteRequest = RpnV1ApiAcceptRpnInviteRequest;
exports.RpnV1ApiAddRpnGroupMembersRequest = RpnV1ApiAddRpnGroupMembersRequest;
exports.RpnV1ApiDeleteRpnGroupMembersRequest = RpnV1ApiDeleteRpnGroupMembersRequest;
exports.RpnV1ApiDeleteRpnGroupRequest = RpnV1ApiDeleteRpnGroupRequest;
exports.RpnV1ApiGetRpnGroupRequest = RpnV1ApiGetRpnGroupRequest;
exports.RpnV1ApiLeaveRpnGroupRequest = RpnV1ApiLeaveRpnGroupRequest;
exports.RpnV1ApiListRpnCapableSanServersRequest = RpnV1ApiListRpnCapableSanServersRequest;
exports.RpnV1ApiListRpnCapableServersRequest = RpnV1ApiListRpnCapableServersRequest;
exports.RpnV1ApiListRpnGroupMembersRequest = RpnV1ApiListRpnGroupMembersRequest;
exports.RpnV1ApiListRpnGroupsRequest = RpnV1ApiListRpnGroupsRequest;
exports.RpnV1ApiListRpnInvitesRequest = RpnV1ApiListRpnInvitesRequest;
exports.RpnV1ApiRefuseRpnInviteRequest = RpnV1ApiRefuseRpnInviteRequest;
exports.RpnV1ApiRpnGroupInviteRequest = RpnV1ApiRpnGroupInviteRequest;
exports.RpnV1ApiUpdateRpnGroupNameRequest = RpnV1ApiUpdateRpnGroupNameRequest;
exports.RpnV2ApiAddRpnV2MembersRequest = RpnV2ApiAddRpnV2MembersRequest;
exports.RpnV2ApiDeleteRpnV2GroupRequest = RpnV2ApiDeleteRpnV2GroupRequest;
exports.RpnV2ApiDeleteRpnV2MembersRequest = RpnV2ApiDeleteRpnV2MembersRequest;
exports.RpnV2ApiDisableRpnV2GroupCompatibilityRequest = RpnV2ApiDisableRpnV2GroupCompatibilityRequest;
exports.RpnV2ApiEnableRpnV2GroupCompatibilityRequest = RpnV2ApiEnableRpnV2GroupCompatibilityRequest;
exports.RpnV2ApiGetRpnV2GroupRequest = RpnV2ApiGetRpnV2GroupRequest;
exports.RpnV2ApiListRpnV2CapableResourcesRequest = RpnV2ApiListRpnV2CapableResourcesRequest;
exports.RpnV2ApiListRpnV2GroupLogsRequest = RpnV2ApiListRpnV2GroupLogsRequest;
exports.RpnV2ApiListRpnV2GroupsRequest = RpnV2ApiListRpnV2GroupsRequest;
exports.RpnV2ApiListRpnV2MembersRequest = RpnV2ApiListRpnV2MembersRequest;
exports.RpnV2ApiUpdateRpnV2GroupNameRequest = RpnV2ApiUpdateRpnV2GroupNameRequest;
exports.RpnV2ApiUpdateRpnV2VlanForMembersRequest = RpnV2ApiUpdateRpnV2VlanForMembersRequest;
exports.StartRescueRequest = StartRescueRequest;
exports.StartServerRequest = StartServerRequest;
exports.StopBMCAccessRequest = StopBMCAccessRequest;
exports.StopRescueRequest = StopRescueRequest;
exports.StopServerRequest = StopServerRequest;
exports.SubscribeServerOptionRequest = SubscribeServerOptionRequest;
exports.SubscribeStorageOptionsRequest = SubscribeStorageOptionsRequest;
exports.UpdateRaidRequest = UpdateRaidRequest;
exports.UpdateReverseRequest = UpdateReverseRequest;
exports.UpdateServerBackupRequest = UpdateServerBackupRequest;
exports.UpdateServerRequest = UpdateServerRequest;
exports.UpdateServerTagsRequest = UpdateServerTagsRequest;


/***/ }),

/***/ 1392:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(149);
exports.v1beta1 = index_gen;


/***/ }),

/***/ 1852:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const content_gen = __nccwpck_require__(2634);
const marshalling_gen = __nccwpck_require__(8459);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par", "nl-ams", "pl-waw"];
  pageOfListDatabaseEngines = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/database-engines`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["version", request.version]
      )
    },
    marshalling_gen.unmarshalListDatabaseEnginesResponse
  );
  /**
   * List available database engines. List the FerretDB database engines
   * available at Scaleway.
   *
   * @param request - The request {@link ListDatabaseEnginesRequest}
   * @returns A Promise of ListDatabaseEnginesResponse
   */
  listDatabaseEngines = (request = {}) => resourcePaginator.enrichForPagination("engines", this.pageOfListDatabaseEngines, request);
  pageOfListNodeTypes = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/node-types`,
      urlParams: marshalling.urlParams(
        ["include_disabled_types", request.includeDisabledTypes],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListNodeTypesResponse
  );
  /**
   * List available node types. List all available node types. By default, the
   * node types returned in the list are ordered by creation date in ascending
   * order, though this can be modified via the `order_by` field.
   *
   * @param request - The request {@link ListNodeTypesRequest}
   * @returns A Promise of ListNodeTypesResponse
   */
  listNodeTypes = (request) => resourcePaginator.enrichForPagination("nodeTypes", this.pageOfListNodeTypes, request);
  /**
   * Upgrade a Database Instance. Upgrade your current Database Instance
   * specifications like node type, high availability, volume, or the database
   * engine version. Note that upon upgrade the `enable_ha` parameter can only
   * be set to `true`.
   *
   * @param request - The request {@link UpgradeInstanceRequest}
   * @returns A Promise of Instance
   */
  upgradeInstance = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpgradeInstanceRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/upgrade`
    },
    marshalling_gen.unmarshalInstance
  );
  pageOfListInstances = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListInstancesResponse
  );
  /**
   * List Database Instances. List all Database Instances in the specified
   * region, for a given Scaleway Organization or Scaleway Project. By default,
   * the Database Instances returned in the list are ordered by creation date in
   * ascending order, though this can be modified via the order_by field. You
   * can define additional parameters for your query, such as `tags` and `name`.
   * For the `name` parameter, the value you include will be checked against the
   * whole name string to see if it includes the string you put in the
   * parameter.
   *
   * @param request - The request {@link ListInstancesRequest}
   * @returns A Promise of ListInstancesResponse
   */
  listInstances = (request = {}) => resourcePaginator.enrichForPagination("instances", this.pageOfListInstances, request);
  /**
   * Get a Database Instance. Retrieve information about a given Database
   * Instance, specified by the `region` and `instance_id` parameters. Its full
   * details, including name, status, IP address and port, are returned in the
   * response object.
   *
   * @param request - The request {@link GetInstanceRequest}
   * @returns A Promise of Instance
   */
  getInstance = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Waits for {@link Instance} to be in a final state.
   *
   * @param request - The request {@link GetInstanceRequest}
   * @param options - The waiting options
   * @returns A Promise of Instance
   */
  waitForInstance = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.INSTANCE_TRANSIENT_STATUSES.includes(res.status))),
    this.getInstance,
    request,
    options
  );
  /**
   * Create a Database Instance. Create a new Database Instance. You must set
   * the `engine`, `user_name`, `password` and `node_type` parameters.
   * Optionally, you can specify the volume type and size.
   *
   * @param request - The request {@link CreateInstanceRequest}
   * @returns A Promise of Instance
   */
  createInstance = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateInstanceRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Update a Database Instance. Update the parameters of a Database Instance,
   * including name, tags and backup schedule details.
   *
   * @param request - The request {@link UpdateInstanceRequest}
   * @returns A Promise of Instance
   */
  updateInstance = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateInstanceRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Delete a Database Instance. Delete a given Database Instance, specified by
   * the `region` and `instance_id` parameters. Deleting a Database Instance is
   * permanent, and cannot be undone. Note that upon deletion all your data will
   * be lost.
   *
   * @param request - The request {@link DeleteInstanceRequest}
   * @returns A Promise of Instance
   */
  deleteInstance = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Clone a Database Instance. Clone a given Database Instance, specified by
   * the `region` and `instance_id` parameters. The clone feature allows you to
   * create a new Database Instance from an existing one. The clone includes all
   * existing databases, users and permissions. You can create a clone on a
   * Database Instance bigger than your current one.
   *
   * @param request - The request {@link CloneInstanceRequest}
   * @returns A Promise of Instance
   */
  cloneInstance = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCloneInstanceRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/clone`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Restart Database Instance. Restart a given Database Instance, specified by
   * the `region` and `instance_id` parameters. The status of the Database
   * Instance returned in the response.
   *
   * @param request - The request {@link RestartInstanceRequest}
   * @returns A Promise of Instance
   */
  restartInstance = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/restart`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Get the TLS certificate of a Database Instance. Retrieve information about
   * the TLS certificate of a given Database Instance. Details like name and
   * content are returned in the response.
   *
   * @param request - The request {@link GetInstanceCertificateRequest}
   * @returns A Promise of Blob
   */
  getInstanceCertificate = (request) => this.client.fetch({
    method: "GET",
    path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/certificate`,
    urlParams: marshalling.urlParams(["dl", 1]),
    responseType: "blob"
  });
  /**
   * Renew the TLS certificate of a Database Instance. Renew a TLS for a
   * Database Instance. Renewing a certificate means that you will not be able
   * to connect to your Database Instance using the previous certificate. You
   * will also need to download and update the new certificate for all database
   * clients.
   *
   * @param request - The request {@link RenewInstanceCertificateRequest}
   */
  renewInstanceCertificate = (request) => this.client.fetch({
    body: "{}",
    headers: jsonContentHeaders,
    method: "POST",
    path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/renew-certificate`
  });
  /**
   * Get Database Instance metrics. Retrieve the time series metrics of a given
   * Database Instance. You can define the period from which to retrieve metrics
   * by specifying the `start_date` and `end_date`.
   *
   * @param request - The request {@link GetInstanceMetricsRequest}
   * @returns A Promise of InstanceMetrics
   */
  getInstanceMetrics = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/metrics`,
      urlParams: marshalling.urlParams(
        ["end_date", request.endDate],
        ["metric_name", request.metricName],
        ["start_date", request.startDate]
      )
    },
    marshalling_gen.unmarshalInstanceMetrics
  );
  /**
   * Create a Read Replica. Create a new Read Replica of a Database Instance.
   * You must specify the `region` and the `instance_id`. You can only create a
   * maximum of 3 Read Replicas per Database Instance.
   *
   * @param request - The request {@link CreateReadReplicaRequest}
   * @returns A Promise of ReadReplica
   */
  createReadReplica = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateReadReplicaRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/read-replicas`
    },
    marshalling_gen.unmarshalReadReplica
  );
  /**
   * Get a Read Replica. Retrieve information about a Database Instance Read
   * Replica. Full details about the Read Replica, like `endpoints`, `status`
   * and `region` are returned in the response.
   *
   * @param request - The request {@link GetReadReplicaRequest}
   * @returns A Promise of ReadReplica
   */
  getReadReplica = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${marshalling.validatePathParam("readReplicaId", request.readReplicaId)}`
    },
    marshalling_gen.unmarshalReadReplica
  );
  /**
   * Waits for {@link ReadReplica} to be in a final state.
   *
   * @param request - The request {@link GetReadReplicaRequest}
   * @param options - The waiting options
   * @returns A Promise of ReadReplica
   */
  waitForReadReplica = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(
      !content_gen.READ_REPLICA_TRANSIENT_STATUSES.includes(res.status)
    )),
    this.getReadReplica,
    request,
    options
  );
  /**
   * Delete a Read Replica. Delete a Read Replica of a Database Instance. You
   * must specify the `region` and `read_replica_id` parameters of the Read
   * Replica you want to delete.
   *
   * @param request - The request {@link DeleteReadReplicaRequest}
   * @returns A Promise of ReadReplica
   */
  deleteReadReplica = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${marshalling.validatePathParam("readReplicaId", request.readReplicaId)}`
    },
    marshalling_gen.unmarshalReadReplica
  );
  /**
   * Resync a Read Replica. When you resync a Read Replica, first it is reset,
   * then its data is resynchronized from the primary node. Your Read Replica
   * remains unavailable during the resync process. The duration of this process
   * is proportional to the size of your Database Instance. The configured
   * endpoints do not change.
   *
   * @param request - The request {@link ResetReadReplicaRequest}
   * @returns A Promise of ReadReplica
   */
  resetReadReplica = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${marshalling.validatePathParam("readReplicaId", request.readReplicaId)}/reset`
    },
    marshalling_gen.unmarshalReadReplica
  );
  /**
   * Promote a Read Replica. Promote a Read Replica to Database Instance
   * automatically.
   *
   * @param request - The request {@link PromoteReadReplicaRequest}
   * @returns A Promise of Instance
   */
  promoteReadReplica = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${marshalling.validatePathParam("readReplicaId", request.readReplicaId)}/promote`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Create an endpoint for a Read Replica. Create a new endpoint for a Read
   * Replica. Read Replicas can have at most one direct access and one Private
   * Network endpoint.
   *
   * @param request - The request {@link CreateReadReplicaEndpointRequest}
   * @returns A Promise of ReadReplica
   */
  createReadReplicaEndpoint = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateReadReplicaEndpointRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${marshalling.validatePathParam("readReplicaId", request.readReplicaId)}/endpoints`
    },
    marshalling_gen.unmarshalReadReplica
  );
  /**
   * List available logs of a Database Instance. List the available logs of a
   * Database Instance. By default, the logs returned in the list are ordered by
   * creation date in ascending order, though this can be modified via the
   * order_by field.
   *
   * @param request - The request {@link ListInstanceLogsRequest}
   * @returns A Promise of ListInstanceLogsResponse
   */
  listInstanceLogs = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/logs`,
      urlParams: marshalling.urlParams(["order_by", request.orderBy])
    },
    marshalling_gen.unmarshalListInstanceLogsResponse
  );
  /**
   * Get given logs of a Database Instance. Retrieve information about the logs
   * of a Database Instance. Specify the `instance_log_id` and `region` in your
   * request to get information such as `download_url`, `status`, `expires_at`
   * and `created_at` about your logs in the response.
   *
   * @param request - The request {@link GetInstanceLogRequest}
   * @returns A Promise of InstanceLog
   */
  getInstanceLog = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/logs/${marshalling.validatePathParam("instanceLogId", request.instanceLogId)}`
    },
    marshalling_gen.unmarshalInstanceLog
  );
  /**
   * Waits for {@link InstanceLog} to be in a final state.
   *
   * @param request - The request {@link GetInstanceLogRequest}
   * @param options - The waiting options
   * @returns A Promise of InstanceLog
   */
  waitForInstanceLog = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(
      !content_gen.INSTANCE_LOG_TRANSIENT_STATUSES.includes(res.status)
    )),
    this.getInstanceLog,
    request,
    options
  );
  /**
   * Purge remote Database Instance logs. Purge a given remote log from a
   * Database Instance. You can specify the `log_name` of the log you wish to
   * clean from your Database Instance.
   *
   * @param request - The request {@link PurgeInstanceLogsRequest}
   */
  purgeInstanceLogs = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalPurgeInstanceLogsRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/purge-logs`
  });
  /**
   * List remote Database Instance logs details. List remote log details. By
   * default, the details returned in the list are ordered by creation date in
   * ascending order, though this can be modified via the order_by field.
   *
   * @param request - The request {@link ListInstanceLogsDetailsRequest}
   * @returns A Promise of ListInstanceLogsDetailsResponse
   */
  listInstanceLogsDetails = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/logs-details`
    },
    marshalling_gen.unmarshalListInstanceLogsDetailsResponse
  );
  /**
   * Add Database Instance advanced settings. Add an advanced setting to a
   * Database Instance. You must set the `name` and the `value` of each
   * setting.
   *
   * @param request - The request {@link AddInstanceSettingsRequest}
   * @returns A Promise of AddInstanceSettingsResponse
   */
  addInstanceSettings = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalAddInstanceSettingsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/settings`
    },
    marshalling_gen.unmarshalAddInstanceSettingsResponse
  );
  /**
   * Delete Database Instance advanced settings. Delete an advanced setting in a
   * Database Instance. You must specify the names of the settings you want to
   * delete in the request.
   *
   * @param request - The request {@link DeleteInstanceSettingsRequest}
   * @returns A Promise of DeleteInstanceSettingsResponse
   */
  deleteInstanceSettings = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalDeleteInstanceSettingsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "DELETE",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/settings`
    },
    marshalling_gen.unmarshalDeleteInstanceSettingsResponse
  );
  /**
   * Set Database Instance advanced settings. Update an advanced setting for a
   * Database Instance. Settings added upon database engine initalization can
   * only be defined once, and cannot, therefore, be updated.
   *
   * @param request - The request {@link SetInstanceSettingsRequest}
   * @returns A Promise of SetInstanceSettingsResponse
   */
  setInstanceSettings = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetInstanceSettingsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/settings`
    },
    marshalling_gen.unmarshalSetInstanceSettingsResponse
  );
  pageOfListInstanceACLRules = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/acls`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListInstanceACLRulesResponse
  );
  /**
   * List ACL rules of a Database Instance. List the ACL rules for a given
   * Database Instance. The response is an array of ACL objects, each one
   * representing an ACL that denies, allows or redirects traffic based on
   * certain conditions.
   *
   * @param request - The request {@link ListInstanceACLRulesRequest}
   * @returns A Promise of ListInstanceACLRulesResponse
   */
  listInstanceACLRules = (request) => resourcePaginator.enrichForPagination("rules", this.pageOfListInstanceACLRules, request);
  /**
   * Add an ACL rule to a Database Instance. Add an additional ACL rule to a
   * Database Instance.
   *
   * @param request - The request {@link AddInstanceACLRulesRequest}
   * @returns A Promise of AddInstanceACLRulesResponse
   */
  addInstanceACLRules = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalAddInstanceACLRulesRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/acls`
    },
    marshalling_gen.unmarshalAddInstanceACLRulesResponse
  );
  /**
   * Set ACL rules for a Database Instance. Replace all the ACL rules of a
   * Database Instance.
   *
   * @param request - The request {@link SetInstanceACLRulesRequest}
   * @returns A Promise of SetInstanceACLRulesResponse
   */
  setInstanceACLRules = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetInstanceACLRulesRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/acls`
    },
    marshalling_gen.unmarshalSetInstanceACLRulesResponse
  );
  /**
   * Delete ACL rules of a Database Instance. Delete one or more ACL rules of a
   * Database Instance.
   *
   * @param request - The request {@link DeleteInstanceACLRulesRequest}
   * @returns A Promise of DeleteInstanceACLRulesResponse
   */
  deleteInstanceACLRules = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalDeleteInstanceACLRulesRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "DELETE",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/acls`
    },
    marshalling_gen.unmarshalDeleteInstanceACLRulesResponse
  );
  pageOfListUsers = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/users`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListUsersResponse
  );
  /**
   * List users of a Database Instance. List all users of a given Database
   * Instance. By default, the users returned in the list are ordered by
   * creation date in ascending order, though this can be modified via the
   * order_by field.
   *
   * @param request - The request {@link ListUsersRequest}
   * @returns A Promise of ListUsersResponse
   */
  listUsers = (request) => resourcePaginator.enrichForPagination("users", this.pageOfListUsers, request);
  /**
   * Create a user for a Database Instance. Create a new user for a Database
   * Instance. You must define the `name`, `password` and `is_admin`
   * parameters.
   *
   * @param request - The request {@link CreateUserRequest}
   * @returns A Promise of User
   */
  createUser = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateUserRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/users`
    },
    marshalling_gen.unmarshalUser
  );
  /**
   * Update a user on a Database Instance. Update the parameters of a user on a
   * Database Instance. You can update the `password` and `is_admin` parameters,
   * but you cannot change the name of the user.
   *
   * @param request - The request {@link UpdateUserRequest}
   * @returns A Promise of User
   */
  updateUser = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateUserRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/users/${marshalling.validatePathParam("name", request.name)}`
    },
    marshalling_gen.unmarshalUser
  );
  /**
   * Delete a user on a Database Instance. Delete a given user on a Database
   * Instance. You must specify, in the endpoint, the `region`, `instance_id`
   * and `name` parameters of the user you want to delete.
   *
   * @param request - The request {@link DeleteUserRequest}
   */
  deleteUser = (request) => this.client.fetch({
    method: "DELETE",
    path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/users/${marshalling.validatePathParam("name", request.name)}`
  });
  pageOfListDatabases = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/databases`,
      urlParams: marshalling.urlParams(
        ["managed", request.managed],
        ["name", request.name],
        ["order_by", request.orderBy],
        ["owner", request.owner],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListDatabasesResponse
  );
  /**
   * List databases in a Database Instance. List all databases of a given
   * Database Instance. By default, the databases returned in the list are
   * ordered by creation date in ascending order, though this can be modified
   * via the order_by field. You can define additional parameters for your
   * query, such as `name`, `managed` and `owner`.
   *
   * @param request - The request {@link ListDatabasesRequest}
   * @returns A Promise of ListDatabasesResponse
   */
  listDatabases = (request) => resourcePaginator.enrichForPagination("databases", this.pageOfListDatabases, request);
  /**
   * Create a database in a Database Instance. Create a new database. You must
   * define the `name` parameter in the request.
   *
   * @param request - The request {@link CreateDatabaseRequest}
   * @returns A Promise of Database
   */
  createDatabase = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateDatabaseRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/databases`
    },
    marshalling_gen.unmarshalDatabase
  );
  /**
   * Delete a database in a Database Instance. Delete a given database on a
   * Database Instance. You must specify, in the endpoint, the `region`,
   * `instance_id` and `name` parameters of the database you want to delete.
   *
   * @param request - The request {@link DeleteDatabaseRequest}
   */
  deleteDatabase = (request) => this.client.fetch({
    method: "DELETE",
    path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/databases/${marshalling.validatePathParam("name", request.name)}`
  });
  pageOfListPrivileges = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/privileges`,
      urlParams: marshalling.urlParams(
        ["database_name", request.databaseName],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["user_name", request.userName]
      )
    },
    marshalling_gen.unmarshalListPrivilegesResponse
  );
  /**
   * List user privileges for a database. List privileges of a user on a
   * database. By default, the details returned in the list are ordered by
   * creation date in ascending order, though this can be modified via the
   * order_by field. You can define additional parameters for your query, such
   * as `database_name` and `user_name`.
   *
   * @param request - The request {@link ListPrivilegesRequest}
   * @returns A Promise of ListPrivilegesResponse
   */
  listPrivileges = (request) => resourcePaginator.enrichForPagination("privileges", this.pageOfListPrivileges, request);
  /**
   * Set user privileges for a database. Set the privileges of a user on a
   * database. You must define `database_name`, `user_name` and `permission` in
   * the request body.
   *
   * @param request - The request {@link SetPrivilegeRequest}
   * @returns A Promise of Privilege
   */
  setPrivilege = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetPrivilegeRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/privileges`
    },
    marshalling_gen.unmarshalPrivilege
  );
  pageOfListSnapshots = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/snapshots`,
      urlParams: marshalling.urlParams(
        ["instance_id", request.instanceId],
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListSnapshotsResponse
  );
  /**
   * List snapshots. List snapshots. You can include the `instance_id` or
   * `project_id` in your query to get the list of snapshots for specific
   * Database Instances and/or Projects. By default, the details returned in the
   * list are ordered by creation date in ascending order, though this can be
   * modified via the `order_by` field.
   *
   * @param request - The request {@link ListSnapshotsRequest}
   * @returns A Promise of ListSnapshotsResponse
   */
  listSnapshots = (request = {}) => resourcePaginator.enrichForPagination("snapshots", this.pageOfListSnapshots, request);
  /**
   * Get a Database Instance snapshot. Retrieve information about a given
   * snapshot, specified by its `snapshot_id` and `region`. Full details about
   * the snapshot, like size and expiration date, are returned in the response.
   *
   * @param request - The request {@link GetSnapshotRequest}
   * @returns A Promise of Snapshot
   */
  getSnapshot = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/snapshots/${marshalling.validatePathParam("snapshotId", request.snapshotId)}`
    },
    marshalling_gen.unmarshalSnapshot
  );
  /**
   * Waits for {@link Snapshot} to be in a final state.
   *
   * @param request - The request {@link GetSnapshotRequest}
   * @param options - The waiting options
   * @returns A Promise of Snapshot
   */
  waitForSnapshot = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.SNAPSHOT_TRANSIENT_STATUSES.includes(res.status))),
    this.getSnapshot,
    request,
    options
  );
  /**
   * Create a Database Instance snapshot. Create a new snapshot of a Database
   * Instance. You must define the `name` parameter in the request.
   *
   * @param request - The request {@link CreateSnapshotRequest}
   * @returns A Promise of Snapshot
   */
  createSnapshot = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateSnapshotRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/snapshots`
    },
    marshalling_gen.unmarshalSnapshot
  );
  /**
   * Update a Database Instance snapshot. Update the parameters of a snapshot of
   * a Database Instance. You can update the `name` and `expires_at`
   * parameters.
   *
   * @param request - The request {@link UpdateSnapshotRequest}
   * @returns A Promise of Snapshot
   */
  updateSnapshot = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateSnapshotRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/snapshots/${marshalling.validatePathParam("snapshotId", request.snapshotId)}`
    },
    marshalling_gen.unmarshalSnapshot
  );
  /**
   * Delete a Database Instance snapshot. Delete a given snapshot of a Database
   * Instance. You must specify, in the endpoint, the `region` and `snapshot_id`
   * parameters of the snapshot you want to delete.
   *
   * @param request - The request {@link DeleteSnapshotRequest}
   * @returns A Promise of Snapshot
   */
  deleteSnapshot = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/snapshots/${marshalling.validatePathParam("snapshotId", request.snapshotId)}`
    },
    marshalling_gen.unmarshalSnapshot
  );
  /**
   * Create a new Database Instance from a snapshot. Restore a snapshot. When
   * you restore a snapshot, a new Instance is created and billed to your
   * account. Note that is possible to select a larger node type for your new
   * Database Instance. However, the Block volume size will be the same as the
   * size of the restored snapshot. All Instance settings will be restored if
   * you chose a node type with the same or more memory size than the initial
   * Instance. Settings will be reset to the default if your node type has less
   * memory.
   *
   * @param request - The request {@link CreateInstanceFromSnapshotRequest}
   * @returns A Promise of Instance
   */
  createInstanceFromSnapshot = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateInstanceFromSnapshotRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/snapshots/${marshalling.validatePathParam("snapshotId", request.snapshotId)}/create-instance`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Create a new Database Instance endpoint. Create a new endpoint for a
   * Database Instance. You can add `load_balancer` and `private_network`
   * specifications to the body of the request.
   *
   * @param request - The request {@link CreateEndpointRequest}
   * @returns A Promise of Endpoint
   */
  createEndpoint = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateEndpointRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/endpoints`
    },
    marshalling_gen.unmarshalEndpoint
  );
  /**
   * Delete a Database Instance endpoint. Delete the endpoint of a Database
   * Instance. You must specify the `region` and `endpoint_id` parameters of the
   * endpoint you want to delete. Note that might need to update any environment
   * configurations that point to the deleted endpoint.
   *
   * @param request - The request {@link DeleteEndpointRequest}
   */
  deleteEndpoint = (request) => this.client.fetch({
    method: "DELETE",
    path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/endpoints/${marshalling.validatePathParam("endpointId", request.endpointId)}`
  });
  /**
   * Get a Database Instance endpoint. Retrieve information about a Database
   * Instance endpoint. Full details about the endpoint, like `ip`, `port`,
   * `private_network` and `load_balancer` specifications are returned in the
   * response.
   *
   * @param request - The request {@link GetEndpointRequest}
   * @returns A Promise of Endpoint
   */
  getEndpoint = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/endpoints/${marshalling.validatePathParam("endpointId", request.endpointId)}`
    },
    marshalling_gen.unmarshalEndpoint
  );
  /**
   * Migrate Database Instance endpoint. Migrate an existing Database Instance
   * endpoint to another Database Instance.
   *
   * @param request - The request {@link MigrateEndpointRequest}
   * @returns A Promise of Endpoint
   */
  migrateEndpoint = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalMigrateEndpointRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/endpoints/${marshalling.validatePathParam("endpointId", request.endpointId)}/migrate`
    },
    marshalling_gen.unmarshalEndpoint
  );
  /**
   * Apply an instance maintenance. Apply a pending instance maintenance on your
   * instance. This action can generate some service interruption.
   *
   * @param request - The request {@link ApplyInstanceMaintenanceRequest}
   * @returns A Promise of Maintenance
   */
  applyInstanceMaintenance = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/apply-maintenance`
    },
    marshalling_gen.unmarshalMaintenance
  );
}
exports.API = API;


/***/ }),

/***/ 2634:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const INSTANCE_LOG_TRANSIENT_STATUSES = ["creating"];
const INSTANCE_TRANSIENT_STATUSES = [
  "provisioning",
  "configuring",
  "deleting",
  "autohealing",
  "initializing",
  "backuping",
  "snapshotting",
  "restarting"
];
const MAINTENANCE_TRANSIENT_STATUSES = ["ongoing"];
const READ_REPLICA_TRANSIENT_STATUSES = [
  "provisioning",
  "initializing",
  "deleting",
  "configuring",
  "promoting"
];
const SNAPSHOT_TRANSIENT_STATUSES = [
  "creating",
  "restoring",
  "deleting"
];
exports.INSTANCE_LOG_TRANSIENT_STATUSES = INSTANCE_LOG_TRANSIENT_STATUSES;
exports.INSTANCE_TRANSIENT_STATUSES = INSTANCE_TRANSIENT_STATUSES;
exports.MAINTENANCE_TRANSIENT_STATUSES = MAINTENANCE_TRANSIENT_STATUSES;
exports.READ_REPLICA_TRANSIENT_STATUSES = READ_REPLICA_TRANSIENT_STATUSES;
exports.SNAPSHOT_TRANSIENT_STATUSES = SNAPSHOT_TRANSIENT_STATUSES;


/***/ }),

/***/ 149:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(1852);
const content_gen = __nccwpck_require__(2634);
const validationRules_gen = __nccwpck_require__(3795);
exports.API = api_gen.API;
exports.INSTANCE_LOG_TRANSIENT_STATUSES = content_gen.INSTANCE_LOG_TRANSIENT_STATUSES;
exports.INSTANCE_TRANSIENT_STATUSES = content_gen.INSTANCE_TRANSIENT_STATUSES;
exports.MAINTENANCE_TRANSIENT_STATUSES = content_gen.MAINTENANCE_TRANSIENT_STATUSES;
exports.READ_REPLICA_TRANSIENT_STATUSES = content_gen.READ_REPLICA_TRANSIENT_STATUSES;
exports.SNAPSHOT_TRANSIENT_STATUSES = content_gen.SNAPSHOT_TRANSIENT_STATUSES;
exports.ValidationRules = validationRules_gen;


/***/ }),

/***/ 8459:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const randomName = __nccwpck_require__(8118);
const json = __nccwpck_require__(2362);
const customMarshalling = __nccwpck_require__(5667);
const marshalling = __nccwpck_require__(1502);
const unmarshalEndpointDirectAccessDetails = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EndpointDirectAccessDetails' failed as data isn't a dictionary.`
    );
  }
  return {};
};
const unmarshalEndpointLoadBalancerDetails = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EndpointLoadBalancerDetails' failed as data isn't a dictionary.`
    );
  }
  return {};
};
const unmarshalEndpointPrivateNetworkDetails = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EndpointPrivateNetworkDetails' failed as data isn't a dictionary.`
    );
  }
  return {
    privateNetworkId: data.private_network_id,
    serviceIp: data.service_ip,
    zone: data.zone
  };
};
const unmarshalEndpoint = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Endpoint' failed as data isn't a dictionary.`
    );
  }
  return {
    directAccess: data.direct_access ? unmarshalEndpointDirectAccessDetails(data.direct_access) : void 0,
    hostname: data.hostname,
    id: data.id,
    ip: data.ip,
    loadBalancer: data.load_balancer ? unmarshalEndpointLoadBalancerDetails(data.load_balancer) : void 0,
    name: data.name,
    port: data.port,
    privateNetwork: data.private_network ? unmarshalEndpointPrivateNetworkDetails(data.private_network) : void 0
  };
};
const unmarshalMaintenance = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Maintenance' failed as data isn't a dictionary.`
    );
  }
  return {
    closedAt: marshalling.unmarshalDate(data.closed_at),
    forcedAt: marshalling.unmarshalDate(data.forced_at),
    reason: data.reason,
    startsAt: marshalling.unmarshalDate(data.starts_at),
    status: data.status,
    stopsAt: marshalling.unmarshalDate(data.stops_at)
  };
};
const unmarshalReadReplica = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ReadReplica' failed as data isn't a dictionary.`
    );
  }
  return {
    endpoints: marshalling.unmarshalArrayOfObject(data.endpoints, unmarshalEndpoint),
    id: data.id,
    region: data.region,
    sameZone: data.same_zone,
    status: data.status
  };
};
const unmarshalDatabase = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Database' failed as data isn't a dictionary.`
    );
  }
  return {
    managed: data.managed,
    name: data.name,
    owner: data.owner,
    size: data.size
  };
};
const unmarshalInstanceLog = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'InstanceLog' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    downloadUrl: data.download_url,
    expiresAt: marshalling.unmarshalDate(data.expires_at),
    id: data.id,
    nodeName: data.node_name,
    region: data.region,
    status: data.status
  };
};
const unmarshalBackupSchedule = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'BackupSchedule' failed as data isn't a dictionary.`
    );
  }
  return {
    disabled: data.disabled,
    frequency: data.frequency,
    nextRunAt: marshalling.unmarshalDate(data.next_run_at),
    retention: data.retention
  };
};
const unmarshalInstanceSetting = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'InstanceSetting' failed as data isn't a dictionary.`
    );
  }
  return {
    name: data.name,
    value: data.value
  };
};
const unmarshalLogsPolicy = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'LogsPolicy' failed as data isn't a dictionary.`
    );
  }
  return {
    maxAgeRetention: data.max_age_retention,
    totalDiskRetention: data.total_disk_retention
  };
};
const unmarshalUpgradableVersion = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UpgradableVersion' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    minorVersion: data.minor_version,
    name: data.name,
    version: data.version
  };
};
const unmarshalVolume = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Volume' failed as data isn't a dictionary.`
    );
  }
  return {
    class: data.class,
    size: data.size,
    type: data.type
  };
};
const unmarshalInstance = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Instance' failed as data isn't a dictionary.`
    );
  }
  return {
    backupSameRegion: data.backup_same_region,
    backupSchedule: data.backup_schedule ? unmarshalBackupSchedule(data.backup_schedule) : void 0,
    createdAt: marshalling.unmarshalDate(data.created_at),
    endpoint: data.endpoint ? unmarshalEndpoint(data.endpoint) : void 0,
    endpoints: marshalling.unmarshalArrayOfObject(data.endpoints, unmarshalEndpoint),
    engine: data.engine,
    id: data.id,
    initSettings: marshalling.unmarshalArrayOfObject(
      data.init_settings,
      unmarshalInstanceSetting
    ),
    isHaCluster: data.is_ha_cluster,
    logsPolicy: data.logs_policy ? unmarshalLogsPolicy(data.logs_policy) : void 0,
    maintenances: marshalling.unmarshalArrayOfObject(
      data.maintenances,
      unmarshalMaintenance
    ),
    name: data.name,
    nodeType: data.node_type,
    organizationId: data.organization_id,
    projectId: data.project_id,
    readReplicas: marshalling.unmarshalArrayOfObject(
      data.read_replicas,
      unmarshalReadReplica
    ),
    region: data.region,
    settings: marshalling.unmarshalArrayOfObject(data.settings, unmarshalInstanceSetting),
    status: data.status,
    tags: data.tags,
    upgradableVersion: marshalling.unmarshalArrayOfObject(
      data.upgradable_version,
      unmarshalUpgradableVersion
    ),
    volume: data.volume ? unmarshalVolume(data.volume) : void 0
  };
};
const unmarshalPrivilege = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Privilege' failed as data isn't a dictionary.`
    );
  }
  return {
    databaseName: data.database_name,
    permission: data.permission,
    userName: data.user_name
  };
};
const unmarshalSnapshotVolumeType = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SnapshotVolumeType' failed as data isn't a dictionary.`
    );
  }
  return {
    class: data.class,
    type: data.type
  };
};
const unmarshalSnapshot = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Snapshot' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    expiresAt: marshalling.unmarshalDate(data.expires_at),
    id: data.id,
    instanceId: data.instance_id,
    instanceName: data.instance_name,
    name: data.name,
    nodeType: data.node_type,
    region: data.region,
    size: data.size,
    status: data.status,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    volumeType: data.volume_type ? unmarshalSnapshotVolumeType(data.volume_type) : void 0
  };
};
const unmarshalUser = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'User' failed as data isn't a dictionary.`
    );
  }
  return {
    isAdmin: data.is_admin,
    name: data.name
  };
};
const unmarshalACLRule = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ACLRule' failed as data isn't a dictionary.`
    );
  }
  return {
    action: data.action,
    description: data.description,
    direction: data.direction,
    ip: data.ip,
    port: data.port,
    protocol: data.protocol
  };
};
const unmarshalAddInstanceACLRulesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'AddInstanceACLRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule)
  };
};
const unmarshalAddInstanceSettingsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'AddInstanceSettingsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    settings: marshalling.unmarshalArrayOfObject(data.settings, unmarshalInstanceSetting)
  };
};
const unmarshalDeleteInstanceACLRulesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DeleteInstanceACLRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule)
  };
};
const unmarshalDeleteInstanceSettingsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DeleteInstanceSettingsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    settings: marshalling.unmarshalArrayOfObject(data.settings, unmarshalInstanceSetting)
  };
};
const unmarshalInstanceMetrics = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'InstanceMetrics' failed as data isn't a dictionary.`
    );
  }
  return {
    timeseries: marshalling.unmarshalArrayOfObject(data.timeseries, customMarshalling.unmarshalTimeSeries)
  };
};
const unmarshalEngineSetting = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EngineSetting' failed as data isn't a dictionary.`
    );
  }
  return {
    defaultValue: data.default_value,
    description: data.description,
    floatMax: data.float_max,
    floatMin: data.float_min,
    hotConfigurable: data.hot_configurable,
    intMax: data.int_max,
    intMin: data.int_min,
    name: data.name,
    propertyType: data.property_type,
    stringConstraint: data.string_constraint,
    unit: data.unit
  };
};
const unmarshalEngineVersion = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EngineVersion' failed as data isn't a dictionary.`
    );
  }
  return {
    availableInitSettings: marshalling.unmarshalArrayOfObject(
      data.available_init_settings,
      unmarshalEngineSetting
    ),
    availableSettings: marshalling.unmarshalArrayOfObject(
      data.available_settings,
      unmarshalEngineSetting
    ),
    beta: data.beta,
    disabled: data.disabled,
    endOfLife: marshalling.unmarshalDate(data.end_of_life),
    name: data.name,
    version: data.version
  };
};
const unmarshalDatabaseEngine = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DatabaseEngine' failed as data isn't a dictionary.`
    );
  }
  return {
    logoUrl: data.logo_url,
    name: data.name,
    region: data.region,
    versions: marshalling.unmarshalArrayOfObject(data.versions, unmarshalEngineVersion)
  };
};
const unmarshalListDatabaseEnginesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDatabaseEnginesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    engines: marshalling.unmarshalArrayOfObject(data.engines, unmarshalDatabaseEngine),
    totalCount: data.total_count
  };
};
const unmarshalListDatabasesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDatabasesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    databases: marshalling.unmarshalArrayOfObject(data.databases, unmarshalDatabase),
    totalCount: data.total_count
  };
};
const unmarshalListInstanceACLRulesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListInstanceACLRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule),
    totalCount: data.total_count
  };
};
const unmarshalListInstanceLogsDetailsResponseInstanceLogDetail = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListInstanceLogsDetailsResponseInstanceLogDetail' failed as data isn't a dictionary.`
    );
  }
  return {
    logName: data.log_name,
    size: data.size
  };
};
const unmarshalListInstanceLogsDetailsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListInstanceLogsDetailsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    details: marshalling.unmarshalArrayOfObject(
      data.details,
      unmarshalListInstanceLogsDetailsResponseInstanceLogDetail
    )
  };
};
const unmarshalListInstanceLogsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListInstanceLogsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    instanceLogs: marshalling.unmarshalArrayOfObject(
      data.instance_logs,
      unmarshalInstanceLog
    )
  };
};
const unmarshalListInstancesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListInstancesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    instances: marshalling.unmarshalArrayOfObject(data.instances, unmarshalInstance),
    totalCount: data.total_count
  };
};
const unmarshalNodeTypeVolumeConstraintSizes = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'NodeTypeVolumeConstraintSizes' failed as data isn't a dictionary.`
    );
  }
  return {
    maxSize: data.max_size,
    minSize: data.min_size
  };
};
const unmarshalNodeTypeVolumeType = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'NodeTypeVolumeType' failed as data isn't a dictionary.`
    );
  }
  return {
    chunkSize: data.chunk_size,
    class: data.class,
    description: data.description,
    maxSize: data.max_size,
    minSize: data.min_size,
    type: data.type
  };
};
const unmarshalNodeType = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'NodeType' failed as data isn't a dictionary.`
    );
  }
  return {
    availableVolumeTypes: marshalling.unmarshalArrayOfObject(
      data.available_volume_types,
      unmarshalNodeTypeVolumeType
    ),
    beta: data.beta,
    description: data.description,
    disabled: data.disabled,
    generation: data.generation,
    instanceRange: data.instance_range,
    isBssdCompatible: data.is_bssd_compatible,
    isHaRequired: data.is_ha_required,
    memory: data.memory,
    name: data.name,
    region: data.region,
    stockStatus: data.stock_status,
    vcpus: data.vcpus,
    volumeConstraint: data.volume_constraint ? unmarshalNodeTypeVolumeConstraintSizes(data.volume_constraint) : void 0
  };
};
const unmarshalListNodeTypesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListNodeTypesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    nodeTypes: marshalling.unmarshalArrayOfObject(data.node_types, unmarshalNodeType),
    totalCount: data.total_count
  };
};
const unmarshalListPrivilegesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListPrivilegesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    privileges: marshalling.unmarshalArrayOfObject(data.privileges, unmarshalPrivilege),
    totalCount: data.total_count
  };
};
const unmarshalListSnapshotsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSnapshotsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    snapshots: marshalling.unmarshalArrayOfObject(data.snapshots, unmarshalSnapshot),
    totalCount: data.total_count
  };
};
const unmarshalListUsersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListUsersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    users: marshalling.unmarshalArrayOfObject(data.users, unmarshalUser)
  };
};
const unmarshalSetInstanceACLRulesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetInstanceACLRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule)
  };
};
const unmarshalSetInstanceSettingsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetInstanceSettingsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    settings: marshalling.unmarshalArrayOfObject(data.settings, unmarshalInstanceSetting)
  };
};
const marshalACLRuleRequest = (request, defaults) => ({
  description: request.description,
  ip: request.ip
});
const marshalAddInstanceACLRulesRequest = (request, defaults) => ({
  rules: request.rules.map((elt) => marshalACLRuleRequest(elt))
});
const marshalInstanceSetting = (request, defaults) => ({
  name: request.name,
  value: request.value
});
const marshalAddInstanceSettingsRequest = (request, defaults) => ({
  settings: request.settings.map((elt) => marshalInstanceSetting(elt))
});
const marshalCloneInstanceRequest = (request, defaults) => ({
  name: request.name,
  node_type: request.nodeType
});
const marshalCreateDatabaseRequest = (request, defaults) => ({
  name: request.name
});
const marshalEndpointSpecPrivateNetworkIpamConfig = (request, defaults) => ({});
const marshalEndpointSpecLoadBalancer = (request, defaults) => ({});
const marshalEndpointSpecPrivateNetwork = (request, defaults) => ({
  private_network_id: request.privateNetworkId,
  ...marshalling.resolveOneOf([
    { param: "service_ip", value: request.serviceIp },
    {
      param: "ipam_config",
      value: request.ipamConfig !== void 0 ? marshalEndpointSpecPrivateNetworkIpamConfig(
        request.ipamConfig
      ) : void 0
    }
  ])
});
const marshalEndpointSpec = (request, defaults) => ({
  ...marshalling.resolveOneOf([
    {
      param: "load_balancer",
      value: request.loadBalancer !== void 0 ? marshalEndpointSpecLoadBalancer(request.loadBalancer) : void 0
    },
    {
      param: "private_network",
      value: request.privateNetwork !== void 0 ? marshalEndpointSpecPrivateNetwork(request.privateNetwork) : void 0
    }
  ])
});
const marshalCreateEndpointRequest = (request, defaults) => ({
  endpoint_spec: request.endpointSpec !== void 0 ? marshalEndpointSpec(request.endpointSpec) : void 0
});
const marshalCreateInstanceFromSnapshotRequest = (request, defaults) => ({
  instance_name: request.instanceName,
  is_ha_cluster: request.isHaCluster,
  node_type: request.nodeType
});
const marshalCreateInstanceRequest = (request, defaults) => ({
  backup_same_region: request.backupSameRegion,
  disable_backup: request.disableBackup,
  engine: request.engine,
  init_endpoints: request.initEndpoints !== void 0 ? request.initEndpoints.map((elt) => marshalEndpointSpec(elt)) : void 0,
  init_settings: request.initSettings !== void 0 ? request.initSettings.map((elt) => marshalInstanceSetting(elt)) : void 0,
  is_ha_cluster: request.isHaCluster,
  name: request.name || randomName("ins"),
  node_type: request.nodeType,
  password: request.password,
  tags: request.tags,
  user_name: request.userName,
  volume_size: request.volumeSize,
  volume_type: request.volumeType,
  ...marshalling.resolveOneOf([
    {
      default: defaults.defaultOrganizationId,
      param: "organization_id",
      value: request.organizationId
    },
    {
      default: defaults.defaultProjectId,
      param: "project_id",
      value: request.projectId
    }
  ])
});
const marshalReadReplicaEndpointSpecPrivateNetworkIpamConfig = (request, defaults) => ({});
const marshalReadReplicaEndpointSpecDirectAccess = (request, defaults) => ({});
const marshalReadReplicaEndpointSpecPrivateNetwork = (request, defaults) => ({
  private_network_id: request.privateNetworkId,
  ...marshalling.resolveOneOf([
    { param: "service_ip", value: request.serviceIp },
    {
      param: "ipam_config",
      value: request.ipamConfig !== void 0 ? marshalReadReplicaEndpointSpecPrivateNetworkIpamConfig(
        request.ipamConfig
      ) : void 0
    }
  ])
});
const marshalReadReplicaEndpointSpec = (request, defaults) => ({
  ...marshalling.resolveOneOf([
    {
      param: "direct_access",
      value: request.directAccess !== void 0 ? marshalReadReplicaEndpointSpecDirectAccess(
        request.directAccess
      ) : void 0
    },
    {
      param: "private_network",
      value: request.privateNetwork !== void 0 ? marshalReadReplicaEndpointSpecPrivateNetwork(
        request.privateNetwork
      ) : void 0
    }
  ])
});
const marshalCreateReadReplicaEndpointRequest = (request, defaults) => ({
  endpoint_spec: request.endpointSpec.map(
    (elt) => marshalReadReplicaEndpointSpec(elt)
  )
});
const marshalCreateReadReplicaRequest = (request, defaults) => ({
  endpoint_spec: request.endpointSpec !== void 0 ? request.endpointSpec.map(
    (elt) => marshalReadReplicaEndpointSpec(elt)
  ) : void 0,
  instance_id: request.instanceId,
  same_zone: request.sameZone
});
const marshalCreateSnapshotRequest = (request, defaults) => ({
  expires_at: request.expiresAt,
  name: request.name || randomName("snp")
});
const marshalCreateUserRequest = (request, defaults) => ({
  is_admin: request.isAdmin,
  name: request.name,
  password: request.password
});
const marshalDeleteInstanceACLRulesRequest = (request, defaults) => ({
  acl_rule_ips: request.aclRuleIps
});
const marshalDeleteInstanceSettingsRequest = (request, defaults) => ({
  setting_names: request.settingNames
});
const marshalMigrateEndpointRequest = (request, defaults) => ({
  instance_id: request.instanceId
});
const marshalPurgeInstanceLogsRequest = (request, defaults) => ({
  log_name: request.logName
});
const marshalSetInstanceACLRulesRequest = (request, defaults) => ({
  rules: request.rules.map((elt) => marshalACLRuleRequest(elt))
});
const marshalSetInstanceSettingsRequest = (request, defaults) => ({
  settings: request.settings.map((elt) => marshalInstanceSetting(elt))
});
const marshalSetPrivilegeRequest = (request, defaults) => ({
  database_name: request.databaseName,
  permission: request.permission,
  user_name: request.userName
});
const marshalLogsPolicy = (request, defaults) => ({
  max_age_retention: request.maxAgeRetention,
  total_disk_retention: request.totalDiskRetention
});
const marshalUpdateInstanceRequest = (request, defaults) => ({
  backup_same_region: request.backupSameRegion,
  backup_schedule_frequency: request.backupScheduleFrequency,
  backup_schedule_retention: request.backupScheduleRetention,
  backup_schedule_start_hour: request.backupScheduleStartHour,
  is_backup_schedule_disabled: request.isBackupScheduleDisabled,
  logs_policy: request.logsPolicy !== void 0 ? marshalLogsPolicy(request.logsPolicy) : void 0,
  name: request.name,
  tags: request.tags
});
const marshalUpdateSnapshotRequest = (request, defaults) => ({
  expires_at: request.expiresAt,
  name: request.name
});
const marshalUpdateUserRequest = (request, defaults) => ({
  is_admin: request.isAdmin,
  password: request.password
});
const marshalUpgradeInstanceRequestMajorUpgradeWorkflow = (request, defaults) => ({
  upgradable_version_id: request.upgradableVersionId,
  with_endpoints: request.withEndpoints
});
const marshalUpgradeInstanceRequest = (request, defaults) => ({
  ...marshalling.resolveOneOf([
    { param: "node_type", value: request.nodeType },
    { param: "enable_ha", value: request.enableHa },
    { param: "volume_size", value: request.volumeSize },
    { param: "volume_type", value: request.volumeType },
    { param: "upgradable_version_id", value: request.upgradableVersionId },
    {
      param: "major_upgrade_workflow",
      value: request.majorUpgradeWorkflow !== void 0 ? marshalUpgradeInstanceRequestMajorUpgradeWorkflow(
        request.majorUpgradeWorkflow
      ) : void 0
    }
  ])
});
exports.marshalAddInstanceACLRulesRequest = marshalAddInstanceACLRulesRequest;
exports.marshalAddInstanceSettingsRequest = marshalAddInstanceSettingsRequest;
exports.marshalCloneInstanceRequest = marshalCloneInstanceRequest;
exports.marshalCreateDatabaseRequest = marshalCreateDatabaseRequest;
exports.marshalCreateEndpointRequest = marshalCreateEndpointRequest;
exports.marshalCreateInstanceFromSnapshotRequest = marshalCreateInstanceFromSnapshotRequest;
exports.marshalCreateInstanceRequest = marshalCreateInstanceRequest;
exports.marshalCreateReadReplicaEndpointRequest = marshalCreateReadReplicaEndpointRequest;
exports.marshalCreateReadReplicaRequest = marshalCreateReadReplicaRequest;
exports.marshalCreateSnapshotRequest = marshalCreateSnapshotRequest;
exports.marshalCreateUserRequest = marshalCreateUserRequest;
exports.marshalDeleteInstanceACLRulesRequest = marshalDeleteInstanceACLRulesRequest;
exports.marshalDeleteInstanceSettingsRequest = marshalDeleteInstanceSettingsRequest;
exports.marshalMigrateEndpointRequest = marshalMigrateEndpointRequest;
exports.marshalPurgeInstanceLogsRequest = marshalPurgeInstanceLogsRequest;
exports.marshalSetInstanceACLRulesRequest = marshalSetInstanceACLRulesRequest;
exports.marshalSetInstanceSettingsRequest = marshalSetInstanceSettingsRequest;
exports.marshalSetPrivilegeRequest = marshalSetPrivilegeRequest;
exports.marshalUpdateInstanceRequest = marshalUpdateInstanceRequest;
exports.marshalUpdateSnapshotRequest = marshalUpdateSnapshotRequest;
exports.marshalUpdateUserRequest = marshalUpdateUserRequest;
exports.marshalUpgradeInstanceRequest = marshalUpgradeInstanceRequest;
exports.unmarshalAddInstanceACLRulesResponse = unmarshalAddInstanceACLRulesResponse;
exports.unmarshalAddInstanceSettingsResponse = unmarshalAddInstanceSettingsResponse;
exports.unmarshalDatabase = unmarshalDatabase;
exports.unmarshalDeleteInstanceACLRulesResponse = unmarshalDeleteInstanceACLRulesResponse;
exports.unmarshalDeleteInstanceSettingsResponse = unmarshalDeleteInstanceSettingsResponse;
exports.unmarshalEndpoint = unmarshalEndpoint;
exports.unmarshalInstance = unmarshalInstance;
exports.unmarshalInstanceLog = unmarshalInstanceLog;
exports.unmarshalInstanceMetrics = unmarshalInstanceMetrics;
exports.unmarshalListDatabaseEnginesResponse = unmarshalListDatabaseEnginesResponse;
exports.unmarshalListDatabasesResponse = unmarshalListDatabasesResponse;
exports.unmarshalListInstanceACLRulesResponse = unmarshalListInstanceACLRulesResponse;
exports.unmarshalListInstanceLogsDetailsResponse = unmarshalListInstanceLogsDetailsResponse;
exports.unmarshalListInstanceLogsResponse = unmarshalListInstanceLogsResponse;
exports.unmarshalListInstancesResponse = unmarshalListInstancesResponse;
exports.unmarshalListNodeTypesResponse = unmarshalListNodeTypesResponse;
exports.unmarshalListPrivilegesResponse = unmarshalListPrivilegesResponse;
exports.unmarshalListSnapshotsResponse = unmarshalListSnapshotsResponse;
exports.unmarshalListUsersResponse = unmarshalListUsersResponse;
exports.unmarshalMaintenance = unmarshalMaintenance;
exports.unmarshalPrivilege = unmarshalPrivilege;
exports.unmarshalReadReplica = unmarshalReadReplica;
exports.unmarshalSetInstanceACLRulesResponse = unmarshalSetInstanceACLRulesResponse;
exports.unmarshalSetInstanceSettingsResponse = unmarshalSetInstanceSettingsResponse;
exports.unmarshalSnapshot = unmarshalSnapshot;
exports.unmarshalUser = unmarshalUser;


/***/ }),

/***/ 3795:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const UpdateInstanceRequest = {
  backupScheduleStartHour: {
    lessThanOrEqual: 23
  }
};
exports.UpdateInstanceRequest = UpdateInstanceRequest;


/***/ }),

/***/ 2584:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(6715);
exports.v2beta1 = index_gen;


/***/ }),

/***/ 5160:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const content_gen = __nccwpck_require__(6762);
const marshalling_gen = __nccwpck_require__(2722);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  pageOfListDNSZones = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/domain/v2beta1/dns-zones`,
      urlParams: marshalling.urlParams(
        ["created_after", request.createdAfter],
        ["created_before", request.createdBefore],
        ["dns_zone", request.dnsZone],
        ["dns_zones", request.dnsZones],
        ["domain", request.domain],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["updated_after", request.updatedAfter],
        ["updated_before", request.updatedBefore]
      )
    },
    marshalling_gen.unmarshalListDNSZonesResponse
  );
  /**
   * List DNS zones. Retrieve the list of DNS zones you can manage and filter
   * DNS zones associated with specific domain names.
   *
   * @param request - The request {@link ListDNSZonesRequest}
   * @returns A Promise of ListDNSZonesResponse
   */
  listDNSZones = (request) => resourcePaginator.enrichForPagination("dnsZones", this.pageOfListDNSZones, request);
  /**
   * Create a DNS zone. Create a new DNS zone specified by the domain name, the
   * subdomain and the Project ID.
   *
   * @param request - The request {@link CreateDNSZoneRequest}
   * @returns A Promise of DNSZone
   */
  createDNSZone = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateDNSZoneRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/domain/v2beta1/dns-zones`
    },
    marshalling_gen.unmarshalDNSZone
  );
  /**
   * Update a DNS zone. Update the name and/or the Organizations for a DNS zone.
   *
   * @param request - The request {@link UpdateDNSZoneRequest}
   * @returns A Promise of DNSZone
   */
  updateDNSZone = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateDNSZoneRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam("dnsZone", request.dnsZone)}`
    },
    marshalling_gen.unmarshalDNSZone
  );
  /**
   * Clone a DNS zone. Clone an existing DNS zone with all its records into a
   * new DNS zone.
   *
   * @param request - The request {@link CloneDNSZoneRequest}
   * @returns A Promise of DNSZone
   */
  cloneDNSZone = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCloneDNSZoneRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam("dnsZone", request.dnsZone)}/clone`
    },
    marshalling_gen.unmarshalDNSZone
  );
  /**
   * Delete a DNS zone. Delete a DNS zone and all its records.
   *
   * @param request - The request {@link DeleteDNSZoneRequest}
   * @returns A Promise of DeleteDNSZoneResponse
   */
  deleteDNSZone = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam("dnsZone", request.dnsZone)}`,
      urlParams: marshalling.urlParams([
        "project_id",
        request.projectId ?? this.client.settings.defaultProjectId
      ])
    },
    marshalling_gen.unmarshalDeleteDNSZoneResponse
  );
  pageOfListDNSZoneRecords = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam("dnsZone", request.dnsZone)}/records`,
      urlParams: marshalling.urlParams(
        ["id", request.id],
        ["name", request.name],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["type", request.type]
      )
    },
    marshalling_gen.unmarshalListDNSZoneRecordsResponse
  );
  /**
   * List records within a DNS zone. Retrieve a list of DNS records within a DNS
   * zone that has default name servers. You can filter records by type and
   * name.
   *
   * @param request - The request {@link ListDNSZoneRecordsRequest}
   * @returns A Promise of ListDNSZoneRecordsResponse
   */
  listDNSZoneRecords = (request) => resourcePaginator.enrichForPagination("records", this.pageOfListDNSZoneRecords, request);
  /**
   * Update records within a DNS zone. Update records within a DNS zone that has
   * default name servers and perform several actions on your records.
   *
   * Actions include:
   *
   * - Add: allows you to add a new record or add a new IP to an existing A
   *   record, for example
   * - Set: allows you to edit a record or edit an IP from an existing A record,
   *   for example
   * - Delete: allows you to delete a record or delete an IP from an existing A
   *   record, for example
   * - Clear: allows you to delete all records from a DNS zone
   *
   * All edits will be versioned.
   *
   * @param request - The request {@link UpdateDNSZoneRecordsRequest}
   * @returns A Promise of UpdateDNSZoneRecordsResponse
   */
  updateDNSZoneRecords = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateDNSZoneRecordsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam("dnsZone", request.dnsZone)}/records`
    },
    marshalling_gen.unmarshalUpdateDNSZoneRecordsResponse
  );
  /**
   * List name servers within a DNS zone. Retrieve a list of name servers within
   * a DNS zone and their optional glue records.
   *
   * @param request - The request {@link ListDNSZoneNameserversRequest}
   * @returns A Promise of ListDNSZoneNameserversResponse
   */
  listDNSZoneNameservers = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam("dnsZone", request.dnsZone)}/nameservers`,
      urlParams: marshalling.urlParams(["project_id", request.projectId])
    },
    marshalling_gen.unmarshalListDNSZoneNameserversResponse
  );
  /**
   * Update name servers within a DNS zone. Update name servers within a DNS
   * zone and set optional glue records.
   *
   * @param request - The request {@link UpdateDNSZoneNameserversRequest}
   * @returns A Promise of UpdateDNSZoneNameserversResponse
   */
  updateDNSZoneNameservers = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateDNSZoneNameserversRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam("dnsZone", request.dnsZone)}/nameservers`
    },
    marshalling_gen.unmarshalUpdateDNSZoneNameserversResponse
  );
  /**
   * Clear records within a DNS zone. Delete all records within a DNS zone that
   * has default name servers.<br/> All edits will be versioned.
   *
   * @param request - The request {@link ClearDNSZoneRecordsRequest}
   * @returns A Promise of ClearDNSZoneRecordsResponse
   */
  clearDNSZoneRecords = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam("dnsZone", request.dnsZone)}/records`
    },
    marshalling_gen.unmarshalClearDNSZoneRecordsResponse
  );
  /**
   * Export a raw DNS zone. Export a DNS zone with default name servers, in a
   * specific format.
   *
   * @param request - The request {@link ExportRawDNSZoneRequest}
   * @returns A Promise of Blob
   */
  exportRawDNSZone = (request) => this.client.fetch({
    method: "GET",
    path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam("dnsZone", request.dnsZone)}/raw`,
    urlParams: marshalling.urlParams(["dl", 1], ["format", request.format]),
    responseType: "blob"
  });
  /**
   * Import a raw DNS zone. Import and replace the format of records from a
   * given provider, with default name servers.
   *
   * @param request - The request {@link ImportRawDNSZoneRequest}
   * @returns A Promise of ImportRawDNSZoneResponse
   */
  importRawDNSZone = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalImportRawDNSZoneRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam("dnsZone", request.dnsZone)}/raw`
    },
    marshalling_gen.unmarshalImportRawDNSZoneResponse
  );
  /**
   * Import a DNS zone from another provider. Import and replace the format of
   * records from a given provider, with default name servers.
   *
   * @param request - The request {@link ImportProviderDNSZoneRequest}
   * @returns A Promise of ImportProviderDNSZoneResponse
   */
  importProviderDNSZone = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalImportProviderDNSZoneRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam("dnsZone", request.dnsZone)}/import-provider`
    },
    marshalling_gen.unmarshalImportProviderDNSZoneResponse
  );
  /**
   * Refresh a DNS zone. Refresh an SOA DNS zone to reload the records in the
   * DNS zone and update the SOA serial. You can recreate the given DNS zone and
   * its sub DNS zone if needed.
   *
   * @param request - The request {@link RefreshDNSZoneRequest}
   * @returns A Promise of RefreshDNSZoneResponse
   */
  refreshDNSZone = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRefreshDNSZoneRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam("dnsZone", request.dnsZone)}/refresh`
    },
    marshalling_gen.unmarshalRefreshDNSZoneResponse
  );
  pageOfListDNSZoneVersions = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam("dnsZone", request.dnsZone)}/versions`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListDNSZoneVersionsResponse
  );
  /**
   * List versions of a DNS zone. Retrieve a list of a DNS zone's versions.<br/>
   * The maximum version count is 100. If the count reaches this limit, the
   * oldest version will be deleted after each new modification.
   *
   * @param request - The request {@link ListDNSZoneVersionsRequest}
   * @returns A Promise of ListDNSZoneVersionsResponse
   */
  listDNSZoneVersions = (request) => resourcePaginator.enrichForPagination("versions", this.pageOfListDNSZoneVersions, request);
  pageOfListDNSZoneVersionRecords = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/domain/v2beta1/dns-zones/version/${marshalling.validatePathParam("dnsZoneVersionId", request.dnsZoneVersionId)}`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListDNSZoneVersionRecordsResponse
  );
  /**
   * List records from a given version of a specific DNS zone. Retrieve a list
   * of records from a specific DNS zone version.
   *
   * @param request - The request {@link ListDNSZoneVersionRecordsRequest}
   * @returns A Promise of ListDNSZoneVersionRecordsResponse
   */
  listDNSZoneVersionRecords = (request) => resourcePaginator.enrichForPagination(
    "records",
    this.pageOfListDNSZoneVersionRecords,
    request
  );
  /**
   * Access differences from a specific DNS zone version. Access a previous DNS
   * zone version to see the differences from another specific version.
   *
   * @param request - The request {@link GetDNSZoneVersionDiffRequest}
   * @returns A Promise of GetDNSZoneVersionDiffResponse
   */
  getDNSZoneVersionDiff = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/domain/v2beta1/dns-zones/version/${marshalling.validatePathParam("dnsZoneVersionId", request.dnsZoneVersionId)}/diff`
    },
    marshalling_gen.unmarshalGetDNSZoneVersionDiffResponse
  );
  /**
   * Restore a DNS zone version. Restore and activate a version of a specific
   * DNS zone.
   *
   * @param request - The request {@link RestoreDNSZoneVersionRequest}
   * @returns A Promise of RestoreDNSZoneVersionResponse
   */
  restoreDNSZoneVersion = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/domain/v2beta1/dns-zones/version/${marshalling.validatePathParam("dnsZoneVersionId", request.dnsZoneVersionId)}/restore`
    },
    marshalling_gen.unmarshalRestoreDNSZoneVersionResponse
  );
  /**
   * Get a DNS zone's TLS certificate. Get the DNS zone's TLS certificate. If
   * you do not have a certificate, the ouptut returns `no certificate found`.
   *
   * @param request - The request {@link GetSSLCertificateRequest}
   * @returns A Promise of SSLCertificate
   */
  getSSLCertificate = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/domain/v2beta1/ssl-certificates/${marshalling.validatePathParam("dnsZone", request.dnsZone)}`
    },
    marshalling_gen.unmarshalSSLCertificate
  );
  /**
   * Waits for {@link SSLCertificate} to be in a final state.
   *
   * @param request - The request {@link GetSSLCertificateRequest}
   * @param options - The waiting options
   * @returns A Promise of SSLCertificate
   */
  waitForSSLCertificate = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(
      !content_gen.SSL_CERTIFICATE_TRANSIENT_STATUSES.includes(res.status)
    )),
    this.getSSLCertificate,
    request,
    options
  );
  /**
   * Create or get the DNS zone's TLS certificate. Create a new TLS certificate
   * or retrieve information about an existing TLS certificate.
   *
   * @param request - The request {@link CreateSSLCertificateRequest}
   * @returns A Promise of SSLCertificate
   */
  createSSLCertificate = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateSSLCertificateRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/domain/v2beta1/ssl-certificates`
    },
    marshalling_gen.unmarshalSSLCertificate
  );
  pageOfListSSLCertificates = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/domain/v2beta1/ssl-certificates`,
      urlParams: marshalling.urlParams(
        ["dns_zone", request.dnsZone],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListSSLCertificatesResponse
  );
  /**
   * List a user's TLS certificates. List all the TLS certificates a user has
   * created, specified by the user's Project ID and the DNS zone.
   *
   * @param request - The request {@link ListSSLCertificatesRequest}
   * @returns A Promise of ListSSLCertificatesResponse
   */
  listSSLCertificates = (request) => resourcePaginator.enrichForPagination("certificates", this.pageOfListSSLCertificates, request);
  /**
   * Delete a TLS certificate. Delete an existing TLS certificate specified by
   * its DNS zone. Deleting a TLS certificate is permanent and cannot be
   * undone.
   *
   * @param request - The request {@link DeleteSSLCertificateRequest}
   * @returns A Promise of DeleteSSLCertificateResponse
   */
  deleteSSLCertificate = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/domain/v2beta1/ssl-certificates/${marshalling.validatePathParam("dnsZone", request.dnsZone)}`
    },
    marshalling_gen.unmarshalDeleteSSLCertificateResponse
  );
  /**
   * Get the DNS zone's TSIG key. Retrieve information about the TSIG key of a
   * given DNS zone to allow AXFR requests.
   *
   * @param request - The request {@link GetDNSZoneTsigKeyRequest}
   * @returns A Promise of GetDNSZoneTsigKeyResponse
   */
  getDNSZoneTsigKey = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam("dnsZone", request.dnsZone)}/tsig-key`
    },
    marshalling_gen.unmarshalGetDNSZoneTsigKeyResponse
  );
  /**
   * Delete the DNS zone's TSIG key. Delete an existing TSIG key specified by
   * its DNS zone. Deleting a TSIG key is permanent and cannot be undone.
   *
   * @param request - The request {@link DeleteDNSZoneTsigKeyRequest}
   */
  deleteDNSZoneTsigKey = (request) => this.client.fetch({
    method: "DELETE",
    path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam("dnsZone", request.dnsZone)}/tsig-key`
  });
}
class RegistrarAPI extends api.API {
  pageOfListTasks = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/domain/v2beta1/tasks`,
      urlParams: marshalling.urlParams(
        ["domain", request.domain],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["statuses", request.statuses],
        ["types", request.types]
      )
    },
    marshalling_gen.unmarshalListTasksResponse
  );
  /**
   * List tasks. List all operations performed on the account. You can filter
   * the list of tasks by domain name.
   *
   * @param request - The request {@link RegistrarApiListTasksRequest}
   * @returns A Promise of ListTasksResponse
   */
  listTasks = (request = {}) => resourcePaginator.enrichForPagination("tasks", this.pageOfListTasks, request);
  /**
   * Purchase domains. Request the registration of domain names. You can provide
   * a domain's already existing contact or a new contact.
   *
   * @param request - The request {@link RegistrarApiBuyDomainsRequest}
   * @returns A Promise of OrderResponse
   */
  buyDomains = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRegistrarApiBuyDomainsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/domain/v2beta1/buy-domains`
    },
    marshalling_gen.unmarshalOrderResponse
  );
  /**
   * Renew domains. Request the renewal of one or more domain names.
   *
   * @param request - The request {@link RegistrarApiRenewDomainsRequest}
   * @returns A Promise of OrderResponse
   */
  renewDomains = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRegistrarApiRenewDomainsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/domain/v2beta1/renew-domains`
    },
    marshalling_gen.unmarshalOrderResponse
  );
  /**
   * Transfer a domain. Request the transfer of a domain from another registrar
   * to Scaleway Domains and DNS.
   *
   * @param request - The request {@link RegistrarApiTransferInDomainRequest}
   * @returns A Promise of OrderResponse
   */
  transferInDomain = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRegistrarApiTransferInDomainRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/domain/v2beta1/domains/transfer-domains`
    },
    marshalling_gen.unmarshalOrderResponse
  );
  /**
   * Trade a domain's contact. Request to change a domain's contact owner.<br/>
   * If you specify the `organization_id` of the domain's new owner, the contact
   * will change from the current owner's Scaleway account to the new owner's
   * Scaleway account.<br/> If the new owner's current contact information is
   * not available, the first ever contact they have created for previous
   * domains is taken into account to operate the change.<br/> If the new owner
   * has never created a contact to register domains before, an error message
   * displays.
   *
   * @param request - The request {@link RegistrarApiTradeDomainRequest}
   * @returns A Promise of OrderResponse
   */
  tradeDomain = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRegistrarApiTradeDomainRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/domain/v2beta1/domains/${marshalling.validatePathParam("domain", request.domain)}/trade`
    },
    marshalling_gen.unmarshalOrderResponse
  );
  /**
   * Register an external domain. Request the registration of an external domain
   * name.
   *
   * @param request - The request
   *   {@link RegistrarApiRegisterExternalDomainRequest}
   * @returns A Promise of RegisterExternalDomainResponse
   */
  registerExternalDomain = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRegistrarApiRegisterExternalDomainRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/domain/v2beta1/external-domains`
    },
    marshalling_gen.unmarshalRegisterExternalDomainResponse
  );
  /**
   * Delete an external domain. Delete an external domain name.
   *
   * @param request - The request {@link RegistrarApiDeleteExternalDomainRequest}
   * @returns A Promise of DeleteExternalDomainResponse
   */
  deleteExternalDomain = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/domain/v2beta1/external-domains/${marshalling.validatePathParam("domain", request.domain)}`
    },
    marshalling_gen.unmarshalDeleteExternalDomainResponse
  );
  /**
   * Check if contacts are compatible with a domain or a TLD. Check whether
   * contacts are compatible with a domain or a TLD. If contacts are not
   * compatible with either the domain or the TLD, the information that needs to
   * be corrected is returned.
   *
   * @param request - The request
   *   {@link RegistrarApiCheckContactsCompatibilityRequest}
   * @returns A Promise of CheckContactsCompatibilityResponse
   */
  checkContactsCompatibility = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRegistrarApiCheckContactsCompatibilityRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/domain/v2beta1/check-contacts-compatibility`
    },
    marshalling_gen.unmarshalCheckContactsCompatibilityResponse
  );
  pageOfListContacts = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/domain/v2beta1/contacts`,
      urlParams: marshalling.urlParams(
        ["domain", request.domain],
        ["email_status", request.emailStatus],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["role", request.role]
      )
    },
    marshalling_gen.unmarshalListContactsResponse
  );
  /**
   * List contacts. Retrieve the list of contacts and their associated domains
   * and roles. You can filter the list by domain name.
   *
   * @param request - The request {@link RegistrarApiListContactsRequest}
   * @returns A Promise of ListContactsResponse
   */
  listContacts = (request = {}) => resourcePaginator.enrichForPagination("contacts", this.pageOfListContacts, request);
  /**
   * Get a contact. Retrieve a contact's details from the registrar using the
   * given contact's ID.
   *
   * @param request - The request {@link RegistrarApiGetContactRequest}
   * @returns A Promise of Contact
   */
  getContact = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/domain/v2beta1/contacts/${marshalling.validatePathParam("contactId", request.contactId)}`
    },
    marshalling_gen.unmarshalContact
  );
  /**
   * Update contact. Edit the contact's information.
   *
   * @param request - The request {@link RegistrarApiUpdateContactRequest}
   * @returns A Promise of Contact
   */
  updateContact = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRegistrarApiUpdateContactRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/domain/v2beta1/contacts/${marshalling.validatePathParam("contactId", request.contactId)}`
    },
    marshalling_gen.unmarshalContact
  );
  pageOfListDomains = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/domain/v2beta1/domains`,
      urlParams: marshalling.urlParams(
        ["domain", request.domain],
        ["is_external", request.isExternal],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["registrar", request.registrar],
        ["status", request.status]
      )
    },
    marshalling_gen.unmarshalListDomainsResponse
  );
  /**
   * List domains. Retrieve the list of domains you own.
   *
   * @param request - The request {@link RegistrarApiListDomainsRequest}
   * @returns A Promise of ListDomainsResponse
   */
  listDomains = (request = {}) => resourcePaginator.enrichForPagination("domains", this.pageOfListDomains, request);
  pageOfListRenewableDomains = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/domain/v2beta1/renewable-domains`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListRenewableDomainsResponse
  );
  /**
   * List domains that can be renewed. Retrieve the list of domains you own that
   * can be renewed. You can also see the maximum renewal duration in years for
   * your domains that are renewable.
   *
   * @param request - The request {@link RegistrarApiListRenewableDomainsRequest}
   * @returns A Promise of ListRenewableDomainsResponse
   */
  listRenewableDomains = (request = {}) => resourcePaginator.enrichForPagination("domains", this.pageOfListRenewableDomains, request);
  /**
   * Get domain. Retrieve a specific domain and display the domain's
   * information.
   *
   * @param request - The request {@link RegistrarApiGetDomainRequest}
   * @returns A Promise of Domain
   */
  getDomain = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/domain/v2beta1/domains/${marshalling.validatePathParam("domain", request.domain)}`
    },
    marshalling_gen.unmarshalDomain
  );
  /**
   * Waits for {@link Domain} to be in a final state.
   *
   * @param request - The request {@link RegistrarApiGetDomainRequest}
   * @param options - The waiting options
   * @returns A Promise of Domain
   */
  waitForDomain = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.DOMAIN_TRANSIENT_STATUSES.includes(res.status))),
    this.getDomain,
    request,
    options
  );
  /**
   * Update a domain's contacts. Update contacts for a specific domain or create
   * a new contact.<br/> If you add the same contact for multiple roles (owner,
   * administrative, technical), only one ID will be created and used for all of
   * the roles.
   *
   * @param request - The request {@link RegistrarApiUpdateDomainRequest}
   * @returns A Promise of Domain
   */
  updateDomain = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRegistrarApiUpdateDomainRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/domain/v2beta1/domains/${marshalling.validatePathParam("domain", request.domain)}`
    },
    marshalling_gen.unmarshalDomain
  );
  /**
   * Lock the transfer of a domain. Lock the transfer of a domain. This means
   * that the domain cannot be transferred and the authorization code cannot be
   * requested to your current registrar.
   *
   * @param request - The request {@link RegistrarApiLockDomainTransferRequest}
   * @returns A Promise of Domain
   */
  lockDomainTransfer = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/domain/v2beta1/domains/${marshalling.validatePathParam("domain", request.domain)}/lock-transfer`
    },
    marshalling_gen.unmarshalDomain
  );
  /**
   * Unlock the transfer of a domain. Unlock the transfer of a domain. This
   * means that the domain can be transferred and the authorization code can be
   * requested to your current registrar.
   *
   * @param request - The request {@link RegistrarApiUnlockDomainTransferRequest}
   * @returns A Promise of Domain
   */
  unlockDomainTransfer = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/domain/v2beta1/domains/${marshalling.validatePathParam("domain", request.domain)}/unlock-transfer`
    },
    marshalling_gen.unmarshalDomain
  );
  /**
   * Enable auto renew. Enable the `auto renew` feature for a domain. This means
   * the domain will be automatically renewed before its expiry date.
   *
   * @param request - The request
   *   {@link RegistrarApiEnableDomainAutoRenewRequest}
   * @returns A Promise of Domain
   */
  enableDomainAutoRenew = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/domain/v2beta1/domains/${marshalling.validatePathParam("domain", request.domain)}/enable-auto-renew`
    },
    marshalling_gen.unmarshalDomain
  );
  /**
   * Disable auto renew. Disable the `auto renew` feature for a domain. This
   * means the domain will not be renewed before its expiry date.
   *
   * @param request - The request
   *   {@link RegistrarApiDisableDomainAutoRenewRequest}
   * @returns A Promise of Domain
   */
  disableDomainAutoRenew = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/domain/v2beta1/domains/${marshalling.validatePathParam("domain", request.domain)}/disable-auto-renew`
    },
    marshalling_gen.unmarshalDomain
  );
  /**
   * Get a domain's authorization code. Retrieve the authorization code to
   * tranfer an unlocked domain. The output returns an error if the domain is
   * locked. Some TLDs may have a different procedure to retrieve the
   * authorization code. In that case, the information displays in the message
   * field.
   *
   * @param request - The request {@link RegistrarApiGetDomainAuthCodeRequest}
   * @returns A Promise of GetDomainAuthCodeResponse
   */
  getDomainAuthCode = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/domain/v2beta1/domains/${marshalling.validatePathParam("domain", request.domain)}/auth-code`
    },
    marshalling_gen.unmarshalGetDomainAuthCodeResponse
  );
  /**
   * Update domain DNSSEC. If your domain uses another registrar and has the
   * default Scaleway NS, you have to **update the DS record at your
   * registrar**.
   *
   * @param request - The request {@link RegistrarApiEnableDomainDNSSECRequest}
   * @returns A Promise of Domain
   */
  enableDomainDNSSEC = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRegistrarApiEnableDomainDNSSECRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/domain/v2beta1/domains/${marshalling.validatePathParam("domain", request.domain)}/enable-dnssec`
    },
    marshalling_gen.unmarshalDomain
  );
  /**
   * Disable a domain's DNSSEC. Disable DNSSEC for a domain.
   *
   * @param request - The request {@link RegistrarApiDisableDomainDNSSECRequest}
   * @returns A Promise of Domain
   */
  disableDomainDNSSEC = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/domain/v2beta1/domains/${marshalling.validatePathParam("domain", request.domain)}/disable-dnssec`
    },
    marshalling_gen.unmarshalDomain
  );
  /**
   * Search available domains. Search a domain or a maximum of 10 domains that
   * are available.
   *
   * If the TLD list is empty or not set, the search returns the results from
   * the most popular TLDs.
   *
   * @param request - The request
   *   {@link RegistrarApiSearchAvailableDomainsRequest}
   * @returns A Promise of SearchAvailableDomainsResponse
   */
  searchAvailableDomains = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/domain/v2beta1/search-domains`,
      urlParams: marshalling.urlParams(
        ["domains", request.domains],
        ["strict_search", request.strictSearch],
        ["tlds", request.tlds]
      )
    },
    marshalling_gen.unmarshalSearchAvailableDomainsResponse
  );
  pageOfListTlds = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/domain/v2beta1/tlds`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["tlds", request.tlds]
      )
    },
    marshalling_gen.unmarshalListTldsResponse
  );
  /**
   * List TLD offers. Retrieve the list of TLDs and offers associated with them.
   *
   * @param request - The request {@link RegistrarApiListTldsRequest}
   * @returns A Promise of ListTldsResponse
   */
  listTlds = (request = {}) => resourcePaginator.enrichForPagination("tlds", this.pageOfListTlds, request);
  /**
   * Create a hostname for a domain. Create a hostname for a domain with glue
   * IPs.
   *
   * @param request - The request {@link RegistrarApiCreateDomainHostRequest}
   * @returns A Promise of Host
   */
  createDomainHost = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRegistrarApiCreateDomainHostRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/domain/v2beta1/domains/${marshalling.validatePathParam("domain", request.domain)}/hosts`
    },
    marshalling_gen.unmarshalHost
  );
  pageOfListDomainHosts = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/domain/v2beta1/domains/${marshalling.validatePathParam("domain", request.domain)}/hosts`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListDomainHostsResponse
  );
  /**
   * List a domain's hostnames. List a domain's hostnames using their glue IPs.
   *
   * @param request - The request {@link RegistrarApiListDomainHostsRequest}
   * @returns A Promise of ListDomainHostsResponse
   */
  listDomainHosts = (request) => resourcePaginator.enrichForPagination("hosts", this.pageOfListDomainHosts, request);
  /**
   * Update a domain's hostname. Update a domain's hostname with glue IPs.
   *
   * @param request - The request {@link RegistrarApiUpdateDomainHostRequest}
   * @returns A Promise of Host
   */
  updateDomainHost = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRegistrarApiUpdateDomainHostRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/domain/v2beta1/domains/${marshalling.validatePathParam("domain", request.domain)}/hosts/${marshalling.validatePathParam("name", request.name)}`
    },
    marshalling_gen.unmarshalHost
  );
  /**
   * Delete a domain's hostname.
   *
   * @param request - The request {@link RegistrarApiDeleteDomainHostRequest}
   * @returns A Promise of Host
   */
  deleteDomainHost = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/domain/v2beta1/domains/${marshalling.validatePathParam("domain", request.domain)}/hosts/${marshalling.validatePathParam("name", request.name)}`
    },
    marshalling_gen.unmarshalHost
  );
}
exports.API = API;
exports.RegistrarAPI = RegistrarAPI;


/***/ }),

/***/ 6762:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const DNS_ZONE_TRANSIENT_STATUSES = ["pending"];
const DOMAIN_FEATURE_TRANSIENT_STATUSES = [
  "enabling",
  "disabling"
];
const DOMAIN_REGISTRATION_STATUS_TRANSFER_TRANSIENT_STATUSES = ["pending", "processing"];
const DOMAIN_TRANSIENT_STATUSES = [
  "creating",
  "renewing",
  "xfering",
  "expiring",
  "updating",
  "checking",
  "deleting"
];
const HOST_TRANSIENT_STATUSES = ["updating", "deleting"];
const SSL_CERTIFICATE_TRANSIENT_STATUSES = [
  "pending"
];
const TASK_TRANSIENT_STATUSES = ["pending"];
exports.DNS_ZONE_TRANSIENT_STATUSES = DNS_ZONE_TRANSIENT_STATUSES;
exports.DOMAIN_FEATURE_TRANSIENT_STATUSES = DOMAIN_FEATURE_TRANSIENT_STATUSES;
exports.DOMAIN_REGISTRATION_STATUS_TRANSFER_TRANSIENT_STATUSES = DOMAIN_REGISTRATION_STATUS_TRANSFER_TRANSIENT_STATUSES;
exports.DOMAIN_TRANSIENT_STATUSES = DOMAIN_TRANSIENT_STATUSES;
exports.HOST_TRANSIENT_STATUSES = HOST_TRANSIENT_STATUSES;
exports.SSL_CERTIFICATE_TRANSIENT_STATUSES = SSL_CERTIFICATE_TRANSIENT_STATUSES;
exports.TASK_TRANSIENT_STATUSES = TASK_TRANSIENT_STATUSES;


/***/ }),

/***/ 6715:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(5160);
const content_gen = __nccwpck_require__(6762);
exports.API = api_gen.API;
exports.RegistrarAPI = api_gen.RegistrarAPI;
exports.DNS_ZONE_TRANSIENT_STATUSES = content_gen.DNS_ZONE_TRANSIENT_STATUSES;
exports.DOMAIN_FEATURE_TRANSIENT_STATUSES = content_gen.DOMAIN_FEATURE_TRANSIENT_STATUSES;
exports.DOMAIN_REGISTRATION_STATUS_TRANSFER_TRANSIENT_STATUSES = content_gen.DOMAIN_REGISTRATION_STATUS_TRANSFER_TRANSIENT_STATUSES;
exports.DOMAIN_TRANSIENT_STATUSES = content_gen.DOMAIN_TRANSIENT_STATUSES;
exports.HOST_TRANSIENT_STATUSES = content_gen.HOST_TRANSIENT_STATUSES;
exports.SSL_CERTIFICATE_TRANSIENT_STATUSES = content_gen.SSL_CERTIFICATE_TRANSIENT_STATUSES;
exports.TASK_TRANSIENT_STATUSES = content_gen.TASK_TRANSIENT_STATUSES;


/***/ }),

/***/ 2722:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const customMarshalling = __nccwpck_require__(5667);
const marshalling = __nccwpck_require__(1502);
const unmarshalContactExtensionFRAssociationInfo = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ContactExtensionFRAssociationInfo' failed as data isn't a dictionary.`
    );
  }
  return {
    publicationJo: marshalling.unmarshalDate(data.publication_jo),
    publicationJoPage: data.publication_jo_page
  };
};
const unmarshalContactExtensionFRCodeAuthAfnicInfo = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ContactExtensionFRCodeAuthAfnicInfo' failed as data isn't a dictionary.`
    );
  }
  return {
    codeAuthAfnic: data.code_auth_afnic
  };
};
const unmarshalContactExtensionFRDunsInfo = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ContactExtensionFRDunsInfo' failed as data isn't a dictionary.`
    );
  }
  return {
    dunsId: data.duns_id,
    localId: data.local_id
  };
};
const unmarshalContactExtensionFRIndividualInfo = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ContactExtensionFRIndividualInfo' failed as data isn't a dictionary.`
    );
  }
  return {
    whoisOptIn: data.whois_opt_in
  };
};
const unmarshalContactExtensionFRTrademarkInfo = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ContactExtensionFRTrademarkInfo' failed as data isn't a dictionary.`
    );
  }
  return {
    trademarkInpi: data.trademark_inpi
  };
};
const unmarshalContactExtensionEU = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ContactExtensionEU' failed as data isn't a dictionary.`
    );
  }
  return {
    europeanCitizenship: data.european_citizenship
  };
};
const unmarshalContactExtensionFR = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ContactExtensionFR' failed as data isn't a dictionary.`
    );
  }
  return {
    associationInfo: data.association_info ? unmarshalContactExtensionFRAssociationInfo(data.association_info) : void 0,
    codeAuthAfnicInfo: data.code_auth_afnic_info ? unmarshalContactExtensionFRCodeAuthAfnicInfo(data.code_auth_afnic_info) : void 0,
    dunsInfo: data.duns_info ? unmarshalContactExtensionFRDunsInfo(data.duns_info) : void 0,
    individualInfo: data.individual_info ? unmarshalContactExtensionFRIndividualInfo(data.individual_info) : void 0,
    mode: data.mode,
    trademarkInfo: data.trademark_info ? unmarshalContactExtensionFRTrademarkInfo(data.trademark_info) : void 0
  };
};
const unmarshalContactExtensionNL = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ContactExtensionNL' failed as data isn't a dictionary.`
    );
  }
  return {
    legalForm: data.legal_form,
    legalFormRegistrationNumber: data.legal_form_registration_number
  };
};
const unmarshalContactQuestion = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ContactQuestion' failed as data isn't a dictionary.`
    );
  }
  return {
    answer: data.answer,
    question: data.question
  };
};
const unmarshalContact = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Contact' failed as data isn't a dictionary.`
    );
  }
  return {
    addressLine1: data.address_line_1,
    addressLine2: data.address_line_2,
    city: data.city,
    companyIdentificationCode: data.company_identification_code,
    companyName: data.company_name,
    country: data.country,
    email: data.email,
    emailAlt: data.email_alt,
    emailStatus: data.email_status,
    extensionEu: data.extension_eu ? unmarshalContactExtensionEU(data.extension_eu) : void 0,
    extensionFr: data.extension_fr ? unmarshalContactExtensionFR(data.extension_fr) : void 0,
    extensionNl: data.extension_nl ? unmarshalContactExtensionNL(data.extension_nl) : void 0,
    faxNumber: data.fax_number,
    firstname: data.firstname,
    id: data.id,
    lang: data.lang,
    lastname: data.lastname,
    legalForm: data.legal_form,
    phoneNumber: data.phone_number,
    questions: data.questions ? marshalling.unmarshalArrayOfObject(data.questions, unmarshalContactQuestion) : void 0,
    resale: data.resale,
    state: data.state,
    status: data.status,
    vatIdentificationCode: data.vat_identification_code,
    whoisOptIn: data.whois_opt_in,
    zip: data.zip
  };
};
const unmarshalDNSZone = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DNSZone' failed as data isn't a dictionary.`
    );
  }
  return {
    domain: data.domain,
    linkedProducts: data.linked_products,
    message: data.message,
    ns: data.ns,
    nsDefault: data.ns_default,
    nsMaster: data.ns_master,
    projectId: data.project_id,
    status: data.status,
    subdomain: data.subdomain,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalHost = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Host' failed as data isn't a dictionary.`
    );
  }
  return {
    domain: data.domain,
    ips: data.ips,
    name: data.name,
    status: data.status
  };
};
const unmarshalSSLCertificate = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SSLCertificate' failed as data isn't a dictionary.`
    );
  }
  return {
    alternativeDnsZones: data.alternative_dns_zones,
    certificateChain: data.certificate_chain,
    createdAt: marshalling.unmarshalDate(data.created_at),
    dnsZone: data.dns_zone,
    expiredAt: marshalling.unmarshalDate(data.expired_at),
    privateKey: data.private_key,
    status: data.status
  };
};
const unmarshalCheckContactsCompatibilityResponseContactCheckResult = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CheckContactsCompatibilityResponseContactCheckResult' failed as data isn't a dictionary.`
    );
  }
  return {
    compatible: data.compatible,
    errorMessage: data.error_message
  };
};
const unmarshalCheckContactsCompatibilityResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CheckContactsCompatibilityResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    administrativeCheckResult: data.administrative_check_result ? unmarshalCheckContactsCompatibilityResponseContactCheckResult(
      data.administrative_check_result
    ) : void 0,
    compatible: data.compatible,
    ownerCheckResult: data.owner_check_result ? unmarshalCheckContactsCompatibilityResponseContactCheckResult(
      data.owner_check_result
    ) : void 0,
    technicalCheckResult: data.technical_check_result ? unmarshalCheckContactsCompatibilityResponseContactCheckResult(
      data.technical_check_result
    ) : void 0
  };
};
const unmarshalClearDNSZoneRecordsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ClearDNSZoneRecordsResponse' failed as data isn't a dictionary.`
    );
  }
  return {};
};
const unmarshalDeleteDNSZoneResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DeleteDNSZoneResponse' failed as data isn't a dictionary.`
    );
  }
  return {};
};
const unmarshalDeleteExternalDomainResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DeleteExternalDomainResponse' failed as data isn't a dictionary.`
    );
  }
  return {};
};
const unmarshalDeleteSSLCertificateResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DeleteSSLCertificateResponse' failed as data isn't a dictionary.`
    );
  }
  return {};
};
const unmarshalDSRecordPublicKey = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DSRecordPublicKey' failed as data isn't a dictionary.`
    );
  }
  return {
    key: data.key
  };
};
const unmarshalDSRecordDigest = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DSRecordDigest' failed as data isn't a dictionary.`
    );
  }
  return {
    digest: data.digest,
    publicKey: data.public_key ? unmarshalDSRecordPublicKey(data.public_key) : void 0,
    type: data.type
  };
};
const unmarshalDSRecord = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DSRecord' failed as data isn't a dictionary.`
    );
  }
  return {
    algorithm: data.algorithm,
    digest: data.digest ? unmarshalDSRecordDigest(data.digest) : void 0,
    keyId: data.key_id,
    publicKey: data.public_key ? unmarshalDSRecordPublicKey(data.public_key) : void 0
  };
};
const unmarshalTldOffer = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'TldOffer' failed as data isn't a dictionary.`
    );
  }
  return {
    action: data.action,
    operationPath: data.operation_path,
    price: data.price ? customMarshalling.unmarshalMoney(data.price) : void 0
  };
};
const unmarshalDomainDNSSEC = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DomainDNSSEC' failed as data isn't a dictionary.`
    );
  }
  return {
    dsRecords: marshalling.unmarshalArrayOfObject(data.ds_records, unmarshalDSRecord),
    status: data.status
  };
};
const unmarshalDomainRegistrationStatusExternalDomain = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DomainRegistrationStatusExternalDomain' failed as data isn't a dictionary.`
    );
  }
  return {
    validationToken: data.validation_token
  };
};
const unmarshalDomainRegistrationStatusTransfer = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DomainRegistrationStatusTransfer' failed as data isn't a dictionary.`
    );
  }
  return {
    status: data.status,
    voteCurrentOwner: data.vote_current_owner,
    voteNewOwner: data.vote_new_owner
  };
};
const unmarshalTld = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Tld' failed as data isn't a dictionary.`
    );
  }
  return {
    dnssecSupport: data.dnssec_support,
    durationInYearsMax: data.duration_in_years_max,
    durationInYearsMin: data.duration_in_years_min,
    idnSupport: data.idn_support,
    name: data.name,
    offers: marshalling.unmarshalMapOfObject(data.offers, unmarshalTldOffer),
    specifications: data.specifications
  };
};
const unmarshalDomain = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Domain' failed as data isn't a dictionary.`
    );
  }
  return {
    administrativeContact: data.administrative_contact ? unmarshalContact(data.administrative_contact) : void 0,
    autoRenewStatus: data.auto_renew_status,
    dnsZones: marshalling.unmarshalArrayOfObject(data.dns_zones, unmarshalDNSZone),
    dnssec: data.dnssec ? unmarshalDomainDNSSEC(data.dnssec) : void 0,
    domain: data.domain,
    eppCode: data.epp_code,
    expiredAt: marshalling.unmarshalDate(data.expired_at),
    externalDomainRegistrationStatus: data.external_domain_registration_status ? unmarshalDomainRegistrationStatusExternalDomain(
      data.external_domain_registration_status
    ) : void 0,
    isExternal: data.is_external,
    linkedProducts: data.linked_products,
    organizationId: data.organization_id,
    ownerContact: data.owner_contact ? unmarshalContact(data.owner_contact) : void 0,
    pendingTrade: data.pending_trade,
    projectId: data.project_id,
    registrar: data.registrar,
    status: data.status,
    technicalContact: data.technical_contact ? unmarshalContact(data.technical_contact) : void 0,
    tld: data.tld ? unmarshalTld(data.tld) : void 0,
    transferRegistrationStatus: data.transfer_registration_status ? unmarshalDomainRegistrationStatusTransfer(
      data.transfer_registration_status
    ) : void 0,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalGetDNSZoneTsigKeyResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetDNSZoneTsigKeyResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    algorithm: data.algorithm,
    key: data.key,
    name: data.name
  };
};
const unmarshalDomainRecordGeoIPConfigMatch = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DomainRecordGeoIPConfigMatch' failed as data isn't a dictionary.`
    );
  }
  return {
    continents: data.continents,
    countries: data.countries,
    data: data.data
  };
};
const unmarshalDomainRecordViewConfigView = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DomainRecordViewConfigView' failed as data isn't a dictionary.`
    );
  }
  return {
    data: data.data,
    subnet: data.subnet
  };
};
const unmarshalDomainRecordWeightedConfigWeightedIP = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DomainRecordWeightedConfigWeightedIP' failed as data isn't a dictionary.`
    );
  }
  return {
    ip: data.ip,
    weight: data.weight
  };
};
const unmarshalDomainRecordGeoIPConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DomainRecordGeoIPConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    default: data.default,
    matches: marshalling.unmarshalArrayOfObject(
      data.matches,
      unmarshalDomainRecordGeoIPConfigMatch
    )
  };
};
const unmarshalDomainRecordHTTPServiceConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DomainRecordHTTPServiceConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    ips: data.ips,
    mustContain: data.must_contain,
    strategy: data.strategy,
    url: data.url,
    userAgent: data.user_agent
  };
};
const unmarshalDomainRecordViewConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DomainRecordViewConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    views: marshalling.unmarshalArrayOfObject(
      data.views,
      unmarshalDomainRecordViewConfigView
    )
  };
};
const unmarshalDomainRecordWeightedConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DomainRecordWeightedConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    weightedIps: marshalling.unmarshalArrayOfObject(
      data.weighted_ips,
      unmarshalDomainRecordWeightedConfigWeightedIP
    )
  };
};
const unmarshalDomainRecord = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DomainRecord' failed as data isn't a dictionary.`
    );
  }
  return {
    comment: data.comment,
    data: data.data,
    geoIpConfig: data.geo_ip_config ? unmarshalDomainRecordGeoIPConfig(data.geo_ip_config) : void 0,
    httpServiceConfig: data.http_service_config ? unmarshalDomainRecordHTTPServiceConfig(data.http_service_config) : void 0,
    id: data.id,
    name: data.name,
    priority: data.priority,
    ttl: data.ttl,
    type: data.type,
    viewConfig: data.view_config ? unmarshalDomainRecordViewConfig(data.view_config) : void 0,
    weightedConfig: data.weighted_config ? unmarshalDomainRecordWeightedConfig(data.weighted_config) : void 0
  };
};
const unmarshalRecordIdentifier = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RecordIdentifier' failed as data isn't a dictionary.`
    );
  }
  return {
    data: data.data,
    name: data.name,
    ttl: data.ttl,
    type: data.type
  };
};
const unmarshalRecordChangeAdd = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RecordChangeAdd' failed as data isn't a dictionary.`
    );
  }
  return {
    records: marshalling.unmarshalArrayOfObject(data.records, unmarshalDomainRecord)
  };
};
const unmarshalRecordChangeClear = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RecordChangeClear' failed as data isn't a dictionary.`
    );
  }
  return {};
};
const unmarshalRecordChangeDelete = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RecordChangeDelete' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    idFields: data.id_fields ? unmarshalRecordIdentifier(data.id_fields) : void 0
  };
};
const unmarshalRecordChangeSet = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RecordChangeSet' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    idFields: data.id_fields ? unmarshalRecordIdentifier(data.id_fields) : void 0,
    records: marshalling.unmarshalArrayOfObject(data.records, unmarshalDomainRecord)
  };
};
const unmarshalRecordChange = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RecordChange' failed as data isn't a dictionary.`
    );
  }
  return {
    add: data.add ? unmarshalRecordChangeAdd(data.add) : void 0,
    clear: data.clear ? unmarshalRecordChangeClear(data.clear) : void 0,
    delete: data.delete ? unmarshalRecordChangeDelete(data.delete) : void 0,
    set: data.set ? unmarshalRecordChangeSet(data.set) : void 0
  };
};
const unmarshalGetDNSZoneVersionDiffResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetDNSZoneVersionDiffResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    changes: marshalling.unmarshalArrayOfObject(data.changes, unmarshalRecordChange)
  };
};
const unmarshalGetDomainAuthCodeResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetDomainAuthCodeResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    authCode: data.auth_code
  };
};
const unmarshalImportProviderDNSZoneResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ImportProviderDNSZoneResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    records: marshalling.unmarshalArrayOfObject(data.records, unmarshalDomainRecord)
  };
};
const unmarshalImportRawDNSZoneResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ImportRawDNSZoneResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    records: marshalling.unmarshalArrayOfObject(data.records, unmarshalDomainRecord)
  };
};
const unmarshalContactRolesRoles = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ContactRolesRoles' failed as data isn't a dictionary.`
    );
  }
  return {
    isAdministrative: data.is_administrative,
    isOwner: data.is_owner,
    isTechnical: data.is_technical
  };
};
const unmarshalContactRoles = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ContactRoles' failed as data isn't a dictionary.`
    );
  }
  return {
    contact: data.contact ? unmarshalContact(data.contact) : void 0,
    roles: marshalling.unmarshalMapOfObject(data.roles, unmarshalContactRolesRoles)
  };
};
const unmarshalListContactsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListContactsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    contacts: marshalling.unmarshalArrayOfObject(data.contacts, unmarshalContactRoles),
    totalCount: data.total_count
  };
};
const unmarshalNameserver = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Nameserver' failed as data isn't a dictionary.`
    );
  }
  return {
    ip: data.ip,
    name: data.name
  };
};
const unmarshalListDNSZoneNameserversResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDNSZoneNameserversResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    ns: marshalling.unmarshalArrayOfObject(data.ns, unmarshalNameserver)
  };
};
const unmarshalListDNSZoneRecordsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDNSZoneRecordsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    records: marshalling.unmarshalArrayOfObject(data.records, unmarshalDomainRecord),
    totalCount: data.total_count
  };
};
const unmarshalListDNSZoneVersionRecordsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDNSZoneVersionRecordsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    records: marshalling.unmarshalArrayOfObject(data.records, unmarshalDomainRecord),
    totalCount: data.total_count
  };
};
const unmarshalDNSZoneVersion = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DNSZoneVersion' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id
  };
};
const unmarshalListDNSZoneVersionsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDNSZoneVersionsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    versions: marshalling.unmarshalArrayOfObject(data.versions, unmarshalDNSZoneVersion)
  };
};
const unmarshalListDNSZonesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDNSZonesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    dnsZones: marshalling.unmarshalArrayOfObject(data.dns_zones, unmarshalDNSZone),
    totalCount: data.total_count
  };
};
const unmarshalListDomainHostsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDomainHostsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    hosts: marshalling.unmarshalArrayOfObject(data.hosts, unmarshalHost),
    totalCount: data.total_count
  };
};
const unmarshalDomainSummary = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DomainSummary' failed as data isn't a dictionary.`
    );
  }
  return {
    autoRenewStatus: data.auto_renew_status,
    createdAt: marshalling.unmarshalDate(data.created_at),
    dnssecStatus: data.dnssec_status,
    domain: data.domain,
    eppCode: data.epp_code,
    expiredAt: marshalling.unmarshalDate(data.expired_at),
    externalDomainRegistrationStatus: data.external_domain_registration_status ? unmarshalDomainRegistrationStatusExternalDomain(
      data.external_domain_registration_status
    ) : void 0,
    isExternal: data.is_external,
    organizationId: data.organization_id,
    pendingTrade: data.pending_trade,
    projectId: data.project_id,
    registrar: data.registrar,
    status: data.status,
    transferRegistrationStatus: data.transfer_registration_status ? unmarshalDomainRegistrationStatusTransfer(
      data.transfer_registration_status
    ) : void 0,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalListDomainsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDomainsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    domains: marshalling.unmarshalArrayOfObject(data.domains, unmarshalDomainSummary),
    totalCount: data.total_count
  };
};
const unmarshalRenewableDomain = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RenewableDomain' failed as data isn't a dictionary.`
    );
  }
  return {
    domain: data.domain,
    estimatedDeleteAt: marshalling.unmarshalDate(data.estimated_delete_at),
    expiredAt: marshalling.unmarshalDate(data.expired_at),
    limitRedemptionAt: marshalling.unmarshalDate(data.limit_redemption_at),
    limitRenewAt: marshalling.unmarshalDate(data.limit_renew_at),
    organizationId: data.organization_id,
    projectId: data.project_id,
    renewableDurationInYears: data.renewable_duration_in_years,
    status: data.status,
    tld: data.tld ? unmarshalTld(data.tld) : void 0
  };
};
const unmarshalListRenewableDomainsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListRenewableDomainsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    domains: marshalling.unmarshalArrayOfObject(data.domains, unmarshalRenewableDomain),
    totalCount: data.total_count
  };
};
const unmarshalListSSLCertificatesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSSLCertificatesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    certificates: marshalling.unmarshalArrayOfObject(
      data.certificates,
      unmarshalSSLCertificate
    ),
    totalCount: data.total_count
  };
};
const unmarshalTask = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Task' failed as data isn't a dictionary.`
    );
  }
  return {
    contactIdentifier: data.contact_identifier,
    domain: data.domain,
    id: data.id,
    message: data.message,
    organizationId: data.organization_id,
    projectId: data.project_id,
    startedAt: marshalling.unmarshalDate(data.started_at),
    status: data.status,
    type: data.type,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalListTasksResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListTasksResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    tasks: marshalling.unmarshalArrayOfObject(data.tasks, unmarshalTask),
    totalCount: data.total_count
  };
};
const unmarshalListTldsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListTldsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    tlds: marshalling.unmarshalArrayOfObject(data.tlds, unmarshalTld),
    totalCount: data.total_count
  };
};
const unmarshalOrderResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'OrderResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    domains: data.domains,
    organizationId: data.organization_id,
    projectId: data.project_id,
    taskId: data.task_id
  };
};
const unmarshalRefreshDNSZoneResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RefreshDNSZoneResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    dnsZones: marshalling.unmarshalArrayOfObject(data.dns_zones, unmarshalDNSZone)
  };
};
const unmarshalRegisterExternalDomainResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RegisterExternalDomainResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    domain: data.domain,
    organizationId: data.organization_id,
    projectId: data.project_id,
    validationToken: data.validation_token
  };
};
const unmarshalRestoreDNSZoneVersionResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RestoreDNSZoneVersionResponse' failed as data isn't a dictionary.`
    );
  }
  return {};
};
const unmarshalAvailableDomain = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'AvailableDomain' failed as data isn't a dictionary.`
    );
  }
  return {
    available: data.available,
    domain: data.domain,
    tld: data.tld ? unmarshalTld(data.tld) : void 0
  };
};
const unmarshalSearchAvailableDomainsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SearchAvailableDomainsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    availableDomains: marshalling.unmarshalArrayOfObject(
      data.available_domains,
      unmarshalAvailableDomain
    )
  };
};
const unmarshalUpdateDNSZoneNameserversResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UpdateDNSZoneNameserversResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    ns: marshalling.unmarshalArrayOfObject(data.ns, unmarshalNameserver)
  };
};
const unmarshalUpdateDNSZoneRecordsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UpdateDNSZoneRecordsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    records: marshalling.unmarshalArrayOfObject(data.records, unmarshalDomainRecord)
  };
};
const marshalCloneDNSZoneRequest = (request, defaults) => ({
  dest_dns_zone: request.destDnsZone,
  overwrite: request.overwrite,
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalCreateDNSZoneRequest = (request, defaults) => ({
  domain: request.domain,
  project_id: request.projectId ?? defaults.defaultProjectId,
  subdomain: request.subdomain
});
const marshalCreateSSLCertificateRequest = (request, defaults) => ({
  alternative_dns_zones: request.alternativeDnsZones,
  dns_zone: request.dnsZone
});
const marshalImportProviderDNSZoneRequestOnlineV1 = (request, defaults) => ({
  token: request.token
});
const marshalImportProviderDNSZoneRequest = (request, defaults) => ({
  ...marshalling.resolveOneOf([
    {
      param: "online_v1",
      value: request.onlineV1 !== void 0 ? marshalImportProviderDNSZoneRequestOnlineV1(
        request.onlineV1
      ) : void 0
    }
  ])
});
const marshalImportRawDNSZoneRequestTsigKey = (request, defaults) => ({
  algorithm: request.algorithm,
  key: request.key,
  name: request.name
});
const marshalImportRawDNSZoneRequestAXFRSource = (request, defaults) => ({
  name_server: request.nameServer,
  tsig_key: request.tsigKey !== void 0 ? marshalImportRawDNSZoneRequestTsigKey(request.tsigKey) : void 0
});
const marshalImportRawDNSZoneRequestBindSource = (request, defaults) => ({
  content: request.content
});
const marshalImportRawDNSZoneRequest = (request, defaults) => ({
  content: request.content,
  format: request.format,
  project_id: request.projectId ?? defaults.defaultProjectId,
  ...marshalling.resolveOneOf([
    {
      param: "bind_source",
      value: request.bindSource !== void 0 ? marshalImportRawDNSZoneRequestBindSource(
        request.bindSource
      ) : void 0
    },
    {
      param: "axfr_source",
      value: request.axfrSource !== void 0 ? marshalImportRawDNSZoneRequestAXFRSource(
        request.axfrSource
      ) : void 0
    }
  ])
});
const marshalRefreshDNSZoneRequest = (request, defaults) => ({
  recreate_dns_zone: request.recreateDnsZone,
  recreate_sub_dns_zone: request.recreateSubDnsZone
});
const marshalContactExtensionFRAssociationInfo = (request, defaults) => ({
  publication_jo: request.publicationJo,
  publication_jo_page: request.publicationJoPage
});
const marshalContactExtensionFRCodeAuthAfnicInfo = (request, defaults) => ({
  code_auth_afnic: request.codeAuthAfnic
});
const marshalContactExtensionFRDunsInfo = (request, defaults) => ({
  duns_id: request.dunsId,
  local_id: request.localId
});
const marshalContactExtensionFRIndividualInfo = (request, defaults) => ({
  whois_opt_in: request.whoisOptIn
});
const marshalContactExtensionFRTrademarkInfo = (request, defaults) => ({
  trademark_inpi: request.trademarkInpi
});
const marshalContactExtensionEU = (request, defaults) => ({
  european_citizenship: request.europeanCitizenship
});
const marshalContactExtensionFR = (request, defaults) => ({
  mode: request.mode,
  ...marshalling.resolveOneOf([
    {
      param: "individual_info",
      value: request.individualInfo !== void 0 ? marshalContactExtensionFRIndividualInfo(
        request.individualInfo
      ) : void 0
    },
    {
      param: "duns_info",
      value: request.dunsInfo !== void 0 ? marshalContactExtensionFRDunsInfo(request.dunsInfo) : void 0
    },
    {
      param: "association_info",
      value: request.associationInfo !== void 0 ? marshalContactExtensionFRAssociationInfo(
        request.associationInfo
      ) : void 0
    },
    {
      param: "trademark_info",
      value: request.trademarkInfo !== void 0 ? marshalContactExtensionFRTrademarkInfo(
        request.trademarkInfo
      ) : void 0
    },
    {
      param: "code_auth_afnic_info",
      value: request.codeAuthAfnicInfo !== void 0 ? marshalContactExtensionFRCodeAuthAfnicInfo(
        request.codeAuthAfnicInfo
      ) : void 0
    }
  ])
});
const marshalContactExtensionNL = (request, defaults) => ({
  legal_form: request.legalForm,
  legal_form_registration_number: request.legalFormRegistrationNumber
});
const marshalContactQuestion = (request, defaults) => ({
  answer: request.answer,
  question: request.question
});
const marshalNewContact = (request, defaults) => ({
  address_line_1: request.addressLine1,
  address_line_2: request.addressLine2,
  city: request.city,
  company_identification_code: request.companyIdentificationCode,
  company_name: request.companyName,
  country: request.country,
  email: request.email,
  email_alt: request.emailAlt,
  extension_eu: request.extensionEu !== void 0 ? marshalContactExtensionEU(request.extensionEu) : void 0,
  extension_fr: request.extensionFr !== void 0 ? marshalContactExtensionFR(request.extensionFr) : void 0,
  extension_nl: request.extensionNl !== void 0 ? marshalContactExtensionNL(request.extensionNl) : void 0,
  fax_number: request.faxNumber,
  firstname: request.firstname,
  lang: request.lang,
  lastname: request.lastname,
  legal_form: request.legalForm,
  phone_number: request.phoneNumber,
  questions: request.questions !== void 0 ? request.questions.map((elt) => marshalContactQuestion(elt)) : void 0,
  resale: request.resale,
  state: request.state,
  vat_identification_code: request.vatIdentificationCode,
  whois_opt_in: request.whoisOptIn,
  zip: request.zip
});
const marshalRegistrarApiBuyDomainsRequest = (request, defaults) => ({
  domains: request.domains,
  duration_in_years: request.durationInYears,
  project_id: request.projectId ?? defaults.defaultProjectId,
  ...marshalling.resolveOneOf([
    { param: "owner_contact_id", value: request.ownerContactId },
    {
      param: "owner_contact",
      value: request.ownerContact !== void 0 ? marshalNewContact(request.ownerContact) : void 0
    }
  ]),
  ...marshalling.resolveOneOf([
    {
      param: "administrative_contact_id",
      value: request.administrativeContactId
    },
    {
      param: "administrative_contact",
      value: request.administrativeContact !== void 0 ? marshalNewContact(request.administrativeContact) : void 0
    }
  ]),
  ...marshalling.resolveOneOf([
    { param: "technical_contact_id", value: request.technicalContactId },
    {
      param: "technical_contact",
      value: request.technicalContact !== void 0 ? marshalNewContact(request.technicalContact) : void 0
    }
  ])
});
const marshalRegistrarApiCheckContactsCompatibilityRequest = (request, defaults) => ({
  domains: request.domains,
  tlds: request.tlds,
  ...marshalling.resolveOneOf([
    { param: "owner_contact_id", value: request.ownerContactId },
    {
      param: "owner_contact",
      value: request.ownerContact !== void 0 ? marshalNewContact(request.ownerContact) : void 0
    }
  ]),
  ...marshalling.resolveOneOf([
    {
      param: "administrative_contact_id",
      value: request.administrativeContactId
    },
    {
      param: "administrative_contact",
      value: request.administrativeContact !== void 0 ? marshalNewContact(request.administrativeContact) : void 0
    }
  ]),
  ...marshalling.resolveOneOf([
    { param: "technical_contact_id", value: request.technicalContactId },
    {
      param: "technical_contact",
      value: request.technicalContact !== void 0 ? marshalNewContact(request.technicalContact) : void 0
    }
  ])
});
const marshalRegistrarApiCreateDomainHostRequest = (request, defaults) => ({
  ips: request.ips,
  name: request.name
});
const marshalDSRecordPublicKey = (request, defaults) => ({
  key: request.key
});
const marshalDSRecordDigest = (request, defaults) => ({
  digest: request.digest,
  public_key: request.publicKey !== void 0 ? marshalDSRecordPublicKey(request.publicKey) : void 0,
  type: request.type
});
const marshalDSRecord = (request, defaults) => ({
  algorithm: request.algorithm,
  key_id: request.keyId,
  ...marshalling.resolveOneOf([
    {
      param: "digest",
      value: request.digest !== void 0 ? marshalDSRecordDigest(request.digest) : void 0
    },
    {
      param: "public_key",
      value: request.publicKey !== void 0 ? marshalDSRecordPublicKey(request.publicKey) : void 0
    }
  ])
});
const marshalRegistrarApiEnableDomainDNSSECRequest = (request, defaults) => ({
  ds_record: request.dsRecord !== void 0 ? marshalDSRecord(request.dsRecord) : void 0
});
const marshalRegistrarApiRegisterExternalDomainRequest = (request, defaults) => ({
  domain: request.domain,
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalRegistrarApiRenewDomainsRequest = (request, defaults) => ({
  domains: request.domains,
  duration_in_years: request.durationInYears,
  force_late_renewal: request.forceLateRenewal
});
const marshalRegistrarApiTradeDomainRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId,
  ...marshalling.resolveOneOf([
    { param: "new_owner_contact_id", value: request.newOwnerContactId },
    {
      param: "new_owner_contact",
      value: request.newOwnerContact !== void 0 ? marshalNewContact(request.newOwnerContact) : void 0
    }
  ])
});
const marshalTransferInDomainRequestTransferRequest = (request, defaults) => ({
  auth_code: request.authCode,
  domain: request.domain
});
const marshalRegistrarApiTransferInDomainRequest = (request, defaults) => ({
  domains: request.domains.map(
    (elt) => marshalTransferInDomainRequestTransferRequest(elt)
  ),
  project_id: request.projectId ?? defaults.defaultProjectId,
  ...marshalling.resolveOneOf([
    { param: "owner_contact_id", value: request.ownerContactId },
    {
      param: "owner_contact",
      value: request.ownerContact !== void 0 ? marshalNewContact(request.ownerContact) : void 0
    }
  ]),
  ...marshalling.resolveOneOf([
    {
      param: "administrative_contact_id",
      value: request.administrativeContactId
    },
    {
      param: "administrative_contact",
      value: request.administrativeContact !== void 0 ? marshalNewContact(request.administrativeContact) : void 0
    }
  ]),
  ...marshalling.resolveOneOf([
    { param: "technical_contact_id", value: request.technicalContactId },
    {
      param: "technical_contact",
      value: request.technicalContact !== void 0 ? marshalNewContact(request.technicalContact) : void 0
    }
  ])
});
const marshalUpdateContactRequestQuestion = (request, defaults) => ({
  answer: request.answer,
  question: request.question
});
const marshalRegistrarApiUpdateContactRequest = (request, defaults) => ({
  address_line_1: request.addressLine1,
  address_line_2: request.addressLine2,
  city: request.city,
  company_identification_code: request.companyIdentificationCode,
  country: request.country,
  email: request.email,
  email_alt: request.emailAlt,
  extension_eu: request.extensionEu !== void 0 ? marshalContactExtensionEU(request.extensionEu) : void 0,
  extension_fr: request.extensionFr !== void 0 ? marshalContactExtensionFR(request.extensionFr) : void 0,
  extension_nl: request.extensionNl !== void 0 ? marshalContactExtensionNL(request.extensionNl) : void 0,
  fax_number: request.faxNumber,
  lang: request.lang,
  phone_number: request.phoneNumber,
  questions: request.questions !== void 0 ? request.questions.map(
    (elt) => marshalUpdateContactRequestQuestion(elt)
  ) : void 0,
  resale: request.resale,
  state: request.state,
  vat_identification_code: request.vatIdentificationCode,
  whois_opt_in: request.whoisOptIn,
  zip: request.zip
});
const marshalRegistrarApiUpdateDomainHostRequest = (request, defaults) => ({
  ips: request.ips
});
const marshalRegistrarApiUpdateDomainRequest = (request, defaults) => ({
  ...marshalling.resolveOneOf([
    { param: "technical_contact_id", value: request.technicalContactId },
    {
      param: "technical_contact",
      value: request.technicalContact !== void 0 ? marshalNewContact(request.technicalContact) : void 0
    }
  ]),
  ...marshalling.resolveOneOf([
    { param: "owner_contact_id", value: request.ownerContactId },
    {
      param: "owner_contact",
      value: request.ownerContact !== void 0 ? marshalNewContact(request.ownerContact) : void 0
    }
  ]),
  ...marshalling.resolveOneOf([
    {
      param: "administrative_contact_id",
      value: request.administrativeContactId
    },
    {
      param: "administrative_contact",
      value: request.administrativeContact !== void 0 ? marshalNewContact(request.administrativeContact) : void 0
    }
  ])
});
const marshalNameserver = (request, defaults) => ({
  ip: request.ip,
  name: request.name
});
const marshalUpdateDNSZoneNameserversRequest = (request, defaults) => ({
  ns: request.ns.map((elt) => marshalNameserver(elt))
});
const marshalDomainRecordGeoIPConfigMatch = (request, defaults) => ({
  continents: request.continents,
  countries: request.countries,
  data: request.data
});
const marshalDomainRecordViewConfigView = (request, defaults) => ({
  data: request.data,
  subnet: request.subnet
});
const marshalDomainRecordWeightedConfigWeightedIP = (request, defaults) => ({
  ip: request.ip,
  weight: request.weight
});
const marshalDomainRecordGeoIPConfig = (request, defaults) => ({
  default: request.default,
  matches: request.matches.map(
    (elt) => marshalDomainRecordGeoIPConfigMatch(elt)
  )
});
const marshalDomainRecordHTTPServiceConfig = (request, defaults) => ({
  ips: request.ips,
  must_contain: request.mustContain,
  strategy: request.strategy,
  url: request.url,
  user_agent: request.userAgent
});
const marshalDomainRecordViewConfig = (request, defaults) => ({
  views: request.views.map(
    (elt) => marshalDomainRecordViewConfigView(elt)
  )
});
const marshalDomainRecordWeightedConfig = (request, defaults) => ({
  weighted_ips: request.weightedIps.map(
    (elt) => marshalDomainRecordWeightedConfigWeightedIP(elt)
  )
});
const marshalDomainRecord = (request, defaults) => ({
  comment: request.comment,
  data: request.data,
  id: request.id,
  name: request.name,
  priority: request.priority,
  ttl: request.ttl,
  type: request.type,
  ...marshalling.resolveOneOf([
    {
      param: "geo_ip_config",
      value: request.geoIpConfig !== void 0 ? marshalDomainRecordGeoIPConfig(request.geoIpConfig) : void 0
    },
    {
      param: "http_service_config",
      value: request.httpServiceConfig !== void 0 ? marshalDomainRecordHTTPServiceConfig(
        request.httpServiceConfig
      ) : void 0
    },
    {
      param: "weighted_config",
      value: request.weightedConfig !== void 0 ? marshalDomainRecordWeightedConfig(request.weightedConfig) : void 0
    },
    {
      param: "view_config",
      value: request.viewConfig !== void 0 ? marshalDomainRecordViewConfig(request.viewConfig) : void 0
    }
  ])
});
const marshalRecordIdentifier = (request, defaults) => ({
  data: request.data,
  name: request.name,
  ttl: request.ttl,
  type: request.type
});
const marshalRecordChangeAdd = (request, defaults) => ({
  records: request.records.map((elt) => marshalDomainRecord(elt))
});
const marshalRecordChangeClear = (request, defaults) => ({});
const marshalRecordChangeDelete = (request, defaults) => ({
  ...marshalling.resolveOneOf([
    { param: "id", value: request.id },
    {
      param: "id_fields",
      value: request.idFields !== void 0 ? marshalRecordIdentifier(request.idFields) : void 0
    }
  ])
});
const marshalRecordChangeSet = (request, defaults) => ({
  records: request.records.map((elt) => marshalDomainRecord(elt)),
  ...marshalling.resolveOneOf([
    { param: "id", value: request.id },
    {
      param: "id_fields",
      value: request.idFields !== void 0 ? marshalRecordIdentifier(request.idFields) : void 0
    }
  ])
});
const marshalRecordChange = (request, defaults) => ({
  ...marshalling.resolveOneOf([
    {
      param: "add",
      value: request.add !== void 0 ? marshalRecordChangeAdd(request.add) : void 0
    },
    {
      param: "set",
      value: request.set !== void 0 ? marshalRecordChangeSet(request.set) : void 0
    },
    {
      param: "delete",
      value: request.delete !== void 0 ? marshalRecordChangeDelete(request.delete) : void 0
    },
    {
      param: "clear",
      value: request.clear !== void 0 ? marshalRecordChangeClear(request.clear) : void 0
    }
  ])
});
const marshalUpdateDNSZoneRecordsRequest = (request, defaults) => ({
  changes: request.changes.map((elt) => marshalRecordChange(elt)),
  disallow_new_zone_creation: request.disallowNewZoneCreation,
  return_all_records: request.returnAllRecords,
  serial: request.serial
});
const marshalUpdateDNSZoneRequest = (request, defaults) => ({
  new_dns_zone: request.newDnsZone,
  project_id: request.projectId ?? defaults.defaultProjectId
});
exports.marshalCloneDNSZoneRequest = marshalCloneDNSZoneRequest;
exports.marshalCreateDNSZoneRequest = marshalCreateDNSZoneRequest;
exports.marshalCreateSSLCertificateRequest = marshalCreateSSLCertificateRequest;
exports.marshalDSRecord = marshalDSRecord;
exports.marshalImportProviderDNSZoneRequest = marshalImportProviderDNSZoneRequest;
exports.marshalImportRawDNSZoneRequest = marshalImportRawDNSZoneRequest;
exports.marshalRefreshDNSZoneRequest = marshalRefreshDNSZoneRequest;
exports.marshalRegistrarApiBuyDomainsRequest = marshalRegistrarApiBuyDomainsRequest;
exports.marshalRegistrarApiCheckContactsCompatibilityRequest = marshalRegistrarApiCheckContactsCompatibilityRequest;
exports.marshalRegistrarApiCreateDomainHostRequest = marshalRegistrarApiCreateDomainHostRequest;
exports.marshalRegistrarApiEnableDomainDNSSECRequest = marshalRegistrarApiEnableDomainDNSSECRequest;
exports.marshalRegistrarApiRegisterExternalDomainRequest = marshalRegistrarApiRegisterExternalDomainRequest;
exports.marshalRegistrarApiRenewDomainsRequest = marshalRegistrarApiRenewDomainsRequest;
exports.marshalRegistrarApiTradeDomainRequest = marshalRegistrarApiTradeDomainRequest;
exports.marshalRegistrarApiTransferInDomainRequest = marshalRegistrarApiTransferInDomainRequest;
exports.marshalRegistrarApiUpdateContactRequest = marshalRegistrarApiUpdateContactRequest;
exports.marshalRegistrarApiUpdateDomainHostRequest = marshalRegistrarApiUpdateDomainHostRequest;
exports.marshalRegistrarApiUpdateDomainRequest = marshalRegistrarApiUpdateDomainRequest;
exports.marshalUpdateDNSZoneNameserversRequest = marshalUpdateDNSZoneNameserversRequest;
exports.marshalUpdateDNSZoneRecordsRequest = marshalUpdateDNSZoneRecordsRequest;
exports.marshalUpdateDNSZoneRequest = marshalUpdateDNSZoneRequest;
exports.unmarshalCheckContactsCompatibilityResponse = unmarshalCheckContactsCompatibilityResponse;
exports.unmarshalClearDNSZoneRecordsResponse = unmarshalClearDNSZoneRecordsResponse;
exports.unmarshalContact = unmarshalContact;
exports.unmarshalDNSZone = unmarshalDNSZone;
exports.unmarshalDSRecord = unmarshalDSRecord;
exports.unmarshalDeleteDNSZoneResponse = unmarshalDeleteDNSZoneResponse;
exports.unmarshalDeleteExternalDomainResponse = unmarshalDeleteExternalDomainResponse;
exports.unmarshalDeleteSSLCertificateResponse = unmarshalDeleteSSLCertificateResponse;
exports.unmarshalDomain = unmarshalDomain;
exports.unmarshalGetDNSZoneTsigKeyResponse = unmarshalGetDNSZoneTsigKeyResponse;
exports.unmarshalGetDNSZoneVersionDiffResponse = unmarshalGetDNSZoneVersionDiffResponse;
exports.unmarshalGetDomainAuthCodeResponse = unmarshalGetDomainAuthCodeResponse;
exports.unmarshalHost = unmarshalHost;
exports.unmarshalImportProviderDNSZoneResponse = unmarshalImportProviderDNSZoneResponse;
exports.unmarshalImportRawDNSZoneResponse = unmarshalImportRawDNSZoneResponse;
exports.unmarshalListContactsResponse = unmarshalListContactsResponse;
exports.unmarshalListDNSZoneNameserversResponse = unmarshalListDNSZoneNameserversResponse;
exports.unmarshalListDNSZoneRecordsResponse = unmarshalListDNSZoneRecordsResponse;
exports.unmarshalListDNSZoneVersionRecordsResponse = unmarshalListDNSZoneVersionRecordsResponse;
exports.unmarshalListDNSZoneVersionsResponse = unmarshalListDNSZoneVersionsResponse;
exports.unmarshalListDNSZonesResponse = unmarshalListDNSZonesResponse;
exports.unmarshalListDomainHostsResponse = unmarshalListDomainHostsResponse;
exports.unmarshalListDomainsResponse = unmarshalListDomainsResponse;
exports.unmarshalListRenewableDomainsResponse = unmarshalListRenewableDomainsResponse;
exports.unmarshalListSSLCertificatesResponse = unmarshalListSSLCertificatesResponse;
exports.unmarshalListTasksResponse = unmarshalListTasksResponse;
exports.unmarshalListTldsResponse = unmarshalListTldsResponse;
exports.unmarshalOrderResponse = unmarshalOrderResponse;
exports.unmarshalRefreshDNSZoneResponse = unmarshalRefreshDNSZoneResponse;
exports.unmarshalRegisterExternalDomainResponse = unmarshalRegisterExternalDomainResponse;
exports.unmarshalRestoreDNSZoneVersionResponse = unmarshalRestoreDNSZoneVersionResponse;
exports.unmarshalSSLCertificate = unmarshalSSLCertificate;
exports.unmarshalSearchAvailableDomainsResponse = unmarshalSearchAvailableDomainsResponse;
exports.unmarshalTask = unmarshalTask;
exports.unmarshalUpdateDNSZoneNameserversResponse = unmarshalUpdateDNSZoneNameserversResponse;
exports.unmarshalUpdateDNSZoneRecordsResponse = unmarshalUpdateDNSZoneRecordsResponse;


/***/ }),

/***/ 9687:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(8863);
exports.v1alpha1 = index_gen;


/***/ }),

/***/ 2445:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const content_gen = __nccwpck_require__(1592);
const marshalling_gen = __nccwpck_require__(6176);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available zones of the API. */
  static LOCALITIES = [
    "fr-par-1",
    "fr-par-2",
    "nl-ams-1"
  ];
  /**
   * Create a new flexible IP. Generate a new flexible IP within a given zone,
   * specifying its configuration including Project ID and description.
   *
   * @param request - The request {@link CreateFlexibleIPRequest}
   * @returns A Promise of FlexibleIP
   */
  createFlexibleIP = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateFlexibleIPRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/flexible-ip/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/fips`
    },
    marshalling_gen.unmarshalFlexibleIP
  );
  /**
   * Get an existing flexible IP. Retrieve information about an existing
   * flexible IP, specified by its ID and zone. Its full details, including
   * Project ID, description and status, are returned in the response object.
   *
   * @param request - The request {@link GetFlexibleIPRequest}
   * @returns A Promise of FlexibleIP
   */
  getFlexibleIP = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/flexible-ip/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/fips/${marshalling.validatePathParam("fipId", request.fipId)}`
    },
    marshalling_gen.unmarshalFlexibleIP
  );
  /**
   * Waits for {@link FlexibleIP} to be in a final state.
   *
   * @param request - The request {@link GetFlexibleIPRequest}
   * @param options - The waiting options
   * @returns A Promise of FlexibleIP
   */
  waitForFlexibleIP = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(
      !content_gen.FLEXIBLE_IP_TRANSIENT_STATUSES.includes(res.status)
    )),
    this.getFlexibleIP,
    request,
    options
  );
  pageOfListFlexibleIPs = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/flexible-ip/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/fips`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["server_ids", request.serverIds],
        ["status", request.status],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListFlexibleIPsResponse
  );
  /**
   * List flexible IPs. List all flexible IPs within a given zone.
   *
   * @param request - The request {@link ListFlexibleIPsRequest}
   * @returns A Promise of ListFlexibleIPsResponse
   */
  listFlexibleIPs = (request = {}) => resourcePaginator.enrichForPagination("flexibleIps", this.pageOfListFlexibleIPs, request);
  /**
   * Update an existing flexible IP. Update the parameters of an existing
   * flexible IP, specified by its ID and zone. These parameters include tags
   * and description.
   *
   * @param request - The request {@link UpdateFlexibleIPRequest}
   * @returns A Promise of FlexibleIP
   */
  updateFlexibleIP = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateFlexibleIPRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/flexible-ip/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/fips/${marshalling.validatePathParam("fipId", request.fipId)}`
    },
    marshalling_gen.unmarshalFlexibleIP
  );
  /**
   * Delete an existing flexible IP. Delete an existing flexible IP, specified
   * by its ID and zone. Note that deleting a flexible IP is permanent and
   * cannot be undone.
   *
   * @param request - The request {@link DeleteFlexibleIPRequest}
   */
  deleteFlexibleIP = (request) => this.client.fetch({
    method: "DELETE",
    path: `/flexible-ip/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/fips/${marshalling.validatePathParam("fipId", request.fipId)}`
  });
  /**
   * Attach an existing flexible IP to a server. Attach an existing flexible IP
   * to a specified Elastic Metal server.
   *
   * @param request - The request {@link AttachFlexibleIPRequest}
   * @returns A Promise of AttachFlexibleIPsResponse
   */
  attachFlexibleIP = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalAttachFlexibleIPRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/flexible-ip/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/fips/attach`
    },
    marshalling_gen.unmarshalAttachFlexibleIPsResponse
  );
  /**
   * Detach an existing flexible IP from a server. Detach an existing flexible
   * IP from a specified Elastic Metal server.
   *
   * @param request - The request {@link DetachFlexibleIPRequest}
   * @returns A Promise of DetachFlexibleIPsResponse
   */
  detachFlexibleIP = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalDetachFlexibleIPRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/flexible-ip/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/fips/detach`
    },
    marshalling_gen.unmarshalDetachFlexibleIPsResponse
  );
  /**
   * Generate a virtual MAC address on an existing flexible IP. Generate a
   * virtual MAC (Media Access Control) address on an existing flexible IP.
   *
   * @param request - The request {@link GenerateMACAddrRequest}
   * @returns A Promise of FlexibleIP
   */
  generateMACAddr = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalGenerateMACAddrRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/flexible-ip/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/fips/${marshalling.validatePathParam("fipId", request.fipId)}/mac`
    },
    marshalling_gen.unmarshalFlexibleIP
  );
  /**
   * Duplicate a virtual MAC address to another flexible IP. Duplicate a virtual
   * MAC address from a given flexible IP to another flexible IP attached to the
   * same server.
   *
   * @param request - The request {@link DuplicateMACAddrRequest}
   * @returns A Promise of FlexibleIP
   */
  duplicateMACAddr = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalDuplicateMACAddrRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/flexible-ip/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/fips/${marshalling.validatePathParam("fipId", request.fipId)}/mac/duplicate`
    },
    marshalling_gen.unmarshalFlexibleIP
  );
  /**
   * Relocate an existing virtual MAC address to a different flexible IP.
   * Relocate a virtual MAC (Media Access Control) address from an existing
   * flexible IP to a different flexible IP.
   *
   * @param request - The request {@link MoveMACAddrRequest}
   * @returns A Promise of FlexibleIP
   */
  moveMACAddr = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalMoveMACAddrRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/flexible-ip/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/fips/${marshalling.validatePathParam("fipId", request.fipId)}/mac/move`
    },
    marshalling_gen.unmarshalFlexibleIP
  );
  /**
   * Detach a given virtual MAC address from an existing flexible IP. Detach a
   * given MAC (Media Access Control) address from an existing flexible IP.
   *
   * @param request - The request {@link DeleteMACAddrRequest}
   */
  deleteMACAddr = (request) => this.client.fetch({
    method: "DELETE",
    path: `/flexible-ip/v1alpha1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/fips/${marshalling.validatePathParam("fipId", request.fipId)}/mac`
  });
}
exports.API = API;


/***/ }),

/***/ 1592:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const FLEXIBLE_IP_TRANSIENT_STATUSES = [
  "updating",
  "detaching"
];
const MAC_ADDRESS_TRANSIENT_STATUSES = [
  "updating",
  "deleting"
];
exports.FLEXIBLE_IP_TRANSIENT_STATUSES = FLEXIBLE_IP_TRANSIENT_STATUSES;
exports.MAC_ADDRESS_TRANSIENT_STATUSES = MAC_ADDRESS_TRANSIENT_STATUSES;


/***/ }),

/***/ 8863:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(2445);
const content_gen = __nccwpck_require__(1592);
const validationRules_gen = __nccwpck_require__(5067);
exports.API = api_gen.API;
exports.FLEXIBLE_IP_TRANSIENT_STATUSES = content_gen.FLEXIBLE_IP_TRANSIENT_STATUSES;
exports.MAC_ADDRESS_TRANSIENT_STATUSES = content_gen.MAC_ADDRESS_TRANSIENT_STATUSES;
exports.ValidationRules = validationRules_gen;


/***/ }),

/***/ 6176:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalMACAddress = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'MACAddress' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    macAddress: data.mac_address,
    macType: data.mac_type,
    status: data.status,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    zone: data.zone
  };
};
const unmarshalFlexibleIP = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'FlexibleIP' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    description: data.description,
    id: data.id,
    ipAddress: data.ip_address,
    macAddress: data.mac_address ? unmarshalMACAddress(data.mac_address) : void 0,
    organizationId: data.organization_id,
    projectId: data.project_id,
    reverse: data.reverse,
    serverId: data.server_id,
    status: data.status,
    tags: data.tags,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    zone: data.zone
  };
};
const unmarshalAttachFlexibleIPsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'AttachFlexibleIPsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    flexibleIps: marshalling.unmarshalArrayOfObject(data.flexible_ips, unmarshalFlexibleIP),
    totalCount: data.total_count
  };
};
const unmarshalDetachFlexibleIPsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DetachFlexibleIPsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    flexibleIps: marshalling.unmarshalArrayOfObject(data.flexible_ips, unmarshalFlexibleIP),
    totalCount: data.total_count
  };
};
const unmarshalListFlexibleIPsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListFlexibleIPsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    flexibleIps: marshalling.unmarshalArrayOfObject(data.flexible_ips, unmarshalFlexibleIP),
    totalCount: data.total_count
  };
};
const marshalAttachFlexibleIPRequest = (request, defaults) => ({
  fips_ids: request.fipsIds,
  server_id: request.serverId
});
const marshalCreateFlexibleIPRequest = (request, defaults) => ({
  description: request.description,
  is_ipv6: request.isIpv6,
  project_id: request.projectId ?? defaults.defaultProjectId,
  reverse: request.reverse,
  server_id: request.serverId,
  tags: request.tags
});
const marshalDetachFlexibleIPRequest = (request, defaults) => ({
  fips_ids: request.fipsIds
});
const marshalDuplicateMACAddrRequest = (request, defaults) => ({
  duplicate_from_fip_id: request.duplicateFromFipId
});
const marshalGenerateMACAddrRequest = (request, defaults) => ({
  mac_type: request.macType
});
const marshalMoveMACAddrRequest = (request, defaults) => ({
  dst_fip_id: request.dstFipId
});
const marshalUpdateFlexibleIPRequest = (request, defaults) => ({
  description: request.description,
  reverse: request.reverse,
  tags: request.tags
});
exports.marshalAttachFlexibleIPRequest = marshalAttachFlexibleIPRequest;
exports.marshalCreateFlexibleIPRequest = marshalCreateFlexibleIPRequest;
exports.marshalDetachFlexibleIPRequest = marshalDetachFlexibleIPRequest;
exports.marshalDuplicateMACAddrRequest = marshalDuplicateMACAddrRequest;
exports.marshalGenerateMACAddrRequest = marshalGenerateMACAddrRequest;
exports.marshalMoveMACAddrRequest = marshalMoveMACAddrRequest;
exports.marshalUpdateFlexibleIPRequest = marshalUpdateFlexibleIPRequest;
exports.unmarshalAttachFlexibleIPsResponse = unmarshalAttachFlexibleIPsResponse;
exports.unmarshalDetachFlexibleIPsResponse = unmarshalDetachFlexibleIPsResponse;
exports.unmarshalFlexibleIP = unmarshalFlexibleIP;
exports.unmarshalListFlexibleIPsResponse = unmarshalListFlexibleIPsResponse;


/***/ }),

/***/ 5067:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const ListFlexibleIPsRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
exports.ListFlexibleIPsRequest = ListFlexibleIPsRequest;


/***/ }),

/***/ 6424:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(3948);
exports.v1beta1 = index_gen;


/***/ }),

/***/ 2174:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const content_gen = __nccwpck_require__(3772);
const marshalling_gen = __nccwpck_require__(9045);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par", "nl-ams", "pl-waw"];
  pageOfListNamespaces = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/namespaces`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListNamespacesResponse
  );
  /**
   * List all your namespaces. List all existing namespaces in the specified
   * region.
   *
   * @param request - The request {@link ListNamespacesRequest}
   * @returns A Promise of ListNamespacesResponse
   */
  listNamespaces = (request = {}) => resourcePaginator.enrichForPagination("namespaces", this.pageOfListNamespaces, request);
  /**
   * Get a namespace. Get the namespace associated with the specified ID.
   *
   * @param request - The request {@link GetNamespaceRequest}
   * @returns A Promise of Namespace
   */
  getNamespace = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/namespaces/${marshalling.validatePathParam("namespaceId", request.namespaceId)}`
    },
    marshalling_gen.unmarshalNamespace
  );
  /**
   * Waits for {@link Namespace} to be in a final state.
   *
   * @param request - The request {@link GetNamespaceRequest}
   * @param options - The waiting options
   * @returns A Promise of Namespace
   */
  waitForNamespace = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.NAMESPACE_TRANSIENT_STATUSES.includes(res.status))),
    this.getNamespace,
    request,
    options
  );
  /**
   * Create a new namespace. Create a new namespace in a specified Organization
   * or Project.
   *
   * @param request - The request {@link CreateNamespaceRequest}
   * @returns A Promise of Namespace
   */
  createNamespace = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateNamespaceRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/namespaces`
    },
    marshalling_gen.unmarshalNamespace
  );
  /**
   * Update an existing namespace. Update the namespace associated with the
   * specified ID.
   *
   * @param request - The request {@link UpdateNamespaceRequest}
   * @returns A Promise of Namespace
   */
  updateNamespace = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateNamespaceRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/namespaces/${marshalling.validatePathParam("namespaceId", request.namespaceId)}`
    },
    marshalling_gen.unmarshalNamespace
  );
  /**
   * Delete an existing namespace. Delete the namespace associated with the
   * specified ID.
   *
   * @param request - The request {@link DeleteNamespaceRequest}
   * @returns A Promise of Namespace
   */
  deleteNamespace = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/namespaces/${marshalling.validatePathParam("namespaceId", request.namespaceId)}`
    },
    marshalling_gen.unmarshalNamespace
  );
  pageOfListFunctions = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/functions`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["namespace_id", request.namespaceId],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListFunctionsResponse
  );
  /**
   * List all your functions.
   *
   * @param request - The request {@link ListFunctionsRequest}
   * @returns A Promise of ListFunctionsResponse
   */
  listFunctions = (request) => resourcePaginator.enrichForPagination("functions", this.pageOfListFunctions, request);
  /**
   * Get a function. Get the function associated with the specified ID.
   *
   * @param request - The request {@link GetFunctionRequest}
   * @returns A Promise of Function
   */
  getFunction = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/functions/${marshalling.validatePathParam("functionId", request.functionId)}`
    },
    marshalling_gen.unmarshalFunction
  );
  /**
   * Waits for {@link Function} to be in a final state.
   *
   * @param request - The request {@link GetFunctionRequest}
   * @param options - The waiting options
   * @returns A Promise of Function
   */
  waitForFunction = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.FUNCTION_TRANSIENT_STATUSES.includes(res.status))),
    this.getFunction,
    request,
    options
  );
  /**
   * Create a new function. Create a new function in the specified region for a
   * specified Organization or Project.
   *
   * @param request - The request {@link CreateFunctionRequest}
   * @returns A Promise of Function
   */
  createFunction = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateFunctionRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/functions`
    },
    marshalling_gen.unmarshalFunction
  );
  /**
   * Update an existing function. Update the function associated with the
   * specified ID.
   *
   * @param request - The request {@link UpdateFunctionRequest}
   * @returns A Promise of Function
   */
  updateFunction = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateFunctionRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/functions/${marshalling.validatePathParam("functionId", request.functionId)}`
    },
    marshalling_gen.unmarshalFunction
  );
  /**
   * Delete a function. Delete the function associated with the specified ID.
   *
   * @param request - The request {@link DeleteFunctionRequest}
   * @returns A Promise of Function
   */
  deleteFunction = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/functions/${marshalling.validatePathParam("functionId", request.functionId)}`
    },
    marshalling_gen.unmarshalFunction
  );
  /**
   * Deploy a function. Deploy a function associated with the specified ID.
   *
   * @param request - The request {@link DeployFunctionRequest}
   * @returns A Promise of Function
   */
  deployFunction = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/functions/${marshalling.validatePathParam("functionId", request.functionId)}/deploy`
    },
    marshalling_gen.unmarshalFunction
  );
  /**
   * List function runtimes. List available function runtimes.
   *
   * @param request - The request {@link ListFunctionRuntimesRequest}
   * @returns A Promise of ListFunctionRuntimesResponse
   */
  listFunctionRuntimes = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/runtimes`
    },
    marshalling_gen.unmarshalListFunctionRuntimesResponse
  );
  /**
   * Get an upload URL of a function. Get an upload URL of a function associated
   * with the specified ID.
   *
   * @param request - The request {@link GetFunctionUploadURLRequest}
   * @returns A Promise of UploadURL
   */
  getFunctionUploadURL = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/functions/${marshalling.validatePathParam("functionId", request.functionId)}/upload-url`,
      urlParams: marshalling.urlParams(["content_length", request.contentLength])
    },
    marshalling_gen.unmarshalUploadURL
  );
  /**
   * Get a download URL of a function. Get a download URL for a function
   * associated with the specified ID.
   *
   * @param request - The request {@link GetFunctionDownloadURLRequest}
   * @returns A Promise of DownloadURL
   */
  getFunctionDownloadURL = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/functions/${marshalling.validatePathParam("functionId", request.functionId)}/download-url`
    },
    marshalling_gen.unmarshalDownloadURL
  );
  pageOfListCrons = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/crons`,
      urlParams: marshalling.urlParams(
        ["function_id", request.functionId],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListCronsResponse
  );
  /**
   * List all crons. List all the cronjobs in a specified region.
   *
   * @param request - The request {@link ListCronsRequest}
   * @returns A Promise of ListCronsResponse
   */
  listCrons = (request) => resourcePaginator.enrichForPagination("crons", this.pageOfListCrons, request);
  /**
   * Get a cron. Get the cron associated with the specified ID.
   *
   * @param request - The request {@link GetCronRequest}
   * @returns A Promise of Cron
   */
  getCron = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/crons/${marshalling.validatePathParam("cronId", request.cronId)}`
    },
    marshalling_gen.unmarshalCron
  );
  /**
   * Waits for {@link Cron} to be in a final state.
   *
   * @param request - The request {@link GetCronRequest}
   * @param options - The waiting options
   * @returns A Promise of Cron
   */
  waitForCron = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.CRON_TRANSIENT_STATUSES.includes(res.status))),
    this.getCron,
    request,
    options
  );
  /**
   * Create a new cron. Create a new cronjob for a function with the specified
   * ID.
   *
   * @param request - The request {@link CreateCronRequest}
   * @returns A Promise of Cron
   */
  createCron = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateCronRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/crons`
    },
    marshalling_gen.unmarshalCron
  );
  /**
   * Update an existing cron. Update the cron associated with the specified ID.
   *
   * @param request - The request {@link UpdateCronRequest}
   * @returns A Promise of Cron
   */
  updateCron = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateCronRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/crons/${marshalling.validatePathParam("cronId", request.cronId)}`
    },
    marshalling_gen.unmarshalCron
  );
  /**
   * Delete an existing cron. Delete the cron associated with the specified ID.
   *
   * @param request - The request {@link DeleteCronRequest}
   * @returns A Promise of Cron
   */
  deleteCron = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/crons/${marshalling.validatePathParam("cronId", request.cronId)}`
    },
    marshalling_gen.unmarshalCron
  );
  pageOfListDomains = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/domains`,
      urlParams: marshalling.urlParams(
        ["function_id", request.functionId],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListDomainsResponse
  );
  /**
   * List all domain name bindings. List all domain name bindings in a specified
   * region.
   *
   * @param request - The request {@link ListDomainsRequest}
   * @returns A Promise of ListDomainsResponse
   */
  listDomains = (request) => resourcePaginator.enrichForPagination("domains", this.pageOfListDomains, request);
  /**
   * Get a domain name binding. Get a domain name binding for the function with
   * the specified ID.
   *
   * @param request - The request {@link GetDomainRequest}
   * @returns A Promise of Domain
   */
  getDomain = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/domains/${marshalling.validatePathParam("domainId", request.domainId)}`
    },
    marshalling_gen.unmarshalDomain
  );
  /**
   * Waits for {@link Domain} to be in a final state.
   *
   * @param request - The request {@link GetDomainRequest}
   * @param options - The waiting options
   * @returns A Promise of Domain
   */
  waitForDomain = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.DOMAIN_TRANSIENT_STATUSES.includes(res.status))),
    this.getDomain,
    request,
    options
  );
  /**
   * Create a domain name binding. Create a domain name binding for the function
   * with the specified ID.
   *
   * @param request - The request {@link CreateDomainRequest}
   * @returns A Promise of Domain
   */
  createDomain = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateDomainRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/domains`
    },
    marshalling_gen.unmarshalDomain
  );
  /**
   * Delete a domain name binding. Delete a domain name binding for the function
   * with the specified ID.
   *
   * @param request - The request {@link DeleteDomainRequest}
   * @returns A Promise of Domain
   */
  deleteDomain = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/domains/${marshalling.validatePathParam("domainId", request.domainId)}`
    },
    marshalling_gen.unmarshalDomain
  );
  /**
   * Create a JWT token. Deprecated in favor of CreateToken.
   *
   * @deprecated
   * @param request - The request {@link IssueJWTRequest}
   * @returns A Promise of Token
   */
  issueJWT = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/issue-jwt`,
      urlParams: marshalling.urlParams(
        ["expires_at", request.expiresAt],
        ...Object.entries(
          marshalling.resolveOneOf([
            { param: "function_id", value: request.functionId },
            { param: "namespace_id", value: request.namespaceId }
          ])
        )
      )
    },
    marshalling_gen.unmarshalToken
  );
  /**
   * Create a new revocable token.
   *
   * @param request - The request {@link CreateTokenRequest}
   * @returns A Promise of Token
   */
  createToken = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateTokenRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/tokens`
    },
    marshalling_gen.unmarshalToken
  );
  /**
   * Get a token.
   *
   * @param request - The request {@link GetTokenRequest}
   * @returns A Promise of Token
   */
  getToken = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/tokens/${marshalling.validatePathParam("tokenId", request.tokenId)}`
    },
    marshalling_gen.unmarshalToken
  );
  /**
   * Waits for {@link Token} to be in a final state.
   *
   * @param request - The request {@link GetTokenRequest}
   * @param options - The waiting options
   * @returns A Promise of Token
   */
  waitForToken = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.TOKEN_TRANSIENT_STATUSES.includes(res.status))),
    this.getToken,
    request,
    options
  );
  pageOfListTokens = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/tokens`,
      urlParams: marshalling.urlParams(
        ["function_id", request.functionId],
        ["namespace_id", request.namespaceId],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListTokensResponse
  );
  /**
   * List all tokens.
   *
   * @param request - The request {@link ListTokensRequest}
   * @returns A Promise of ListTokensResponse
   */
  listTokens = (request = {}) => resourcePaginator.enrichForPagination("tokens", this.pageOfListTokens, request);
  /**
   * Delete a token.
   *
   * @param request - The request {@link DeleteTokenRequest}
   * @returns A Promise of Token
   */
  deleteToken = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/tokens/${marshalling.validatePathParam("tokenId", request.tokenId)}`
    },
    marshalling_gen.unmarshalToken
  );
  /**
   * Create a trigger. Create a new trigger for a specified function.
   *
   * @param request - The request {@link CreateTriggerRequest}
   * @returns A Promise of Trigger
   */
  createTrigger = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateTriggerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/triggers`
    },
    marshalling_gen.unmarshalTrigger
  );
  /**
   * Get a trigger. Get a trigger with a specified ID.
   *
   * @param request - The request {@link GetTriggerRequest}
   * @returns A Promise of Trigger
   */
  getTrigger = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/triggers/${marshalling.validatePathParam("triggerId", request.triggerId)}`
    },
    marshalling_gen.unmarshalTrigger
  );
  /**
   * Waits for {@link Trigger} to be in a final state.
   *
   * @param request - The request {@link GetTriggerRequest}
   * @param options - The waiting options
   * @returns A Promise of Trigger
   */
  waitForTrigger = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.TRIGGER_TRANSIENT_STATUSES.includes(res.status))),
    this.getTrigger,
    request,
    options
  );
  pageOfListTriggers = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/triggers`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ...Object.entries(
          marshalling.resolveOneOf([
            { param: "function_id", value: request.functionId },
            { param: "namespace_id", value: request.namespaceId },
            {
              default: this.client.settings.defaultProjectId,
              param: "project_id",
              value: request.projectId
            }
          ])
        )
      )
    },
    marshalling_gen.unmarshalListTriggersResponse
  );
  /**
   * List all triggers. List all triggers belonging to a specified Organization
   * or Project.
   *
   * @param request - The request {@link ListTriggersRequest}
   * @returns A Promise of ListTriggersResponse
   */
  listTriggers = (request = {}) => resourcePaginator.enrichForPagination("triggers", this.pageOfListTriggers, request);
  /**
   * Update a trigger. Update a trigger with a specified ID.
   *
   * @param request - The request {@link UpdateTriggerRequest}
   * @returns A Promise of Trigger
   */
  updateTrigger = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateTriggerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/triggers/${marshalling.validatePathParam("triggerId", request.triggerId)}`
    },
    marshalling_gen.unmarshalTrigger
  );
  /**
   * Delete a trigger. Delete a trigger with a specified ID.
   *
   * @param request - The request {@link DeleteTriggerRequest}
   * @returns A Promise of Trigger
   */
  deleteTrigger = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/functions/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/triggers/${marshalling.validatePathParam("triggerId", request.triggerId)}`
    },
    marshalling_gen.unmarshalTrigger
  );
}
exports.API = API;


/***/ }),

/***/ 3772:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const CRON_TRANSIENT_STATUSES = [
  "deleting",
  "creating",
  "pending"
];
const DOMAIN_TRANSIENT_STATUSES = [
  "deleting",
  "creating",
  "pending"
];
const FUNCTION_TRANSIENT_STATUSES = [
  "deleting",
  "creating",
  "pending"
];
const NAMESPACE_TRANSIENT_STATUSES = [
  "deleting",
  "creating",
  "pending"
];
const TOKEN_TRANSIENT_STATUSES = ["deleting", "creating"];
const TRIGGER_TRANSIENT_STATUSES = [
  "deleting",
  "creating",
  "pending"
];
exports.CRON_TRANSIENT_STATUSES = CRON_TRANSIENT_STATUSES;
exports.DOMAIN_TRANSIENT_STATUSES = DOMAIN_TRANSIENT_STATUSES;
exports.FUNCTION_TRANSIENT_STATUSES = FUNCTION_TRANSIENT_STATUSES;
exports.NAMESPACE_TRANSIENT_STATUSES = NAMESPACE_TRANSIENT_STATUSES;
exports.TOKEN_TRANSIENT_STATUSES = TOKEN_TRANSIENT_STATUSES;
exports.TRIGGER_TRANSIENT_STATUSES = TRIGGER_TRANSIENT_STATUSES;


/***/ }),

/***/ 3948:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(2174);
const content_gen = __nccwpck_require__(3772);
const validationRules_gen = __nccwpck_require__(8668);
exports.API = api_gen.API;
exports.CRON_TRANSIENT_STATUSES = content_gen.CRON_TRANSIENT_STATUSES;
exports.DOMAIN_TRANSIENT_STATUSES = content_gen.DOMAIN_TRANSIENT_STATUSES;
exports.FUNCTION_TRANSIENT_STATUSES = content_gen.FUNCTION_TRANSIENT_STATUSES;
exports.NAMESPACE_TRANSIENT_STATUSES = content_gen.NAMESPACE_TRANSIENT_STATUSES;
exports.TOKEN_TRANSIENT_STATUSES = content_gen.TOKEN_TRANSIENT_STATUSES;
exports.TRIGGER_TRANSIENT_STATUSES = content_gen.TRIGGER_TRANSIENT_STATUSES;
exports.ValidationRules = validationRules_gen;


/***/ }),

/***/ 9045:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const randomName = __nccwpck_require__(8118);
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalCron = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Cron' failed as data isn't a dictionary.`
    );
  }
  return {
    args: data.args,
    functionId: data.function_id,
    id: data.id,
    name: data.name,
    schedule: data.schedule,
    status: data.status
  };
};
const unmarshalDomain = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Domain' failed as data isn't a dictionary.`
    );
  }
  return {
    errorMessage: data.error_message,
    functionId: data.function_id,
    hostname: data.hostname,
    id: data.id,
    status: data.status,
    url: data.url
  };
};
const unmarshalSecretHashedValue = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SecretHashedValue' failed as data isn't a dictionary.`
    );
  }
  return {
    hashedValue: data.hashed_value,
    key: data.key
  };
};
const unmarshalFunction = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Function' failed as data isn't a dictionary.`
    );
  }
  return {
    buildMessage: data.build_message,
    cpuLimit: data.cpu_limit,
    description: data.description,
    domainName: data.domain_name,
    environmentVariables: data.environment_variables,
    errorMessage: data.error_message,
    handler: data.handler,
    httpOption: data.http_option,
    id: data.id,
    maxScale: data.max_scale,
    memoryLimit: data.memory_limit,
    minScale: data.min_scale,
    name: data.name,
    namespaceId: data.namespace_id,
    privacy: data.privacy,
    region: data.region,
    runtime: data.runtime,
    runtimeMessage: data.runtime_message,
    sandbox: data.sandbox,
    secretEnvironmentVariables: marshalling.unmarshalArrayOfObject(
      data.secret_environment_variables,
      unmarshalSecretHashedValue
    ),
    status: data.status,
    timeout: data.timeout
  };
};
const unmarshalNamespace = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Namespace' failed as data isn't a dictionary.`
    );
  }
  return {
    description: data.description,
    environmentVariables: data.environment_variables,
    errorMessage: data.error_message,
    id: data.id,
    name: data.name,
    organizationId: data.organization_id,
    projectId: data.project_id,
    region: data.region,
    registryEndpoint: data.registry_endpoint,
    registryNamespaceId: data.registry_namespace_id,
    secretEnvironmentVariables: marshalling.unmarshalArrayOfObject(
      data.secret_environment_variables,
      unmarshalSecretHashedValue
    ),
    status: data.status
  };
};
const unmarshalToken = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Token' failed as data isn't a dictionary.`
    );
  }
  return {
    description: data.description,
    expiresAt: marshalling.unmarshalDate(data.expires_at),
    functionId: data.function_id,
    id: data.id,
    namespaceId: data.namespace_id,
    publicKey: data.public_key,
    status: data.status,
    token: data.token
  };
};
const unmarshalTriggerMnqNatsClientConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'TriggerMnqNatsClientConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    mnqCredentialId: data.mnq_credential_id,
    mnqNatsAccountId: data.mnq_nats_account_id,
    mnqProjectId: data.mnq_project_id,
    mnqRegion: data.mnq_region,
    subject: data.subject
  };
};
const unmarshalTriggerMnqSqsClientConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'TriggerMnqSqsClientConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    mnqCredentialId: data.mnq_credential_id,
    mnqProjectId: data.mnq_project_id,
    mnqRegion: data.mnq_region,
    queue: data.queue
  };
};
const unmarshalTriggerSqsClientConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'TriggerSqsClientConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    accessKey: data.access_key,
    endpoint: data.endpoint,
    queueUrl: data.queue_url,
    secretKey: data.secret_key
  };
};
const unmarshalTrigger = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Trigger' failed as data isn't a dictionary.`
    );
  }
  return {
    description: data.description,
    errorMessage: data.error_message,
    functionId: data.function_id,
    id: data.id,
    inputType: data.input_type,
    name: data.name,
    scwNatsConfig: data.scw_nats_config ? unmarshalTriggerMnqNatsClientConfig(data.scw_nats_config) : void 0,
    scwSqsConfig: data.scw_sqs_config ? unmarshalTriggerMnqSqsClientConfig(data.scw_sqs_config) : void 0,
    sqsConfig: data.sqs_config ? unmarshalTriggerSqsClientConfig(data.sqs_config) : void 0,
    status: data.status
  };
};
const unmarshalDownloadURL = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DownloadURL' failed as data isn't a dictionary.`
    );
  }
  return {
    headers: data.headers,
    url: data.url
  };
};
const unmarshalListCronsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListCronsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    crons: marshalling.unmarshalArrayOfObject(data.crons, unmarshalCron),
    totalCount: data.total_count
  };
};
const unmarshalListDomainsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDomainsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    domains: marshalling.unmarshalArrayOfObject(data.domains, unmarshalDomain),
    totalCount: data.total_count
  };
};
const unmarshalRuntime = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Runtime' failed as data isn't a dictionary.`
    );
  }
  return {
    codeSample: data.code_sample,
    defaultHandler: data.default_handler,
    extension: data.extension,
    implementation: data.implementation,
    language: data.language,
    logoUrl: data.logo_url,
    name: data.name,
    status: data.status,
    statusMessage: data.status_message,
    version: data.version
  };
};
const unmarshalListFunctionRuntimesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListFunctionRuntimesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    runtimes: marshalling.unmarshalArrayOfObject(data.runtimes, unmarshalRuntime),
    totalCount: data.total_count
  };
};
const unmarshalListFunctionsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListFunctionsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    functions: marshalling.unmarshalArrayOfObject(data.functions, unmarshalFunction),
    totalCount: data.total_count
  };
};
const unmarshalListNamespacesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListNamespacesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    namespaces: marshalling.unmarshalArrayOfObject(data.namespaces, unmarshalNamespace),
    totalCount: data.total_count
  };
};
const unmarshalListTokensResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListTokensResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    tokens: marshalling.unmarshalArrayOfObject(data.tokens, unmarshalToken),
    totalCount: data.total_count
  };
};
const unmarshalListTriggersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListTriggersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    triggers: marshalling.unmarshalArrayOfObject(data.triggers, unmarshalTrigger)
  };
};
const unmarshalUploadURL = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UploadURL' failed as data isn't a dictionary.`
    );
  }
  return {
    headers: data.headers,
    url: data.url
  };
};
const marshalCreateCronRequest = (request, defaults) => ({
  args: request.args,
  function_id: request.functionId,
  name: request.name,
  schedule: request.schedule
});
const marshalCreateDomainRequest = (request, defaults) => ({
  function_id: request.functionId,
  hostname: request.hostname
});
const marshalSecret = (request, defaults) => ({
  key: request.key,
  value: request.value
});
const marshalCreateFunctionRequest = (request, defaults) => ({
  description: request.description,
  environment_variables: request.environmentVariables,
  handler: request.handler,
  http_option: request.httpOption,
  max_scale: request.maxScale,
  memory_limit: request.memoryLimit,
  min_scale: request.minScale,
  name: request.name || randomName("fn"),
  namespace_id: request.namespaceId,
  privacy: request.privacy,
  runtime: request.runtime,
  sandbox: request.sandbox,
  secret_environment_variables: request.secretEnvironmentVariables !== void 0 ? request.secretEnvironmentVariables.map(
    (elt) => marshalSecret(elt)
  ) : void 0,
  timeout: request.timeout
});
const marshalCreateNamespaceRequest = (request, defaults) => ({
  description: request.description,
  environment_variables: request.environmentVariables,
  name: request.name || randomName("ns"),
  project_id: request.projectId ?? defaults.defaultProjectId,
  secret_environment_variables: request.secretEnvironmentVariables !== void 0 ? request.secretEnvironmentVariables.map(
    (elt) => marshalSecret(elt)
  ) : void 0
});
const marshalCreateTokenRequest = (request, defaults) => ({
  description: request.description,
  expires_at: request.expiresAt,
  ...marshalling.resolveOneOf([
    { param: "function_id", value: request.functionId },
    { param: "namespace_id", value: request.namespaceId }
  ])
});
const marshalCreateTriggerRequestMnqNatsClientConfig = (request, defaults) => ({
  mnq_nats_account_id: request.mnqNatsAccountId,
  mnq_project_id: request.mnqProjectId,
  mnq_region: request.mnqRegion,
  subject: request.subject
});
const marshalCreateTriggerRequestMnqSqsClientConfig = (request, defaults) => ({
  mnq_project_id: request.mnqProjectId,
  mnq_region: request.mnqRegion,
  queue: request.queue
});
const marshalCreateTriggerRequestSqsClientConfig = (request, defaults) => ({
  access_key: request.accessKey,
  endpoint: request.endpoint,
  queue_url: request.queueUrl,
  secret_key: request.secretKey
});
const marshalCreateTriggerRequest = (request, defaults) => ({
  description: request.description,
  function_id: request.functionId,
  name: request.name,
  ...marshalling.resolveOneOf([
    {
      param: "scw_sqs_config",
      value: request.scwSqsConfig !== void 0 ? marshalCreateTriggerRequestMnqSqsClientConfig(
        request.scwSqsConfig
      ) : void 0
    },
    {
      param: "scw_nats_config",
      value: request.scwNatsConfig !== void 0 ? marshalCreateTriggerRequestMnqNatsClientConfig(
        request.scwNatsConfig
      ) : void 0
    },
    {
      param: "sqs_config",
      value: request.sqsConfig !== void 0 ? marshalCreateTriggerRequestSqsClientConfig(
        request.sqsConfig
      ) : void 0
    }
  ])
});
const marshalUpdateCronRequest = (request, defaults) => ({
  args: request.args,
  function_id: request.functionId,
  name: request.name,
  schedule: request.schedule
});
const marshalUpdateFunctionRequest = (request, defaults) => ({
  description: request.description,
  environment_variables: request.environmentVariables,
  handler: request.handler,
  http_option: request.httpOption,
  max_scale: request.maxScale,
  memory_limit: request.memoryLimit,
  min_scale: request.minScale,
  privacy: request.privacy,
  redeploy: request.redeploy,
  runtime: request.runtime,
  sandbox: request.sandbox,
  secret_environment_variables: request.secretEnvironmentVariables !== void 0 ? request.secretEnvironmentVariables.map(
    (elt) => marshalSecret(elt)
  ) : void 0,
  timeout: request.timeout
});
const marshalUpdateNamespaceRequest = (request, defaults) => ({
  description: request.description,
  environment_variables: request.environmentVariables,
  secret_environment_variables: request.secretEnvironmentVariables !== void 0 ? request.secretEnvironmentVariables.map(
    (elt) => marshalSecret(elt)
  ) : void 0
});
const marshalUpdateTriggerRequestSqsClientConfig = (request, defaults) => ({
  access_key: request.accessKey,
  secret_key: request.secretKey
});
const marshalUpdateTriggerRequest = (request, defaults) => ({
  description: request.description,
  name: request.name,
  ...marshalling.resolveOneOf([
    {
      param: "sqs_config",
      value: request.sqsConfig !== void 0 ? marshalUpdateTriggerRequestSqsClientConfig(
        request.sqsConfig
      ) : void 0
    }
  ])
});
exports.marshalCreateCronRequest = marshalCreateCronRequest;
exports.marshalCreateDomainRequest = marshalCreateDomainRequest;
exports.marshalCreateFunctionRequest = marshalCreateFunctionRequest;
exports.marshalCreateNamespaceRequest = marshalCreateNamespaceRequest;
exports.marshalCreateTokenRequest = marshalCreateTokenRequest;
exports.marshalCreateTriggerRequest = marshalCreateTriggerRequest;
exports.marshalUpdateCronRequest = marshalUpdateCronRequest;
exports.marshalUpdateFunctionRequest = marshalUpdateFunctionRequest;
exports.marshalUpdateNamespaceRequest = marshalUpdateNamespaceRequest;
exports.marshalUpdateTriggerRequest = marshalUpdateTriggerRequest;
exports.unmarshalCron = unmarshalCron;
exports.unmarshalDomain = unmarshalDomain;
exports.unmarshalDownloadURL = unmarshalDownloadURL;
exports.unmarshalFunction = unmarshalFunction;
exports.unmarshalListCronsResponse = unmarshalListCronsResponse;
exports.unmarshalListDomainsResponse = unmarshalListDomainsResponse;
exports.unmarshalListFunctionRuntimesResponse = unmarshalListFunctionRuntimesResponse;
exports.unmarshalListFunctionsResponse = unmarshalListFunctionsResponse;
exports.unmarshalListNamespacesResponse = unmarshalListNamespacesResponse;
exports.unmarshalListTokensResponse = unmarshalListTokensResponse;
exports.unmarshalListTriggersResponse = unmarshalListTriggersResponse;
exports.unmarshalNamespace = unmarshalNamespace;
exports.unmarshalToken = unmarshalToken;
exports.unmarshalTrigger = unmarshalTrigger;
exports.unmarshalUploadURL = unmarshalUploadURL;


/***/ }),

/***/ 8668:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const CreateTriggerRequest = {
  description: {
    maxLength: 255
  },
  name: {
    maxLength: 50,
    minLength: 1
  }
};
const CreateTriggerRequestMnqNatsClientConfig = {
  mnqRegion: {
    maxLength: 20,
    minLength: 1
  },
  subject: {
    maxLength: 100,
    minLength: 1,
    pattern: /^[^\s]+$/
  }
};
const CreateTriggerRequestMnqSqsClientConfig = {
  mnqRegion: {
    maxLength: 20,
    minLength: 1
  },
  queue: {
    maxLength: 100,
    minLength: 1
  }
};
const UpdateTriggerRequest = {
  description: {
    maxLength: 255
  },
  name: {
    maxLength: 50,
    minLength: 1
  }
};
exports.CreateTriggerRequest = CreateTriggerRequest;
exports.CreateTriggerRequestMnqNatsClientConfig = CreateTriggerRequestMnqNatsClientConfig;
exports.CreateTriggerRequestMnqSqsClientConfig = CreateTriggerRequestMnqSqsClientConfig;
exports.UpdateTriggerRequest = UpdateTriggerRequest;


/***/ }),

/***/ 6703:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(7162);
exports.v1alpha1 = index_gen;


/***/ }),

/***/ 6439:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const marshalling_gen = __nccwpck_require__(1718);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  pageOfListSSHKeys = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/iam/v1alpha1/ssh-keys`,
      urlParams: marshalling.urlParams(
        ["disabled", request.disabled],
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListSSHKeysResponse
  );
  /**
   * List SSH keys. List SSH keys. By default, the SSH keys listed are ordered
   * by creation date in ascending order. This can be modified via the
   * `order_by` field. You can define additional parameters for your query such
   * as `organization_id`, `name`, `project_id` and `disabled`.
   *
   * @param request - The request {@link ListSSHKeysRequest}
   * @returns A Promise of ListSSHKeysResponse
   */
  listSSHKeys = (request = {}) => resourcePaginator.enrichForPagination("sshKeys", this.pageOfListSSHKeys, request);
  /**
   * Create an SSH key. Add a new SSH key to a Scaleway Project. You must
   * specify the `name`, `public_key` and `project_id`.
   *
   * @param request - The request {@link CreateSSHKeyRequest}
   * @returns A Promise of SSHKey
   */
  createSSHKey = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateSSHKeyRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/iam/v1alpha1/ssh-keys`
    },
    marshalling_gen.unmarshalSSHKey
  );
  /**
   * Get an SSH key. Retrieve information about a given SSH key, specified by
   * the `ssh_key_id` parameter. The SSH key's full details, including `id`,
   * `name`, `public_key`, and `project_id` are returned in the response.
   *
   * @param request - The request {@link GetSSHKeyRequest}
   * @returns A Promise of SSHKey
   */
  getSSHKey = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/iam/v1alpha1/ssh-keys/${marshalling.validatePathParam("sshKeyId", request.sshKeyId)}`
    },
    marshalling_gen.unmarshalSSHKey
  );
  /**
   * Update an SSH key. Update the parameters of an SSH key, including `name`
   * and `disable`.
   *
   * @param request - The request {@link UpdateSSHKeyRequest}
   * @returns A Promise of SSHKey
   */
  updateSSHKey = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateSSHKeyRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/iam/v1alpha1/ssh-keys/${marshalling.validatePathParam("sshKeyId", request.sshKeyId)}`
    },
    marshalling_gen.unmarshalSSHKey
  );
  /**
   * Delete an SSH key. Delete a given SSH key, specified by the `ssh_key_id`.
   * Deleting an SSH is permanent, and cannot be undone. Note that you might
   * need to update any configurations that used the SSH key.
   *
   * @param request - The request {@link DeleteSSHKeyRequest}
   */
  deleteSSHKey = (request) => this.client.fetch({
    method: "DELETE",
    path: `/iam/v1alpha1/ssh-keys/${marshalling.validatePathParam("sshKeyId", request.sshKeyId)}`
  });
  pageOfListUsers = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/iam/v1alpha1/users`,
      urlParams: marshalling.urlParams(
        ["mfa", request.mfa],
        ["order_by", request.orderBy],
        [
          "organization_id",
          request.organizationId ?? this.client.settings.defaultOrganizationId
        ],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["tag", request.tag],
        ["user_ids", request.userIds]
      )
    },
    marshalling_gen.unmarshalListUsersResponse
  );
  /**
   * List users of an Organization. List the users of an Organization. By
   * default, the users listed are ordered by creation date in ascending order.
   * This can be modified via the `order_by` field. You must define the
   * `organization_id` in the query path of your request. You can also define
   * additional parameters for your query such as `user_ids`.
   *
   * @param request - The request {@link ListUsersRequest}
   * @returns A Promise of ListUsersResponse
   */
  listUsers = (request = {}) => resourcePaginator.enrichForPagination("users", this.pageOfListUsers, request);
  /**
   * Get a given user. Retrieve information about a user, specified by the
   * `user_id` parameter. The user's full details, including `id`, `email`,
   * `organization_id`, `status` and `mfa` are returned in the response.
   *
   * @param request - The request {@link GetUserRequest}
   * @returns A Promise of User
   */
  getUser = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/iam/v1alpha1/users/${marshalling.validatePathParam("userId", request.userId)}`
    },
    marshalling_gen.unmarshalUser
  );
  /**
   * Update a user. Update the parameters of a user, including `tags`.
   *
   * @param request - The request {@link UpdateUserRequest}
   * @returns A Promise of User
   */
  updateUser = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateUserRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/iam/v1alpha1/users/${marshalling.validatePathParam("userId", request.userId)}`
    },
    marshalling_gen.unmarshalUser
  );
  /**
   * Delete a guest user from an Organization. Remove a user from an
   * Organization in which they are a guest. You must define the `user_id` in
   * your request. Note that removing a user from an Organization automatically
   * deletes their API keys, and any policies directly attached to them become
   * orphaned.
   *
   * @param request - The request {@link DeleteUserRequest}
   */
  deleteUser = (request) => this.client.fetch({
    method: "DELETE",
    path: `/iam/v1alpha1/users/${marshalling.validatePathParam("userId", request.userId)}`
  });
  /**
   * Create a new user. Create a new user. You must define the `organization_id`
   * and the `email` in your request.
   *
   * @param request - The request {@link CreateUserRequest}
   * @returns A Promise of User
   */
  createUser = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateUserRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/iam/v1alpha1/users`
    },
    marshalling_gen.unmarshalUser
  );
  pageOfListApplications = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/iam/v1alpha1/applications`,
      urlParams: marshalling.urlParams(
        ["application_ids", request.applicationIds],
        ["editable", request.editable],
        ["name", request.name],
        ["order_by", request.orderBy],
        [
          "organization_id",
          request.organizationId ?? this.client.settings.defaultOrganizationId
        ],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["tag", request.tag]
      )
    },
    marshalling_gen.unmarshalListApplicationsResponse
  );
  /**
   * List applications of an Organization. List the applications of an
   * Organization. By default, the applications listed are ordered by creation
   * date in ascending order. This can be modified via the `order_by` field. You
   * must define the `organization_id` in the query path of your request. You
   * can also define additional parameters for your query such as
   * `application_ids`.
   *
   * @param request - The request {@link ListApplicationsRequest}
   * @returns A Promise of ListApplicationsResponse
   */
  listApplications = (request = {}) => resourcePaginator.enrichForPagination("applications", this.pageOfListApplications, request);
  /**
   * Create a new application. Create a new application. You must define the
   * `name` parameter in the request.
   *
   * @param request - The request {@link CreateApplicationRequest}
   * @returns A Promise of Application
   */
  createApplication = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateApplicationRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/iam/v1alpha1/applications`
    },
    marshalling_gen.unmarshalApplication
  );
  /**
   * Get a given application. Retrieve information about an application,
   * specified by the `application_id` parameter. The application's full
   * details, including `id`, `email`, `organization_id`, `status` and
   * `two_factor_enabled` are returned in the response.
   *
   * @param request - The request {@link GetApplicationRequest}
   * @returns A Promise of Application
   */
  getApplication = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/iam/v1alpha1/applications/${marshalling.validatePathParam("applicationId", request.applicationId)}`
    },
    marshalling_gen.unmarshalApplication
  );
  /**
   * Update an application. Update the parameters of an application, including
   * `name` and `description`.
   *
   * @param request - The request {@link UpdateApplicationRequest}
   * @returns A Promise of Application
   */
  updateApplication = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateApplicationRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/iam/v1alpha1/applications/${marshalling.validatePathParam("applicationId", request.applicationId)}`
    },
    marshalling_gen.unmarshalApplication
  );
  /**
   * Delete an application. Delete an application. Note that this action is
   * irreversible and will automatically delete the application's API keys.
   * Policies attached to users and applications via this group will no longer
   * apply.
   *
   * @param request - The request {@link DeleteApplicationRequest}
   */
  deleteApplication = (request) => this.client.fetch({
    method: "DELETE",
    path: `/iam/v1alpha1/applications/${marshalling.validatePathParam("applicationId", request.applicationId)}`
  });
  pageOfListGroups = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/iam/v1alpha1/groups`,
      urlParams: marshalling.urlParams(
        ["application_ids", request.applicationIds],
        ["group_ids", request.groupIds],
        ["name", request.name],
        ["order_by", request.orderBy],
        [
          "organization_id",
          request.organizationId ?? this.client.settings.defaultOrganizationId
        ],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["tag", request.tag],
        ["user_ids", request.userIds]
      )
    },
    marshalling_gen.unmarshalListGroupsResponse
  );
  /**
   * List groups. List groups. By default, the groups listed are ordered by
   * creation date in ascending order. This can be modified via the `order_by`
   * field. You can define additional parameters to filter your query. Use
   * `user_ids` or `application_ids` to list all groups certain users or
   * applications belong to.
   *
   * @param request - The request {@link ListGroupsRequest}
   * @returns A Promise of ListGroupsResponse
   */
  listGroups = (request = {}) => resourcePaginator.enrichForPagination("groups", this.pageOfListGroups, request);
  /**
   * Create a group. Create a new group. You must define the `name` and
   * `organization_id` parameters in the request.
   *
   * @param request - The request {@link CreateGroupRequest}
   * @returns A Promise of Group
   */
  createGroup = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateGroupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/iam/v1alpha1/groups`
    },
    marshalling_gen.unmarshalGroup
  );
  /**
   * Get a group. Retrive information about a given group, specified by the
   * `group_id` parameter. The group's full details, including `user_ids` and
   * `application_ids` are returned in the response.
   *
   * @param request - The request {@link GetGroupRequest}
   * @returns A Promise of Group
   */
  getGroup = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/iam/v1alpha1/groups/${marshalling.validatePathParam("groupId", request.groupId)}`
    },
    marshalling_gen.unmarshalGroup
  );
  /**
   * Update a group. Update the parameters of group, including `name` and
   * `description`.
   *
   * @param request - The request {@link UpdateGroupRequest}
   * @returns A Promise of Group
   */
  updateGroup = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateGroupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/iam/v1alpha1/groups/${marshalling.validatePathParam("groupId", request.groupId)}`
    },
    marshalling_gen.unmarshalGroup
  );
  /**
   * Overwrite users and applications of a group. Overwrite users and
   * applications configuration in a group. Any information that you add using
   * this command will overwrite the previous configuration.
   *
   * @param request - The request {@link SetGroupMembersRequest}
   * @returns A Promise of Group
   */
  setGroupMembers = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetGroupMembersRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/iam/v1alpha1/groups/${marshalling.validatePathParam("groupId", request.groupId)}/members`
    },
    marshalling_gen.unmarshalGroup
  );
  /**
   * Add a user or an application to a group. Add a user or an application to a
   * group. You can specify a `user_id` and and `application_id` in the body of
   * your request. Note that you can only add one of each per request.
   *
   * @param request - The request {@link AddGroupMemberRequest}
   * @returns A Promise of Group
   */
  addGroupMember = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalAddGroupMemberRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/iam/v1alpha1/groups/${marshalling.validatePathParam("groupId", request.groupId)}/add-member`
    },
    marshalling_gen.unmarshalGroup
  );
  /**
   * Add multiple users and applications to a group. Add multiple users and
   * applications to a group in a single call. You can specify an array of
   * `user_id`s and `application_id`s. Note that any existing users and
   * applications in the group will remain. To add new users/applications and
   * delete pre-existing ones, use the [Overwrite users and applications of a
   * group](#path-groups-overwrite-users-and-applications-of-a-group) method.
   *
   * @param request - The request {@link AddGroupMembersRequest}
   * @returns A Promise of Group
   */
  addGroupMembers = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalAddGroupMembersRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/iam/v1alpha1/groups/${marshalling.validatePathParam("groupId", request.groupId)}/add-members`
    },
    marshalling_gen.unmarshalGroup
  );
  /**
   * Remove a user or an application from a group. Remove a user or an
   * application from a group. You can specify a `user_id` and and
   * `application_id` in the body of your request. Note that you can only remove
   * one of each per request. Removing a user from a group means that any
   * permissions given to them via the group (i.e. from an attached policy) will
   * no longer apply. Be sure you want to remove these permissions from the user
   * before proceeding.
   *
   * @param request - The request {@link RemoveGroupMemberRequest}
   * @returns A Promise of Group
   */
  removeGroupMember = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRemoveGroupMemberRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/iam/v1alpha1/groups/${marshalling.validatePathParam("groupId", request.groupId)}/remove-member`
    },
    marshalling_gen.unmarshalGroup
  );
  /**
   * Delete a group. Delete a group. Note that this action is irreversible and
   * could delete permissions for group members. Policies attached to users and
   * applications via this group will no longer apply.
   *
   * @param request - The request {@link DeleteGroupRequest}
   */
  deleteGroup = (request) => this.client.fetch({
    method: "DELETE",
    path: `/iam/v1alpha1/groups/${marshalling.validatePathParam("groupId", request.groupId)}`
  });
  pageOfListPolicies = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/iam/v1alpha1/policies`,
      urlParams: marshalling.urlParams(
        ["application_ids", request.applicationIds],
        ["editable", request.editable],
        ["group_ids", request.groupIds],
        ["no_principal", request.noPrincipal],
        ["order_by", request.orderBy],
        [
          "organization_id",
          request.organizationId ?? this.client.settings.defaultOrganizationId
        ],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["policy_ids", request.policyIds],
        ["policy_name", request.policyName],
        ["tag", request.tag],
        ["user_ids", request.userIds]
      )
    },
    marshalling_gen.unmarshalListPoliciesResponse
  );
  /**
   * List policies of an Organization. List the policies of an Organization. By
   * default, the policies listed are ordered by creation date in ascending
   * order. This can be modified via the `order_by` field. You must define the
   * `organization_id` in the query path of your request. You can also define
   * additional parameters to filter your query, such as `user_ids`,
   * `groups_ids`, `application_ids`, and `policy_name`.
   *
   * @param request - The request {@link ListPoliciesRequest}
   * @returns A Promise of ListPoliciesResponse
   */
  listPolicies = (request = {}) => resourcePaginator.enrichForPagination("policies", this.pageOfListPolicies, request);
  /**
   * Create a new policy. Create a new application. You must define the `name`
   * parameter in the request. You can specify parameters such as `user_id`,
   * `groups_id`, `application_id`, `no_principal`, `rules` and its child
   * attributes.
   *
   * @param request - The request {@link CreatePolicyRequest}
   * @returns A Promise of Policy
   */
  createPolicy = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreatePolicyRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/iam/v1alpha1/policies`
    },
    marshalling_gen.unmarshalPolicy
  );
  /**
   * Get an existing policy. Retrieve information about a policy, speficified by
   * the `policy_id` parameter. The policy's full details, including `id`,
   * `name`, `organization_id`, `nb_rules` and `nb_scopes`, `nb_permission_sets`
   * are returned in the response.
   *
   * @param request - The request {@link GetPolicyRequest}
   * @returns A Promise of Policy
   */
  getPolicy = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/iam/v1alpha1/policies/${marshalling.validatePathParam("policyId", request.policyId)}`
    },
    marshalling_gen.unmarshalPolicy
  );
  /**
   * Update an existing policy. Update the parameters of a policy, including
   * `name`, `description`, `user_id`, `group_id`, `application_id` and
   * `no_principal`.
   *
   * @param request - The request {@link UpdatePolicyRequest}
   * @returns A Promise of Policy
   */
  updatePolicy = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdatePolicyRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/iam/v1alpha1/policies/${marshalling.validatePathParam("policyId", request.policyId)}`
    },
    marshalling_gen.unmarshalPolicy
  );
  /**
   * Delete a policy. Delete a policy. You must define specify the `policy_id`
   * parameter in your request. Note that when deleting a policy, all
   * permissions it gives to its principal (user, group or application) will be
   * revoked.
   *
   * @param request - The request {@link DeletePolicyRequest}
   */
  deletePolicy = (request) => this.client.fetch({
    method: "DELETE",
    path: `/iam/v1alpha1/policies/${marshalling.validatePathParam("policyId", request.policyId)}`
  });
  /**
   * Clone a policy. Clone a policy. You must define specify the `policy_id`
   * parameter in your request.
   *
   * @param request - The request {@link ClonePolicyRequest}
   * @returns A Promise of Policy
   */
  clonePolicy = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/iam/v1alpha1/policies/${marshalling.validatePathParam("policyId", request.policyId)}/clone`
    },
    marshalling_gen.unmarshalPolicy
  );
  /**
   * Set rules of a given policy. Overwrite the rules of a given policy. Any
   * information that you add using this command will overwrite the previous
   * configuration. If you include some of the rules you already had in your
   * previous configuration in your new one, but you change their order, the new
   * order of display will apply. While policy rules are ordered, they have no
   * impact on the access logic of IAM because rules are allow-only.
   *
   * @param request - The request {@link SetRulesRequest}
   * @returns A Promise of SetRulesResponse
   */
  setRules = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetRulesRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/iam/v1alpha1/rules`
    },
    marshalling_gen.unmarshalSetRulesResponse
  );
  pageOfListRules = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/iam/v1alpha1/rules`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["policy_id", request.policyId]
      )
    },
    marshalling_gen.unmarshalListRulesResponse
  );
  /**
   * List rules of a given policy. List the rules of a given policy. By default,
   * the rules listed are ordered by creation date in ascending order. This can
   * be modified via the `order_by` field. You must define the `policy_id` in
   * the query path of your request.
   *
   * @param request - The request {@link ListRulesRequest}
   * @returns A Promise of ListRulesResponse
   */
  listRules = (request) => resourcePaginator.enrichForPagination("rules", this.pageOfListRules, request);
  pageOfListPermissionSets = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/iam/v1alpha1/permission-sets`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        [
          "organization_id",
          request.organizationId ?? this.client.settings.defaultOrganizationId
        ],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListPermissionSetsResponse
  );
  /**
   * List permission sets. List permission sets available for given
   * Organization. You must define the `organization_id` in the query path of
   * your request.
   *
   * @param request - The request {@link ListPermissionSetsRequest}
   * @returns A Promise of ListPermissionSetsResponse
   */
  listPermissionSets = (request = {}) => resourcePaginator.enrichForPagination(
    "permissionSets",
    this.pageOfListPermissionSets,
    request
  );
  pageOfListAPIKeys = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/iam/v1alpha1/api-keys`,
      urlParams: marshalling.urlParams(
        ["access_key", request.accessKey],
        ["access_keys", request.accessKeys],
        ["bearer_id", request.bearerId],
        ["bearer_type", request.bearerType],
        ["description", request.description],
        ["editable", request.editable],
        ["expired", request.expired],
        ["order_by", request.orderBy],
        [
          "organization_id",
          request.organizationId ?? this.client.settings.defaultOrganizationId
        ],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ...Object.entries(
          marshalling.resolveOneOf([
            { param: "application_id", value: request.applicationId },
            { param: "user_id", value: request.userId }
          ])
        )
      )
    },
    marshalling_gen.unmarshalListAPIKeysResponse
  );
  /**
   * List API keys. List API keys. By default, the API keys listed are ordered
   * by creation date in ascending order. This can be modified via the
   * `order_by` field. You can define additional parameters for your query such
   * as `editable`, `expired`, `access_key` and `bearer_id`.
   *
   * @param request - The request {@link ListAPIKeysRequest}
   * @returns A Promise of ListAPIKeysResponse
   */
  listAPIKeys = (request = {}) => resourcePaginator.enrichForPagination("apiKeys", this.pageOfListAPIKeys, request);
  /**
   * Create an API key. Create an API key. You must specify the `application_id`
   * or the `user_id` and the description. You can also specify the
   * `default_project_id` which is the Project ID of your preferred Project, to
   * use with Object Storage. The `access_key` and `secret_key` values are
   * returned in the response. Note that he secret key is only showed once. Make
   * sure that you copy and store both keys somewhere safe.
   *
   * @param request - The request {@link CreateAPIKeyRequest}
   * @returns A Promise of APIKey
   */
  createAPIKey = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateAPIKeyRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/iam/v1alpha1/api-keys`
    },
    marshalling_gen.unmarshalAPIKey
  );
  /**
   * Get an API key. Retrive information about an API key, specified by the
   * `access_key` parameter. The API key's details, including either the
   * `user_id` or `application_id` of its bearer are returned in the response.
   * Note that the string value for the `secret_key` is nullable, and therefore
   * is not displayed in the response. The `secret_key` value is only displayed
   * upon API key creation.
   *
   * @param request - The request {@link GetAPIKeyRequest}
   * @returns A Promise of APIKey
   */
  getAPIKey = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/iam/v1alpha1/api-keys/${marshalling.validatePathParam("accessKey", request.accessKey)}`
    },
    marshalling_gen.unmarshalAPIKey
  );
  /**
   * Update an API key. Update the parameters of an API key, including
   * `default_project_id` and `description`.
   *
   * @param request - The request {@link UpdateAPIKeyRequest}
   * @returns A Promise of APIKey
   */
  updateAPIKey = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateAPIKeyRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/iam/v1alpha1/api-keys/${marshalling.validatePathParam("accessKey", request.accessKey)}`
    },
    marshalling_gen.unmarshalAPIKey
  );
  /**
   * Delete an API key. Delete an API key. Note that this action is irreversible
   * and cannot be undone. Make sure you update any configurations using the API
   * keys you delete.
   *
   * @param request - The request {@link DeleteAPIKeyRequest}
   */
  deleteAPIKey = (request) => this.client.fetch({
    method: "DELETE",
    path: `/iam/v1alpha1/api-keys/${marshalling.validatePathParam("accessKey", request.accessKey)}`
  });
  pageOfListQuota = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/iam/v1alpha1/quota`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        [
          "organization_id",
          request.organizationId ?? this.client.settings.defaultOrganizationId
        ],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["quotum_names", request.quotumNames]
      )
    },
    marshalling_gen.unmarshalListQuotaResponse
  );
  /**
   * List all quotas in the Organization. List all product and features quota
   * for an Organization, with their associated limits. By default, the quota
   * listed are ordered by creation date in ascending order. This can be
   * modified via the `order_by` field. You must define the `organization_id` in
   * the query path of your request.
   *
   * @param request - The request {@link ListQuotaRequest}
   * @returns A Promise of ListQuotaResponse
   */
  listQuota = (request = {}) => resourcePaginator.enrichForPagination("quota", this.pageOfListQuota, request);
  /**
   * Get a quota in the Organization. Retrieve information about a resource
   * quota, specified by the `quotum_name` parameter. The quota's `limit`, or
   * whether it is unlimited, is returned in the response.
   *
   * @param request - The request {@link GetQuotumRequest}
   * @returns A Promise of Quotum
   */
  getQuotum = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/iam/v1alpha1/quota/${marshalling.validatePathParam("quotumName", request.quotumName)}`,
      urlParams: marshalling.urlParams([
        "organization_id",
        request.organizationId ?? this.client.settings.defaultOrganizationId
      ])
    },
    marshalling_gen.unmarshalQuotum
  );
  pageOfListJWTs = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/iam/v1alpha1/jwts`,
      urlParams: marshalling.urlParams(
        ["audience_id", request.audienceId],
        ["expired", request.expired],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListJWTsResponse
  );
  /**
   * List JWTs.
   *
   * @param request - The request {@link ListJWTsRequest}
   * @returns A Promise of ListJWTsResponse
   */
  listJWTs = (request = {}) => resourcePaginator.enrichForPagination("jwts", this.pageOfListJWTs, request);
  /**
   * Create a JWT.
   *
   * @param request - The request {@link CreateJWTRequest}
   * @returns A Promise of EncodedJWT
   */
  createJWT = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateJWTRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/iam/v1alpha1/jwts`
    },
    marshalling_gen.unmarshalEncodedJWT
  );
  /**
   * Get a JWT.
   *
   * @param request - The request {@link GetJWTRequest}
   * @returns A Promise of JWT
   */
  getJWT = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/iam/v1alpha1/jwts/${marshalling.validatePathParam("jti", request.jti)}`
    },
    marshalling_gen.unmarshalJWT
  );
  /**
   * Delete a JWT.
   *
   * @param request - The request {@link DeleteJWTRequest}
   */
  deleteJWT = (request) => this.client.fetch({
    method: "DELETE",
    path: `/iam/v1alpha1/jwts/${marshalling.validatePathParam("jti", request.jti)}`
  });
  pageOfListLogs = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/iam/v1alpha1/logs`,
      urlParams: marshalling.urlParams(
        ["action", request.action],
        ["created_after", request.createdAfter],
        ["created_before", request.createdBefore],
        ["order_by", request.orderBy],
        [
          "organization_id",
          request.organizationId ?? this.client.settings.defaultOrganizationId
        ],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["resource_type", request.resourceType],
        ["search", request.search]
      )
    },
    marshalling_gen.unmarshalListLogsResponse
  );
  /**
   * List logs. List logs available for given Organization. You must define the
   * `organization_id` in the query path of your request.
   *
   * @param request - The request {@link ListLogsRequest}
   * @returns A Promise of ListLogsResponse
   */
  listLogs = (request = {}) => resourcePaginator.enrichForPagination("logs", this.pageOfListLogs, request);
  /**
   * Get a log. Retrieve information about a log, specified by the `log_id`
   * parameter. The log's full details, including `id`, `ip`, `user_agent`,
   * `action`, `bearer_id`, `resource_type` and `resource_id` are returned in
   * the response.
   *
   * @param request - The request {@link GetLogRequest}
   * @returns A Promise of Log
   */
  getLog = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/iam/v1alpha1/logs/${marshalling.validatePathParam("logId", request.logId)}`
    },
    marshalling_gen.unmarshalLog
  );
}
exports.API = API;


/***/ }),

/***/ 7162:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(6439);
const validationRules_gen = __nccwpck_require__(2964);
exports.API = api_gen.API;
exports.ValidationRules = validationRules_gen;


/***/ }),

/***/ 1718:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const randomName = __nccwpck_require__(8118);
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalJWT = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'JWT' failed as data isn't a dictionary.`
    );
  }
  return {
    audienceId: data.audience_id,
    createdAt: marshalling.unmarshalDate(data.created_at),
    expiresAt: marshalling.unmarshalDate(data.expires_at),
    ip: data.ip,
    issuerId: data.issuer_id,
    jti: data.jti,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    userAgent: data.user_agent
  };
};
const unmarshalAPIKey = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'APIKey' failed as data isn't a dictionary.`
    );
  }
  return {
    accessKey: data.access_key,
    applicationId: data.application_id,
    createdAt: marshalling.unmarshalDate(data.created_at),
    creationIp: data.creation_ip,
    defaultProjectId: data.default_project_id,
    description: data.description,
    editable: data.editable,
    expiresAt: marshalling.unmarshalDate(data.expires_at),
    secretKey: data.secret_key,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    userId: data.user_id
  };
};
const unmarshalApplication = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Application' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    description: data.description,
    editable: data.editable,
    id: data.id,
    name: data.name,
    nbApiKeys: data.nb_api_keys,
    organizationId: data.organization_id,
    tags: data.tags,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalGroup = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Group' failed as data isn't a dictionary.`
    );
  }
  return {
    applicationIds: data.application_ids,
    createdAt: marshalling.unmarshalDate(data.created_at),
    description: data.description,
    id: data.id,
    name: data.name,
    organizationId: data.organization_id,
    tags: data.tags,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    userIds: data.user_ids
  };
};
const unmarshalLog = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Log' failed as data isn't a dictionary.`
    );
  }
  return {
    action: data.action,
    bearerId: data.bearer_id,
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    ip: data.ip,
    organizationId: data.organization_id,
    resourceId: data.resource_id,
    resourceType: data.resource_type,
    userAgent: data.user_agent
  };
};
const unmarshalPolicy = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Policy' failed as data isn't a dictionary.`
    );
  }
  return {
    applicationId: data.application_id,
    createdAt: marshalling.unmarshalDate(data.created_at),
    description: data.description,
    editable: data.editable,
    groupId: data.group_id,
    id: data.id,
    name: data.name,
    nbPermissionSets: data.nb_permission_sets,
    nbRules: data.nb_rules,
    nbScopes: data.nb_scopes,
    noPrincipal: data.no_principal,
    organizationId: data.organization_id,
    tags: data.tags,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    userId: data.user_id
  };
};
const unmarshalQuotum = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Quotum' failed as data isn't a dictionary.`
    );
  }
  return {
    description: data.description,
    limit: data.limit,
    name: data.name,
    prettyName: data.pretty_name,
    unit: data.unit,
    unlimited: data.unlimited
  };
};
const unmarshalSSHKey = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SSHKey' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    disabled: data.disabled,
    fingerprint: data.fingerprint,
    id: data.id,
    name: data.name,
    organizationId: data.organization_id,
    projectId: data.project_id,
    publicKey: data.public_key,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalUser = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'User' failed as data isn't a dictionary.`
    );
  }
  return {
    accountRootUserId: data.account_root_user_id,
    createdAt: marshalling.unmarshalDate(data.created_at),
    deletable: data.deletable,
    email: data.email,
    id: data.id,
    lastLoginAt: marshalling.unmarshalDate(data.last_login_at),
    mfa: data.mfa,
    organizationId: data.organization_id,
    status: data.status,
    tags: data.tags,
    twoFactorEnabled: data.two_factor_enabled,
    type: data.type,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalEncodedJWT = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EncodedJWT' failed as data isn't a dictionary.`
    );
  }
  return {
    jwt: data.jwt ? unmarshalJWT(data.jwt) : void 0,
    renewToken: data.renew_token,
    token: data.token
  };
};
const unmarshalListAPIKeysResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListAPIKeysResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    apiKeys: marshalling.unmarshalArrayOfObject(data.api_keys, unmarshalAPIKey),
    totalCount: data.total_count
  };
};
const unmarshalListApplicationsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListApplicationsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    applications: marshalling.unmarshalArrayOfObject(
      data.applications,
      unmarshalApplication
    ),
    totalCount: data.total_count
  };
};
const unmarshalListGroupsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListGroupsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    groups: marshalling.unmarshalArrayOfObject(data.groups, unmarshalGroup),
    totalCount: data.total_count
  };
};
const unmarshalListJWTsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListJWTsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    jwts: marshalling.unmarshalArrayOfObject(data.jwts, unmarshalJWT),
    totalCount: data.total_count
  };
};
const unmarshalListLogsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListLogsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    logs: marshalling.unmarshalArrayOfObject(data.logs, unmarshalLog),
    totalCount: data.total_count
  };
};
const unmarshalPermissionSet = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PermissionSet' failed as data isn't a dictionary.`
    );
  }
  return {
    categories: data.categories,
    description: data.description,
    id: data.id,
    name: data.name,
    scopeType: data.scope_type
  };
};
const unmarshalListPermissionSetsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListPermissionSetsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    permissionSets: marshalling.unmarshalArrayOfObject(
      data.permission_sets,
      unmarshalPermissionSet
    ),
    totalCount: data.total_count
  };
};
const unmarshalListPoliciesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListPoliciesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    policies: marshalling.unmarshalArrayOfObject(data.policies, unmarshalPolicy),
    totalCount: data.total_count
  };
};
const unmarshalListQuotaResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListQuotaResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    quota: marshalling.unmarshalArrayOfObject(data.quota, unmarshalQuotum),
    totalCount: data.total_count
  };
};
const unmarshalRule = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Rule' failed as data isn't a dictionary.`
    );
  }
  return {
    accountRootUserId: data.account_root_user_id,
    condition: data.condition,
    id: data.id,
    organizationId: data.organization_id,
    permissionSetNames: data.permission_set_names,
    permissionSetsScopeType: data.permission_sets_scope_type,
    projectIds: data.project_ids
  };
};
const unmarshalListRulesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalRule),
    totalCount: data.total_count
  };
};
const unmarshalListSSHKeysResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSSHKeysResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    sshKeys: marshalling.unmarshalArrayOfObject(data.ssh_keys, unmarshalSSHKey),
    totalCount: data.total_count
  };
};
const unmarshalListUsersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListUsersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    users: marshalling.unmarshalArrayOfObject(data.users, unmarshalUser)
  };
};
const unmarshalSetRulesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalRule)
  };
};
const marshalAddGroupMemberRequest = (request, defaults) => ({
  ...marshalling.resolveOneOf([
    { param: "user_id", value: request.userId },
    { param: "application_id", value: request.applicationId }
  ])
});
const marshalAddGroupMembersRequest = (request, defaults) => ({
  application_ids: request.applicationIds,
  user_ids: request.userIds
});
const marshalCreateAPIKeyRequest = (request, defaults) => ({
  default_project_id: request.defaultProjectId,
  description: request.description,
  expires_at: request.expiresAt,
  ...marshalling.resolveOneOf([
    { param: "application_id", value: request.applicationId },
    { param: "user_id", value: request.userId }
  ])
});
const marshalCreateApplicationRequest = (request, defaults) => ({
  description: request.description,
  name: request.name || randomName("app"),
  organization_id: request.organizationId ?? defaults.defaultOrganizationId,
  tags: request.tags
});
const marshalCreateGroupRequest = (request, defaults) => ({
  description: request.description,
  name: request.name || randomName("grp"),
  organization_id: request.organizationId ?? defaults.defaultOrganizationId,
  tags: request.tags
});
const marshalCreateJWTRequest = (request, defaults) => ({
  referrer: request.referrer,
  user_id: request.userId
});
const marshalRuleSpecs = (request, defaults) => ({
  condition: request.condition,
  permission_set_names: request.permissionSetNames,
  ...marshalling.resolveOneOf([
    { param: "project_ids", value: request.projectIds },
    { param: "organization_id", value: request.organizationId }
  ])
});
const marshalCreatePolicyRequest = (request, defaults) => ({
  description: request.description,
  name: request.name || randomName("pol"),
  organization_id: request.organizationId ?? defaults.defaultOrganizationId,
  rules: request.rules !== void 0 ? request.rules.map((elt) => marshalRuleSpecs(elt)) : void 0,
  tags: request.tags,
  ...marshalling.resolveOneOf([
    { param: "user_id", value: request.userId },
    { param: "group_id", value: request.groupId },
    { param: "application_id", value: request.applicationId },
    { param: "no_principal", value: request.noPrincipal }
  ])
});
const marshalCreateSSHKeyRequest = (request, defaults) => ({
  name: request.name || randomName("key"),
  project_id: request.projectId ?? defaults.defaultProjectId,
  public_key: request.publicKey
});
const marshalCreateUserRequest = (request, defaults) => ({
  email: request.email,
  organization_id: request.organizationId ?? defaults.defaultOrganizationId,
  tags: request.tags
});
const marshalRemoveGroupMemberRequest = (request, defaults) => ({
  ...marshalling.resolveOneOf([
    { param: "user_id", value: request.userId },
    { param: "application_id", value: request.applicationId }
  ])
});
const marshalSetGroupMembersRequest = (request, defaults) => ({
  application_ids: request.applicationIds,
  user_ids: request.userIds
});
const marshalSetRulesRequest = (request, defaults) => ({
  policy_id: request.policyId,
  rules: request.rules.map((elt) => marshalRuleSpecs(elt))
});
const marshalUpdateAPIKeyRequest = (request, defaults) => ({
  default_project_id: request.defaultProjectId,
  description: request.description
});
const marshalUpdateApplicationRequest = (request, defaults) => ({
  description: request.description,
  name: request.name,
  tags: request.tags
});
const marshalUpdateGroupRequest = (request, defaults) => ({
  description: request.description,
  name: request.name,
  tags: request.tags
});
const marshalUpdatePolicyRequest = (request, defaults) => ({
  description: request.description,
  name: request.name,
  tags: request.tags,
  ...marshalling.resolveOneOf([
    { param: "user_id", value: request.userId },
    { param: "group_id", value: request.groupId },
    { param: "application_id", value: request.applicationId },
    { param: "no_principal", value: request.noPrincipal }
  ])
});
const marshalUpdateSSHKeyRequest = (request, defaults) => ({
  disabled: request.disabled,
  name: request.name
});
const marshalUpdateUserRequest = (request, defaults) => ({
  tags: request.tags
});
exports.marshalAddGroupMemberRequest = marshalAddGroupMemberRequest;
exports.marshalAddGroupMembersRequest = marshalAddGroupMembersRequest;
exports.marshalCreateAPIKeyRequest = marshalCreateAPIKeyRequest;
exports.marshalCreateApplicationRequest = marshalCreateApplicationRequest;
exports.marshalCreateGroupRequest = marshalCreateGroupRequest;
exports.marshalCreateJWTRequest = marshalCreateJWTRequest;
exports.marshalCreatePolicyRequest = marshalCreatePolicyRequest;
exports.marshalCreateSSHKeyRequest = marshalCreateSSHKeyRequest;
exports.marshalCreateUserRequest = marshalCreateUserRequest;
exports.marshalRemoveGroupMemberRequest = marshalRemoveGroupMemberRequest;
exports.marshalSetGroupMembersRequest = marshalSetGroupMembersRequest;
exports.marshalSetRulesRequest = marshalSetRulesRequest;
exports.marshalUpdateAPIKeyRequest = marshalUpdateAPIKeyRequest;
exports.marshalUpdateApplicationRequest = marshalUpdateApplicationRequest;
exports.marshalUpdateGroupRequest = marshalUpdateGroupRequest;
exports.marshalUpdatePolicyRequest = marshalUpdatePolicyRequest;
exports.marshalUpdateSSHKeyRequest = marshalUpdateSSHKeyRequest;
exports.marshalUpdateUserRequest = marshalUpdateUserRequest;
exports.unmarshalAPIKey = unmarshalAPIKey;
exports.unmarshalApplication = unmarshalApplication;
exports.unmarshalEncodedJWT = unmarshalEncodedJWT;
exports.unmarshalGroup = unmarshalGroup;
exports.unmarshalJWT = unmarshalJWT;
exports.unmarshalListAPIKeysResponse = unmarshalListAPIKeysResponse;
exports.unmarshalListApplicationsResponse = unmarshalListApplicationsResponse;
exports.unmarshalListGroupsResponse = unmarshalListGroupsResponse;
exports.unmarshalListJWTsResponse = unmarshalListJWTsResponse;
exports.unmarshalListLogsResponse = unmarshalListLogsResponse;
exports.unmarshalListPermissionSetsResponse = unmarshalListPermissionSetsResponse;
exports.unmarshalListPoliciesResponse = unmarshalListPoliciesResponse;
exports.unmarshalListQuotaResponse = unmarshalListQuotaResponse;
exports.unmarshalListRulesResponse = unmarshalListRulesResponse;
exports.unmarshalListSSHKeysResponse = unmarshalListSSHKeysResponse;
exports.unmarshalListUsersResponse = unmarshalListUsersResponse;
exports.unmarshalLog = unmarshalLog;
exports.unmarshalPolicy = unmarshalPolicy;
exports.unmarshalQuotum = unmarshalQuotum;
exports.unmarshalSSHKey = unmarshalSSHKey;
exports.unmarshalSetRulesResponse = unmarshalSetRulesResponse;
exports.unmarshalUser = unmarshalUser;


/***/ }),

/***/ 2964:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const CreateAPIKeyRequest = {
  description: {
    ignoreEmpty: true,
    maxLength: 200
  }
};
const CreateApplicationRequest = {
  description: {
    ignoreEmpty: true,
    maxLength: 200
  },
  name: {
    maxLength: 64,
    minLength: 1,
    pattern: /^[a-zA-Z0-9\(\)\._\- ]+$/
  }
};
const CreateGroupRequest = {
  description: {
    ignoreEmpty: true,
    maxLength: 200
  },
  name: {
    maxLength: 64,
    minLength: 1,
    pattern: /^[a-zA-Z0-9\(\)\._\- ]+$/
  }
};
const CreatePolicyRequest = {
  description: {
    ignoreEmpty: true,
    maxLength: 200
  },
  name: {
    maxLength: 64,
    minLength: 1,
    pattern: /^[a-zA-Z0-9\(\)\._\- ]+$/
  }
};
const CreateSSHKeyRequest = {
  name: {
    ignoreEmpty: true,
    maxLength: 1e3
  },
  publicKey: {
    maxLength: 65e3,
    minLength: 1
  }
};
const GetQuotumRequest = {
  quotumName: {
    minLength: 1
  }
};
const ListAPIKeysRequest = {
  description: {
    maxLength: 200
  },
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 100
  }
};
const ListApplicationsRequest = {
  name: {
    maxLength: 64,
    minLength: 1,
    pattern: /^[a-zA-Z0-9\(\)\._\- ]+$/
  },
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 100
  }
};
const ListGroupsRequest = {
  name: {
    minLength: 1
  },
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 100
  }
};
const ListJWTsRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 100
  }
};
const ListLogsRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 100
  }
};
const ListPermissionSetsRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 100
  }
};
const ListPoliciesRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 100
  },
  policyName: {
    minLength: 1
  }
};
const ListQuotaRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 100
  }
};
const ListRulesRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 100
  }
};
const ListSSHKeysRequest = {
  name: {
    maxLength: 1e3,
    minLength: 1
  },
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 100
  }
};
const ListUsersRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 100
  }
};
const RuleSpecs = {
  condition: {
    maxLength: 255
  }
};
const UpdateAPIKeyRequest = {
  description: {
    maxLength: 200
  }
};
const UpdateApplicationRequest = {
  description: {
    maxLength: 200
  },
  name: {
    maxLength: 64,
    minLength: 1,
    pattern: /^[a-zA-Z0-9\(\)\._\- ]+$/
  }
};
const UpdateGroupRequest = {
  description: {
    maxLength: 200
  },
  name: {
    maxLength: 64,
    minLength: 1,
    pattern: /^[a-zA-Z0-9\(\)\._\- ]+$/
  }
};
const UpdatePolicyRequest = {
  description: {
    maxLength: 200
  },
  name: {
    maxLength: 64,
    minLength: 1,
    pattern: /^[a-zA-Z0-9\(\)\._\- ]+$/
  }
};
const UpdateSSHKeyRequest = {
  name: {
    maxLength: 1e3
  }
};
exports.CreateAPIKeyRequest = CreateAPIKeyRequest;
exports.CreateApplicationRequest = CreateApplicationRequest;
exports.CreateGroupRequest = CreateGroupRequest;
exports.CreatePolicyRequest = CreatePolicyRequest;
exports.CreateSSHKeyRequest = CreateSSHKeyRequest;
exports.GetQuotumRequest = GetQuotumRequest;
exports.ListAPIKeysRequest = ListAPIKeysRequest;
exports.ListApplicationsRequest = ListApplicationsRequest;
exports.ListGroupsRequest = ListGroupsRequest;
exports.ListJWTsRequest = ListJWTsRequest;
exports.ListLogsRequest = ListLogsRequest;
exports.ListPermissionSetsRequest = ListPermissionSetsRequest;
exports.ListPoliciesRequest = ListPoliciesRequest;
exports.ListQuotaRequest = ListQuotaRequest;
exports.ListRulesRequest = ListRulesRequest;
exports.ListSSHKeysRequest = ListSSHKeysRequest;
exports.ListUsersRequest = ListUsersRequest;
exports.RuleSpecs = RuleSpecs;
exports.UpdateAPIKeyRequest = UpdateAPIKeyRequest;
exports.UpdateApplicationRequest = UpdateApplicationRequest;
exports.UpdateGroupRequest = UpdateGroupRequest;
exports.UpdatePolicyRequest = UpdatePolicyRequest;
exports.UpdateSSHKeyRequest = UpdateSSHKeyRequest;


/***/ }),

/***/ 4815:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index = __nccwpck_require__(4578);
exports.v1 = index;


/***/ }),

/***/ 8265:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const marshalling_gen = __nccwpck_require__(3199);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available zones of the API. */
  static LOCALITIES = [
    "fr-par-1",
    "fr-par-2",
    "fr-par-3",
    "nl-ams-1",
    "nl-ams-2",
    "nl-ams-3",
    "pl-waw-1",
    "pl-waw-2",
    "pl-waw-3"
  ];
  /**
   * Get availability. Get availability for all Instance types.
   *
   * @param request - The request {@link GetServerTypesAvailabilityRequest}
   * @returns A Promise of GetServerTypesAvailabilityResponse
   */
  getServerTypesAvailability = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/products/servers/availability`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize]
      )
    },
    marshalling_gen.unmarshalGetServerTypesAvailabilityResponse
  );
  /**
   * List Instance types. List available Instance types and their technical
   * details.
   *
   * @param request - The request {@link ListServersTypesRequest}
   * @returns A Promise of ListServersTypesResponse
   */
  listServersTypes = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/products/servers`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize]
      )
    },
    marshalling_gen.unmarshalListServersTypesResponse
  );
  /**
   * List volume types. List all volume types and their technical details.
   *
   * @param request - The request {@link ListVolumesTypesRequest}
   * @returns A Promise of ListVolumesTypesResponse
   */
  listVolumesTypes = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/products/volumes`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize]
      )
    },
    marshalling_gen.unmarshalListVolumesTypesResponse
  );
  pageOfListServers = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers`,
      urlParams: marshalling.urlParams(
        ["commercial_type", request.commercialType],
        ["name", request.name],
        ["order", request.order],
        ["organization", request.organization],
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize],
        ["private_ip", request.privateIp],
        ["private_network", request.privateNetwork],
        [
          "private_networks",
          request.privateNetworks && request.privateNetworks.length > 0 ? request.privateNetworks.join(",") : void 0
        ],
        ["private_nic_mac_address", request.privateNicMacAddress],
        ["project", request.project],
        [
          "servers",
          request.servers && request.servers.length > 0 ? request.servers.join(",") : void 0
        ],
        ["state", request.state],
        [
          "tags",
          request.tags && request.tags.length > 0 ? request.tags.join(",") : void 0
        ],
        ["with_ip", request.withIp],
        ["without_ip", request.withoutIp]
      )
    },
    marshalling_gen.unmarshalListServersResponse
  );
  /**
   * List all Instances. List all Instances in a specified Availability Zone,
   * e.g. `fr-par-1`.
   *
   * @param request - The request {@link ListServersRequest}
   * @returns A Promise of ListServersResponse
   */
  listServers = (request = {}) => resourcePaginator.enrichForPagination("servers", this.pageOfListServers, request);
  _createServer = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateServerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers`
    },
    marshalling_gen.unmarshalCreateServerResponse
  );
  /**
   * Delete an Instance. Delete the Instance with the specified ID.
   *
   * @param request - The request {@link DeleteServerRequest}
   */
  deleteServer = (request) => this.client.fetch({
    method: "DELETE",
    path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}`
  });
  /**
   * Get an Instance. Get the details of a specified Instance.
   *
   * @param request - The request {@link GetServerRequest}
   * @returns A Promise of GetServerResponse
   */
  getServer = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}`
    },
    marshalling_gen.unmarshalGetServerResponse
  );
  _setServer = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetServerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("id", request.id)}`
    },
    marshalling_gen.unmarshalSetServerResponse
  );
  _updateServer = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateServerRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}`
    },
    marshalling_gen.unmarshalUpdateServerResponse
  );
  /**
   * List Instance actions. List all actions (e.g. power on, power off, reboot)
   * that can currently be performed on an Instance.
   *
   * @param request - The request {@link ListServerActionsRequest}
   * @returns A Promise of ListServerActionsResponse
   */
  listServerActions = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/action`
    },
    marshalling_gen.unmarshalListServerActionsResponse
  );
  /**
   * Perform action. Perform an action on an Instance. Available actions are:
   * `poweron`: Start a stopped Instance. `poweroff`: Fully stop the Instance
   * and release the hypervisor slot. `stop_in_place`: Stop the Instance, but
   * keep the slot on the hypervisor. `reboot`: Stop the instance and restart
   * it. `backup`: Create an image with all the volumes of an Instance.
   * `terminate`: Delete the Instance along with all attached volumes.
   * `enable_routed_ip`: Migrate the Instance to the new network stack.
   *
   * Keep in mind that terminating an Instance will result in the deletion of
   * all attached volumes, including local and block storage. If you want to
   * preserve your local volumes, you should use the `archive` action instead of
   * `terminate`. Similarly, if you want to keep your block storage volumes, you
   * must first detach them before issuing the `terminate` command. For more
   * information, read the [Volumes](#path-volumes-list-volumes) documentation.
   *
   * @param request - The request {@link ServerActionRequest}
   * @returns A Promise of ServerActionResponse
   */
  serverAction = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalServerActionRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/action`
    },
    marshalling_gen.unmarshalServerActionResponse
  );
  /**
   * List user data. List all user data keys registered on a specified Instance.
   *
   * @param request - The request {@link ListServerUserDataRequest}
   * @returns A Promise of ListServerUserDataResponse
   */
  listServerUserData = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/user_data`
    },
    marshalling_gen.unmarshalListServerUserDataResponse
  );
  /**
   * Delete user data. Delete the specified key from an Instance's user data.
   *
   * @param request - The request {@link DeleteServerUserDataRequest}
   */
  deleteServerUserData = (request) => this.client.fetch({
    method: "DELETE",
    path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/user_data/${marshalling.validatePathParam("key", request.key)}`
  });
  attachServerVolume = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalAttachServerVolumeRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/attach-volume`
    },
    marshalling_gen.unmarshalAttachServerVolumeResponse
  );
  detachServerVolume = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalDetachServerVolumeRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/detach-volume`
    },
    marshalling_gen.unmarshalDetachServerVolumeResponse
  );
  pageOfListImages = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/images`,
      urlParams: marshalling.urlParams(
        ["arch", request.arch],
        ["name", request.name],
        ["organization", request.organization],
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize],
        ["project", request.project],
        ["public", request.public],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListImagesResponse
  );
  /**
   * List Instance images. List all existing Instance images.
   *
   * @param request - The request {@link ListImagesRequest}
   * @returns A Promise of ListImagesResponse
   */
  listImages = (request = {}) => resourcePaginator.enrichForPagination("images", this.pageOfListImages, request);
  /**
   * Get an Instance image. Get details of an image with the specified ID.
   *
   * @param request - The request {@link GetImageRequest}
   * @returns A Promise of GetImageResponse
   */
  getImage = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/images/${marshalling.validatePathParam("imageId", request.imageId)}`
    },
    marshalling_gen.unmarshalGetImageResponse
  );
  /**
   * Create an Instance image. Create an Instance image from the specified
   * snapshot ID.
   *
   * @param request - The request {@link CreateImageRequest}
   * @returns A Promise of CreateImageResponse
   */
  createImage = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateImageRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/images`
    },
    marshalling_gen.unmarshalCreateImageResponse
  );
  _setImage = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetImageRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/images/${marshalling.validatePathParam("id", request.id)}`
    },
    marshalling_gen.unmarshalSetImageResponse
  );
  /**
   * Update image. Update the properties of an image.
   *
   * @param request - The request {@link UpdateImageRequest}
   * @returns A Promise of UpdateImageResponse
   */
  updateImage = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateImageRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/images/${marshalling.validatePathParam("imageId", request.imageId)}`
    },
    marshalling_gen.unmarshalUpdateImageResponse
  );
  /**
   * Delete an Instance image. Delete the image with the specified ID.
   *
   * @param request - The request {@link DeleteImageRequest}
   */
  deleteImage = (request) => this.client.fetch({
    method: "DELETE",
    path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/images/${marshalling.validatePathParam("imageId", request.imageId)}`
  });
  pageOfListSnapshots = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/snapshots`,
      urlParams: marshalling.urlParams(
        ["base_volume_id", request.baseVolumeId],
        ["name", request.name],
        ["organization", request.organization],
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize],
        ["project", request.project],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListSnapshotsResponse
  );
  /**
   * List snapshots. List all snapshots of an Organization in a specified
   * Availability Zone.
   *
   * @param request - The request {@link ListSnapshotsRequest}
   * @returns A Promise of ListSnapshotsResponse
   */
  listSnapshots = (request = {}) => resourcePaginator.enrichForPagination("snapshots", this.pageOfListSnapshots, request);
  /**
   * Create a snapshot from a specified volume or from a QCOW2 file. Create a
   * snapshot from a specified volume or from a QCOW2 file in a specified
   * Availability Zone.
   *
   * @param request - The request {@link CreateSnapshotRequest}
   * @returns A Promise of CreateSnapshotResponse
   */
  createSnapshot = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateSnapshotRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/snapshots`
    },
    marshalling_gen.unmarshalCreateSnapshotResponse
  );
  /**
   * Get a snapshot. Get details of a snapshot with the specified ID.
   *
   * @param request - The request {@link GetSnapshotRequest}
   * @returns A Promise of GetSnapshotResponse
   */
  getSnapshot = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/snapshots/${marshalling.validatePathParam("snapshotId", request.snapshotId)}`
    },
    marshalling_gen.unmarshalGetSnapshotResponse
  );
  _setSnapshot = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetSnapshotRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/snapshots/${marshalling.validatePathParam("snapshotId", request.snapshotId)}`
    },
    marshalling_gen.unmarshalSetSnapshotResponse
  );
  /**
   * Update a snapshot. Update the properties of a snapshot.
   *
   * @param request - The request {@link UpdateSnapshotRequest}
   * @returns A Promise of UpdateSnapshotResponse
   */
  updateSnapshot = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateSnapshotRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/snapshots/${marshalling.validatePathParam("snapshotId", request.snapshotId)}`
    },
    marshalling_gen.unmarshalUpdateSnapshotResponse
  );
  /**
   * Delete a snapshot. Delete the snapshot with the specified ID.
   *
   * @param request - The request {@link DeleteSnapshotRequest}
   */
  deleteSnapshot = (request) => this.client.fetch({
    method: "DELETE",
    path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/snapshots/${marshalling.validatePathParam("snapshotId", request.snapshotId)}`
  });
  /**
   * Export a snapshot. Export a snapshot to a specified S3 bucket in the same
   * region.
   *
   * @param request - The request {@link ExportSnapshotRequest}
   * @returns A Promise of ExportSnapshotResponse
   */
  exportSnapshot = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalExportSnapshotRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/snapshots/${marshalling.validatePathParam("snapshotId", request.snapshotId)}/export`
    },
    marshalling_gen.unmarshalExportSnapshotResponse
  );
  pageOfListVolumes = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/volumes`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["organization", request.organization],
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize],
        ["project", request.project],
        [
          "tags",
          request.tags && request.tags.length > 0 ? request.tags.join(",") : void 0
        ],
        ["volume_type", request.volumeType]
      )
    },
    marshalling_gen.unmarshalListVolumesResponse
  );
  /**
   * List volumes. List volumes in the specified Availability Zone. You can
   * filter the output by volume type.
   *
   * @param request - The request {@link ListVolumesRequest}
   * @returns A Promise of ListVolumesResponse
   */
  listVolumes = (request = {}) => resourcePaginator.enrichForPagination("volumes", this.pageOfListVolumes, request);
  /**
   * Create a volume. Create a volume of a specified type in an Availability
   * Zone.
   *
   * @param request - The request {@link CreateVolumeRequest}
   * @returns A Promise of CreateVolumeResponse
   */
  createVolume = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateVolumeRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/volumes`
    },
    marshalling_gen.unmarshalCreateVolumeResponse
  );
  /**
   * Get a volume. Get details of a volume with the specified ID.
   *
   * @param request - The request {@link GetVolumeRequest}
   * @returns A Promise of GetVolumeResponse
   */
  getVolume = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/volumes/${marshalling.validatePathParam("volumeId", request.volumeId)}`
    },
    marshalling_gen.unmarshalGetVolumeResponse
  );
  /**
   * Update a volume. Replace the name and/or size properties of a volume
   * specified by its ID, with the specified value(s). Any volume name can be
   * changed, however only `b_ssd` volumes can currently be increased in size.
   *
   * @param request - The request {@link UpdateVolumeRequest}
   * @returns A Promise of UpdateVolumeResponse
   */
  updateVolume = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateVolumeRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/volumes/${marshalling.validatePathParam("volumeId", request.volumeId)}`
    },
    marshalling_gen.unmarshalUpdateVolumeResponse
  );
  /**
   * Delete a volume. Delete the volume with the specified ID.
   *
   * @param request - The request {@link DeleteVolumeRequest}
   */
  deleteVolume = (request) => this.client.fetch({
    method: "DELETE",
    path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/volumes/${marshalling.validatePathParam("volumeId", request.volumeId)}`
  });
  pageOfListSecurityGroups = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["organization", request.organization],
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize],
        ["project", request.project],
        ["project_default", request.projectDefault],
        [
          "tags",
          request.tags && request.tags.length > 0 ? request.tags.join(",") : void 0
        ]
      )
    },
    marshalling_gen.unmarshalListSecurityGroupsResponse
  );
  /**
   * List security groups. List all existing security groups.
   *
   * @param request - The request {@link ListSecurityGroupsRequest}
   * @returns A Promise of ListSecurityGroupsResponse
   */
  listSecurityGroups = (request = {}) => resourcePaginator.enrichForPagination(
    "securityGroups",
    this.pageOfListSecurityGroups,
    request
  );
  /**
   * Create a security group. Create a security group with a specified name and
   * description.
   *
   * @param request - The request {@link CreateSecurityGroupRequest}
   * @returns A Promise of CreateSecurityGroupResponse
   */
  createSecurityGroup = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateSecurityGroupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups`
    },
    marshalling_gen.unmarshalCreateSecurityGroupResponse
  );
  /**
   * Get a security group. Get the details of a security group with the
   * specified ID.
   *
   * @param request - The request {@link GetSecurityGroupRequest}
   * @returns A Promise of GetSecurityGroupResponse
   */
  getSecurityGroup = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/${marshalling.validatePathParam("securityGroupId", request.securityGroupId)}`
    },
    marshalling_gen.unmarshalGetSecurityGroupResponse
  );
  /**
   * Delete a security group. Delete a security group with the specified ID.
   *
   * @param request - The request {@link DeleteSecurityGroupRequest}
   */
  deleteSecurityGroup = (request) => this.client.fetch({
    method: "DELETE",
    path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/${marshalling.validatePathParam("securityGroupId", request.securityGroupId)}`
  });
  _setSecurityGroup = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetSecurityGroupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/${marshalling.validatePathParam("id", request.id)}`
    },
    marshalling_gen.unmarshalSetSecurityGroupResponse
  );
  /**
   * Update a security group. Update the properties of security group.
   *
   * @param request - The request {@link UpdateSecurityGroupRequest}
   * @returns A Promise of UpdateSecurityGroupResponse
   */
  updateSecurityGroup = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateSecurityGroupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/${marshalling.validatePathParam("securityGroupId", request.securityGroupId)}`
    },
    marshalling_gen.unmarshalUpdateSecurityGroupResponse
  );
  /**
   * Get default rules. Lists the default rules applied to all the security
   * groups.
   *
   * @param request - The request {@link ListDefaultSecurityGroupRulesRequest}
   * @returns A Promise of ListSecurityGroupRulesResponse
   */
  listDefaultSecurityGroupRules = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/default/rules`
    },
    marshalling_gen.unmarshalListSecurityGroupRulesResponse
  );
  pageOfListSecurityGroupRules = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/${marshalling.validatePathParam("securityGroupId", request.securityGroupId)}/rules`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize]
      )
    },
    marshalling_gen.unmarshalListSecurityGroupRulesResponse
  );
  /**
   * List rules. List the rules of the a specified security group ID.
   *
   * @param request - The request {@link ListSecurityGroupRulesRequest}
   * @returns A Promise of ListSecurityGroupRulesResponse
   */
  listSecurityGroupRules = (request) => resourcePaginator.enrichForPagination("rules", this.pageOfListSecurityGroupRules, request);
  /**
   * Create rule. Create a rule in the specified security group ID.
   *
   * @param request - The request {@link CreateSecurityGroupRuleRequest}
   * @returns A Promise of CreateSecurityGroupRuleResponse
   */
  createSecurityGroupRule = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateSecurityGroupRuleRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/${marshalling.validatePathParam("securityGroupId", request.securityGroupId)}/rules`
    },
    marshalling_gen.unmarshalCreateSecurityGroupRuleResponse
  );
  /**
   * Update all the rules of a security group. Replaces the existing rules of
   * the security group with the rules provided. This endpoint supports the
   * update of existing rules, creation of new rules and deletion of existing
   * rules when they are not passed in the request.
   *
   * @param request - The request {@link SetSecurityGroupRulesRequest}
   * @returns A Promise of SetSecurityGroupRulesResponse
   */
  setSecurityGroupRules = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetSecurityGroupRulesRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/${marshalling.validatePathParam("securityGroupId", request.securityGroupId)}/rules`
    },
    marshalling_gen.unmarshalSetSecurityGroupRulesResponse
  );
  /**
   * Delete rule. Delete a security group rule with the specified ID.
   *
   * @param request - The request {@link DeleteSecurityGroupRuleRequest}
   */
  deleteSecurityGroupRule = (request) => this.client.fetch({
    method: "DELETE",
    path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/${marshalling.validatePathParam("securityGroupId", request.securityGroupId)}/rules/${marshalling.validatePathParam("securityGroupRuleId", request.securityGroupRuleId)}`
  });
  /**
   * Get rule. Get details of a security group rule with the specified ID.
   *
   * @param request - The request {@link GetSecurityGroupRuleRequest}
   * @returns A Promise of GetSecurityGroupRuleResponse
   */
  getSecurityGroupRule = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/${marshalling.validatePathParam("securityGroupId", request.securityGroupId)}/rules/${marshalling.validatePathParam("securityGroupRuleId", request.securityGroupRuleId)}`
    },
    marshalling_gen.unmarshalGetSecurityGroupRuleResponse
  );
  _setSecurityGroupRule = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetSecurityGroupRuleRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/${marshalling.validatePathParam("securityGroupId", request.securityGroupId)}/rules/${marshalling.validatePathParam("securityGroupRuleId", request.securityGroupRuleId)}`
    },
    marshalling_gen.unmarshalSetSecurityGroupRuleResponse
  );
  /**
   * Update security group rule. Update the properties of a rule from a
   * specified security group.
   *
   * @param request - The request {@link UpdateSecurityGroupRuleRequest}
   * @returns A Promise of UpdateSecurityGroupRuleResponse
   */
  updateSecurityGroupRule = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateSecurityGroupRuleRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/security_groups/${marshalling.validatePathParam("securityGroupId", request.securityGroupId)}/rules/${marshalling.validatePathParam("securityGroupRuleId", request.securityGroupRuleId)}`
    },
    marshalling_gen.unmarshalUpdateSecurityGroupRuleResponse
  );
  pageOfListPlacementGroups = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/placement_groups`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["organization", request.organization],
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize],
        ["project", request.project],
        [
          "tags",
          request.tags && request.tags.length > 0 ? request.tags.join(",") : void 0
        ]
      )
    },
    marshalling_gen.unmarshalListPlacementGroupsResponse
  );
  /**
   * List placement groups. List all placement groups in a specified
   * Availability Zone.
   *
   * @param request - The request {@link ListPlacementGroupsRequest}
   * @returns A Promise of ListPlacementGroupsResponse
   */
  listPlacementGroups = (request = {}) => resourcePaginator.enrichForPagination(
    "placementGroups",
    this.pageOfListPlacementGroups,
    request
  );
  /**
   * Create a placement group. Create a new placement group in a specified
   * Availability Zone.
   *
   * @param request - The request {@link CreatePlacementGroupRequest}
   * @returns A Promise of CreatePlacementGroupResponse
   */
  createPlacementGroup = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreatePlacementGroupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/placement_groups`
    },
    marshalling_gen.unmarshalCreatePlacementGroupResponse
  );
  /**
   * Get a placement group. Get the specified placement group.
   *
   * @param request - The request {@link GetPlacementGroupRequest}
   * @returns A Promise of GetPlacementGroupResponse
   */
  getPlacementGroup = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/placement_groups/${marshalling.validatePathParam("placementGroupId", request.placementGroupId)}`
    },
    marshalling_gen.unmarshalGetPlacementGroupResponse
  );
  /**
   * Set placement group. Set all parameters of the specified placement group.
   *
   * @param request - The request {@link SetPlacementGroupRequest}
   * @returns A Promise of SetPlacementGroupResponse
   */
  setPlacementGroup = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetPlacementGroupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/placement_groups/${marshalling.validatePathParam("placementGroupId", request.placementGroupId)}`
    },
    marshalling_gen.unmarshalSetPlacementGroupResponse
  );
  /**
   * Update a placement group. Update one or more parameter of the specified
   * placement group.
   *
   * @param request - The request {@link UpdatePlacementGroupRequest}
   * @returns A Promise of UpdatePlacementGroupResponse
   */
  updatePlacementGroup = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdatePlacementGroupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/placement_groups/${marshalling.validatePathParam("placementGroupId", request.placementGroupId)}`
    },
    marshalling_gen.unmarshalUpdatePlacementGroupResponse
  );
  /**
   * Delete the specified placement group.
   *
   * @param request - The request {@link DeletePlacementGroupRequest}
   */
  deletePlacementGroup = (request) => this.client.fetch({
    method: "DELETE",
    path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/placement_groups/${marshalling.validatePathParam("placementGroupId", request.placementGroupId)}`
  });
  /**
   * Get placement group servers. Get all Instances belonging to the specified
   * placement group.
   *
   * @param request - The request {@link GetPlacementGroupServersRequest}
   * @returns A Promise of GetPlacementGroupServersResponse
   */
  getPlacementGroupServers = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/placement_groups/${marshalling.validatePathParam("placementGroupId", request.placementGroupId)}/servers`
    },
    marshalling_gen.unmarshalGetPlacementGroupServersResponse
  );
  /**
   * Set placement group servers. Set all Instances belonging to the specified
   * placement group.
   *
   * @param request - The request {@link SetPlacementGroupServersRequest}
   * @returns A Promise of SetPlacementGroupServersResponse
   */
  setPlacementGroupServers = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetPlacementGroupServersRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/placement_groups/${marshalling.validatePathParam("placementGroupId", request.placementGroupId)}/servers`
    },
    marshalling_gen.unmarshalSetPlacementGroupServersResponse
  );
  /**
   * Update placement group servers. Update all Instances belonging to the
   * specified placement group.
   *
   * @param request - The request {@link UpdatePlacementGroupServersRequest}
   * @returns A Promise of UpdatePlacementGroupServersResponse
   */
  updatePlacementGroupServers = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdatePlacementGroupServersRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/placement_groups/${marshalling.validatePathParam("placementGroupId", request.placementGroupId)}/servers`
    },
    marshalling_gen.unmarshalUpdatePlacementGroupServersResponse
  );
  pageOfListIps = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/ips`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["organization", request.organization],
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize],
        ["project", request.project],
        [
          "tags",
          request.tags && request.tags.length > 0 ? request.tags.join(",") : void 0
        ],
        ["type", request.type]
      )
    },
    marshalling_gen.unmarshalListIpsResponse
  );
  /**
   * List all flexible IPs. List all flexible IPs in a specified zone.
   *
   * @param request - The request {@link ListIpsRequest}
   * @returns A Promise of ListIpsResponse
   */
  listIps = (request = {}) => resourcePaginator.enrichForPagination("ips", this.pageOfListIps, request);
  /**
   * Reserve a flexible IP. Reserve a flexible IP and attach it to the specified
   * Instance.
   *
   * @param request - The request {@link CreateIpRequest}
   * @returns A Promise of CreateIpResponse
   */
  createIp = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateIpRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/ips`
    },
    marshalling_gen.unmarshalCreateIpResponse
  );
  /**
   * Get a flexible IP. Get details of an IP with the specified ID or address.
   *
   * @param request - The request {@link GetIpRequest}
   * @returns A Promise of GetIpResponse
   */
  getIp = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/ips/${marshalling.validatePathParam("ip", request.ip)}`
    },
    marshalling_gen.unmarshalGetIpResponse
  );
  /**
   * Update a flexible IP. Update a flexible IP in the specified zone with the
   * specified ID.
   *
   * @param request - The request {@link UpdateIpRequest}
   * @returns A Promise of UpdateIpResponse
   */
  updateIp = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateIpRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/ips/${marshalling.validatePathParam("ip", request.ip)}`
    },
    marshalling_gen.unmarshalUpdateIpResponse
  );
  /**
   * Delete a flexible IP. Delete the IP with the specified ID.
   *
   * @param request - The request {@link DeleteIpRequest}
   */
  deleteIp = (request) => this.client.fetch({
    method: "DELETE",
    path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/ips/${marshalling.validatePathParam("ip", request.ip)}`
  });
  pageOfListPrivateNICs = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/private_nics`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize],
        [
          "tags",
          request.tags && request.tags.length > 0 ? request.tags.join(",") : void 0
        ]
      )
    },
    marshalling_gen.unmarshalListPrivateNICsResponse
  );
  /**
   * List all private NICs. List all private NICs of a specified Instance.
   *
   * @param request - The request {@link ListPrivateNICsRequest}
   * @returns A Promise of ListPrivateNICsResponse
   */
  listPrivateNICs = (request) => resourcePaginator.enrichForPagination("privateNics", this.pageOfListPrivateNICs, request);
  /**
   * Create a private NIC connecting an Instance to a Private Network.
   *
   * @param request - The request {@link CreatePrivateNICRequest}
   * @returns A Promise of CreatePrivateNICResponse
   */
  createPrivateNIC = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreatePrivateNICRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/private_nics`
    },
    marshalling_gen.unmarshalCreatePrivateNICResponse
  );
  /**
   * Get a private NIC. Get private NIC properties.
   *
   * @param request - The request {@link GetPrivateNICRequest}
   * @returns A Promise of GetPrivateNICResponse
   */
  getPrivateNIC = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/private_nics/${marshalling.validatePathParam("privateNicId", request.privateNicId)}`
    },
    marshalling_gen.unmarshalGetPrivateNICResponse
  );
  /**
   * Update a private NIC. Update one or more parameter(s) of a specified
   * private NIC.
   *
   * @param request - The request {@link UpdatePrivateNICRequest}
   * @returns A Promise of PrivateNIC
   */
  updatePrivateNIC = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdatePrivateNICRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/private_nics/${marshalling.validatePathParam("privateNicId", request.privateNicId)}`
    },
    marshalling_gen.unmarshalPrivateNIC
  );
  /**
   * Delete a private NIC.
   *
   * @param request - The request {@link DeletePrivateNICRequest}
   */
  deletePrivateNIC = (request) => this.client.fetch({
    method: "DELETE",
    path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam("serverId", request.serverId)}/private_nics/${marshalling.validatePathParam("privateNicId", request.privateNicId)}`
  });
  pageOfListBootscripts = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/bootscripts`,
      urlParams: marshalling.urlParams(
        ["arch", request.arch],
        ["default", request.default],
        ["page", request.page],
        ["per_page", request.perPage ?? this.client.settings.defaultPageSize],
        ["public", request.public],
        ["title", request.title]
      )
    },
    marshalling_gen.unmarshalListBootscriptsResponse
  );
  /**
   * List bootscripts.
   *
   * @deprecated
   * @param request - The request {@link ListBootscriptsRequest}
   * @returns A Promise of ListBootscriptsResponse
   */
  listBootscripts = (request = {}) => resourcePaginator.enrichForPagination("bootscripts", this.pageOfListBootscripts, request);
  /**
   * Get bootscripts. Get details of a bootscript with the specified ID.
   *
   * @deprecated
   * @param request - The request {@link GetBootscriptRequest}
   * @returns A Promise of GetBootscriptResponse
   */
  getBootscript = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/bootscripts/${marshalling.validatePathParam("bootscriptId", request.bootscriptId)}`
    },
    marshalling_gen.unmarshalGetBootscriptResponse
  );
  getDashboard = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/dashboard`,
      urlParams: marshalling.urlParams(
        ["organization", request.organization],
        ["project", request.project]
      )
    },
    marshalling_gen.unmarshalGetDashboardResponse
  );
  /**
   * Get a volume or snapshot's migration plan. Given a volume or snapshot,
   * returns the migration plan for a call to the "Apply a migration plan"
   * endpoint. This plan will include zero or one volume, and zero or more
   * snapshots, which will need to be migrated together. This endpoint does not
   * perform the actual migration itself, the "Apply a migration plan" endpoint
   * must be used. The validation_key value returned by this endpoint must be
   * provided to the call to the "Apply a migration plan" endpoint to confirm
   * that all resources listed in the plan should be migrated.
   *
   * @param request - The request {@link PlanBlockMigrationRequest}
   * @returns A Promise of MigrationPlan
   */
  planBlockMigration = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalPlanBlockMigrationRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/block-migration/plan`
    },
    marshalling_gen.unmarshalMigrationPlan
  );
  /**
   * Migrate a volume and/or snapshots to SBS (Scaleway Block Storage). To be
   * used, the call to this endpoint must be preceded by a call to the "Plan a
   * migration" endpoint. To migrate all resources mentioned in the migration
   * plan, the validation_key returned in the plan must be provided.
   *
   * @param request - The request {@link ApplyBlockMigrationRequest}
   */
  applyBlockMigration = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalApplyBlockMigrationRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/instance/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/block-migration/apply`
  });
}
exports.API = API;


/***/ }),

/***/ 8338:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const api_gen = __nccwpck_require__(8265);
const content_gen = __nccwpck_require__(2751);
const validateNotUndefined = (obj) => {
  if (obj === void 0) throw new TypeError(`object was found undefined`);
  return obj;
};
class InstanceV1UtilsAPI extends api_gen.API {
  /**
   * Waits for {@link Image} to be in a final state.
   *
   * @param request - The request {@link GetImageRequest}
   * @param options - The waiting options
   * @returns A Promise of Image
   */
  waitForImage = (request, options) => intervalRetrier.tryAtIntervals(
    async () => {
      const value = await this.getImage(request).then(
        (res) => res.image
      );
      return {
        done: !content_gen.IMAGE_TRANSIENT_STATUSES.includes(value.state),
        value
      };
    },
    intervalRetrier.createExponentialBackoffStrategy(
      options?.minDelay ?? 1,
      options?.maxDelay ?? 30
    ),
    options?.timeout
  );
  /**
   * Waits for {@link PrivateNIC} to be in a final state.
   *
   * @param request - The request {@link GetPrivateNICRequest}
   * @param options - The waiting options
   * @returns A Promise of PrivateNIC
   */
  waitForPrivateNIC = (request, options) => intervalRetrier.tryAtIntervals(
    async () => {
      const value = await this.getPrivateNIC(request).then(
        (res) => res.privateNic
      );
      return {
        done: !content_gen.PRIVATE_NIC_TRANSIENT_STATUSES.includes(value.state),
        value
      };
    },
    intervalRetrier.createExponentialBackoffStrategy(
      options?.minDelay ?? 1,
      options?.maxDelay ?? 30
    ),
    options?.timeout
  );
  /**
   * Waits for {@link Server} to be in a final state.
   *
   * @param request - The request {@link GetServerRequest}
   * @param options - The waiting options
   * @returns A Promise of Server
   */
  waitForServer = (request, options) => intervalRetrier.tryAtIntervals(
    async () => {
      const value = await this.getServer(request).then(
        (res) => res.server
      );
      return {
        done: !content_gen.SERVER_TRANSIENT_STATUSES.includes(value.state),
        value
      };
    },
    intervalRetrier.createExponentialBackoffStrategy(
      options?.minDelay ?? 1,
      options?.maxDelay ?? 30
    ),
    options?.timeout
  );
  /**
   * Waits for {@link Server} to be in a final state.
   *
   * @param request - The request {@link GetServerRequest}
   * @param options - The waiting options
   * @returns A Promise of Server
   */
  waitForSnapshot = (request, options) => intervalRetrier.tryAtIntervals(
    async () => {
      const value = await this.getSnapshot(request).then(
        (res) => res.snapshot
      );
      return {
        done: !content_gen.SNAPSHOT_TRANSIENT_STATUSES.includes(value.state),
        value
      };
    },
    intervalRetrier.createExponentialBackoffStrategy(
      options?.minDelay ?? 1,
      options?.maxDelay ?? 30
    ),
    options?.timeout
  );
  /**
   * Waits for {@link Volume} to be in a final state.
   *
   * @param request - The request {@link GetVolumeRequest}
   * @param options - The waiting options
   * @returns A Promise of Volume
   */
  waitForVolume = (request, options) => intervalRetrier.tryAtIntervals(
    async () => {
      const value = await this.getVolume(request).then(
        (res) => res.volume
      );
      return {
        done: !content_gen.VOLUME_TRANSIENT_STATUSES.includes(value.state),
        value
      };
    },
    intervalRetrier.createExponentialBackoffStrategy(
      options?.minDelay ?? 1,
      options?.maxDelay ?? 30
    ),
    options?.timeout
  );
  /**
   * Updates a server.
   *
   * @param request - The request {@link UpdateServerRequest}
   * @returns A Promise of UpdateServerResponse
   */
  updateServer = (request) => this._updateServer(request);
  /**
   * Creates a server.
   *
   * @param request - The request {@link CreateServerRequest}
   * @returns A Promise of CreateServerResponse
   */
  createServer = (request) => this._createServer(request);
  /**
   * Starts an action and wait for the server to be in the correct "terminal
   * state" expected by this action.
   *
   * @param request - The request {@link ServerActionRequest}
   * @returns A Promise of Server
   */
  serverActionAndWait = async (request, options) => {
    const finalServer = await this.serverAction(request).then(
      () => this.waitForServer(
        {
          serverId: request.serverId,
          zone: request.zone
        },
        options
      )
    );
    let expectedState;
    switch (request.action) {
      case "poweron":
      case "reboot":
        expectedState = "running";
        break;
      case "poweroff":
        expectedState = "stopped";
        break;
      case "stop_in_place":
        expectedState = "stopped in place";
        break;
    }
    if (expectedState && finalServer.state !== expectedState) {
      throw new Error(
        `expected state ${expectedState} but found ${finalServer.state}: ${finalServer.stateDetail}`
      );
    }
    return finalServer;
  };
  /**
   * Attaches a volume to a server.
   *
   * @param request - The request {@link AttachVolumeRequest}
   * @returns A Promise of AttachVolumeResponse
   */
  attachVolume = async (request) => {
    const volumes = await this.getServer({
      serverId: request.serverId,
      zone: request.zone
    }).then((res) => validateNotUndefined(res.server?.volumes));
    const newVolumes = {};
    for (const [key, server] of Object.entries(volumes)) {
      newVolumes[key] = { id: server.id, name: server.name };
    }
    let found = false;
    const volumesLength = Object.keys(volumes).length;
    for (let index = 0; index <= volumesLength; index += 1) {
      const key = index.toString();
      if (!(key in newVolumes)) {
        newVolumes[key] = {
          id: request.volumeId,
          name: request.volumeId
          // name is ignored on this PATCH
        };
        found = true;
        break;
      }
    }
    if (!found) {
      throw new Error(`could not find key to attach volume ${request.volumeId}`);
    }
    return this.updateServer({
      serverId: request.serverId,
      volumes: newVolumes,
      zone: request.zone
    }).then((obj) => obj);
  };
  /**
   * Detaches a volume from a server.
   *
   * @param request - The request {@link DetachVolumeRequest}
   * @returns A Promise of DetachVolumeResponse
   */
  detachVolume = async (request) => {
    const server = await this.getVolume({
      volumeId: request.volumeId,
      zone: request.zone
    }).then((res) => validateNotUndefined(res.volume?.server?.id)).then(
      (serverId) => this.getServer({
        serverId,
        zone: request.zone
      })
    ).then((res) => validateNotUndefined(res.server));
    const newVolumes = {};
    for (const [key, volume] of Object.entries(server.volumes)) {
      if (volume.id !== request.volumeId) {
        newVolumes[key] = { id: volume.id, name: volume.name };
      }
    }
    return this.updateServer({
      serverId: server.id,
      volumes: newVolumes,
      zone: request.zone
    }).then((obj) => obj);
  };
  /**
   * Get the content of a user data on a server for the given key.
   *
   * @param request - The request {@link GetServerUserDataRequest}
   * @returns The content of the key
   */
  getServerUserData = (request) => this.client.fetch({
    method: "GET",
    path: `/instance/v1/zones/${marshalling.validatePathParam(
      "zone",
      request.zone ?? this.client.settings.defaultZone
    )}/servers/${marshalling.validatePathParam(
      "serverId",
      request.serverId
    )}/user_data/${marshalling.validatePathParam("key", request.key)}`
  });
  /**
   * Sets the content of a user data on a server for the given key.
   *
   * @param request - The request {@link SetServerUserDataRequest}
   */
  setServerUserData = (request) => this.client.fetch({
    body: request.content,
    headers: { "Content-Type": "text/plain" },
    method: "PATCH",
    path: `/instance/v1/zones/${marshalling.validatePathParam(
      "zone",
      request.zone ?? this.client.settings.defaultZone
    )}/servers/${marshalling.validatePathParam(
      "serverId",
      request.serverId
    )}/user_data/${marshalling.validatePathParam("key", request.key)}`
  });
}
exports.InstanceV1UtilsAPI = InstanceV1UtilsAPI;


/***/ }),

/***/ 2751:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const IMAGE_TRANSIENT_STATUSES = ["creating"];
const IP_TRANSIENT_STATUSES = ["pending"];
const PRIVATE_NIC_TRANSIENT_STATUSES = ["syncing"];
const SECURITY_GROUP_TRANSIENT_STATUSES = [
  "syncing"
];
const SERVER_IP_TRANSIENT_STATUSES = ["pending"];
const SERVER_TRANSIENT_STATUSES = ["starting", "stopping"];
const SNAPSHOT_TRANSIENT_STATUSES = [
  "snapshotting",
  "importing",
  "exporting"
];
const TASK_TRANSIENT_STATUSES = [
  "pending",
  "started",
  "retry"
];
const VOLUME_SERVER_TRANSIENT_STATUSES = [
  "snapshotting",
  "fetching",
  "resizing",
  "saving",
  "hotsyncing"
];
const VOLUME_TRANSIENT_STATUSES = [
  "snapshotting",
  "fetching",
  "resizing",
  "saving",
  "hotsyncing"
];
exports.IMAGE_TRANSIENT_STATUSES = IMAGE_TRANSIENT_STATUSES;
exports.IP_TRANSIENT_STATUSES = IP_TRANSIENT_STATUSES;
exports.PRIVATE_NIC_TRANSIENT_STATUSES = PRIVATE_NIC_TRANSIENT_STATUSES;
exports.SECURITY_GROUP_TRANSIENT_STATUSES = SECURITY_GROUP_TRANSIENT_STATUSES;
exports.SERVER_IP_TRANSIENT_STATUSES = SERVER_IP_TRANSIENT_STATUSES;
exports.SERVER_TRANSIENT_STATUSES = SERVER_TRANSIENT_STATUSES;
exports.SNAPSHOT_TRANSIENT_STATUSES = SNAPSHOT_TRANSIENT_STATUSES;
exports.TASK_TRANSIENT_STATUSES = TASK_TRANSIENT_STATUSES;
exports.VOLUME_SERVER_TRANSIENT_STATUSES = VOLUME_SERVER_TRANSIENT_STATUSES;
exports.VOLUME_TRANSIENT_STATUSES = VOLUME_TRANSIENT_STATUSES;


/***/ }),

/***/ 4578:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_utils = __nccwpck_require__(8338);
const content_gen = __nccwpck_require__(2751);
exports.API = api_utils.InstanceV1UtilsAPI;
exports.IMAGE_TRANSIENT_STATUSES = content_gen.IMAGE_TRANSIENT_STATUSES;
exports.IP_TRANSIENT_STATUSES = content_gen.IP_TRANSIENT_STATUSES;
exports.PRIVATE_NIC_TRANSIENT_STATUSES = content_gen.PRIVATE_NIC_TRANSIENT_STATUSES;
exports.SECURITY_GROUP_TRANSIENT_STATUSES = content_gen.SECURITY_GROUP_TRANSIENT_STATUSES;
exports.SERVER_IP_TRANSIENT_STATUSES = content_gen.SERVER_IP_TRANSIENT_STATUSES;
exports.SERVER_TRANSIENT_STATUSES = content_gen.SERVER_TRANSIENT_STATUSES;
exports.SNAPSHOT_TRANSIENT_STATUSES = content_gen.SNAPSHOT_TRANSIENT_STATUSES;
exports.TASK_TRANSIENT_STATUSES = content_gen.TASK_TRANSIENT_STATUSES;
exports.VOLUME_SERVER_TRANSIENT_STATUSES = content_gen.VOLUME_SERVER_TRANSIENT_STATUSES;
exports.VOLUME_TRANSIENT_STATUSES = content_gen.VOLUME_TRANSIENT_STATUSES;


/***/ }),

/***/ 3199:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const randomName = __nccwpck_require__(8118);
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalPrivateNIC = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PrivateNIC' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    macAddress: data.mac_address,
    privateNetworkId: data.private_network_id,
    serverId: data.server_id,
    state: data.state,
    tags: data.tags
  };
};
const unmarshalServerSummary = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerSummary' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    name: data.name
  };
};
const unmarshalBootscript = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Bootscript' failed as data isn't a dictionary.`
    );
  }
  return {
    architecture: data.architecture,
    bootcmdargs: data.bootcmdargs,
    default: data.default,
    dtb: data.dtb,
    id: data.id,
    initrd: data.initrd,
    kernel: data.kernel,
    organization: data.organization,
    project: data.project,
    public: data.public,
    title: data.title,
    zone: data.zone
  };
};
const unmarshalVolume = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Volume' failed as data isn't a dictionary.`
    );
  }
  return {
    creationDate: marshalling.unmarshalDate(data.creation_date),
    exportUri: data.export_uri,
    id: data.id,
    modificationDate: marshalling.unmarshalDate(data.modification_date),
    name: data.name,
    organization: data.organization,
    project: data.project,
    server: data.server ? unmarshalServerSummary(data.server) : void 0,
    size: data.size,
    state: data.state,
    tags: data.tags,
    volumeType: data.volume_type,
    zone: data.zone
  };
};
const unmarshalVolumeSummary = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'VolumeSummary' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    name: data.name,
    size: data.size,
    volumeType: data.volume_type
  };
};
const unmarshalImage = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Image' failed as data isn't a dictionary.`
    );
  }
  return {
    arch: data.arch,
    creationDate: marshalling.unmarshalDate(data.creation_date),
    defaultBootscript: data.default_bootscript ? unmarshalBootscript(data.default_bootscript) : void 0,
    extraVolumes: marshalling.unmarshalMapOfObject(data.extra_volumes, unmarshalVolume),
    fromServer: data.from_server,
    id: data.id,
    modificationDate: marshalling.unmarshalDate(data.modification_date),
    name: data.name,
    organization: data.organization,
    project: data.project,
    public: data.public,
    rootVolume: data.root_volume ? unmarshalVolumeSummary(data.root_volume) : void 0,
    state: data.state,
    tags: data.tags,
    zone: data.zone
  };
};
const unmarshalPlacementGroup = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PlacementGroup' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    name: data.name,
    organization: data.organization,
    policyMode: data.policy_mode,
    policyRespected: data.policy_respected,
    policyType: data.policy_type,
    project: data.project,
    tags: data.tags,
    zone: data.zone
  };
};
const unmarshalSecurityGroupSummary = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SecurityGroupSummary' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    name: data.name
  };
};
const unmarshalServerIp = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerIp' failed as data isn't a dictionary.`
    );
  }
  return {
    address: data.address,
    dynamic: data.dynamic,
    family: data.family,
    gateway: data.gateway,
    id: data.id,
    ipamId: data.ipam_id,
    netmask: data.netmask,
    provisioningMode: data.provisioning_mode,
    state: data.state,
    tags: data.tags
  };
};
const unmarshalServerIpv6 = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerIpv6' failed as data isn't a dictionary.`
    );
  }
  return {
    address: data.address,
    gateway: data.gateway,
    netmask: data.netmask
  };
};
const unmarshalServerLocation = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerLocation' failed as data isn't a dictionary.`
    );
  }
  return {
    clusterId: data.cluster_id,
    hypervisorId: data.hypervisor_id,
    nodeId: data.node_id,
    platformId: data.platform_id,
    zoneId: data.zone_id
  };
};
const unmarshalServerMaintenance = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerMaintenance' failed as data isn't a dictionary.`
    );
  }
  return {
    reason: data.reason,
    startDate: marshalling.unmarshalDate(data.start_date)
  };
};
const unmarshalVolumeServer = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'VolumeServer' failed as data isn't a dictionary.`
    );
  }
  return {
    boot: data.boot,
    creationDate: marshalling.unmarshalDate(data.creation_date),
    exportUri: data.export_uri,
    id: data.id,
    modificationDate: marshalling.unmarshalDate(data.modification_date),
    name: data.name,
    organization: data.organization,
    project: data.project,
    server: data.server ? unmarshalServerSummary(data.server) : void 0,
    size: data.size,
    state: data.state,
    volumeType: data.volume_type,
    zone: data.zone
  };
};
const unmarshalServer = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Server' failed as data isn't a dictionary.`
    );
  }
  return {
    adminPasswordEncryptedValue: data.admin_password_encrypted_value,
    adminPasswordEncryptionSshKeyId: data.admin_password_encryption_ssh_key_id,
    allowedActions: data.allowed_actions,
    arch: data.arch,
    bootType: data.boot_type,
    bootscript: data.bootscript ? unmarshalBootscript(data.bootscript) : void 0,
    commercialType: data.commercial_type,
    creationDate: marshalling.unmarshalDate(data.creation_date),
    dynamicIpRequired: data.dynamic_ip_required,
    enableIpv6: data.enable_ipv6,
    hostname: data.hostname,
    id: data.id,
    image: data.image ? unmarshalImage(data.image) : void 0,
    ipv6: data.ipv6 ? unmarshalServerIpv6(data.ipv6) : void 0,
    location: data.location ? unmarshalServerLocation(data.location) : void 0,
    macAddress: data.mac_address,
    maintenances: marshalling.unmarshalArrayOfObject(
      data.maintenances,
      unmarshalServerMaintenance
    ),
    modificationDate: marshalling.unmarshalDate(data.modification_date),
    name: data.name,
    organization: data.organization,
    placementGroup: data.placement_group ? unmarshalPlacementGroup(data.placement_group) : void 0,
    privateIp: data.private_ip,
    privateNics: marshalling.unmarshalArrayOfObject(data.private_nics, unmarshalPrivateNIC),
    project: data.project,
    protected: data.protected,
    publicIp: data.public_ip ? unmarshalServerIp(data.public_ip) : void 0,
    publicIps: marshalling.unmarshalArrayOfObject(data.public_ips, unmarshalServerIp),
    routedIpEnabled: data.routed_ip_enabled,
    securityGroup: data.security_group ? unmarshalSecurityGroupSummary(data.security_group) : void 0,
    state: data.state,
    stateDetail: data.state_detail,
    tags: data.tags,
    volumes: marshalling.unmarshalMapOfObject(data.volumes, unmarshalVolumeServer),
    zone: data.zone
  };
};
const unmarshalAttachServerVolumeResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'AttachServerVolumeResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    server: data.server ? unmarshalServer(data.server) : void 0
  };
};
const unmarshalCreateImageResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CreateImageResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    image: data.image ? unmarshalImage(data.image) : void 0
  };
};
const unmarshalIp = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Ip' failed as data isn't a dictionary.`
    );
  }
  return {
    address: data.address,
    id: data.id,
    ipamId: data.ipam_id,
    organization: data.organization,
    prefix: data.prefix,
    project: data.project,
    reverse: data.reverse,
    server: data.server ? unmarshalServerSummary(data.server) : void 0,
    state: data.state,
    tags: data.tags,
    type: data.type,
    zone: data.zone
  };
};
const unmarshalCreateIpResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CreateIpResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    ip: data.ip ? unmarshalIp(data.ip) : void 0
  };
};
const unmarshalCreatePlacementGroupResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CreatePlacementGroupResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    placementGroup: data.placement_group ? unmarshalPlacementGroup(data.placement_group) : void 0
  };
};
const unmarshalCreatePrivateNICResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CreatePrivateNICResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    privateNic: data.private_nic ? unmarshalPrivateNIC(data.private_nic) : void 0
  };
};
const unmarshalSecurityGroup = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SecurityGroup' failed as data isn't a dictionary.`
    );
  }
  return {
    creationDate: marshalling.unmarshalDate(data.creation_date),
    description: data.description,
    enableDefaultSecurity: data.enable_default_security,
    id: data.id,
    inboundDefaultPolicy: data.inbound_default_policy,
    modificationDate: marshalling.unmarshalDate(data.modification_date),
    name: data.name,
    organization: data.organization,
    organizationDefault: data.organization_default,
    outboundDefaultPolicy: data.outbound_default_policy,
    project: data.project,
    projectDefault: data.project_default,
    servers: marshalling.unmarshalArrayOfObject(data.servers, unmarshalServerSummary),
    state: data.state,
    stateful: data.stateful,
    tags: data.tags,
    zone: data.zone
  };
};
const unmarshalCreateSecurityGroupResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CreateSecurityGroupResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    securityGroup: data.security_group ? unmarshalSecurityGroup(data.security_group) : void 0
  };
};
const unmarshalSecurityGroupRule = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SecurityGroupRule' failed as data isn't a dictionary.`
    );
  }
  return {
    action: data.action,
    destPortFrom: data.dest_port_from,
    destPortTo: data.dest_port_to,
    direction: data.direction,
    editable: data.editable,
    id: data.id,
    ipRange: data.ip_range,
    position: data.position,
    protocol: data.protocol,
    zone: data.zone
  };
};
const unmarshalCreateSecurityGroupRuleResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CreateSecurityGroupRuleResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rule: data.rule ? unmarshalSecurityGroupRule(data.rule) : void 0
  };
};
const unmarshalCreateServerResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CreateServerResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    server: data.server ? unmarshalServer(data.server) : void 0
  };
};
const unmarshalSnapshotBaseVolume = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SnapshotBaseVolume' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    name: data.name
  };
};
const unmarshalSnapshot = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Snapshot' failed as data isn't a dictionary.`
    );
  }
  return {
    baseVolume: data.base_volume ? unmarshalSnapshotBaseVolume(data.base_volume) : void 0,
    creationDate: marshalling.unmarshalDate(data.creation_date),
    errorReason: data.error_reason,
    id: data.id,
    modificationDate: marshalling.unmarshalDate(data.modification_date),
    name: data.name,
    organization: data.organization,
    project: data.project,
    size: data.size,
    state: data.state,
    tags: data.tags,
    volumeType: data.volume_type,
    zone: data.zone
  };
};
const unmarshalTask = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Task' failed as data isn't a dictionary.`
    );
  }
  return {
    description: data.description,
    hrefFrom: data.href_from,
    hrefResult: data.href_result,
    id: data.id,
    progress: data.progress,
    startedAt: marshalling.unmarshalDate(data.started_at),
    status: data.status,
    terminatedAt: marshalling.unmarshalDate(data.terminated_at),
    zone: data.zone
  };
};
const unmarshalCreateSnapshotResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CreateSnapshotResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    snapshot: data.snapshot ? unmarshalSnapshot(data.snapshot) : void 0,
    task: data.task ? unmarshalTask(data.task) : void 0
  };
};
const unmarshalCreateVolumeResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CreateVolumeResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    volume: data.volume ? unmarshalVolume(data.volume) : void 0
  };
};
const unmarshalDetachServerVolumeResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DetachServerVolumeResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    server: data.server ? unmarshalServer(data.server) : void 0
  };
};
const unmarshalExportSnapshotResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ExportSnapshotResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    task: data.task ? unmarshalTask(data.task) : void 0
  };
};
const unmarshalGetBootscriptResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetBootscriptResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    bootscript: data.bootscript ? unmarshalBootscript(data.bootscript) : void 0
  };
};
const unmarshalDashboard = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Dashboard' failed as data isn't a dictionary.`
    );
  }
  return {
    imagesCount: data.images_count,
    ipsCount: data.ips_count,
    ipsUnused: data.ips_unused,
    placementGroupsCount: data.placement_groups_count,
    privateNicsCount: data.private_nics_count,
    runningServersCount: data.running_servers_count,
    securityGroupsCount: data.security_groups_count,
    serversByTypes: data.servers_by_types,
    serversCount: data.servers_count,
    snapshotsCount: data.snapshots_count,
    volumesBSsdCount: data.volumes_b_ssd_count,
    volumesBSsdTotalSize: data.volumes_b_ssd_total_size,
    volumesCount: data.volumes_count,
    volumesLSsdCount: data.volumes_l_ssd_count,
    volumesLSsdTotalSize: data.volumes_l_ssd_total_size
  };
};
const unmarshalGetDashboardResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetDashboardResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    dashboard: data.dashboard ? unmarshalDashboard(data.dashboard) : void 0
  };
};
const unmarshalGetImageResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetImageResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    image: data.image ? unmarshalImage(data.image) : void 0
  };
};
const unmarshalGetIpResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetIpResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    ip: data.ip ? unmarshalIp(data.ip) : void 0
  };
};
const unmarshalGetPlacementGroupResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetPlacementGroupResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    placementGroup: data.placement_group ? unmarshalPlacementGroup(data.placement_group) : void 0
  };
};
const unmarshalPlacementGroupServer = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PlacementGroupServer' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    name: data.name,
    policyRespected: data.policy_respected
  };
};
const unmarshalGetPlacementGroupServersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetPlacementGroupServersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    servers: marshalling.unmarshalArrayOfObject(
      data.servers,
      unmarshalPlacementGroupServer
    )
  };
};
const unmarshalGetPrivateNICResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetPrivateNICResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    privateNic: data.private_nic ? unmarshalPrivateNIC(data.private_nic) : void 0
  };
};
const unmarshalGetSecurityGroupResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetSecurityGroupResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    securityGroup: data.security_group ? unmarshalSecurityGroup(data.security_group) : void 0
  };
};
const unmarshalGetSecurityGroupRuleResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetSecurityGroupRuleResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rule: data.rule ? unmarshalSecurityGroupRule(data.rule) : void 0
  };
};
const unmarshalGetServerResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetServerResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    server: data.server ? unmarshalServer(data.server) : void 0
  };
};
const unmarshalGetServerTypesAvailabilityResponseAvailability = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetServerTypesAvailabilityResponseAvailability' failed as data isn't a dictionary.`
    );
  }
  return {
    availability: data.availability
  };
};
const unmarshalGetServerTypesAvailabilityResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetServerTypesAvailabilityResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    servers: marshalling.unmarshalMapOfObject(
      data.servers,
      unmarshalGetServerTypesAvailabilityResponseAvailability
    ),
    totalCount: data.total_count
  };
};
const unmarshalGetSnapshotResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetSnapshotResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    snapshot: data.snapshot ? unmarshalSnapshot(data.snapshot) : void 0
  };
};
const unmarshalGetVolumeResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetVolumeResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    volume: data.volume ? unmarshalVolume(data.volume) : void 0
  };
};
const unmarshalListBootscriptsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListBootscriptsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    bootscripts: marshalling.unmarshalArrayOfObject(data.bootscripts, unmarshalBootscript),
    totalCount: data.total_count
  };
};
const unmarshalListImagesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListImagesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    images: marshalling.unmarshalArrayOfObject(data.images, unmarshalImage),
    totalCount: data.total_count
  };
};
const unmarshalListIpsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListIpsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    ips: marshalling.unmarshalArrayOfObject(data.ips, unmarshalIp),
    totalCount: data.total_count
  };
};
const unmarshalListPlacementGroupsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListPlacementGroupsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    placementGroups: marshalling.unmarshalArrayOfObject(
      data.placement_groups,
      unmarshalPlacementGroup
    ),
    totalCount: data.total_count
  };
};
const unmarshalListPrivateNICsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListPrivateNICsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    privateNics: marshalling.unmarshalArrayOfObject(data.private_nics, unmarshalPrivateNIC),
    totalCount: data.total_count
  };
};
const unmarshalListSecurityGroupRulesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSecurityGroupRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalSecurityGroupRule),
    totalCount: data.total_count
  };
};
const unmarshalListSecurityGroupsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSecurityGroupsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    securityGroups: marshalling.unmarshalArrayOfObject(
      data.security_groups,
      unmarshalSecurityGroup
    ),
    totalCount: data.total_count
  };
};
const unmarshalListServerActionsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListServerActionsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    actions: data.actions
  };
};
const unmarshalListServerUserDataResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListServerUserDataResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    userData: data.user_data
  };
};
const unmarshalListServersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListServersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    servers: marshalling.unmarshalArrayOfObject(data.servers, unmarshalServer),
    totalCount: data.total_count
  };
};
const unmarshalServerTypeNetworkInterface = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerTypeNetworkInterface' failed as data isn't a dictionary.`
    );
  }
  return {
    internalBandwidth: data.internal_bandwidth,
    internetBandwidth: data.internet_bandwidth
  };
};
const unmarshalServerTypeVolumeConstraintSizes = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerTypeVolumeConstraintSizes' failed as data isn't a dictionary.`
    );
  }
  return {
    maxSize: data.max_size,
    minSize: data.min_size
  };
};
const unmarshalServerTypeCapabilities = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerTypeCapabilities' failed as data isn't a dictionary.`
    );
  }
  return {
    blockStorage: data.block_storage,
    bootTypes: data.boot_types
  };
};
const unmarshalServerTypeNetwork = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerTypeNetwork' failed as data isn't a dictionary.`
    );
  }
  return {
    interfaces: marshalling.unmarshalArrayOfObject(
      data.interfaces,
      unmarshalServerTypeNetworkInterface
    ),
    ipv6Support: data.ipv6_support,
    sumInternalBandwidth: data.sum_internal_bandwidth,
    sumInternetBandwidth: data.sum_internet_bandwidth
  };
};
const unmarshalServerTypeVolumeConstraintsByType = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerTypeVolumeConstraintsByType' failed as data isn't a dictionary.`
    );
  }
  return {
    lSsd: data.l_ssd ? unmarshalServerTypeVolumeConstraintSizes(data.l_ssd) : void 0
  };
};
const unmarshalServerType = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerType' failed as data isn't a dictionary.`
    );
  }
  return {
    altNames: data.alt_names,
    arch: data.arch,
    baremetal: data.baremetal,
    capabilities: data.capabilities ? unmarshalServerTypeCapabilities(data.capabilities) : void 0,
    gpu: data.gpu,
    hourlyPrice: data.hourly_price,
    monthlyPrice: data.monthly_price,
    ncpus: data.ncpus,
    network: data.network ? unmarshalServerTypeNetwork(data.network) : void 0,
    perVolumeConstraint: data.per_volume_constraint ? unmarshalServerTypeVolumeConstraintsByType(data.per_volume_constraint) : void 0,
    ram: data.ram,
    scratchStorageMaxSize: data.scratch_storage_max_size,
    volumesConstraint: data.volumes_constraint ? unmarshalServerTypeVolumeConstraintSizes(data.volumes_constraint) : void 0
  };
};
const unmarshalListServersTypesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListServersTypesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    servers: marshalling.unmarshalMapOfObject(data.servers, unmarshalServerType),
    totalCount: data.total_count
  };
};
const unmarshalListSnapshotsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSnapshotsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    snapshots: marshalling.unmarshalArrayOfObject(data.snapshots, unmarshalSnapshot),
    totalCount: data.total_count
  };
};
const unmarshalListVolumesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListVolumesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    volumes: marshalling.unmarshalArrayOfObject(data.volumes, unmarshalVolume)
  };
};
const unmarshalVolumeTypeCapabilities = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'VolumeTypeCapabilities' failed as data isn't a dictionary.`
    );
  }
  return {
    snapshot: data.snapshot
  };
};
const unmarshalVolumeTypeConstraints = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'VolumeTypeConstraints' failed as data isn't a dictionary.`
    );
  }
  return {
    max: data.max,
    min: data.min
  };
};
const unmarshalVolumeType = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'VolumeType' failed as data isn't a dictionary.`
    );
  }
  return {
    capabilities: data.capabilities ? unmarshalVolumeTypeCapabilities(data.capabilities) : void 0,
    constraints: data.constraints ? unmarshalVolumeTypeConstraints(data.constraints) : void 0,
    displayName: data.display_name
  };
};
const unmarshalListVolumesTypesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListVolumesTypesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    volumes: marshalling.unmarshalMapOfObject(data.volumes, unmarshalVolumeType)
  };
};
const unmarshalMigrationPlan = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'MigrationPlan' failed as data isn't a dictionary.`
    );
  }
  return {
    snapshots: marshalling.unmarshalArrayOfObject(data.snapshots, unmarshalSnapshot),
    validationKey: data.validation_key,
    volume: data.volume ? unmarshalVolume(data.volume) : void 0
  };
};
const unmarshalServerActionResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServerActionResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    task: data.task ? unmarshalTask(data.task) : void 0
  };
};
const unmarshalSetImageResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetImageResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    image: data.image ? unmarshalImage(data.image) : void 0
  };
};
const unmarshalSetPlacementGroupResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetPlacementGroupResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    placementGroup: data.placement_group ? unmarshalPlacementGroup(data.placement_group) : void 0
  };
};
const unmarshalSetPlacementGroupServersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetPlacementGroupServersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    servers: marshalling.unmarshalArrayOfObject(
      data.servers,
      unmarshalPlacementGroupServer
    )
  };
};
const unmarshalSetSecurityGroupResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetSecurityGroupResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    securityGroup: data.security_group ? unmarshalSecurityGroup(data.security_group) : void 0
  };
};
const unmarshalSetSecurityGroupRuleResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetSecurityGroupRuleResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rule: data.rule ? unmarshalSecurityGroupRule(data.rule) : void 0
  };
};
const unmarshalSetSecurityGroupRulesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetSecurityGroupRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalSecurityGroupRule)
  };
};
const unmarshalSetServerResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetServerResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    server: data.server ? unmarshalServer(data.server) : void 0
  };
};
const unmarshalSetSnapshotResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetSnapshotResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    snapshot: data.snapshot ? unmarshalSnapshot(data.snapshot) : void 0
  };
};
const unmarshalUpdateImageResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UpdateImageResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    image: data.image ? unmarshalImage(data.image) : void 0
  };
};
const unmarshalUpdateIpResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UpdateIpResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    ip: data.ip ? unmarshalIp(data.ip) : void 0
  };
};
const unmarshalUpdatePlacementGroupResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UpdatePlacementGroupResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    placementGroup: data.placement_group ? unmarshalPlacementGroup(data.placement_group) : void 0
  };
};
const unmarshalUpdatePlacementGroupServersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UpdatePlacementGroupServersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    servers: marshalling.unmarshalArrayOfObject(
      data.servers,
      unmarshalPlacementGroupServer
    )
  };
};
const unmarshalUpdateSecurityGroupResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UpdateSecurityGroupResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    securityGroup: data.security_group ? unmarshalSecurityGroup(data.security_group) : void 0
  };
};
const unmarshalUpdateSecurityGroupRuleResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UpdateSecurityGroupRuleResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rule: data.rule ? unmarshalSecurityGroupRule(data.rule) : void 0
  };
};
const unmarshalUpdateServerResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UpdateServerResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    server: data.server ? unmarshalServer(data.server) : void 0
  };
};
const unmarshalUpdateSnapshotResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UpdateSnapshotResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    snapshot: data.snapshot ? unmarshalSnapshot(data.snapshot) : void 0
  };
};
const unmarshalUpdateVolumeResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UpdateVolumeResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    volume: data.volume ? unmarshalVolume(data.volume) : void 0
  };
};
const marshalApplyBlockMigrationRequest = (request, defaults) => ({
  validation_key: request.validationKey,
  ...marshalling.resolveOneOf([
    { param: "volume_id", value: request.volumeId },
    { param: "snapshot_id", value: request.snapshotId }
  ])
});
const marshalAttachServerVolumeRequest = (request, defaults) => ({
  boot: request.boot,
  volume_id: request.volumeId,
  volume_type: request.volumeType
});
const marshalVolumeTemplate = (request, defaults) => ({
  id: request.id,
  name: request.name,
  size: request.size,
  volume_type: request.volumeType,
  ...marshalling.resolveOneOf([
    { param: "project", value: request.project },
    { param: "organization", value: request.organization }
  ])
});
const marshalCreateImageRequest = (request, defaults) => ({
  arch: request.arch,
  default_bootscript: request.defaultBootscript,
  extra_volumes: request.extraVolumes !== void 0 ? Object.entries(request.extraVolumes).reduce(
    (acc, [key, value]) => ({
      ...acc,
      [key]: marshalVolumeTemplate(value)
    }),
    {}
  ) : void 0,
  name: request.name || randomName("img"),
  public: request.public,
  root_volume: request.rootVolume,
  tags: request.tags,
  ...marshalling.resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project",
      value: request.project
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization",
      value: request.organization
    }
  ])
});
const marshalCreateIpRequest = (request, defaults) => ({
  server: request.server,
  tags: request.tags,
  type: request.type,
  ...marshalling.resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project",
      value: request.project
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization",
      value: request.organization
    }
  ])
});
const marshalCreatePlacementGroupRequest = (request, defaults) => ({
  name: request.name || randomName("pg"),
  policy_mode: request.policyMode,
  policy_type: request.policyType,
  tags: request.tags,
  ...marshalling.resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project",
      value: request.project
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization",
      value: request.organization
    }
  ])
});
const marshalCreatePrivateNICRequest = (request, defaults) => ({
  ip_ids: request.ipIds,
  ipam_ip_ids: request.ipamIpIds,
  private_network_id: request.privateNetworkId,
  tags: request.tags
});
const marshalCreateSecurityGroupRequest = (request, defaults) => ({
  description: request.description,
  enable_default_security: request.enableDefaultSecurity,
  inbound_default_policy: request.inboundDefaultPolicy,
  name: request.name || randomName("sg"),
  outbound_default_policy: request.outboundDefaultPolicy,
  stateful: request.stateful,
  tags: request.tags,
  ...marshalling.resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project",
      value: request.project
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization",
      value: request.organization
    }
  ]),
  ...marshalling.resolveOneOf([
    { param: "organization_default", value: request.organizationDefault },
    { param: "project_default", value: request.projectDefault }
  ])
});
const marshalCreateSecurityGroupRuleRequest = (request, defaults) => ({
  action: request.action,
  dest_port_from: request.destPortFrom,
  dest_port_to: request.destPortTo,
  direction: request.direction,
  editable: request.editable,
  ip_range: request.ipRange,
  position: request.position,
  protocol: request.protocol
});
const marshalVolumeServerTemplate = (request, defaults) => ({
  base_snapshot: request.baseSnapshot,
  boot: request.boot,
  id: request.id,
  name: request.name,
  organization: request.organization,
  project: request.project,
  size: request.size,
  volume_type: request.volumeType
});
const marshalCreateServerRequest = (request, defaults) => ({
  admin_password_encryption_ssh_key_id: request.adminPasswordEncryptionSshKeyId,
  boot_type: request.bootType,
  bootscript: request.bootscript,
  commercial_type: request.commercialType,
  dynamic_ip_required: request.dynamicIpRequired,
  enable_ipv6: request.enableIpv6,
  image: request.image,
  name: request.name || randomName("srv"),
  placement_group: request.placementGroup,
  public_ip: request.publicIp,
  public_ips: request.publicIps,
  routed_ip_enabled: request.routedIpEnabled,
  security_group: request.securityGroup,
  tags: request.tags,
  volumes: request.volumes !== void 0 ? Object.entries(request.volumes).reduce(
    (acc, [key, value]) => ({
      ...acc,
      [key]: marshalVolumeServerTemplate(value)
    }),
    {}
  ) : void 0,
  ...marshalling.resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project",
      value: request.project
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization",
      value: request.organization
    }
  ])
});
const marshalCreateSnapshotRequest = (request, defaults) => ({
  bucket: request.bucket,
  key: request.key,
  name: request.name || randomName("snp"),
  size: request.size,
  tags: request.tags,
  volume_id: request.volumeId,
  volume_type: request.volumeType,
  ...marshalling.resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project",
      value: request.project
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization",
      value: request.organization
    }
  ])
});
const marshalCreateVolumeRequest = (request, defaults) => ({
  name: request.name || randomName("vol"),
  tags: request.tags,
  volume_type: request.volumeType,
  ...marshalling.resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project",
      value: request.project
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization",
      value: request.organization
    }
  ]),
  ...marshalling.resolveOneOf([
    { param: "size", value: request.size },
    { param: "base_snapshot", value: request.baseSnapshot }
  ])
});
const marshalDetachServerVolumeRequest = (request, defaults) => ({
  volume_id: request.volumeId
});
const marshalExportSnapshotRequest = (request, defaults) => ({
  bucket: request.bucket,
  key: request.key
});
const marshalPlanBlockMigrationRequest = (request, defaults) => ({
  ...marshalling.resolveOneOf([
    { param: "volume_id", value: request.volumeId },
    { param: "snapshot_id", value: request.snapshotId }
  ])
});
const marshalServerActionRequestVolumeBackupTemplate = (request, defaults) => ({
  volume_type: request.volumeType
});
const marshalServerActionRequest = (request, defaults) => ({
  action: request.action,
  name: request.name,
  volumes: request.volumes !== void 0 ? Object.entries(request.volumes).reduce(
    (acc, [key, value]) => ({
      ...acc,
      [key]: marshalServerActionRequestVolumeBackupTemplate(
        value
      )
    }),
    {}
  ) : void 0
});
const marshalServerSummary = (request, defaults) => ({
  id: request.id,
  name: request.name
});
const marshalBootscript = (request, defaults) => ({
  architecture: request.architecture,
  bootcmdargs: request.bootcmdargs,
  default: request.default,
  dtb: request.dtb,
  id: request.id,
  initrd: request.initrd,
  kernel: request.kernel,
  organization: request.organization,
  project: request.project,
  public: request.public,
  title: request.title,
  zone: request.zone
});
const marshalVolume = (request, defaults) => ({
  creation_date: request.creationDate,
  export_uri: request.exportUri,
  id: request.id,
  modification_date: request.modificationDate,
  name: request.name,
  organization: request.organization,
  project: request.project,
  server: request.server !== void 0 ? marshalServerSummary(request.server) : void 0,
  size: request.size,
  state: request.state,
  tags: request.tags,
  volume_type: request.volumeType,
  zone: request.zone
});
const marshalVolumeSummary = (request, defaults) => ({
  id: request.id,
  name: request.name,
  size: request.size,
  volume_type: request.volumeType
});
const marshalSetImageRequest = (request, defaults) => ({
  arch: request.arch,
  creation_date: request.creationDate,
  default_bootscript: request.defaultBootscript !== void 0 ? marshalBootscript(request.defaultBootscript) : void 0,
  extra_volumes: request.extraVolumes !== void 0 ? Object.entries(request.extraVolumes).reduce(
    (acc, [key, value]) => ({
      ...acc,
      [key]: marshalVolume(value)
    }),
    {}
  ) : void 0,
  from_server: request.fromServer,
  modification_date: request.modificationDate,
  name: request.name,
  organization: request.organization ?? defaults.defaultOrganizationId,
  project: request.project ?? defaults.defaultProjectId,
  public: request.public,
  root_volume: request.rootVolume !== void 0 ? marshalVolumeSummary(request.rootVolume) : void 0,
  state: request.state,
  tags: request.tags
});
const marshalSetPlacementGroupRequest = (request, defaults) => ({
  name: request.name,
  organization: request.organization ?? defaults.defaultOrganizationId,
  policy_mode: request.policyMode,
  policy_type: request.policyType,
  project: request.project ?? defaults.defaultProjectId,
  tags: request.tags
});
const marshalSetPlacementGroupServersRequest = (request, defaults) => ({
  servers: request.servers
});
const marshalSetSecurityGroupRequest = (request, defaults) => ({
  creation_date: request.creationDate,
  description: request.description,
  enable_default_security: request.enableDefaultSecurity,
  inbound_default_policy: request.inboundDefaultPolicy,
  modification_date: request.modificationDate,
  name: request.name,
  organization: request.organization ?? defaults.defaultOrganizationId,
  organization_default: request.organizationDefault,
  outbound_default_policy: request.outboundDefaultPolicy,
  project: request.project ?? defaults.defaultProjectId,
  project_default: request.projectDefault,
  servers: request.servers !== void 0 ? request.servers.map((elt) => marshalServerSummary(elt)) : void 0,
  stateful: request.stateful,
  tags: request.tags
});
const marshalSetSecurityGroupRuleRequest = (request, defaults) => ({
  action: request.action,
  dest_port_from: request.destPortFrom,
  dest_port_to: request.destPortTo,
  direction: request.direction,
  editable: request.editable,
  id: request.id,
  ip_range: request.ipRange,
  position: request.position,
  protocol: request.protocol
});
const marshalSetSecurityGroupRulesRequestRule = (request, defaults) => ({
  action: request.action,
  dest_port_from: request.destPortFrom,
  dest_port_to: request.destPortTo,
  direction: request.direction,
  editable: request.editable,
  id: request.id,
  ip_range: request.ipRange,
  position: request.position,
  protocol: request.protocol,
  zone: request.zone
});
const marshalSetSecurityGroupRulesRequest = (request, defaults) => ({
  rules: request.rules !== void 0 ? request.rules.map(
    (elt) => marshalSetSecurityGroupRulesRequestRule(elt)
  ) : void 0
});
const marshalImage = (request, defaults) => ({
  arch: request.arch,
  creation_date: request.creationDate,
  default_bootscript: request.defaultBootscript !== void 0 ? marshalBootscript(request.defaultBootscript) : void 0,
  extra_volumes: Object.entries(request.extraVolumes).reduce(
    (acc, [key, value]) => ({ ...acc, [key]: marshalVolume(value) }),
    {}
  ),
  from_server: request.fromServer,
  id: request.id,
  modification_date: request.modificationDate,
  name: request.name,
  organization: request.organization,
  project: request.project,
  public: request.public,
  root_volume: request.rootVolume !== void 0 ? marshalVolumeSummary(request.rootVolume) : void 0,
  state: request.state,
  tags: request.tags,
  zone: request.zone
});
const marshalPlacementGroup = (request, defaults) => ({
  id: request.id,
  name: request.name,
  organization: request.organization,
  policy_mode: request.policyMode,
  policy_respected: request.policyRespected,
  policy_type: request.policyType,
  project: request.project,
  tags: request.tags,
  zone: request.zone
});
const marshalPrivateNIC = (request, defaults) => ({
  id: request.id,
  mac_address: request.macAddress,
  private_network_id: request.privateNetworkId,
  server_id: request.serverId,
  state: request.state,
  tags: request.tags
});
const marshalSecurityGroupSummary = (request, defaults) => ({
  id: request.id,
  name: request.name
});
const marshalServerIp = (request, defaults) => ({
  address: request.address,
  dynamic: request.dynamic,
  family: request.family,
  gateway: request.gateway,
  id: request.id,
  ipam_id: request.ipamId,
  netmask: request.netmask,
  provisioning_mode: request.provisioningMode,
  state: request.state,
  tags: request.tags
});
const marshalServerIpv6 = (request, defaults) => ({
  address: request.address,
  gateway: request.gateway,
  netmask: request.netmask
});
const marshalServerLocation = (request, defaults) => ({
  cluster_id: request.clusterId,
  hypervisor_id: request.hypervisorId,
  node_id: request.nodeId,
  platform_id: request.platformId,
  zone_id: request.zoneId
});
const marshalServerMaintenance = (request, defaults) => ({
  reason: request.reason,
  start_date: request.startDate
});
const marshalSetServerRequest = (request, defaults) => ({
  admin_password_encryption_ssh_key_id: request.adminPasswordEncryptionSshKeyId,
  allowed_actions: request.allowedActions !== void 0 ? request.allowedActions : void 0,
  arch: request.arch,
  boot_type: request.bootType,
  bootscript: request.bootscript !== void 0 ? marshalBootscript(request.bootscript) : void 0,
  commercial_type: request.commercialType,
  creation_date: request.creationDate,
  dynamic_ip_required: request.dynamicIpRequired,
  enable_ipv6: request.enableIpv6,
  hostname: request.hostname,
  image: request.image !== void 0 ? marshalImage(request.image) : void 0,
  ipv6: request.ipv6 !== void 0 ? marshalServerIpv6(request.ipv6) : void 0,
  location: request.location !== void 0 ? marshalServerLocation(request.location) : void 0,
  maintenances: request.maintenances !== void 0 ? request.maintenances.map((elt) => marshalServerMaintenance(elt)) : void 0,
  modification_date: request.modificationDate,
  name: request.name,
  organization: request.organization ?? defaults.defaultOrganizationId,
  placement_group: request.placementGroup !== void 0 ? marshalPlacementGroup(request.placementGroup) : void 0,
  private_ip: request.privateIp,
  private_nics: request.privateNics !== void 0 ? request.privateNics.map((elt) => marshalPrivateNIC(elt)) : void 0,
  project: request.project ?? defaults.defaultProjectId,
  protected: request.protected,
  public_ip: request.publicIp !== void 0 ? marshalServerIp(request.publicIp) : void 0,
  public_ips: request.publicIps !== void 0 ? request.publicIps.map((elt) => marshalServerIp(elt)) : void 0,
  routed_ip_enabled: request.routedIpEnabled,
  security_group: request.securityGroup !== void 0 ? marshalSecurityGroupSummary(request.securityGroup) : void 0,
  state: request.state,
  state_detail: request.stateDetail,
  tags: request.tags,
  volumes: request.volumes !== void 0 ? Object.entries(request.volumes).reduce(
    (acc, [key, value]) => ({
      ...acc,
      [key]: marshalVolume(value)
    }),
    {}
  ) : void 0
});
const marshalSnapshotBaseVolume = (request, defaults) => ({
  id: request.id,
  name: request.name
});
const marshalSetSnapshotRequest = (request, defaults) => ({
  base_volume: request.baseVolume !== void 0 ? marshalSnapshotBaseVolume(request.baseVolume) : void 0,
  creation_date: request.creationDate,
  id: request.id,
  modification_date: request.modificationDate,
  name: request.name,
  organization: request.organization ?? defaults.defaultOrganizationId,
  project: request.project ?? defaults.defaultProjectId,
  size: request.size,
  state: request.state,
  tags: request.tags,
  volume_type: request.volumeType
});
const marshalVolumeImageUpdateTemplate = (request, defaults) => ({
  id: request.id
});
const marshalUpdateImageRequest = (request, defaults) => ({
  arch: request.arch,
  extra_volumes: request.extraVolumes !== void 0 ? Object.entries(request.extraVolumes).reduce(
    (acc, [key, value]) => ({
      ...acc,
      [key]: marshalVolumeImageUpdateTemplate(value)
    }),
    {}
  ) : void 0,
  name: request.name,
  public: request.public,
  tags: request.tags
});
const marshalUpdateIpRequest = (request, defaults) => ({
  reverse: request.reverse,
  server: request.server,
  tags: request.tags,
  type: request.type
});
const marshalUpdatePlacementGroupRequest = (request, defaults) => ({
  name: request.name,
  policy_mode: request.policyMode,
  policy_type: request.policyType,
  tags: request.tags
});
const marshalUpdatePlacementGroupServersRequest = (request, defaults) => ({
  servers: request.servers
});
const marshalUpdatePrivateNICRequest = (request, defaults) => ({
  tags: request.tags
});
const marshalUpdateSecurityGroupRequest = (request, defaults) => ({
  description: request.description,
  enable_default_security: request.enableDefaultSecurity,
  inbound_default_policy: request.inboundDefaultPolicy,
  name: request.name,
  organization_default: request.organizationDefault,
  outbound_default_policy: request.outboundDefaultPolicy,
  project_default: request.projectDefault,
  stateful: request.stateful,
  tags: request.tags
});
const marshalUpdateSecurityGroupRuleRequest = (request, defaults) => ({
  action: request.action,
  dest_port_from: request.destPortFrom,
  dest_port_to: request.destPortTo,
  direction: request.direction,
  ip_range: request.ipRange,
  position: request.position,
  protocol: request.protocol
});
const marshalSecurityGroupTemplate = (request, defaults) => ({
  id: request.id,
  name: request.name
});
const marshalUpdateServerRequest = (request, defaults) => ({
  admin_password_encryption_ssh_key_id: request.adminPasswordEncryptionSshKeyId,
  boot_type: request.bootType,
  bootscript: request.bootscript,
  commercial_type: request.commercialType,
  dynamic_ip_required: request.dynamicIpRequired,
  enable_ipv6: request.enableIpv6,
  name: request.name,
  placement_group: request.placementGroup,
  private_nics: request.privateNics,
  protected: request.protected,
  public_ips: request.publicIps,
  routed_ip_enabled: request.routedIpEnabled,
  security_group: request.securityGroup !== void 0 ? marshalSecurityGroupTemplate(request.securityGroup) : void 0,
  tags: request.tags,
  volumes: request.volumes !== void 0 ? Object.entries(request.volumes).reduce(
    (acc, [key, value]) => ({
      ...acc,
      [key]: marshalVolumeServerTemplate(value)
    }),
    {}
  ) : void 0
});
const marshalUpdateSnapshotRequest = (request, defaults) => ({
  name: request.name,
  tags: request.tags
});
const marshalUpdateVolumeRequest = (request, defaults) => ({
  name: request.name,
  size: request.size,
  tags: request.tags
});
exports.marshalApplyBlockMigrationRequest = marshalApplyBlockMigrationRequest;
exports.marshalAttachServerVolumeRequest = marshalAttachServerVolumeRequest;
exports.marshalCreateImageRequest = marshalCreateImageRequest;
exports.marshalCreateIpRequest = marshalCreateIpRequest;
exports.marshalCreatePlacementGroupRequest = marshalCreatePlacementGroupRequest;
exports.marshalCreatePrivateNICRequest = marshalCreatePrivateNICRequest;
exports.marshalCreateSecurityGroupRequest = marshalCreateSecurityGroupRequest;
exports.marshalCreateSecurityGroupRuleRequest = marshalCreateSecurityGroupRuleRequest;
exports.marshalCreateServerRequest = marshalCreateServerRequest;
exports.marshalCreateSnapshotRequest = marshalCreateSnapshotRequest;
exports.marshalCreateVolumeRequest = marshalCreateVolumeRequest;
exports.marshalDetachServerVolumeRequest = marshalDetachServerVolumeRequest;
exports.marshalExportSnapshotRequest = marshalExportSnapshotRequest;
exports.marshalPlanBlockMigrationRequest = marshalPlanBlockMigrationRequest;
exports.marshalServerActionRequest = marshalServerActionRequest;
exports.marshalSetImageRequest = marshalSetImageRequest;
exports.marshalSetPlacementGroupRequest = marshalSetPlacementGroupRequest;
exports.marshalSetPlacementGroupServersRequest = marshalSetPlacementGroupServersRequest;
exports.marshalSetSecurityGroupRequest = marshalSetSecurityGroupRequest;
exports.marshalSetSecurityGroupRuleRequest = marshalSetSecurityGroupRuleRequest;
exports.marshalSetSecurityGroupRulesRequest = marshalSetSecurityGroupRulesRequest;
exports.marshalSetServerRequest = marshalSetServerRequest;
exports.marshalSetSnapshotRequest = marshalSetSnapshotRequest;
exports.marshalUpdateImageRequest = marshalUpdateImageRequest;
exports.marshalUpdateIpRequest = marshalUpdateIpRequest;
exports.marshalUpdatePlacementGroupRequest = marshalUpdatePlacementGroupRequest;
exports.marshalUpdatePlacementGroupServersRequest = marshalUpdatePlacementGroupServersRequest;
exports.marshalUpdatePrivateNICRequest = marshalUpdatePrivateNICRequest;
exports.marshalUpdateSecurityGroupRequest = marshalUpdateSecurityGroupRequest;
exports.marshalUpdateSecurityGroupRuleRequest = marshalUpdateSecurityGroupRuleRequest;
exports.marshalUpdateServerRequest = marshalUpdateServerRequest;
exports.marshalUpdateSnapshotRequest = marshalUpdateSnapshotRequest;
exports.marshalUpdateVolumeRequest = marshalUpdateVolumeRequest;
exports.unmarshalAttachServerVolumeResponse = unmarshalAttachServerVolumeResponse;
exports.unmarshalCreateImageResponse = unmarshalCreateImageResponse;
exports.unmarshalCreateIpResponse = unmarshalCreateIpResponse;
exports.unmarshalCreatePlacementGroupResponse = unmarshalCreatePlacementGroupResponse;
exports.unmarshalCreatePrivateNICResponse = unmarshalCreatePrivateNICResponse;
exports.unmarshalCreateSecurityGroupResponse = unmarshalCreateSecurityGroupResponse;
exports.unmarshalCreateSecurityGroupRuleResponse = unmarshalCreateSecurityGroupRuleResponse;
exports.unmarshalCreateServerResponse = unmarshalCreateServerResponse;
exports.unmarshalCreateSnapshotResponse = unmarshalCreateSnapshotResponse;
exports.unmarshalCreateVolumeResponse = unmarshalCreateVolumeResponse;
exports.unmarshalDetachServerVolumeResponse = unmarshalDetachServerVolumeResponse;
exports.unmarshalExportSnapshotResponse = unmarshalExportSnapshotResponse;
exports.unmarshalGetBootscriptResponse = unmarshalGetBootscriptResponse;
exports.unmarshalGetDashboardResponse = unmarshalGetDashboardResponse;
exports.unmarshalGetImageResponse = unmarshalGetImageResponse;
exports.unmarshalGetIpResponse = unmarshalGetIpResponse;
exports.unmarshalGetPlacementGroupResponse = unmarshalGetPlacementGroupResponse;
exports.unmarshalGetPlacementGroupServersResponse = unmarshalGetPlacementGroupServersResponse;
exports.unmarshalGetPrivateNICResponse = unmarshalGetPrivateNICResponse;
exports.unmarshalGetSecurityGroupResponse = unmarshalGetSecurityGroupResponse;
exports.unmarshalGetSecurityGroupRuleResponse = unmarshalGetSecurityGroupRuleResponse;
exports.unmarshalGetServerResponse = unmarshalGetServerResponse;
exports.unmarshalGetServerTypesAvailabilityResponse = unmarshalGetServerTypesAvailabilityResponse;
exports.unmarshalGetSnapshotResponse = unmarshalGetSnapshotResponse;
exports.unmarshalGetVolumeResponse = unmarshalGetVolumeResponse;
exports.unmarshalListBootscriptsResponse = unmarshalListBootscriptsResponse;
exports.unmarshalListImagesResponse = unmarshalListImagesResponse;
exports.unmarshalListIpsResponse = unmarshalListIpsResponse;
exports.unmarshalListPlacementGroupsResponse = unmarshalListPlacementGroupsResponse;
exports.unmarshalListPrivateNICsResponse = unmarshalListPrivateNICsResponse;
exports.unmarshalListSecurityGroupRulesResponse = unmarshalListSecurityGroupRulesResponse;
exports.unmarshalListSecurityGroupsResponse = unmarshalListSecurityGroupsResponse;
exports.unmarshalListServerActionsResponse = unmarshalListServerActionsResponse;
exports.unmarshalListServerUserDataResponse = unmarshalListServerUserDataResponse;
exports.unmarshalListServersResponse = unmarshalListServersResponse;
exports.unmarshalListServersTypesResponse = unmarshalListServersTypesResponse;
exports.unmarshalListSnapshotsResponse = unmarshalListSnapshotsResponse;
exports.unmarshalListVolumesResponse = unmarshalListVolumesResponse;
exports.unmarshalListVolumesTypesResponse = unmarshalListVolumesTypesResponse;
exports.unmarshalMigrationPlan = unmarshalMigrationPlan;
exports.unmarshalPrivateNIC = unmarshalPrivateNIC;
exports.unmarshalServerActionResponse = unmarshalServerActionResponse;
exports.unmarshalSetImageResponse = unmarshalSetImageResponse;
exports.unmarshalSetPlacementGroupResponse = unmarshalSetPlacementGroupResponse;
exports.unmarshalSetPlacementGroupServersResponse = unmarshalSetPlacementGroupServersResponse;
exports.unmarshalSetSecurityGroupResponse = unmarshalSetSecurityGroupResponse;
exports.unmarshalSetSecurityGroupRuleResponse = unmarshalSetSecurityGroupRuleResponse;
exports.unmarshalSetSecurityGroupRulesResponse = unmarshalSetSecurityGroupRulesResponse;
exports.unmarshalSetServerResponse = unmarshalSetServerResponse;
exports.unmarshalSetSnapshotResponse = unmarshalSetSnapshotResponse;
exports.unmarshalUpdateImageResponse = unmarshalUpdateImageResponse;
exports.unmarshalUpdateIpResponse = unmarshalUpdateIpResponse;
exports.unmarshalUpdatePlacementGroupResponse = unmarshalUpdatePlacementGroupResponse;
exports.unmarshalUpdatePlacementGroupServersResponse = unmarshalUpdatePlacementGroupServersResponse;
exports.unmarshalUpdateSecurityGroupResponse = unmarshalUpdateSecurityGroupResponse;
exports.unmarshalUpdateSecurityGroupRuleResponse = unmarshalUpdateSecurityGroupRuleResponse;
exports.unmarshalUpdateServerResponse = unmarshalUpdateServerResponse;
exports.unmarshalUpdateSnapshotResponse = unmarshalUpdateSnapshotResponse;
exports.unmarshalUpdateVolumeResponse = unmarshalUpdateVolumeResponse;


/***/ }),

/***/ 4872:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(1487);
exports.v1 = index_gen;


/***/ }),

/***/ 7392:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const content_gen = __nccwpck_require__(5325);
const marshalling_gen = __nccwpck_require__(4428);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par"];
  pageOfListHubs = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/hubs`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListHubsResponse
  );
  /**
   * List hubs. List all Hubs in the specified zone. By default, returned Hubs
   * are ordered by creation date in ascending order, though this can be
   * modified via the `order_by` field.
   *
   * @param request - The request {@link ListHubsRequest}
   * @returns A Promise of ListHubsResponse
   */
  listHubs = (request = {}) => resourcePaginator.enrichForPagination("hubs", this.pageOfListHubs, request);
  /**
   * Create a hub. Create a new Hub in the targeted region, specifying its
   * configuration including name and product plan.
   *
   * @param request - The request {@link CreateHubRequest}
   * @returns A Promise of Hub
   */
  createHub = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateHubRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/hubs`
    },
    marshalling_gen.unmarshalHub
  );
  /**
   * Get a hub. Retrieve information about an existing IoT Hub, specified by its
   * Hub ID. Its full details, including name, status and endpoint, are returned
   * in the response object.
   *
   * @param request - The request {@link GetHubRequest}
   * @returns A Promise of Hub
   */
  getHub = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/hubs/${marshalling.validatePathParam("hubId", request.hubId)}`
    },
    marshalling_gen.unmarshalHub
  );
  /**
   * Waits for {@link Hub} to be in a final state.
   *
   * @param request - The request {@link GetHubRequest}
   * @param options - The waiting options
   * @returns A Promise of Hub
   */
  waitForHub = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.HUB_TRANSIENT_STATUSES.includes(res.status))),
    this.getHub,
    request,
    options
  );
  /**
   * Update a hub. Update the parameters of an existing IoT Hub, specified by
   * its Hub ID.
   *
   * @param request - The request {@link UpdateHubRequest}
   * @returns A Promise of Hub
   */
  updateHub = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateHubRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/hubs/${marshalling.validatePathParam("hubId", request.hubId)}`
    },
    marshalling_gen.unmarshalHub
  );
  /**
   * Enable a hub. Enable an existing IoT Hub, specified by its Hub ID.
   *
   * @param request - The request {@link EnableHubRequest}
   * @returns A Promise of Hub
   */
  enableHub = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/hubs/${marshalling.validatePathParam("hubId", request.hubId)}/enable`
    },
    marshalling_gen.unmarshalHub
  );
  /**
   * Disable a hub. Disable an existing IoT Hub, specified by its Hub ID.
   *
   * @param request - The request {@link DisableHubRequest}
   * @returns A Promise of Hub
   */
  disableHub = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/hubs/${marshalling.validatePathParam("hubId", request.hubId)}/disable`
    },
    marshalling_gen.unmarshalHub
  );
  /**
   * Delete a hub. Delete an existing IoT Hub, specified by its Hub ID. Deleting
   * a Hub is permanent, and cannot be undone.
   *
   * @param request - The request {@link DeleteHubRequest}
   */
  deleteHub = (request) => this.client.fetch({
    method: "DELETE",
    path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/hubs/${marshalling.validatePathParam("hubId", request.hubId)}`,
    urlParams: marshalling.urlParams(["delete_devices", request.deleteDevices])
  });
  /**
   * Get a hub's metrics. Get the metrics of an existing IoT Hub, specified by
   * its Hub ID.
   *
   * @deprecated
   * @param request - The request {@link GetHubMetricsRequest}
   * @returns A Promise of GetHubMetricsResponse
   */
  getHubMetrics = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/hubs/${marshalling.validatePathParam("hubId", request.hubId)}/metrics`,
      urlParams: marshalling.urlParams(["start_date", request.startDate])
    },
    marshalling_gen.unmarshalGetHubMetricsResponse
  );
  /**
   * Set the certificate authority of a hub. Set a particular PEM-encoded
   * certificate, specified by the Hub ID.
   *
   * @param request - The request {@link SetHubCARequest}
   * @returns A Promise of Hub
   */
  setHubCA = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetHubCARequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/hubs/${marshalling.validatePathParam("hubId", request.hubId)}/ca`
    },
    marshalling_gen.unmarshalHub
  );
  /**
   * Get the certificate authority of a hub. Get information for a particular
   * PEM-encoded certificate, specified by the Hub ID.
   *
   * @param request - The request {@link GetHubCARequest}
   * @returns A Promise of GetHubCAResponse
   */
  getHubCA = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/hubs/${marshalling.validatePathParam("hubId", request.hubId)}/ca`
    },
    marshalling_gen.unmarshalGetHubCAResponse
  );
  pageOfListDevices = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/devices`,
      urlParams: marshalling.urlParams(
        ["allow_insecure", request.allowInsecure],
        ["hub_id", request.hubId],
        ["name", request.name],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["status", request.status]
      )
    },
    marshalling_gen.unmarshalListDevicesResponse
  );
  /**
   * List devices. List all devices in the specified region. By default,
   * returned devices are ordered by creation date in ascending order, though
   * this can be modified via the `order_by` field.
   *
   * @param request - The request {@link ListDevicesRequest}
   * @returns A Promise of ListDevicesResponse
   */
  listDevices = (request = {}) => resourcePaginator.enrichForPagination("devices", this.pageOfListDevices, request);
  /**
   * Add a device. Attach a device to a given Hub.
   *
   * @param request - The request {@link CreateDeviceRequest}
   * @returns A Promise of CreateDeviceResponse
   */
  createDevice = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateDeviceRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/devices`
    },
    marshalling_gen.unmarshalCreateDeviceResponse
  );
  /**
   * Get a device. Retrieve information about an existing device, specified by
   * its device ID. Its full details, including name, status and ID, are
   * returned in the response object.
   *
   * @param request - The request {@link GetDeviceRequest}
   * @returns A Promise of Device
   */
  getDevice = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/devices/${marshalling.validatePathParam("deviceId", request.deviceId)}`
    },
    marshalling_gen.unmarshalDevice
  );
  /**
   * Update a device. Update the parameters of an existing device, specified by
   * its device ID.
   *
   * @param request - The request {@link UpdateDeviceRequest}
   * @returns A Promise of Device
   */
  updateDevice = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateDeviceRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/devices/${marshalling.validatePathParam("deviceId", request.deviceId)}`
    },
    marshalling_gen.unmarshalDevice
  );
  /**
   * Enable a device. Enable a specific device, specified by its device ID.
   *
   * @param request - The request {@link EnableDeviceRequest}
   * @returns A Promise of Device
   */
  enableDevice = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/devices/${marshalling.validatePathParam("deviceId", request.deviceId)}/enable`
    },
    marshalling_gen.unmarshalDevice
  );
  /**
   * Disable a device. Disable an existing device, specified by its device ID.
   *
   * @param request - The request {@link DisableDeviceRequest}
   * @returns A Promise of Device
   */
  disableDevice = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/devices/${marshalling.validatePathParam("deviceId", request.deviceId)}/disable`
    },
    marshalling_gen.unmarshalDevice
  );
  /**
   * Renew a device certificate. Renew the certificate of an existing device,
   * specified by its device ID.
   *
   * @param request - The request {@link RenewDeviceCertificateRequest}
   * @returns A Promise of RenewDeviceCertificateResponse
   */
  renewDeviceCertificate = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/devices/${marshalling.validatePathParam("deviceId", request.deviceId)}/renew-certificate`
    },
    marshalling_gen.unmarshalRenewDeviceCertificateResponse
  );
  /**
   * Set a custom certificate on a device. Switch the existing certificate of a
   * given device with an EM-encoded custom certificate.
   *
   * @param request - The request {@link SetDeviceCertificateRequest}
   * @returns A Promise of SetDeviceCertificateResponse
   */
  setDeviceCertificate = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetDeviceCertificateRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/devices/${marshalling.validatePathParam("deviceId", request.deviceId)}/certificate`
    },
    marshalling_gen.unmarshalSetDeviceCertificateResponse
  );
  /**
   * Get a device's certificate. Get information for a particular PEM-encoded
   * certificate, specified by the device ID. The response returns full details
   * of the device, including its type of certificate.
   *
   * @param request - The request {@link GetDeviceCertificateRequest}
   * @returns A Promise of GetDeviceCertificateResponse
   */
  getDeviceCertificate = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/devices/${marshalling.validatePathParam("deviceId", request.deviceId)}/certificate`
    },
    marshalling_gen.unmarshalGetDeviceCertificateResponse
  );
  /**
   * Remove a device. Remove a specific device from the specific Hub it is
   * attached to.
   *
   * @param request - The request {@link DeleteDeviceRequest}
   */
  deleteDevice = (request) => this.client.fetch({
    method: "DELETE",
    path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/devices/${marshalling.validatePathParam("deviceId", request.deviceId)}`
  });
  /**
   * Get a device's metrics. Get the metrics of an existing device, specified by
   * its device ID.
   *
   * @deprecated
   * @param request - The request {@link GetDeviceMetricsRequest}
   * @returns A Promise of GetDeviceMetricsResponse
   */
  getDeviceMetrics = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/devices/${marshalling.validatePathParam("deviceId", request.deviceId)}/metrics`,
      urlParams: marshalling.urlParams(["start_date", request.startDate])
    },
    marshalling_gen.unmarshalGetDeviceMetricsResponse
  );
  pageOfListRoutes = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/routes`,
      urlParams: marshalling.urlParams(
        ["hub_id", request.hubId],
        ["name", request.name],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListRoutesResponse
  );
  /**
   * List routes. List all routes in the specified region. By default, returned
   * routes are ordered by creation date in ascending order, though this can be
   * modified via the `order_by` field.
   *
   * @param request - The request {@link ListRoutesRequest}
   * @returns A Promise of ListRoutesResponse
   */
  listRoutes = (request = {}) => resourcePaginator.enrichForPagination("routes", this.pageOfListRoutes, request);
  /**
   * Create a route. Multiple kinds of routes can be created, such as:
   *
   * - Database Route Create a route that will record subscribed MQTT messages
   *   into your database. <b>You need to manage the database by yourself</b>.
   * - REST Route. Create a route that will call a REST API on received subscribed
   *   MQTT messages.
   * - S3 Routes. Create a route that will put subscribed MQTT messages into an S3
   *   bucket. You need to create the bucket yourself and grant write access.
   *   Granting can be done with s3cmd (`s3cmd setacl s3://<my-bucket>
   *   --acl-grant=write:555c69c3-87d0-4bf8-80f1-99a2f757d031:555c69c3-87d0-4bf8-80f1-99a2f757d031`).
   *
   * @param request - The request {@link CreateRouteRequest}
   * @returns A Promise of Route
   */
  createRoute = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateRouteRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/routes`
    },
    marshalling_gen.unmarshalRoute
  );
  /**
   * Update a route. Update the parameters of an existing route, specified by
   * its route ID.
   *
   * @param request - The request {@link UpdateRouteRequest}
   * @returns A Promise of Route
   */
  updateRoute = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateRouteRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/routes/${marshalling.validatePathParam("routeId", request.routeId)}`
    },
    marshalling_gen.unmarshalRoute
  );
  /**
   * Get a route. Get information for a particular route, specified by the route
   * ID. The response returns full details of the route, including its type, the
   * topic it subscribes to and its configuration.
   *
   * @param request - The request {@link GetRouteRequest}
   * @returns A Promise of Route
   */
  getRoute = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/routes/${marshalling.validatePathParam("routeId", request.routeId)}`
    },
    marshalling_gen.unmarshalRoute
  );
  /**
   * Delete a route. Delete an existing route, specified by its route ID.
   * Deleting a route is permanent, and cannot be undone.
   *
   * @param request - The request {@link DeleteRouteRequest}
   */
  deleteRoute = (request) => this.client.fetch({
    method: "DELETE",
    path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/routes/${marshalling.validatePathParam("routeId", request.routeId)}`
  });
  pageOfListNetworks = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/networks`,
      urlParams: marshalling.urlParams(
        ["hub_id", request.hubId],
        ["name", request.name],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["topic_prefix", request.topicPrefix]
      )
    },
    marshalling_gen.unmarshalListNetworksResponse
  );
  /**
   * List the networks.
   *
   * @param request - The request {@link ListNetworksRequest}
   * @returns A Promise of ListNetworksResponse
   */
  listNetworks = (request = {}) => resourcePaginator.enrichForPagination("networks", this.pageOfListNetworks, request);
  /**
   * Create a new network. Create a new network for an existing hub. Beside the
   * default network, you can add networks for different data providers.
   * Possible network types are Sigfox and REST.
   *
   * @param request - The request {@link CreateNetworkRequest}
   * @returns A Promise of CreateNetworkResponse
   */
  createNetwork = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateNetworkRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/networks`
    },
    marshalling_gen.unmarshalCreateNetworkResponse
  );
  /**
   * Retrieve a specific network. Retrieve an existing network, specified by its
   * network ID. The response returns full details of the network, including its
   * type, the topic prefix and its endpoint.
   *
   * @param request - The request {@link GetNetworkRequest}
   * @returns A Promise of Network
   */
  getNetwork = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/networks/${marshalling.validatePathParam("networkId", request.networkId)}`
    },
    marshalling_gen.unmarshalNetwork
  );
  /**
   * Delete a Network. Delete an existing network, specified by its network ID.
   * Deleting a network is permanent, and cannot be undone.
   *
   * @param request - The request {@link DeleteNetworkRequest}
   */
  deleteNetwork = (request) => this.client.fetch({
    method: "DELETE",
    path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/networks/${marshalling.validatePathParam("networkId", request.networkId)}`
  });
  /**
   * BETA - Get a Cloud Twin Document.
   *
   * @param request - The request {@link GetTwinDocumentRequest}
   * @returns A Promise of TwinDocument
   */
  getTwinDocument = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/twins/${marshalling.validatePathParam("twinId", request.twinId)}/documents/${marshalling.validatePathParam("documentName", request.documentName)}`
    },
    marshalling_gen.unmarshalTwinDocument
  );
  /**
   * BETA - Update a Cloud Twin Document.
   *
   * @param request - The request {@link PutTwinDocumentRequest}
   * @returns A Promise of TwinDocument
   */
  putTwinDocument = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalPutTwinDocumentRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/twins/${marshalling.validatePathParam("twinId", request.twinId)}/documents/${marshalling.validatePathParam("documentName", request.documentName)}`
    },
    marshalling_gen.unmarshalTwinDocument
  );
  /**
   * BETA - Patch a Cloud Twin Document.
   *
   * @param request - The request {@link PatchTwinDocumentRequest}
   * @returns A Promise of TwinDocument
   */
  patchTwinDocument = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalPatchTwinDocumentRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/twins/${marshalling.validatePathParam("twinId", request.twinId)}/documents/${marshalling.validatePathParam("documentName", request.documentName)}`
    },
    marshalling_gen.unmarshalTwinDocument
  );
  /**
   * BETA - Delete a Cloud Twin Document.
   *
   * @param request - The request {@link DeleteTwinDocumentRequest}
   */
  deleteTwinDocument = (request) => this.client.fetch({
    method: "DELETE",
    path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/twins/${marshalling.validatePathParam("twinId", request.twinId)}/documents/${marshalling.validatePathParam("documentName", request.documentName)}`
  });
  /**
   * BETA - List the documents of a Cloud Twin.
   *
   * @param request - The request {@link ListTwinDocumentsRequest}
   * @returns A Promise of ListTwinDocumentsResponse
   */
  listTwinDocuments = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/twins/${marshalling.validatePathParam("twinId", request.twinId)}`
    },
    marshalling_gen.unmarshalListTwinDocumentsResponse
  );
  /**
   * BETA - Delete all the documents of a Cloud Twin.
   *
   * @param request - The request {@link DeleteTwinDocumentsRequest}
   */
  deleteTwinDocuments = (request) => this.client.fetch({
    method: "DELETE",
    path: `/iot/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/twins/${marshalling.validatePathParam("twinId", request.twinId)}`
  });
}
exports.API = API;


/***/ }),

/***/ 5325:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const HUB_TRANSIENT_STATUSES = ["enabling", "disabling"];
exports.HUB_TRANSIENT_STATUSES = HUB_TRANSIENT_STATUSES;


/***/ }),

/***/ 1487:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(7392);
const content_gen = __nccwpck_require__(5325);
exports.API = api_gen.API;
exports.HUB_TRANSIENT_STATUSES = content_gen.HUB_TRANSIENT_STATUSES;


/***/ }),

/***/ 4428:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const randomName = __nccwpck_require__(8118);
const json = __nccwpck_require__(2362);
const customMarshalling = __nccwpck_require__(5667);
const marshalling = __nccwpck_require__(1502);
const unmarshalDeviceMessageFiltersRule = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DeviceMessageFiltersRule' failed as data isn't a dictionary.`
    );
  }
  return {
    policy: data.policy,
    topics: data.topics
  };
};
const unmarshalDeviceMessageFilters = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DeviceMessageFilters' failed as data isn't a dictionary.`
    );
  }
  return {
    publish: data.publish ? unmarshalDeviceMessageFiltersRule(data.publish) : void 0,
    subscribe: data.subscribe ? unmarshalDeviceMessageFiltersRule(data.subscribe) : void 0
  };
};
const unmarshalDevice = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Device' failed as data isn't a dictionary.`
    );
  }
  return {
    allowInsecure: data.allow_insecure,
    allowMultipleConnections: data.allow_multiple_connections,
    createdAt: marshalling.unmarshalDate(data.created_at),
    description: data.description,
    hasCustomCertificate: data.has_custom_certificate,
    hubId: data.hub_id,
    id: data.id,
    isConnected: data.is_connected,
    lastActivityAt: marshalling.unmarshalDate(data.last_activity_at),
    messageFilters: data.message_filters ? unmarshalDeviceMessageFilters(data.message_filters) : void 0,
    name: data.name,
    status: data.status,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalNetwork = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Network' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    endpoint: data.endpoint,
    hubId: data.hub_id,
    id: data.id,
    name: data.name,
    topicPrefix: data.topic_prefix,
    type: data.type
  };
};
const unmarshalHubTwinsGraphiteConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'HubTwinsGraphiteConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    pushUri: data.push_uri
  };
};
const unmarshalHub = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Hub' failed as data isn't a dictionary.`
    );
  }
  return {
    connectedDeviceCount: data.connected_device_count,
    createdAt: marshalling.unmarshalDate(data.created_at),
    deviceCount: data.device_count,
    disableEvents: data.disable_events,
    enableDeviceAutoProvisioning: data.enable_device_auto_provisioning,
    enabled: data.enabled,
    endpoint: data.endpoint,
    eventsTopicPrefix: data.events_topic_prefix,
    hasCustomCa: data.has_custom_ca,
    id: data.id,
    name: data.name,
    organizationId: data.organization_id,
    productPlan: data.product_plan,
    projectId: data.project_id,
    region: data.region,
    status: data.status,
    twinsGraphiteConfig: data.twins_graphite_config ? unmarshalHubTwinsGraphiteConfig(data.twins_graphite_config) : void 0,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalCertificate = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Certificate' failed as data isn't a dictionary.`
    );
  }
  return {
    crt: data.crt,
    key: data.key
  };
};
const unmarshalCreateDeviceResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CreateDeviceResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    certificate: data.certificate ? unmarshalCertificate(data.certificate) : void 0,
    device: data.device ? unmarshalDevice(data.device) : void 0
  };
};
const unmarshalCreateNetworkResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CreateNetworkResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    network: data.network ? unmarshalNetwork(data.network) : void 0,
    secret: data.secret
  };
};
const unmarshalGetDeviceCertificateResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetDeviceCertificateResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    certificatePem: data.certificate_pem,
    device: data.device ? unmarshalDevice(data.device) : void 0
  };
};
const unmarshalGetDeviceMetricsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetDeviceMetricsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    metrics: marshalling.unmarshalArrayOfObject(data.metrics, customMarshalling.unmarshalTimeSeries)
  };
};
const unmarshalGetHubCAResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetHubCAResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    caCertPem: data.ca_cert_pem
  };
};
const unmarshalGetHubMetricsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GetHubMetricsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    metrics: marshalling.unmarshalArrayOfObject(data.metrics, customMarshalling.unmarshalTimeSeries)
  };
};
const unmarshalListDevicesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDevicesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    devices: marshalling.unmarshalArrayOfObject(data.devices, unmarshalDevice),
    totalCount: data.total_count
  };
};
const unmarshalListHubsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListHubsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    hubs: marshalling.unmarshalArrayOfObject(data.hubs, unmarshalHub),
    totalCount: data.total_count
  };
};
const unmarshalListNetworksResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListNetworksResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    networks: marshalling.unmarshalArrayOfObject(data.networks, unmarshalNetwork),
    totalCount: data.total_count
  };
};
const unmarshalRouteSummary = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RouteSummary' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    hubId: data.hub_id,
    id: data.id,
    name: data.name,
    topic: data.topic,
    type: data.type,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalListRoutesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListRoutesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    routes: marshalling.unmarshalArrayOfObject(data.routes, unmarshalRouteSummary),
    totalCount: data.total_count
  };
};
const unmarshalListTwinDocumentsResponseDocumentSummary = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListTwinDocumentsResponseDocumentSummary' failed as data isn't a dictionary.`
    );
  }
  return {
    documentName: data.document_name
  };
};
const unmarshalListTwinDocumentsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListTwinDocumentsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    documents: marshalling.unmarshalArrayOfObject(
      data.documents,
      unmarshalListTwinDocumentsResponseDocumentSummary
    )
  };
};
const unmarshalRenewDeviceCertificateResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RenewDeviceCertificateResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    certificate: data.certificate ? unmarshalCertificate(data.certificate) : void 0,
    device: data.device ? unmarshalDevice(data.device) : void 0
  };
};
const unmarshalRouteDatabaseConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RouteDatabaseConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    dbname: data.dbname,
    engine: data.engine,
    host: data.host,
    password: data.password,
    port: data.port,
    query: data.query,
    username: data.username
  };
};
const unmarshalRouteRestConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RouteRestConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    headers: data.headers,
    uri: data.uri,
    verb: data.verb
  };
};
const unmarshalRouteS3Config = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RouteS3Config' failed as data isn't a dictionary.`
    );
  }
  return {
    bucketName: data.bucket_name,
    bucketRegion: data.bucket_region,
    objectPrefix: data.object_prefix,
    strategy: data.strategy
  };
};
const unmarshalRoute = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Route' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    dbConfig: data.db_config ? unmarshalRouteDatabaseConfig(data.db_config) : void 0,
    hubId: data.hub_id,
    id: data.id,
    name: data.name,
    restConfig: data.rest_config ? unmarshalRouteRestConfig(data.rest_config) : void 0,
    s3Config: data.s3_config ? unmarshalRouteS3Config(data.s3_config) : void 0,
    topic: data.topic,
    type: data.type,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalSetDeviceCertificateResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetDeviceCertificateResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    certificatePem: data.certificate_pem,
    device: data.device ? unmarshalDevice(data.device) : void 0
  };
};
const unmarshalTwinDocument = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'TwinDocument' failed as data isn't a dictionary.`
    );
  }
  return {
    data: data.data,
    documentName: data.document_name,
    twinId: data.twin_id,
    version: data.version
  };
};
const marshalDeviceMessageFiltersRule = (request, defaults) => ({
  policy: request.policy,
  topics: request.topics
});
const marshalDeviceMessageFilters = (request, defaults) => ({
  publish: request.publish !== void 0 ? marshalDeviceMessageFiltersRule(request.publish) : void 0,
  subscribe: request.subscribe !== void 0 ? marshalDeviceMessageFiltersRule(request.subscribe) : void 0
});
const marshalCreateDeviceRequest = (request, defaults) => ({
  allow_insecure: request.allowInsecure,
  allow_multiple_connections: request.allowMultipleConnections,
  description: request.description,
  hub_id: request.hubId,
  message_filters: request.messageFilters !== void 0 ? marshalDeviceMessageFilters(request.messageFilters) : void 0,
  name: request.name || randomName("device")
});
const marshalHubTwinsGraphiteConfig = (request, defaults) => ({
  push_uri: request.pushUri
});
const marshalCreateHubRequest = (request, defaults) => ({
  disable_events: request.disableEvents,
  events_topic_prefix: request.eventsTopicPrefix,
  name: request.name || randomName("hub"),
  product_plan: request.productPlan,
  project_id: request.projectId ?? defaults.defaultProjectId,
  ...marshalling.resolveOneOf([
    {
      param: "twins_graphite_config",
      value: request.twinsGraphiteConfig !== void 0 ? marshalHubTwinsGraphiteConfig(request.twinsGraphiteConfig) : void 0
    }
  ])
});
const marshalCreateNetworkRequest = (request, defaults) => ({
  hub_id: request.hubId,
  name: request.name || randomName("network"),
  topic_prefix: request.topicPrefix,
  type: request.type
});
const marshalCreateRouteRequestDatabaseConfig = (request, defaults) => ({
  dbname: request.dbname,
  engine: request.engine,
  host: request.host,
  password: request.password,
  port: request.port,
  query: request.query,
  username: request.username
});
const marshalCreateRouteRequestRestConfig = (request, defaults) => ({
  headers: request.headers,
  uri: request.uri,
  verb: request.verb
});
const marshalCreateRouteRequestS3Config = (request, defaults) => ({
  bucket_name: request.bucketName,
  bucket_region: request.bucketRegion,
  object_prefix: request.objectPrefix,
  strategy: request.strategy
});
const marshalCreateRouteRequest = (request, defaults) => ({
  hub_id: request.hubId,
  name: request.name || randomName("route"),
  topic: request.topic,
  ...marshalling.resolveOneOf([
    {
      param: "s3_config",
      value: request.s3Config !== void 0 ? marshalCreateRouteRequestS3Config(request.s3Config) : void 0
    },
    {
      param: "db_config",
      value: request.dbConfig !== void 0 ? marshalCreateRouteRequestDatabaseConfig(request.dbConfig) : void 0
    },
    {
      param: "rest_config",
      value: request.restConfig !== void 0 ? marshalCreateRouteRequestRestConfig(request.restConfig) : void 0
    }
  ])
});
const marshalPatchTwinDocumentRequest = (request, defaults) => ({
  data: request.data,
  version: request.version
});
const marshalPutTwinDocumentRequest = (request, defaults) => ({
  data: request.data,
  version: request.version
});
const marshalSetDeviceCertificateRequest = (request, defaults) => ({
  certificate_pem: request.certificatePem
});
const marshalSetHubCARequest = (request, defaults) => ({
  ca_cert_pem: request.caCertPem,
  challenge_cert_pem: request.challengeCertPem
});
const marshalUpdateDeviceRequest = (request, defaults) => ({
  allow_insecure: request.allowInsecure,
  allow_multiple_connections: request.allowMultipleConnections,
  description: request.description,
  hub_id: request.hubId,
  message_filters: request.messageFilters !== void 0 ? marshalDeviceMessageFilters(request.messageFilters) : void 0
});
const marshalUpdateHubRequest = (request, defaults) => ({
  disable_events: request.disableEvents,
  enable_device_auto_provisioning: request.enableDeviceAutoProvisioning,
  events_topic_prefix: request.eventsTopicPrefix,
  name: request.name,
  product_plan: request.productPlan,
  ...marshalling.resolveOneOf([
    {
      param: "twins_graphite_config",
      value: request.twinsGraphiteConfig !== void 0 ? marshalHubTwinsGraphiteConfig(request.twinsGraphiteConfig) : void 0
    }
  ])
});
const marshalUpdateRouteRequestDatabaseConfig = (request, defaults) => ({
  dbname: request.dbname,
  engine: request.engine,
  host: request.host,
  password: request.password,
  port: request.port,
  query: request.query,
  username: request.username
});
const marshalUpdateRouteRequestRestConfig = (request, defaults) => ({
  headers: request.headers,
  uri: request.uri,
  verb: request.verb
});
const marshalUpdateRouteRequestS3Config = (request, defaults) => ({
  bucket_name: request.bucketName,
  bucket_region: request.bucketRegion,
  object_prefix: request.objectPrefix,
  strategy: request.strategy
});
const marshalUpdateRouteRequest = (request, defaults) => ({
  name: request.name,
  topic: request.topic,
  ...marshalling.resolveOneOf([
    {
      param: "s3_config",
      value: request.s3Config !== void 0 ? marshalUpdateRouteRequestS3Config(request.s3Config) : void 0
    },
    {
      param: "db_config",
      value: request.dbConfig !== void 0 ? marshalUpdateRouteRequestDatabaseConfig(request.dbConfig) : void 0
    },
    {
      param: "rest_config",
      value: request.restConfig !== void 0 ? marshalUpdateRouteRequestRestConfig(request.restConfig) : void 0
    }
  ])
});
exports.marshalCreateDeviceRequest = marshalCreateDeviceRequest;
exports.marshalCreateHubRequest = marshalCreateHubRequest;
exports.marshalCreateNetworkRequest = marshalCreateNetworkRequest;
exports.marshalCreateRouteRequest = marshalCreateRouteRequest;
exports.marshalPatchTwinDocumentRequest = marshalPatchTwinDocumentRequest;
exports.marshalPutTwinDocumentRequest = marshalPutTwinDocumentRequest;
exports.marshalSetDeviceCertificateRequest = marshalSetDeviceCertificateRequest;
exports.marshalSetHubCARequest = marshalSetHubCARequest;
exports.marshalUpdateDeviceRequest = marshalUpdateDeviceRequest;
exports.marshalUpdateHubRequest = marshalUpdateHubRequest;
exports.marshalUpdateRouteRequest = marshalUpdateRouteRequest;
exports.unmarshalCreateDeviceResponse = unmarshalCreateDeviceResponse;
exports.unmarshalCreateNetworkResponse = unmarshalCreateNetworkResponse;
exports.unmarshalDevice = unmarshalDevice;
exports.unmarshalGetDeviceCertificateResponse = unmarshalGetDeviceCertificateResponse;
exports.unmarshalGetDeviceMetricsResponse = unmarshalGetDeviceMetricsResponse;
exports.unmarshalGetHubCAResponse = unmarshalGetHubCAResponse;
exports.unmarshalGetHubMetricsResponse = unmarshalGetHubMetricsResponse;
exports.unmarshalHub = unmarshalHub;
exports.unmarshalListDevicesResponse = unmarshalListDevicesResponse;
exports.unmarshalListHubsResponse = unmarshalListHubsResponse;
exports.unmarshalListNetworksResponse = unmarshalListNetworksResponse;
exports.unmarshalListRoutesResponse = unmarshalListRoutesResponse;
exports.unmarshalListTwinDocumentsResponse = unmarshalListTwinDocumentsResponse;
exports.unmarshalNetwork = unmarshalNetwork;
exports.unmarshalRenewDeviceCertificateResponse = unmarshalRenewDeviceCertificateResponse;
exports.unmarshalRoute = unmarshalRoute;
exports.unmarshalSetDeviceCertificateResponse = unmarshalSetDeviceCertificateResponse;
exports.unmarshalTwinDocument = unmarshalTwinDocument;


/***/ }),

/***/ 147:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(4210);
exports.v1 = index_gen;


/***/ }),

/***/ 3934:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const marshalling_gen = __nccwpck_require__(8170);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par", "nl-ams", "pl-waw"];
  /**
   * Book a new IP. Book a new IP from the specified source. Currently IPs can
   * only be booked from a Private Network.
   *
   * @param request - The request {@link BookIPRequest}
   * @returns A Promise of IP
   */
  bookIP = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalBookIPRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/ipam/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/ips`
    },
    marshalling_gen.unmarshalIP
  );
  /**
   * Release an IP. Release an IP not currently attached to a resource, and
   * returns it to the available IP pool.
   *
   * @param request - The request {@link ReleaseIPRequest}
   */
  releaseIP = (request) => this.client.fetch({
    body: "{}",
    headers: jsonContentHeaders,
    method: "DELETE",
    path: `/ipam/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/ips/${marshalling.validatePathParam("ipId", request.ipId)}`
  });
  releaseIPSet = (request = {}) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalReleaseIPSetRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/ipam/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/ip-sets/release`
  });
  /**
   * Get an IP. Retrieve details of an existing IP, specified by its IP ID.
   *
   * @param request - The request {@link GetIPRequest}
   * @returns A Promise of IP
   */
  getIP = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/ipam/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/ips/${marshalling.validatePathParam("ipId", request.ipId)}`
    },
    marshalling_gen.unmarshalIP
  );
  /**
   * Update an IP. Update parameters including tags of the specified IP.
   *
   * @param request - The request {@link UpdateIPRequest}
   * @returns A Promise of IP
   */
  updateIP = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateIPRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/ipam/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/ips/${marshalling.validatePathParam("ipId", request.ipId)}`
    },
    marshalling_gen.unmarshalIP
  );
  pageOfListIPs = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/ipam/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/ips`,
      urlParams: marshalling.urlParams(
        ["attached", request.attached],
        ["is_ipv6", request.isIpv6],
        ["mac_address", request.macAddress],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["resource_id", request.resourceId],
        ["resource_name", request.resourceName],
        ["resource_type", request.resourceType],
        ["resource_types", request.resourceTypes],
        ["tags", request.tags],
        ["vpc_id", request.vpcId],
        ...Object.entries(
          marshalling.resolveOneOf([
            { param: "zonal", value: request.zonal },
            { param: "private_network_id", value: request.privateNetworkId },
            { param: "subnet_id", value: request.subnetId }
          ])
        )
      )
    },
    marshalling_gen.unmarshalListIPsResponse
  );
  /**
   * List existing IPs. List existing IPs in the specified region using various
   * filters. For example, you can filter for IPs within a specified Private
   * Network, or for public IPs within a specified Project. By default, the IPs
   * returned in the list are ordered by creation date in ascending order,
   * though this can be modified via the order_by field.
   *
   * @param request - The request {@link ListIPsRequest}
   * @returns A Promise of ListIPsResponse
   */
  listIPs = (request = {}) => resourcePaginator.enrichForPagination("ips", this.pageOfListIPs, request);
}
exports.API = API;


/***/ }),

/***/ 4210:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(3934);
const validationRules_gen = __nccwpck_require__(5026);
exports.API = api_gen.API;
exports.ValidationRules = validationRules_gen;


/***/ }),

/***/ 8170:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalResource = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Resource' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    macAddress: data.mac_address,
    name: data.name,
    type: data.type
  };
};
const unmarshalReverse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Reverse' failed as data isn't a dictionary.`
    );
  }
  return {
    address: data.address,
    hostname: data.hostname
  };
};
const unmarshalSource = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Source' failed as data isn't a dictionary.`
    );
  }
  return {
    privateNetworkId: data.private_network_id,
    subnetId: data.subnet_id,
    zonal: data.zonal
  };
};
const unmarshalIP = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'IP' failed as data isn't a dictionary.`
    );
  }
  return {
    address: data.address,
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    isIpv6: data.is_ipv6,
    projectId: data.project_id,
    region: data.region,
    resource: data.resource ? unmarshalResource(data.resource) : void 0,
    reverses: marshalling.unmarshalArrayOfObject(data.reverses, unmarshalReverse),
    source: data.source ? unmarshalSource(data.source) : void 0,
    tags: data.tags,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    zone: data.zone
  };
};
const unmarshalListIPsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListIPsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    ips: marshalling.unmarshalArrayOfObject(data.ips, unmarshalIP),
    totalCount: data.total_count
  };
};
const marshalSource = (request, defaults) => ({
  ...marshalling.resolveOneOf([
    { param: "zonal", value: request.zonal },
    { param: "private_network_id", value: request.privateNetworkId },
    { param: "subnet_id", value: request.subnetId }
  ])
});
const marshalBookIPRequest = (request, defaults) => ({
  address: request.address,
  is_ipv6: request.isIpv6,
  project_id: request.projectId ?? defaults.defaultProjectId,
  source: marshalSource(request.source),
  tags: request.tags
});
const marshalReleaseIPSetRequest = (request, defaults) => ({
  ip_ids: request.ipIds
});
const marshalReverse = (request, defaults) => ({
  address: request.address,
  hostname: request.hostname
});
const marshalUpdateIPRequest = (request, defaults) => ({
  reverses: request.reverses !== void 0 ? request.reverses.map((elt) => marshalReverse(elt)) : void 0,
  tags: request.tags
});
exports.marshalBookIPRequest = marshalBookIPRequest;
exports.marshalReleaseIPSetRequest = marshalReleaseIPSetRequest;
exports.marshalUpdateIPRequest = marshalUpdateIPRequest;
exports.unmarshalIP = unmarshalIP;
exports.unmarshalListIPsResponse = unmarshalListIPsResponse;


/***/ }),

/***/ 5026:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const ListIPsRequest = {
  resourceName: {
    maxLength: 63,
    minLength: 2
  }
};
exports.ListIPsRequest = ListIPsRequest;


/***/ }),

/***/ 6318:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(2434);
exports.v1alpha1 = index_gen;


/***/ }),

/***/ 5452:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const content_gen = __nccwpck_require__(5501);
const marshalling_gen = __nccwpck_require__(9717);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par", "nl-ams", "pl-waw"];
  /**
   * Create a new volume. Create a new volume from a Project ID. Volume is
   * identified by an ID and used to host pin references. Volume is personal (at
   * least to your organization) even if IPFS blocks and CID are available to
   * anyone. Should be the first command you made because every pin must be
   * attached to a volume.
   *
   * @param request - The request {@link CreateVolumeRequest}
   * @returns A Promise of Volume
   */
  createVolume = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateVolumeRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/volumes`
    },
    marshalling_gen.unmarshalVolume
  );
  /**
   * Get information about a volume. Retrieve information about a specific
   * volume.
   *
   * @param request - The request {@link GetVolumeRequest}
   * @returns A Promise of Volume
   */
  getVolume = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/volumes/${marshalling.validatePathParam("volumeId", request.volumeId)}`
    },
    marshalling_gen.unmarshalVolume
  );
  pageOfListVolumes = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/volumes`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ]
      )
    },
    marshalling_gen.unmarshalListVolumesResponse
  );
  /**
   * List all volumes by a Project ID. Retrieve information about all volumes
   * from a Project ID.
   *
   * @param request - The request {@link ListVolumesRequest}
   * @returns A Promise of ListVolumesResponse
   */
  listVolumes = (request = {}) => resourcePaginator.enrichForPagination("volumes", this.pageOfListVolumes, request);
  /**
   * Update volume information. Update volume information (tag, name...).
   *
   * @param request - The request {@link UpdateVolumeRequest}
   * @returns A Promise of Volume
   */
  updateVolume = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateVolumeRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/volumes/${marshalling.validatePathParam("volumeId", request.volumeId)}`
    },
    marshalling_gen.unmarshalVolume
  );
  /**
   * Delete an existing volume. Delete a volume by its ID and every pin attached
   * to this volume. This process can take a while to conclude, depending on the
   * size of your pinned content.
   *
   * @param request - The request {@link DeleteVolumeRequest}
   */
  deleteVolume = (request) => this.client.fetch({
    method: "DELETE",
    path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/volumes/${marshalling.validatePathParam("volumeId", request.volumeId)}`
  });
  /**
   * Create a pin by URL. Will fetch and store the content pointed by the
   * provided URL. The content must be available on the public IPFS network. The
   * content (IPFS blocks) will be host by the pinning service until pin
   * deletion. From that point, any other IPFS peer can fetch and host your
   * content: Make sure to pin public or encrypted content. Many pin requests
   * (from different users) can target the same CID. A pin is defined by its ID
   * (UUID), its status (queued, pinning, pinned or failed) and target CID.
   *
   * @param request - The request {@link CreatePinByURLRequest}
   * @returns A Promise of Pin
   */
  createPinByURL = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreatePinByURLRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/pins/create-by-url`
    },
    marshalling_gen.unmarshalPin
  );
  /**
   * Create a pin by CID. Will fetch and store the content pointed by the
   * provided CID. The content must be available on the public IPFS network. The
   * content (IPFS blocks) will be host by the pinning service until pin
   * deletion. From that point, any other IPFS peer can fetch and host your
   * content: Make sure to pin public or encrypted content. Many pin requests
   * (from different users) can target the same CID. A pin is defined by its ID
   * (UUID), its status (queued, pinning, pinned or failed) and target CID.
   *
   * @param request - The request {@link CreatePinByCIDRequest}
   * @returns A Promise of Pin
   */
  createPinByCID = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreatePinByCIDRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/pins/create-by-cid`
    },
    marshalling_gen.unmarshalPin
  );
  /**
   * Replace pin by CID. Deletes the given resource ID and pins the new CID in
   * its place. Will fetch and store the content pointed by the provided CID.
   * The content must be available on the public IPFS network. The content (IPFS
   * blocks) is hosted by the pinning service until the pin is deleted. While
   * the content is available any other IPFS peer can fetch and host your
   * content. For this reason, we recommend that you pin either public or
   * encrypted content. Several different pin requests can target the same CID.
   * A pin is defined by its ID (UUID), its status (queued, pinning, pinned or
   * failed) and target CID.
   *
   * @param request - The request {@link ReplacePinRequest}
   * @returns A Promise of ReplacePinResponse
   */
  replacePin = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalReplacePinRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/pins/${marshalling.validatePathParam("pinId", request.pinId)}/replace`
    },
    marshalling_gen.unmarshalReplacePinResponse
  );
  /**
   * Get pin information. Retrieve information about the provided **pin ID**,
   * such as status, last modification, and CID.
   *
   * @param request - The request {@link GetPinRequest}
   * @returns A Promise of Pin
   */
  getPin = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/pins/${marshalling.validatePathParam("pinId", request.pinId)}`,
      urlParams: marshalling.urlParams(["volume_id", request.volumeId])
    },
    marshalling_gen.unmarshalPin
  );
  /**
   * Waits for {@link Pin} to be in a final state.
   *
   * @param request - The request {@link GetPinRequest}
   * @param options - The waiting options
   * @returns A Promise of Pin
   */
  waitForPin = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.PIN_TRANSIENT_STATUSES.includes(res.status))),
    this.getPin,
    request,
    options
  );
  pageOfListPins = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/pins`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["status", request.status],
        ["volume_id", request.volumeId]
      )
    },
    marshalling_gen.unmarshalListPinsResponse
  );
  /**
   * List all pins within a volume. Retrieve information about all pins within a
   * volume.
   *
   * @param request - The request {@link ListPinsRequest}
   * @returns A Promise of ListPinsResponse
   */
  listPins = (request) => resourcePaginator.enrichForPagination("pins", this.pageOfListPins, request);
  /**
   * Create an unpin request. An unpin request means that you no longer own the
   * content. This content can therefore be removed and no longer provided on
   * the IPFS network.
   *
   * @param request - The request {@link DeletePinRequest}
   */
  deletePin = (request) => this.client.fetch({
    method: "DELETE",
    path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/pins/${marshalling.validatePathParam("pinId", request.pinId)}`,
    urlParams: marshalling.urlParams(["volume_id", request.volumeId])
  });
}
class IpnsAPI extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par", "nl-ams", "pl-waw"];
  /**
   * Create a new name. You can use the `ipns key` command to list and generate
   * more names and their respective keys.
   *
   * @param request - The request {@link IpnsApiCreateNameRequest}
   * @returns A Promise of Name
   */
  createName = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalIpnsApiCreateNameRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/names`
    },
    marshalling_gen.unmarshalName
  );
  /**
   * Get information about a name. Retrieve information about a specific name.
   *
   * @param request - The request {@link IpnsApiGetNameRequest}
   * @returns A Promise of Name
   */
  getName = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/names/${marshalling.validatePathParam("nameId", request.nameId)}`
    },
    marshalling_gen.unmarshalName
  );
  /**
   * Waits for {@link Name} to be in a final state.
   *
   * @param request - The request {@link IpnsApiGetNameRequest}
   * @param options - The waiting options
   * @returns A Promise of Name
   */
  waitForName = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.NAME_TRANSIENT_STATUSES.includes(res.status))),
    this.getName,
    request,
    options
  );
  /**
   * Delete an existing name. Delete a name by its ID.
   *
   * @param request - The request {@link IpnsApiDeleteNameRequest}
   */
  deleteName = (request) => this.client.fetch({
    method: "DELETE",
    path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/names/${marshalling.validatePathParam("nameId", request.nameId)}`
  });
  pageOfListNames = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/names`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListNamesResponse
  );
  /**
   * List all names by a Project ID. Retrieve information about all names from a
   * Project ID.
   *
   * @param request - The request {@link IpnsApiListNamesRequest}
   * @returns A Promise of ListNamesResponse
   */
  listNames = (request = {}) => resourcePaginator.enrichForPagination("names", this.pageOfListNames, request);
  /**
   * Update name information. Update name information (CID, tag, name...).
   *
   * @param request - The request {@link IpnsApiUpdateNameRequest}
   * @returns A Promise of Name
   */
  updateName = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalIpnsApiUpdateNameRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/names/${marshalling.validatePathParam("nameId", request.nameId)}`
    },
    marshalling_gen.unmarshalName
  );
  /**
   * Export your private key. Export a private key by its ID.
   *
   * @param request - The request {@link IpnsApiExportKeyNameRequest}
   * @returns A Promise of ExportKeyNameResponse
   */
  exportKeyName = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/names/${marshalling.validatePathParam("nameId", request.nameId)}/export-key`
    },
    marshalling_gen.unmarshalExportKeyNameResponse
  );
  /**
   * Import your private key. Import a private key.
   *
   * @param request - The request {@link IpnsApiImportKeyNameRequest}
   * @returns A Promise of Name
   */
  importKeyName = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalIpnsApiImportKeyNameRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/names/import-key`
    },
    marshalling_gen.unmarshalName
  );
}
exports.API = API;
exports.IpnsAPI = IpnsAPI;


/***/ }),

/***/ 5501:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const NAME_TRANSIENT_STATUSES = ["queued", "publishing"];
const PIN_TRANSIENT_STATUSES = ["queued", "pinning"];
exports.NAME_TRANSIENT_STATUSES = NAME_TRANSIENT_STATUSES;
exports.PIN_TRANSIENT_STATUSES = PIN_TRANSIENT_STATUSES;


/***/ }),

/***/ 2434:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(5452);
const content_gen = __nccwpck_require__(5501);
exports.API = api_gen.API;
exports.IpnsAPI = api_gen.IpnsAPI;
exports.NAME_TRANSIENT_STATUSES = content_gen.NAME_TRANSIENT_STATUSES;
exports.PIN_TRANSIENT_STATUSES = content_gen.PIN_TRANSIENT_STATUSES;


/***/ }),

/***/ 9717:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalName = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Name' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    key: data.key,
    name: data.name,
    nameId: data.name_id,
    projectId: data.project_id,
    region: data.region,
    status: data.status,
    tags: data.tags,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    value: data.value
  };
};
const unmarshalPinCIDMeta = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PinCIDMeta' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id
  };
};
const unmarshalPinCID = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PinCID' failed as data isn't a dictionary.`
    );
  }
  return {
    cid: data.cid,
    meta: data.meta ? unmarshalPinCIDMeta(data.meta) : void 0,
    name: data.name,
    origins: data.origins
  };
};
const unmarshalPinInfo = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PinInfo' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    progress: data.progress,
    size: data.size,
    statusDetails: data.status_details,
    url: data.url
  };
};
const unmarshalPin = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Pin' failed as data isn't a dictionary.`
    );
  }
  return {
    cid: data.cid ? unmarshalPinCID(data.cid) : void 0,
    createdAt: marshalling.unmarshalDate(data.created_at),
    delegates: data.delegates,
    info: data.info ? unmarshalPinInfo(data.info) : void 0,
    pinId: data.pin_id,
    status: data.status
  };
};
const unmarshalVolume = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Volume' failed as data isn't a dictionary.`
    );
  }
  return {
    countPin: data.count_pin,
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    name: data.name,
    projectId: data.project_id,
    region: data.region,
    size: data.size,
    tags: data.tags,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalExportKeyNameResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ExportKeyNameResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    nameId: data.name_id,
    privateKey: data.private_key,
    projectId: data.project_id,
    publicKey: data.public_key,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalListNamesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListNamesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    names: marshalling.unmarshalArrayOfObject(data.names, unmarshalName),
    totalCount: data.total_count
  };
};
const unmarshalListPinsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListPinsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    pins: marshalling.unmarshalArrayOfObject(data.pins, unmarshalPin),
    totalCount: data.total_count
  };
};
const unmarshalListVolumesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListVolumesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    volumes: marshalling.unmarshalArrayOfObject(data.volumes, unmarshalVolume)
  };
};
const unmarshalReplacePinResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ReplacePinResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    pin: data.pin ? unmarshalPin(data.pin) : void 0
  };
};
const marshalCreatePinByCIDRequest = (request, defaults) => ({
  cid: request.cid,
  name: request.name,
  origins: request.origins,
  volume_id: request.volumeId
});
const marshalCreatePinByURLRequest = (request, defaults) => ({
  name: request.name,
  url: request.url,
  volume_id: request.volumeId
});
const marshalCreateVolumeRequest = (request, defaults) => ({
  name: request.name,
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalIpnsApiCreateNameRequest = (request, defaults) => ({
  name: request.name,
  project_id: request.projectId ?? defaults.defaultProjectId,
  value: request.value
});
const marshalIpnsApiImportKeyNameRequest = (request, defaults) => ({
  name: request.name,
  private_key: request.privateKey,
  project_id: request.projectId ?? defaults.defaultProjectId,
  value: request.value
});
const marshalIpnsApiUpdateNameRequest = (request, defaults) => ({
  name: request.name,
  tags: request.tags,
  value: request.value
});
const marshalReplacePinRequest = (request, defaults) => ({
  cid: request.cid,
  name: request.name,
  origins: request.origins,
  volume_id: request.volumeId
});
const marshalUpdateVolumeRequest = (request, defaults) => ({
  name: request.name,
  tags: request.tags
});
exports.marshalCreatePinByCIDRequest = marshalCreatePinByCIDRequest;
exports.marshalCreatePinByURLRequest = marshalCreatePinByURLRequest;
exports.marshalCreateVolumeRequest = marshalCreateVolumeRequest;
exports.marshalIpnsApiCreateNameRequest = marshalIpnsApiCreateNameRequest;
exports.marshalIpnsApiImportKeyNameRequest = marshalIpnsApiImportKeyNameRequest;
exports.marshalIpnsApiUpdateNameRequest = marshalIpnsApiUpdateNameRequest;
exports.marshalReplacePinRequest = marshalReplacePinRequest;
exports.marshalUpdateVolumeRequest = marshalUpdateVolumeRequest;
exports.unmarshalExportKeyNameResponse = unmarshalExportKeyNameResponse;
exports.unmarshalListNamesResponse = unmarshalListNamesResponse;
exports.unmarshalListPinsResponse = unmarshalListPinsResponse;
exports.unmarshalListVolumesResponse = unmarshalListVolumesResponse;
exports.unmarshalName = unmarshalName;
exports.unmarshalPin = unmarshalPin;
exports.unmarshalReplacePinResponse = unmarshalReplacePinResponse;
exports.unmarshalVolume = unmarshalVolume;


/***/ }),

/***/ 4844:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(8736);
exports.v1alpha1 = index_gen;


/***/ }),

/***/ 9893:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const marshalling_gen = __nccwpck_require__(8074);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par", "nl-ams", "pl-waw"];
  /**
   * Create a new job definition in a specified Project.
   *
   * @param request - The request {@link CreateJobDefinitionRequest}
   * @returns A Promise of JobDefinition
   */
  createJobDefinition = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateJobDefinitionRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/serverless-jobs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/job-definitions`
    },
    marshalling_gen.unmarshalJobDefinition
  );
  /**
   * Get a job definition by its unique identifier.
   *
   * @param request - The request {@link GetJobDefinitionRequest}
   * @returns A Promise of JobDefinition
   */
  getJobDefinition = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/serverless-jobs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/job-definitions/${marshalling.validatePathParam("jobDefinitionId", request.jobDefinitionId)}`
    },
    marshalling_gen.unmarshalJobDefinition
  );
  pageOfListJobDefinitions = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/serverless-jobs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/job-definitions`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListJobDefinitionsResponse
  );
  /**
   * List all your job definitions with filters.
   *
   * @param request - The request {@link ListJobDefinitionsRequest}
   * @returns A Promise of ListJobDefinitionsResponse
   */
  listJobDefinitions = (request = {}) => resourcePaginator.enrichForPagination(
    "jobDefinitions",
    this.pageOfListJobDefinitions,
    request
  );
  /**
   * Update an existing job definition associated with the specified unique
   * identifier.
   *
   * @param request - The request {@link UpdateJobDefinitionRequest}
   * @returns A Promise of JobDefinition
   */
  updateJobDefinition = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateJobDefinitionRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/serverless-jobs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/job-definitions/${marshalling.validatePathParam("jobDefinitionId", request.jobDefinitionId)}`
    },
    marshalling_gen.unmarshalJobDefinition
  );
  /**
   * Delete an exsisting job definition by its unique identifier.
   *
   * @param request - The request {@link DeleteJobDefinitionRequest}
   */
  deleteJobDefinition = (request) => this.client.fetch({
    method: "DELETE",
    path: `/serverless-jobs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/job-definitions/${marshalling.validatePathParam("jobDefinitionId", request.jobDefinitionId)}`
  });
  /**
   * Run an existing job definition by its unique identifier. This will create a
   * new job run.
   *
   * @param request - The request {@link StartJobDefinitionRequest}
   * @returns A Promise of StartJobDefinitionResponse
   */
  startJobDefinition = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalStartJobDefinitionRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/serverless-jobs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/job-definitions/${marshalling.validatePathParam("jobDefinitionId", request.jobDefinitionId)}/start`
    },
    marshalling_gen.unmarshalStartJobDefinitionResponse
  );
  /**
   * Get a job run by its unique identifier.
   *
   * @param request - The request {@link GetJobRunRequest}
   * @returns A Promise of JobRun
   */
  getJobRun = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/serverless-jobs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/job-runs/${marshalling.validatePathParam("jobRunId", request.jobRunId)}`
    },
    marshalling_gen.unmarshalJobRun
  );
  /**
   * Stop a job run by its unique identifier.
   *
   * @param request - The request {@link StopJobRunRequest}
   * @returns A Promise of JobRun
   */
  stopJobRun = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/serverless-jobs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/job-runs/${marshalling.validatePathParam("jobRunId", request.jobRunId)}/stop`
    },
    marshalling_gen.unmarshalJobRun
  );
  pageOfListJobRuns = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/serverless-jobs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/job-runs`,
      urlParams: marshalling.urlParams(
        ["job_definition_id", request.jobDefinitionId],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListJobRunsResponse
  );
  /**
   * List all job runs with filters.
   *
   * @param request - The request {@link ListJobRunsRequest}
   * @returns A Promise of ListJobRunsResponse
   */
  listJobRuns = (request = {}) => resourcePaginator.enrichForPagination("jobRuns", this.pageOfListJobRuns, request);
  /**
   * List jobs resources for the console.
   *
   * @param request - The request {@link ListJobsResourcesRequest}
   * @returns A Promise of ListJobsResourcesResponse
   */
  listJobsResources = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/serverless-jobs/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/jobs-resources`
    },
    marshalling_gen.unmarshalListJobsResourcesResponse
  );
}
exports.API = API;


/***/ }),

/***/ 4367:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const JOB_RUN_TRANSIENT_STATUSES = [
  "queued",
  "scheduled",
  "running"
];
exports.JOB_RUN_TRANSIENT_STATUSES = JOB_RUN_TRANSIENT_STATUSES;


/***/ }),

/***/ 8736:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(9893);
const content_gen = __nccwpck_require__(4367);
const validationRules_gen = __nccwpck_require__(5814);
exports.API = api_gen.API;
exports.JOB_RUN_TRANSIENT_STATUSES = content_gen.JOB_RUN_TRANSIENT_STATUSES;
exports.ValidationRules = validationRules_gen;


/***/ }),

/***/ 8074:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const randomName = __nccwpck_require__(8118);
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalCronSchedule = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CronSchedule' failed as data isn't a dictionary.`
    );
  }
  return {
    schedule: data.schedule,
    timezone: data.timezone
  };
};
const unmarshalJobDefinition = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'JobDefinition' failed as data isn't a dictionary.`
    );
  }
  return {
    command: data.command,
    cpuLimit: data.cpu_limit,
    createdAt: marshalling.unmarshalDate(data.created_at),
    cronSchedule: data.cron_schedule ? unmarshalCronSchedule(data.cron_schedule) : void 0,
    description: data.description,
    environmentVariables: data.environment_variables,
    id: data.id,
    imageUri: data.image_uri,
    jobTimeout: data.job_timeout,
    localStorageCapacity: data.local_storage_capacity,
    memoryLimit: data.memory_limit,
    name: data.name,
    projectId: data.project_id,
    region: data.region,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalJobRun = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'JobRun' failed as data isn't a dictionary.`
    );
  }
  return {
    command: data.command,
    cpuLimit: data.cpu_limit,
    createdAt: marshalling.unmarshalDate(data.created_at),
    environmentVariables: data.environment_variables,
    errorMessage: data.error_message,
    exitCode: data.exit_code,
    id: data.id,
    jobDefinitionId: data.job_definition_id,
    localStorageCapacity: data.local_storage_capacity,
    memoryLimit: data.memory_limit,
    region: data.region,
    runDuration: data.run_duration,
    startedAt: marshalling.unmarshalDate(data.started_at),
    state: data.state,
    terminatedAt: marshalling.unmarshalDate(data.terminated_at),
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalListJobDefinitionsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListJobDefinitionsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    jobDefinitions: marshalling.unmarshalArrayOfObject(
      data.job_definitions,
      unmarshalJobDefinition
    ),
    totalCount: data.total_count
  };
};
const unmarshalListJobRunsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListJobRunsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    jobRuns: marshalling.unmarshalArrayOfObject(data.job_runs, unmarshalJobRun),
    totalCount: data.total_count
  };
};
const unmarshalResource = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Resource' failed as data isn't a dictionary.`
    );
  }
  return {
    cpuLimit: data.cpu_limit,
    memoryLimit: data.memory_limit
  };
};
const unmarshalListJobsResourcesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListJobsResourcesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    resources: marshalling.unmarshalArrayOfObject(data.resources, unmarshalResource)
  };
};
const unmarshalStartJobDefinitionResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'StartJobDefinitionResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    jobRuns: marshalling.unmarshalArrayOfObject(data.job_runs, unmarshalJobRun)
  };
};
const marshalCreateJobDefinitionRequestCronScheduleConfig = (request, defaults) => ({
  schedule: request.schedule,
  timezone: request.timezone
});
const marshalCreateJobDefinitionRequest = (request, defaults) => ({
  command: request.command,
  cpu_limit: request.cpuLimit,
  cron_schedule: request.cronSchedule !== void 0 ? marshalCreateJobDefinitionRequestCronScheduleConfig(
    request.cronSchedule
  ) : void 0,
  description: request.description,
  environment_variables: request.environmentVariables !== void 0 ? request.environmentVariables : void 0,
  image_uri: request.imageUri,
  job_timeout: request.jobTimeout,
  local_storage_capacity: request.localStorageCapacity,
  memory_limit: request.memoryLimit,
  name: request.name || randomName("job"),
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalStartJobDefinitionRequest = (request, defaults) => ({
  command: request.command,
  environment_variables: request.environmentVariables,
  replicas: request.replicas
});
const marshalUpdateJobDefinitionRequestCronScheduleConfig = (request, defaults) => ({
  schedule: request.schedule,
  timezone: request.timezone
});
const marshalUpdateJobDefinitionRequest = (request, defaults) => ({
  command: request.command,
  cpu_limit: request.cpuLimit,
  cron_schedule: request.cronSchedule !== void 0 ? marshalUpdateJobDefinitionRequestCronScheduleConfig(
    request.cronSchedule
  ) : void 0,
  description: request.description,
  environment_variables: request.environmentVariables,
  image_uri: request.imageUri,
  job_timeout: request.jobTimeout,
  local_storage_capacity: request.localStorageCapacity,
  memory_limit: request.memoryLimit,
  name: request.name
});
exports.marshalCreateJobDefinitionRequest = marshalCreateJobDefinitionRequest;
exports.marshalStartJobDefinitionRequest = marshalStartJobDefinitionRequest;
exports.marshalUpdateJobDefinitionRequest = marshalUpdateJobDefinitionRequest;
exports.unmarshalJobDefinition = unmarshalJobDefinition;
exports.unmarshalJobRun = unmarshalJobRun;
exports.unmarshalListJobDefinitionsResponse = unmarshalListJobDefinitionsResponse;
exports.unmarshalListJobRunsResponse = unmarshalListJobRunsResponse;
exports.unmarshalListJobsResourcesResponse = unmarshalListJobsResourcesResponse;
exports.unmarshalStartJobDefinitionResponse = unmarshalStartJobDefinitionResponse;


/***/ }),

/***/ 5814:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const CreateJobDefinitionRequest = {
  cpuLimit: {
    greaterThan: 0
  },
  imageUri: {
    pattern: /^((?:(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])(?:\.(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]))*|\[(?:[a-fA-F0-9:]+)\])(?::[0-9]+)?\/)?[a-z0-9]+(?:(?:[._]|__|[-]+)[a-z0-9]+)*(?:\/[a-z0-9]+(?:(?:[._]|__|[-]+)[a-z0-9]+)*)*)(?::([\w][\w.-]{0,127}))?(?:@([A-Za-z][A-Za-z0-9]*(?:[-_+.][A-Za-z][A-Za-z0-9]*)*[:][[:xdigit:]]{32,}))?$/
  },
  localStorageCapacity: {
    greaterThan: 0
  },
  memoryLimit: {
    greaterThan: 0
  },
  name: {
    pattern: /^[A-Za-z0-9-_]{3,50}$/
  }
};
const CreateJobDefinitionRequestCronScheduleConfig = {
  schedule: {
    maxLength: 255,
    minLength: 1
  },
  timezone: {
    maxLength: 255,
    minLength: 1
  }
};
const CronSchedule = {
  schedule: {
    maxLength: 255,
    minLength: 1
  },
  timezone: {
    maxLength: 255,
    minLength: 1
  }
};
const ListJobDefinitionsRequest = {
  page: {
    greaterThanOrEqual: 1
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 1e3
  }
};
const ListJobRunsRequest = {
  page: {
    greaterThanOrEqual: 1
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 1e3
  }
};
const StartJobDefinitionRequest = {
  replicas: {
    greaterThan: 0
  }
};
const UpdateJobDefinitionRequest = {
  cpuLimit: {
    greaterThan: 0
  },
  imageUri: {
    pattern: /^((?:(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])(?:\.(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]))*|\[(?:[a-fA-F0-9:]+)\])(?::[0-9]+)?\/)?[a-z0-9]+(?:(?:[._]|__|[-]+)[a-z0-9]+)*(?:\/[a-z0-9]+(?:(?:[._]|__|[-]+)[a-z0-9]+)*)*)(?::([\w][\w.-]{0,127}))?(?:@([A-Za-z][A-Za-z0-9]*(?:[-_+.][A-Za-z][A-Za-z0-9]*)*[:][[:xdigit:]]{32,}))?$/
  },
  localStorageCapacity: {
    greaterThan: 0
  },
  memoryLimit: {
    greaterThan: 0
  },
  name: {
    pattern: /^[A-Za-z0-9-_]{3,50}$/
  }
};
const UpdateJobDefinitionRequestCronScheduleConfig = {
  schedule: {
    maxLength: 255,
    minLength: 1
  },
  timezone: {
    maxLength: 255,
    minLength: 1
  }
};
exports.CreateJobDefinitionRequest = CreateJobDefinitionRequest;
exports.CreateJobDefinitionRequestCronScheduleConfig = CreateJobDefinitionRequestCronScheduleConfig;
exports.CronSchedule = CronSchedule;
exports.ListJobDefinitionsRequest = ListJobDefinitionsRequest;
exports.ListJobRunsRequest = ListJobRunsRequest;
exports.StartJobDefinitionRequest = StartJobDefinitionRequest;
exports.UpdateJobDefinitionRequest = UpdateJobDefinitionRequest;
exports.UpdateJobDefinitionRequestCronScheduleConfig = UpdateJobDefinitionRequestCronScheduleConfig;


/***/ }),

/***/ 314:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index = __nccwpck_require__(6220);
exports.v1 = index;


/***/ }),

/***/ 2211:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const content_gen = __nccwpck_require__(2760);
const marshalling_gen = __nccwpck_require__(3293);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par", "nl-ams", "pl-waw"];
  pageOfListClusters = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/clusters`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["private_network_id", request.privateNetworkId],
        ["project_id", request.projectId],
        ["status", request.status],
        ["type", request.type]
      )
    },
    marshalling_gen.unmarshalListClustersResponse
  );
  /**
   * List Clusters. List all existing Kubernetes clusters in a specific region.
   *
   * @param request - The request {@link ListClustersRequest}
   * @returns A Promise of ListClustersResponse
   */
  listClusters = (request = {}) => resourcePaginator.enrichForPagination("clusters", this.pageOfListClusters, request);
  /**
   * Create a new Cluster. Create a new Kubernetes cluster in a Scaleway region.
   *
   * @param request - The request {@link CreateClusterRequest}
   * @returns A Promise of Cluster
   */
  createCluster = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateClusterRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/clusters`
    },
    marshalling_gen.unmarshalCluster
  );
  /**
   * Get a Cluster. Retrieve information about a specific Kubernetes cluster.
   *
   * @param request - The request {@link GetClusterRequest}
   * @returns A Promise of Cluster
   */
  getCluster = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}`
    },
    marshalling_gen.unmarshalCluster
  );
  /**
   * Waits for {@link Cluster} to be in a final state.
   *
   * @param request - The request {@link GetClusterRequest}
   * @param options - The waiting options
   * @returns A Promise of Cluster
   */
  waitForCluster = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.CLUSTER_TRANSIENT_STATUSES.includes(res.status))),
    this.getCluster,
    request,
    options
  );
  /**
   * Update a Cluster. Update information on a specific Kubernetes cluster. You
   * can update details such as its name, description, tags and configuration.
   * To upgrade a cluster, you will need to use the dedicated endpoint.
   *
   * @param request - The request {@link UpdateClusterRequest}
   * @returns A Promise of Cluster
   */
  updateCluster = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateClusterRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}`
    },
    marshalling_gen.unmarshalCluster
  );
  /**
   * Delete a Cluster. Delete a specific Kubernetes cluster and all its
   * associated pools and nodes. Note that this method will not delete any Load
   * Balancer or Block Volume that are associated with the cluster.
   *
   * @param request - The request {@link DeleteClusterRequest}
   * @returns A Promise of Cluster
   */
  deleteCluster = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}`,
      urlParams: marshalling.urlParams([
        "with_additional_resources",
        request.withAdditionalResources
      ])
    },
    marshalling_gen.unmarshalCluster
  );
  /**
   * Upgrade a Cluster. Upgrade a specific Kubernetes cluster and possibly its
   * associated pools to a specific and supported Kubernetes version.
   *
   * @param request - The request {@link UpgradeClusterRequest}
   * @returns A Promise of Cluster
   */
  upgradeCluster = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpgradeClusterRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}/upgrade`
    },
    marshalling_gen.unmarshalCluster
  );
  /**
   * Change the Cluster type. Change the type of a specific Kubernetes cluster.
   * To see the possible values you can enter for the `type` field, [list
   * available cluster
   * types](#path-clusters-list-available-cluster-types-for-a-cluster).
   *
   * @param request - The request {@link SetClusterTypeRequest}
   * @returns A Promise of Cluster
   */
  setClusterType = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetClusterTypeRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}/set-type`
    },
    marshalling_gen.unmarshalCluster
  );
  /**
   * List available versions for a Cluster. List the versions that a specific
   * Kubernetes cluster is allowed to upgrade to. Results will include every
   * patch version greater than the current patch, as well as one minor version
   * ahead of the current version. Any upgrade skipping a minor version will not
   * work.
   *
   * @param request - The request {@link ListClusterAvailableVersionsRequest}
   * @returns A Promise of ListClusterAvailableVersionsResponse
   */
  listClusterAvailableVersions = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}/available-versions`
    },
    marshalling_gen.unmarshalListClusterAvailableVersionsResponse
  );
  /**
   * List available cluster types for a cluster. List the cluster types that a
   * specific Kubernetes cluster is allowed to switch to.
   *
   * @param request - The request {@link ListClusterAvailableTypesRequest}
   * @returns A Promise of ListClusterAvailableTypesResponse
   */
  listClusterAvailableTypes = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}/available-types`
    },
    marshalling_gen.unmarshalListClusterAvailableTypesResponse
  );
  _getClusterKubeConfig = (request) => this.client.fetch({
    method: "GET",
    path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}/kubeconfig`,
    urlParams: marshalling.urlParams(["dl", 1], ["redacted", request.redacted]),
    responseType: "blob"
  });
  /**
   * Reset the admin token of a Cluster. Reset the admin token for a specific
   * Kubernetes cluster. This will revoke the old admin token (which will not be
   * usable afterwards) and create a new one. Note that you will need to
   * download kubeconfig again to keep interacting with the cluster.
   *
   * @param request - The request {@link ResetClusterAdminTokenRequest}
   */
  resetClusterAdminToken = (request) => this.client.fetch({
    body: "{}",
    headers: jsonContentHeaders,
    method: "POST",
    path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}/reset-admin-token`
  });
  /**
   * Migrate a cluster to Routed IPs. Migrate the nodes of an existing cluster
   * to Routed IPs and enable Routed IPs for all future nodes.
   *
   * @param request - The request {@link MigrateClusterToRoutedIPsRequest}
   * @returns A Promise of Cluster
   */
  migrateClusterToRoutedIPs = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}/migrate-to-routed-ips`
    },
    marshalling_gen.unmarshalCluster
  );
  pageOfListPools = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}/pools`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["status", request.status]
      )
    },
    marshalling_gen.unmarshalListPoolsResponse
  );
  /**
   * List Pools in a Cluster. List all the existing pools for a specific
   * Kubernetes cluster.
   *
   * @param request - The request {@link ListPoolsRequest}
   * @returns A Promise of ListPoolsResponse
   */
  listPools = (request) => resourcePaginator.enrichForPagination("pools", this.pageOfListPools, request);
  /**
   * Create a new Pool in a Cluster. Create a new pool in a specific Kubernetes
   * cluster.
   *
   * @param request - The request {@link CreatePoolRequest}
   * @returns A Promise of Pool
   */
  createPool = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreatePoolRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}/pools`
    },
    marshalling_gen.unmarshalPool
  );
  /**
   * Get a Pool in a Cluster. Retrieve details about a specific pool in a
   * Kubernetes cluster.
   *
   * @param request - The request {@link GetPoolRequest}
   * @returns A Promise of Pool
   */
  getPool = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/pools/${marshalling.validatePathParam("poolId", request.poolId)}`
    },
    marshalling_gen.unmarshalPool
  );
  /**
   * Waits for {@link Pool} to be in a final state.
   *
   * @param request - The request {@link GetPoolRequest}
   * @param options - The waiting options
   * @returns A Promise of Pool
   */
  waitForPool = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.POOL_TRANSIENT_STATUSES.includes(res.status))),
    this.getPool,
    request,
    options
  );
  /**
   * Upgrade a Pool in a Cluster. Upgrade the Kubernetes version of a specific
   * pool. Note that it only works if the targeted version matches the cluster's
   * version.
   *
   * @param request - The request {@link UpgradePoolRequest}
   * @returns A Promise of Pool
   */
  upgradePool = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpgradePoolRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/pools/${marshalling.validatePathParam("poolId", request.poolId)}/upgrade`
    },
    marshalling_gen.unmarshalPool
  );
  /**
   * Update a Pool in a Cluster. Update the attributes of a specific pool, such
   * as its desired size, autoscaling settings, and tags.
   *
   * @param request - The request {@link UpdatePoolRequest}
   * @returns A Promise of Pool
   */
  updatePool = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdatePoolRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/pools/${marshalling.validatePathParam("poolId", request.poolId)}`
    },
    marshalling_gen.unmarshalPool
  );
  /**
   * Delete a Pool in a Cluster. Delete a specific pool from a cluster. Note
   * that all the pool's nodes will also be deleted.
   *
   * @param request - The request {@link DeletePoolRequest}
   * @returns A Promise of Pool
   */
  deletePool = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/pools/${marshalling.validatePathParam("poolId", request.poolId)}`
    },
    marshalling_gen.unmarshalPool
  );
  /**
   * Fetch node metadata. Rerieve metadata to instantiate a Kapsule/Kosmos node.
   * This method is not intended to be called by end users but rather
   * programmatically by the node-installer.
   *
   * @param request - The request {@link GetNodeMetadataRequest}
   * @returns A Promise of NodeMetadata
   */
  getNodeMetadata = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/nodes/metadata`
    },
    marshalling_gen.unmarshalNodeMetadata
  );
  /**
   * Authenticate Kosmos external node. Creates a newer Kosmos node and returns
   * its token. This method is not intended to be called by end users but rather
   * programmatically by the node-installer.
   *
   * @param request - The request {@link AuthExternalNodeRequest}
   * @returns A Promise of ExternalNodeAuth
   */
  authExternalNode = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/pools/${marshalling.validatePathParam("poolId", request.poolId)}/external-nodes/auth`
    },
    marshalling_gen.unmarshalExternalNodeAuth
  );
  /**
   * Create a Kosmos node. Retrieve metadata for a Kosmos node. This method is
   * not intended to be called by end users but rather programmatically by the
   * kapsule-node-agent.
   *
   * @param request - The request {@link CreateExternalNodeRequest}
   * @returns A Promise of ExternalNode
   */
  createExternalNode = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/pools/${marshalling.validatePathParam("poolId", request.poolId)}/external-nodes`
    },
    marshalling_gen.unmarshalExternalNode
  );
  pageOfListNodes = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}/nodes`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["pool_id", request.poolId],
        ["status", request.status]
      )
    },
    marshalling_gen.unmarshalListNodesResponse
  );
  /**
   * List Nodes in a Cluster. List all the existing nodes for a specific
   * Kubernetes cluster.
   *
   * @param request - The request {@link ListNodesRequest}
   * @returns A Promise of ListNodesResponse
   */
  listNodes = (request) => resourcePaginator.enrichForPagination("nodes", this.pageOfListNodes, request);
  /**
   * Get a Node in a Cluster. Retrieve details about a specific Kubernetes Node.
   *
   * @param request - The request {@link GetNodeRequest}
   * @returns A Promise of Node
   */
  getNode = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/nodes/${marshalling.validatePathParam("nodeId", request.nodeId)}`
    },
    marshalling_gen.unmarshalNode
  );
  /**
   * Waits for {@link Node} to be in a final state.
   *
   * @param request - The request {@link GetNodeRequest}
   * @param options - The waiting options
   * @returns A Promise of Node
   */
  waitForNode = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.NODE_TRANSIENT_STATUSES.includes(res.status))),
    this.getNode,
    request,
    options
  );
  /**
   * Replace a Node in a Cluster. Replace a specific Node. The node will first
   * be cordoned (scheduling will be disabled on it). The existing pods on the
   * node will then be drained and rescheduled onto another schedulable node.
   * Note that when there is not enough space to reschedule all the pods (such
   * as in a one-node cluster), disruption of your applications can be
   * expected.
   *
   * @deprecated
   * @param request - The request {@link ReplaceNodeRequest}
   * @returns A Promise of Node
   */
  replaceNode = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/nodes/${marshalling.validatePathParam("nodeId", request.nodeId)}/replace`
    },
    marshalling_gen.unmarshalNode
  );
  /**
   * Reboot a Node in a Cluster. Reboot a specific Node. The node will first be
   * cordoned (scheduling will be disabled on it). The existing pods on the node
   * will then be drained and rescheduled onto another schedulable node. Note
   * that when there is not enough space to reschedule all the pods (such as in
   * a one-node cluster), disruption of your applications can be expected.
   *
   * @param request - The request {@link RebootNodeRequest}
   * @returns A Promise of Node
   */
  rebootNode = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/nodes/${marshalling.validatePathParam("nodeId", request.nodeId)}/reboot`
    },
    marshalling_gen.unmarshalNode
  );
  /**
   * Delete a Node in a Cluster. Delete a specific Node. Note that when there is
   * not enough space to reschedule all the pods (such as in a one-node
   * cluster), disruption of your applications can be expected.
   *
   * @param request - The request {@link DeleteNodeRequest}
   * @returns A Promise of Node
   */
  deleteNode = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/nodes/${marshalling.validatePathParam("nodeId", request.nodeId)}`,
      urlParams: marshalling.urlParams(
        ["replace", request.replace],
        ["skip_drain", request.skipDrain]
      )
    },
    marshalling_gen.unmarshalNode
  );
  /**
   * List all available Versions. List all available versions for the creation
   * of a new Kubernetes cluster.
   *
   * @param request - The request {@link ListVersionsRequest}
   * @returns A Promise of ListVersionsResponse
   */
  listVersions = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/versions`
    },
    marshalling_gen.unmarshalListVersionsResponse
  );
  /**
   * Get a Version. Retrieve a specific Kubernetes version and its details.
   *
   * @param request - The request {@link GetVersionRequest}
   * @returns A Promise of Version
   */
  getVersion = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/versions/${marshalling.validatePathParam("versionName", request.versionName)}`
    },
    marshalling_gen.unmarshalVersion
  );
  pageOfListClusterTypes = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/k8s/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/cluster-types`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListClusterTypesResponse
  );
  /**
   * List cluster types. List available cluster types and their technical
   * details.
   *
   * @param request - The request {@link ListClusterTypesRequest}
   * @returns A Promise of ListClusterTypesResponse
   */
  listClusterTypes = (request = {}) => resourcePaginator.enrichForPagination("clusterTypes", this.pageOfListClusterTypes, request);
}
exports.API = API;


/***/ }),

/***/ 3643:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(2211);
class K8SUtilsAPI extends api_gen.API {
  /**
   * Get configuration of a kube cluster.
   *
   * @param request - The request {@link GetClusterKubeConfigRequest}
   * @returns A Promise of Blob
   */
  getClusterKubeConfig = (request) => this._getClusterKubeConfig(request);
}
exports.K8SUtilsAPI = K8SUtilsAPI;


/***/ }),

/***/ 2760:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const CLUSTER_TRANSIENT_STATUSES = [
  "creating",
  "deleting",
  "updating"
];
const NODE_TRANSIENT_STATUSES = [
  "creating",
  "deleting",
  "rebooting",
  "upgrading",
  "starting",
  "registering"
];
const POOL_TRANSIENT_STATUSES = [
  "deleting",
  "scaling",
  "upgrading"
];
exports.CLUSTER_TRANSIENT_STATUSES = CLUSTER_TRANSIENT_STATUSES;
exports.NODE_TRANSIENT_STATUSES = NODE_TRANSIENT_STATUSES;
exports.POOL_TRANSIENT_STATUSES = POOL_TRANSIENT_STATUSES;


/***/ }),

/***/ 6220:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_utils = __nccwpck_require__(3643);
const content_gen = __nccwpck_require__(2760);
const validationRules_gen = __nccwpck_require__(2438);
exports.API = api_utils.K8SUtilsAPI;
exports.CLUSTER_TRANSIENT_STATUSES = content_gen.CLUSTER_TRANSIENT_STATUSES;
exports.NODE_TRANSIENT_STATUSES = content_gen.NODE_TRANSIENT_STATUSES;
exports.POOL_TRANSIENT_STATUSES = content_gen.POOL_TRANSIENT_STATUSES;
exports.ValidationRules = validationRules_gen;


/***/ }),

/***/ 3293:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const randomName = __nccwpck_require__(8118);
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalPoolUpgradePolicy = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PoolUpgradePolicy' failed as data isn't a dictionary.`
    );
  }
  return {
    maxSurge: data.max_surge,
    maxUnavailable: data.max_unavailable
  };
};
const unmarshalPool = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Pool' failed as data isn't a dictionary.`
    );
  }
  return {
    autohealing: data.autohealing,
    autoscaling: data.autoscaling,
    clusterId: data.cluster_id,
    containerRuntime: data.container_runtime,
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    kubeletArgs: data.kubelet_args,
    maxSize: data.max_size,
    minSize: data.min_size,
    name: data.name,
    nodeType: data.node_type,
    placementGroupId: data.placement_group_id,
    publicIpDisabled: data.public_ip_disabled,
    region: data.region,
    rootVolumeSize: data.root_volume_size,
    rootVolumeType: data.root_volume_type,
    size: data.size,
    status: data.status,
    tags: data.tags,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    upgradePolicy: data.upgrade_policy ? unmarshalPoolUpgradePolicy(data.upgrade_policy) : void 0,
    version: data.version,
    zone: data.zone
  };
};
const unmarshalVersion = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Version' failed as data isn't a dictionary.`
    );
  }
  return {
    availableAdmissionPlugins: data.available_admission_plugins,
    availableCnis: data.available_cnis,
    availableContainerRuntimes: data.available_container_runtimes,
    availableFeatureGates: data.available_feature_gates,
    availableKubeletArgs: data.available_kubelet_args,
    label: data.label,
    name: data.name,
    region: data.region
  };
};
const unmarshalMaintenanceWindow = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'MaintenanceWindow' failed as data isn't a dictionary.`
    );
  }
  return {
    day: data.day,
    startHour: data.start_hour
  };
};
const unmarshalClusterAutoUpgrade = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ClusterAutoUpgrade' failed as data isn't a dictionary.`
    );
  }
  return {
    enabled: data.enabled,
    maintenanceWindow: data.maintenance_window ? unmarshalMaintenanceWindow(data.maintenance_window) : void 0
  };
};
const unmarshalClusterAutoscalerConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ClusterAutoscalerConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    balanceSimilarNodeGroups: data.balance_similar_node_groups,
    estimator: data.estimator,
    expander: data.expander,
    expendablePodsPriorityCutoff: data.expendable_pods_priority_cutoff,
    ignoreDaemonsetsUtilization: data.ignore_daemonsets_utilization,
    maxGracefulTerminationSec: data.max_graceful_termination_sec,
    scaleDownDelayAfterAdd: data.scale_down_delay_after_add,
    scaleDownDisabled: data.scale_down_disabled,
    scaleDownUnneededTime: data.scale_down_unneeded_time,
    scaleDownUtilizationThreshold: data.scale_down_utilization_threshold
  };
};
const unmarshalClusterOpenIDConnectConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ClusterOpenIDConnectConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    clientId: data.client_id,
    groupsClaim: data.groups_claim,
    groupsPrefix: data.groups_prefix,
    issuerUrl: data.issuer_url,
    requiredClaim: data.required_claim,
    usernameClaim: data.username_claim,
    usernamePrefix: data.username_prefix
  };
};
const unmarshalCluster = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Cluster' failed as data isn't a dictionary.`
    );
  }
  return {
    admissionPlugins: data.admission_plugins,
    apiserverCertSans: data.apiserver_cert_sans,
    autoUpgrade: data.auto_upgrade ? unmarshalClusterAutoUpgrade(data.auto_upgrade) : void 0,
    autoscalerConfig: data.autoscaler_config ? unmarshalClusterAutoscalerConfig(data.autoscaler_config) : void 0,
    clusterUrl: data.cluster_url,
    cni: data.cni,
    commitmentEndsAt: marshalling.unmarshalDate(data.commitment_ends_at),
    createdAt: marshalling.unmarshalDate(data.created_at),
    description: data.description,
    dnsWildcard: data.dns_wildcard,
    featureGates: data.feature_gates,
    id: data.id,
    name: data.name,
    openIdConnectConfig: data.open_id_connect_config ? unmarshalClusterOpenIDConnectConfig(data.open_id_connect_config) : void 0,
    organizationId: data.organization_id,
    privateNetworkId: data.private_network_id,
    projectId: data.project_id,
    region: data.region,
    routedIpEnabled: data.routed_ip_enabled,
    sbsCsiEnabled: data.sbs_csi_enabled,
    status: data.status,
    tags: data.tags,
    type: data.type,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    upgradeAvailable: data.upgrade_available,
    version: data.version
  };
};
const unmarshalNode = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Node' failed as data isn't a dictionary.`
    );
  }
  return {
    clusterId: data.cluster_id,
    conditions: data.conditions ? data.conditions : void 0,
    createdAt: marshalling.unmarshalDate(data.created_at),
    errorMessage: data.error_message,
    id: data.id,
    name: data.name,
    poolId: data.pool_id,
    providerId: data.provider_id,
    publicIpV4: data.public_ip_v4,
    publicIpV6: data.public_ip_v6,
    region: data.region,
    status: data.status,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalExternalNodeCoreV1Taint = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ExternalNodeCoreV1Taint' failed as data isn't a dictionary.`
    );
  }
  return {
    effect: data.effect,
    key: data.key,
    value: data.value
  };
};
const unmarshalExternalNode = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ExternalNode' failed as data isn't a dictionary.`
    );
  }
  return {
    clusterCa: data.cluster_ca,
    clusterUrl: data.cluster_url,
    cniPluginsVersion: data.cni_plugins_version,
    containerdVersion: data.containerd_version,
    externalIp: data.external_ip,
    id: data.id,
    kubeToken: data.kube_token,
    kubeletConfig: data.kubelet_config,
    name: data.name,
    nodeLabels: data.node_labels,
    nodeTaints: marshalling.unmarshalArrayOfObject(
      data.node_taints,
      unmarshalExternalNodeCoreV1Taint
    ),
    poolVersion: data.pool_version,
    runcVersion: data.runc_version
  };
};
const unmarshalExternalNodeAuth = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ExternalNodeAuth' failed as data isn't a dictionary.`
    );
  }
  return {
    apiUrl: data.api_url,
    nodeToken: data.node_token
  };
};
const unmarshalClusterType = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ClusterType' failed as data isn't a dictionary.`
    );
  }
  return {
    auditLogsSupported: data.audit_logs_supported,
    availability: data.availability,
    commitmentDelay: data.commitment_delay,
    dedicated: data.dedicated,
    maxEtcdSize: data.max_etcd_size,
    maxNodes: data.max_nodes,
    memory: data.memory,
    name: data.name,
    resiliency: data.resiliency,
    sla: data.sla
  };
};
const unmarshalListClusterAvailableTypesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListClusterAvailableTypesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    clusterTypes: marshalling.unmarshalArrayOfObject(
      data.cluster_types,
      unmarshalClusterType
    ),
    totalCount: data.total_count
  };
};
const unmarshalListClusterAvailableVersionsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListClusterAvailableVersionsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    versions: marshalling.unmarshalArrayOfObject(data.versions, unmarshalVersion)
  };
};
const unmarshalListClusterTypesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListClusterTypesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    clusterTypes: marshalling.unmarshalArrayOfObject(
      data.cluster_types,
      unmarshalClusterType
    ),
    totalCount: data.total_count
  };
};
const unmarshalListClustersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListClustersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    clusters: marshalling.unmarshalArrayOfObject(data.clusters, unmarshalCluster),
    totalCount: data.total_count
  };
};
const unmarshalListNodesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListNodesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    nodes: marshalling.unmarshalArrayOfObject(data.nodes, unmarshalNode),
    totalCount: data.total_count
  };
};
const unmarshalListPoolsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListPoolsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    pools: marshalling.unmarshalArrayOfObject(data.pools, unmarshalPool),
    totalCount: data.total_count
  };
};
const unmarshalListVersionsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListVersionsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    versions: marshalling.unmarshalArrayOfObject(data.versions, unmarshalVersion)
  };
};
const unmarshalNodeMetadataCoreV1Taint = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'NodeMetadataCoreV1Taint' failed as data isn't a dictionary.`
    );
  }
  return {
    effect: data.effect,
    key: data.key,
    value: data.value
  };
};
const unmarshalNodeMetadata = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'NodeMetadata' failed as data isn't a dictionary.`
    );
  }
  return {
    clusterCa: data.cluster_ca,
    clusterUrl: data.cluster_url,
    credentialProviderConfig: data.credential_provider_config,
    externalIp: data.external_ip,
    fullIsolation: data.full_isolation,
    hasGpu: data.has_gpu,
    id: data.id,
    kapsuleIfaceMac: data.kapsule_iface_mac,
    kubeletConfig: data.kubelet_config,
    name: data.name,
    nodeLabels: data.node_labels,
    nodeTaints: marshalling.unmarshalArrayOfObject(
      data.node_taints,
      unmarshalNodeMetadataCoreV1Taint
    ),
    poolVersion: data.pool_version,
    privateNetworkMode: data.private_network_mode
  };
};
const marshalMaintenanceWindow = (request, defaults) => ({
  day: request.day,
  start_hour: request.startHour
});
const marshalCreateClusterRequestPoolConfigUpgradePolicy = (request, defaults) => ({
  max_surge: request.maxSurge,
  max_unavailable: request.maxUnavailable
});
const marshalCreateClusterRequestAutoUpgrade = (request, defaults) => ({
  enable: request.enable,
  maintenance_window: request.maintenanceWindow !== void 0 ? marshalMaintenanceWindow(request.maintenanceWindow) : void 0
});
const marshalCreateClusterRequestAutoscalerConfig = (request, defaults) => ({
  balance_similar_node_groups: request.balanceSimilarNodeGroups,
  estimator: request.estimator,
  expander: request.expander,
  expendable_pods_priority_cutoff: request.expendablePodsPriorityCutoff,
  ignore_daemonsets_utilization: request.ignoreDaemonsetsUtilization,
  max_graceful_termination_sec: request.maxGracefulTerminationSec,
  scale_down_delay_after_add: request.scaleDownDelayAfterAdd,
  scale_down_disabled: request.scaleDownDisabled,
  scale_down_unneeded_time: request.scaleDownUnneededTime,
  scale_down_utilization_threshold: request.scaleDownUtilizationThreshold
});
const marshalCreateClusterRequestOpenIDConnectConfig = (request, defaults) => ({
  client_id: request.clientId,
  groups_claim: request.groupsClaim,
  groups_prefix: request.groupsPrefix,
  issuer_url: request.issuerUrl,
  required_claim: request.requiredClaim,
  username_claim: request.usernameClaim,
  username_prefix: request.usernamePrefix
});
const marshalCreateClusterRequestPoolConfig = (request, defaults) => ({
  autohealing: request.autohealing,
  autoscaling: request.autoscaling,
  container_runtime: request.containerRuntime,
  kubelet_args: request.kubeletArgs,
  max_size: request.maxSize,
  min_size: request.minSize,
  name: request.name,
  node_type: request.nodeType,
  placement_group_id: request.placementGroupId,
  public_ip_disabled: request.publicIpDisabled,
  root_volume_size: request.rootVolumeSize,
  root_volume_type: request.rootVolumeType,
  size: request.size,
  tags: request.tags,
  upgrade_policy: request.upgradePolicy !== void 0 ? marshalCreateClusterRequestPoolConfigUpgradePolicy(
    request.upgradePolicy
  ) : void 0,
  zone: request.zone
});
const marshalCreateClusterRequest = (request, defaults) => ({
  admission_plugins: request.admissionPlugins,
  apiserver_cert_sans: request.apiserverCertSans,
  auto_upgrade: request.autoUpgrade !== void 0 ? marshalCreateClusterRequestAutoUpgrade(request.autoUpgrade) : void 0,
  autoscaler_config: request.autoscalerConfig !== void 0 ? marshalCreateClusterRequestAutoscalerConfig(
    request.autoscalerConfig
  ) : void 0,
  cni: request.cni,
  description: request.description,
  feature_gates: request.featureGates,
  name: request.name || randomName("k8s"),
  open_id_connect_config: request.openIdConnectConfig !== void 0 ? marshalCreateClusterRequestOpenIDConnectConfig(
    request.openIdConnectConfig
  ) : void 0,
  pools: request.pools !== void 0 ? request.pools.map(
    (elt) => marshalCreateClusterRequestPoolConfig(elt)
  ) : void 0,
  private_network_id: request.privateNetworkId,
  tags: request.tags,
  type: request.type,
  version: request.version,
  ...marshalling.resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project_id",
      value: request.projectId
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization_id",
      value: request.organizationId
    }
  ])
});
const marshalCreatePoolRequestUpgradePolicy = (request, defaults) => ({
  max_surge: request.maxSurge,
  max_unavailable: request.maxUnavailable
});
const marshalCreatePoolRequest = (request, defaults) => ({
  autohealing: request.autohealing,
  autoscaling: request.autoscaling,
  container_runtime: request.containerRuntime,
  kubelet_args: request.kubeletArgs !== void 0 ? request.kubeletArgs : void 0,
  max_size: request.maxSize,
  min_size: request.minSize,
  name: request.name || randomName("pool"),
  node_type: request.nodeType,
  placement_group_id: request.placementGroupId,
  public_ip_disabled: request.publicIpDisabled,
  root_volume_size: request.rootVolumeSize,
  root_volume_type: request.rootVolumeType,
  size: request.size,
  tags: request.tags,
  upgrade_policy: request.upgradePolicy !== void 0 ? marshalCreatePoolRequestUpgradePolicy(request.upgradePolicy) : void 0,
  zone: request.zone ?? defaults.defaultZone
});
const marshalSetClusterTypeRequest = (request, defaults) => ({
  type: request.type
});
const marshalUpdateClusterRequestAutoUpgrade = (request, defaults) => ({
  enable: request.enable,
  maintenance_window: request.maintenanceWindow !== void 0 ? marshalMaintenanceWindow(request.maintenanceWindow) : void 0
});
const marshalUpdateClusterRequestAutoscalerConfig = (request, defaults) => ({
  balance_similar_node_groups: request.balanceSimilarNodeGroups,
  estimator: request.estimator,
  expander: request.expander,
  expendable_pods_priority_cutoff: request.expendablePodsPriorityCutoff,
  ignore_daemonsets_utilization: request.ignoreDaemonsetsUtilization,
  max_graceful_termination_sec: request.maxGracefulTerminationSec,
  scale_down_delay_after_add: request.scaleDownDelayAfterAdd,
  scale_down_disabled: request.scaleDownDisabled,
  scale_down_unneeded_time: request.scaleDownUnneededTime,
  scale_down_utilization_threshold: request.scaleDownUtilizationThreshold
});
const marshalUpdateClusterRequestOpenIDConnectConfig = (request, defaults) => ({
  client_id: request.clientId,
  groups_claim: request.groupsClaim,
  groups_prefix: request.groupsPrefix,
  issuer_url: request.issuerUrl,
  required_claim: request.requiredClaim,
  username_claim: request.usernameClaim,
  username_prefix: request.usernamePrefix
});
const marshalUpdateClusterRequest = (request, defaults) => ({
  admission_plugins: request.admissionPlugins,
  apiserver_cert_sans: request.apiserverCertSans,
  auto_upgrade: request.autoUpgrade !== void 0 ? marshalUpdateClusterRequestAutoUpgrade(request.autoUpgrade) : void 0,
  autoscaler_config: request.autoscalerConfig !== void 0 ? marshalUpdateClusterRequestAutoscalerConfig(
    request.autoscalerConfig
  ) : void 0,
  description: request.description,
  feature_gates: request.featureGates,
  name: request.name,
  open_id_connect_config: request.openIdConnectConfig !== void 0 ? marshalUpdateClusterRequestOpenIDConnectConfig(
    request.openIdConnectConfig
  ) : void 0,
  tags: request.tags
});
const marshalUpdatePoolRequestUpgradePolicy = (request, defaults) => ({
  max_surge: request.maxSurge,
  max_unavailable: request.maxUnavailable
});
const marshalUpdatePoolRequest = (request, defaults) => ({
  autohealing: request.autohealing,
  autoscaling: request.autoscaling,
  kubelet_args: request.kubeletArgs,
  max_size: request.maxSize,
  min_size: request.minSize,
  size: request.size,
  tags: request.tags,
  upgrade_policy: request.upgradePolicy !== void 0 ? marshalUpdatePoolRequestUpgradePolicy(request.upgradePolicy) : void 0
});
const marshalUpgradeClusterRequest = (request, defaults) => ({
  upgrade_pools: request.upgradePools,
  version: request.version
});
const marshalUpgradePoolRequest = (request, defaults) => ({
  version: request.version
});
exports.marshalCreateClusterRequest = marshalCreateClusterRequest;
exports.marshalCreatePoolRequest = marshalCreatePoolRequest;
exports.marshalSetClusterTypeRequest = marshalSetClusterTypeRequest;
exports.marshalUpdateClusterRequest = marshalUpdateClusterRequest;
exports.marshalUpdatePoolRequest = marshalUpdatePoolRequest;
exports.marshalUpgradeClusterRequest = marshalUpgradeClusterRequest;
exports.marshalUpgradePoolRequest = marshalUpgradePoolRequest;
exports.unmarshalCluster = unmarshalCluster;
exports.unmarshalExternalNode = unmarshalExternalNode;
exports.unmarshalExternalNodeAuth = unmarshalExternalNodeAuth;
exports.unmarshalListClusterAvailableTypesResponse = unmarshalListClusterAvailableTypesResponse;
exports.unmarshalListClusterAvailableVersionsResponse = unmarshalListClusterAvailableVersionsResponse;
exports.unmarshalListClusterTypesResponse = unmarshalListClusterTypesResponse;
exports.unmarshalListClustersResponse = unmarshalListClustersResponse;
exports.unmarshalListNodesResponse = unmarshalListNodesResponse;
exports.unmarshalListPoolsResponse = unmarshalListPoolsResponse;
exports.unmarshalListVersionsResponse = unmarshalListVersionsResponse;
exports.unmarshalNode = unmarshalNode;
exports.unmarshalNodeMetadata = unmarshalNodeMetadata;
exports.unmarshalPool = unmarshalPool;
exports.unmarshalVersion = unmarshalVersion;


/***/ }),

/***/ 2438:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const CreateClusterRequest = {
  name: {
    minLength: 1
  }
};
const CreateClusterRequestAutoscalerConfig = {
  scaleDownUtilizationThreshold: {
    greaterThan: 0,
    lessThan: 1
  }
};
const CreateClusterRequestOpenIDConnectConfig = {
  clientId: {
    minLength: 1
  },
  groupsPrefix: {
    minLength: 1
  },
  usernameClaim: {
    minLength: 1
  },
  usernamePrefix: {
    minLength: 1
  }
};
const CreateClusterRequestPoolConfig = {
  name: {
    minLength: 1
  }
};
const CreatePoolRequest = {
  name: {
    minLength: 1
  }
};
const ListClusterTypesRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const ListClustersRequest = {
  name: {
    minLength: 1
  },
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const ListNodesRequest = {
  name: {
    minLength: 1
  },
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const ListPoolsRequest = {
  name: {
    minLength: 1
  },
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const MaintenanceWindow = {
  startHour: {
    lessThanOrEqual: 23
  }
};
const UpdateClusterRequest = {
  name: {
    minLength: 1
  }
};
const UpdateClusterRequestAutoscalerConfig = {
  scaleDownUtilizationThreshold: {
    greaterThan: 0,
    lessThan: 1
  }
};
exports.CreateClusterRequest = CreateClusterRequest;
exports.CreateClusterRequestAutoscalerConfig = CreateClusterRequestAutoscalerConfig;
exports.CreateClusterRequestOpenIDConnectConfig = CreateClusterRequestOpenIDConnectConfig;
exports.CreateClusterRequestPoolConfig = CreateClusterRequestPoolConfig;
exports.CreatePoolRequest = CreatePoolRequest;
exports.ListClusterTypesRequest = ListClusterTypesRequest;
exports.ListClustersRequest = ListClustersRequest;
exports.ListNodesRequest = ListNodesRequest;
exports.ListPoolsRequest = ListPoolsRequest;
exports.MaintenanceWindow = MaintenanceWindow;
exports.UpdateClusterRequest = UpdateClusterRequest;
exports.UpdateClusterRequestAutoscalerConfig = UpdateClusterRequestAutoscalerConfig;


/***/ }),

/***/ 144:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(3863);
exports.v1alpha1 = index_gen;


/***/ }),

/***/ 2447:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const marshalling_gen = __nccwpck_require__(8093);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par", "nl-ams", "pl-waw"];
  /**
   * Create a key. Create a key in a given region specified by the `region`
   * parameter. Keys only support symmetric encryption. You can use keys to
   * encrypt or decrypt arbitrary payloads, or to generate data encryption keys
   * that can be used without being stored in Key Manager.
   *
   * @param request - The request {@link CreateKeyRequest}
   * @returns A Promise of Key
   */
  createKey = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateKeyRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/keys`
    },
    marshalling_gen.unmarshalKey
  );
  /**
   * Get key metadata. Retrieve the metadata of a key specified by the `region`
   * and `key_id` parameters.
   *
   * @param request - The request {@link GetKeyRequest}
   * @returns A Promise of Key
   */
  getKey = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam("keyId", request.keyId)}`
    },
    marshalling_gen.unmarshalKey
  );
  /**
   * Update a key. Update a key's metadata (name, description and tags),
   * specified by the `key_id` and `region` parameters.
   *
   * @param request - The request {@link UpdateKeyRequest}
   * @returns A Promise of Key
   */
  updateKey = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateKeyRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam("keyId", request.keyId)}`
    },
    marshalling_gen.unmarshalKey
  );
  /**
   * Delete a key. Delete an existing key specified by the `region` and `key_id`
   * parameters. Deleting a key is permanent and cannot be undone. All data
   * encrypted using this key, including data encryption keys, will become
   * unusable.
   *
   * @param request - The request {@link DeleteKeyRequest}
   */
  deleteKey = (request) => this.client.fetch({
    method: "DELETE",
    path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam("keyId", request.keyId)}`
  });
  /**
   * Rotate a key. Generate a new version of an existing key with randomly
   * generated key material. Rotated keys can still be used to decrypt
   * previously encrypted data. The key's new material will be used for
   * subsequent encryption operations and data key generation.
   *
   * @param request - The request {@link RotateKeyRequest}
   * @returns A Promise of Key
   */
  rotateKey = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam("keyId", request.keyId)}/rotate`
    },
    marshalling_gen.unmarshalKey
  );
  /**
   * Apply key protection. Apply key protection to a given key specified by the
   * `key_id` parameter. Applying key protection means that your key can be used
   * and modified, but it cannot be deleted.
   *
   * @param request - The request {@link ProtectKeyRequest}
   * @returns A Promise of Key
   */
  protectKey = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam("keyId", request.keyId)}/protect`
    },
    marshalling_gen.unmarshalKey
  );
  /**
   * Remove key protection. Remove key protection from a given key specified by
   * the `key_id` parameter. Removing key protection means that your key can be
   * deleted anytime.
   *
   * @param request - The request {@link UnprotectKeyRequest}
   * @returns A Promise of Key
   */
  unprotectKey = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam("keyId", request.keyId)}/unprotect`
    },
    marshalling_gen.unmarshalKey
  );
  /**
   * Enable key. Enable a given key to be used for cryptographic operations.
   * Enabling a key allows you to make a disabled key usable again. You must
   * specify the `region` and `key_id` parameters.
   *
   * @param request - The request {@link EnableKeyRequest}
   * @returns A Promise of Key
   */
  enableKey = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam("keyId", request.keyId)}/enable`
    },
    marshalling_gen.unmarshalKey
  );
  /**
   * Disable key. Disable a given key to be used for cryptographic operations.
   * Disabling a key renders it unusable. You must specify the `region` and
   * `key_id` parameters.
   *
   * @param request - The request {@link DisableKeyRequest}
   * @returns A Promise of Key
   */
  disableKey = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam("keyId", request.keyId)}/disable`
    },
    marshalling_gen.unmarshalKey
  );
  pageOfListKeys = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/keys`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListKeysResponse
  );
  /**
   * List keys. Retrieve the list of keys created within all Projects of an
   * Organization or in a given Project. You must specify the `region`, and
   * either the `organization_id` or the `project_id`.
   *
   * @param request - The request {@link ListKeysRequest}
   * @returns A Promise of ListKeysResponse
   */
  listKeys = (request = {}) => resourcePaginator.enrichForPagination("keys", this.pageOfListKeys, request);
  /**
   * Generate a data encryption key. Generate a new data encryption key to use
   * for cryptographic operations outside of Key Manager. Note that Key Manager
   * does not store your data encryption key. The data encryption key is
   * encrypted and must be decrypted using the key you have created in Key
   * Manager. The data encryption key's plaintext is returned in the response
   * object, for immediate usage.
   *
   * Always store the data encryption key's ciphertext, rather than its
   * plaintext, which must not be stored. To retrieve your key's plaintext, call
   * the Decrypt endpoint with your key's ID and ciphertext.
   *
   * @param request - The request {@link GenerateDataKeyRequest}
   * @returns A Promise of DataKey
   */
  generateDataKey = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalGenerateDataKeyRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam("keyId", request.keyId)}/generate-data-key`
    },
    marshalling_gen.unmarshalDataKey
  );
  /**
   * Encrypt data. Encrypt data using an existing key, specified by the `key_id`
   * parameter. Only keys with a usage set to **symmetric_encryption** are
   * supported by this method. The maximum payload size that can be encrypted is
   * 64KB of plaintext.
   *
   * @param request - The request {@link EncryptRequest}
   * @returns A Promise of EncryptResponse
   */
  encrypt = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalEncryptRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam("keyId", request.keyId)}/encrypt`
    },
    marshalling_gen.unmarshalEncryptResponse
  );
  /**
   * Decrypt data. Decrypt data using an existing key, specified by the `key_id`
   * parameter. The maximum payload size that can be decrypted is the result of
   * the encryption of 64KB of data (around 131KB).
   *
   * @param request - The request {@link DecryptRequest}
   * @returns A Promise of DecryptResponse
   */
  decrypt = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalDecryptRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam("keyId", request.keyId)}/decrypt`
    },
    marshalling_gen.unmarshalDecryptResponse
  );
}
exports.API = API;


/***/ }),

/***/ 3863:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(2447);
exports.API = api_gen.API;


/***/ }),

/***/ 8093:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalKeyRotationPolicy = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'KeyRotationPolicy' failed as data isn't a dictionary.`
    );
  }
  return {
    nextRotationAt: marshalling.unmarshalDate(data.next_rotation_at),
    rotationPeriod: data.rotation_period
  };
};
const unmarshalKeyUsage = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'KeyUsage' failed as data isn't a dictionary.`
    );
  }
  return {
    symmetricEncryption: data.symmetric_encryption ? data.symmetric_encryption : void 0
  };
};
const unmarshalKey = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Key' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    description: data.description,
    id: data.id,
    locked: data.locked,
    name: data.name,
    projectId: data.project_id,
    protected: data.protected,
    region: data.region,
    rotatedAt: marshalling.unmarshalDate(data.rotated_at),
    rotationCount: data.rotation_count,
    rotationPolicy: data.rotation_policy ? unmarshalKeyRotationPolicy(data.rotation_policy) : void 0,
    state: data.state,
    tags: data.tags,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    usage: data.usage ? unmarshalKeyUsage(data.usage) : void 0
  };
};
const unmarshalDataKey = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DataKey' failed as data isn't a dictionary.`
    );
  }
  return {
    algorithm: data.algorithm,
    ciphertext: data.ciphertext,
    createdAt: marshalling.unmarshalDate(data.created_at),
    keyId: data.key_id,
    plaintext: data.plaintext
  };
};
const unmarshalDecryptResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DecryptResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    ciphertext: data.ciphertext,
    keyId: data.key_id,
    plaintext: data.plaintext
  };
};
const unmarshalEncryptResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EncryptResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    ciphertext: data.ciphertext,
    keyId: data.key_id
  };
};
const unmarshalListKeysResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListKeysResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    keys: marshalling.unmarshalArrayOfObject(data.keys, unmarshalKey),
    totalCount: data.total_count
  };
};
const marshalKeyRotationPolicy = (request, defaults) => ({
  next_rotation_at: request.nextRotationAt,
  rotation_period: request.rotationPeriod
});
const marshalKeyUsage = (request, defaults) => ({
  ...marshalling.resolveOneOf([
    { param: "symmetric_encryption", value: request.symmetricEncryption }
  ])
});
const marshalCreateKeyRequest = (request, defaults) => ({
  description: request.description,
  name: request.name,
  project_id: request.projectId ?? defaults.defaultProjectId,
  rotation_policy: request.rotationPolicy !== void 0 ? marshalKeyRotationPolicy(request.rotationPolicy) : void 0,
  tags: request.tags,
  unprotected: request.unprotected,
  usage: request.usage !== void 0 ? marshalKeyUsage(request.usage) : void 0
});
const marshalDecryptRequest = (request, defaults) => ({
  associated_data: request.associatedData,
  ciphertext: request.ciphertext
});
const marshalEncryptRequest = (request, defaults) => ({
  associated_data: request.associatedData,
  plaintext: request.plaintext
});
const marshalGenerateDataKeyRequest = (request, defaults) => ({
  algorithm: request.algorithm,
  without_plaintext: request.withoutPlaintext
});
const marshalUpdateKeyRequest = (request, defaults) => ({
  description: request.description,
  name: request.name,
  rotation_policy: request.rotationPolicy !== void 0 ? marshalKeyRotationPolicy(request.rotationPolicy) : void 0,
  tags: request.tags
});
exports.marshalCreateKeyRequest = marshalCreateKeyRequest;
exports.marshalDecryptRequest = marshalDecryptRequest;
exports.marshalEncryptRequest = marshalEncryptRequest;
exports.marshalGenerateDataKeyRequest = marshalGenerateDataKeyRequest;
exports.marshalUpdateKeyRequest = marshalUpdateKeyRequest;
exports.unmarshalDataKey = unmarshalDataKey;
exports.unmarshalDecryptResponse = unmarshalDecryptResponse;
exports.unmarshalEncryptResponse = unmarshalEncryptResponse;
exports.unmarshalKey = unmarshalKey;
exports.unmarshalListKeysResponse = unmarshalListKeysResponse;


/***/ }),

/***/ 6419:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index = __nccwpck_require__(7649);
exports.v1 = index;


/***/ }),

/***/ 1067:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const content_gen = __nccwpck_require__(2764);
const marshalling_gen = __nccwpck_require__(1780);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class ZonedAPI extends api.API {
  /** Lists the available zones of the API. */
  static LOCALITIES = [
    "fr-par-1",
    "fr-par-2",
    "nl-ams-1",
    "nl-ams-2",
    "nl-ams-3",
    "pl-waw-1",
    "pl-waw-2",
    "pl-waw-3"
  ];
  pageOfListLbs = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/lbs`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListLbsResponse
  );
  /**
   * List Load Balancers. List all Load Balancers in the specified zone, for a
   * Scaleway Organization or Scaleway Project. By default, the Load Balancers
   * returned in the list are ordered by creation date in ascending order,
   * though this can be modified via the `order_by` field.
   *
   * @param request - The request {@link ZonedApiListLbsRequest}
   * @returns A Promise of ListLbsResponse
   */
  listLbs = (request = {}) => resourcePaginator.enrichForPagination("lbs", this.pageOfListLbs, request);
  /**
   * Create a Load Balancer. Create a new Load Balancer. Note that the Load
   * Balancer will be created without frontends or backends; these must be
   * created separately via the dedicated endpoints.
   *
   * @param request - The request {@link ZonedApiCreateLbRequest}
   * @returns A Promise of Lb
   */
  createLb = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiCreateLbRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/lbs`
    },
    marshalling_gen.unmarshalLb
  );
  /**
   * Get a Load Balancer. Retrieve information about an existing Load Balancer,
   * specified by its Load Balancer ID. Its full details, including name, status
   * and IP address, are returned in the response object.
   *
   * @param request - The request {@link ZonedApiGetLbRequest}
   * @returns A Promise of Lb
   */
  getLb = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}`
    },
    marshalling_gen.unmarshalLb
  );
  /**
   * Waits for {@link Lb} to be in a final state.
   *
   * @param request - The request {@link ZonedApiGetLbRequest}
   * @param options - The waiting options
   * @returns A Promise of Lb
   */
  waitForLb = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.LB_TRANSIENT_STATUSES.includes(res.status))),
    this.getLb,
    request,
    options
  );
  /**
   * Update a Load Balancer. Update the parameters of an existing Load Balancer,
   * specified by its Load Balancer ID. Note that the request type is PUT and
   * not PATCH. You must set all parameters.
   *
   * @param request - The request {@link ZonedApiUpdateLbRequest}
   * @returns A Promise of Lb
   */
  updateLb = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiUpdateLbRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}`
    },
    marshalling_gen.unmarshalLb
  );
  /**
   * Delete a Load Balancer. Delete an existing Load Balancer, specified by its
   * Load Balancer ID. Deleting a Load Balancer is permanent, and cannot be
   * undone. The Load Balancer's flexible IP address can either be deleted with
   * the Load Balancer, or kept in your account for future use.
   *
   * @param request - The request {@link ZonedApiDeleteLbRequest}
   */
  deleteLb = (request) => this.client.fetch({
    method: "DELETE",
    path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}`,
    urlParams: marshalling.urlParams(["release_ip", request.releaseIp])
  });
  /**
   * Migrate a Load Balancer. Migrate an existing Load Balancer from one
   * commercial type to another. Allows you to scale your Load Balancer up or
   * down in terms of bandwidth or multi-cloud provision.
   *
   * @param request - The request {@link ZonedApiMigrateLbRequest}
   * @returns A Promise of Lb
   */
  migrateLb = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiMigrateLbRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/migrate`
    },
    marshalling_gen.unmarshalLb
  );
  pageOfListIPs = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/ips`,
      urlParams: marshalling.urlParams(
        ["ip_address", request.ipAddress],
        ["ip_type", request.ipType],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListIpsResponse
  );
  /**
   * List IP addresses. List the Load Balancer flexible IP addresses held in the
   * account (filtered by Organization ID or Project ID). It is also possible to
   * search for a specific IP address.
   *
   * @param request - The request {@link ZonedApiListIPsRequest}
   * @returns A Promise of ListIpsResponse
   */
  listIPs = (request = {}) => resourcePaginator.enrichForPagination("ips", this.pageOfListIPs, request);
  /**
   * Create an IP address. Create a new Load Balancer flexible IP address, in
   * the specified Scaleway Project. This can be attached to new Load Balancers
   * created in the future.
   *
   * @param request - The request {@link ZonedApiCreateIpRequest}
   * @returns A Promise of Ip
   */
  createIp = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiCreateIpRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/ips`
    },
    marshalling_gen.unmarshalIp
  );
  /**
   * Get an IP address. Retrieve the full details of a Load Balancer flexible IP
   * address.
   *
   * @param request - The request {@link ZonedApiGetIpRequest}
   * @returns A Promise of Ip
   */
  getIp = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/ips/${marshalling.validatePathParam("ipId", request.ipId)}`
    },
    marshalling_gen.unmarshalIp
  );
  /**
   * Delete an IP address. Delete a Load Balancer flexible IP address. This
   * action is irreversible, and cannot be undone.
   *
   * @param request - The request {@link ZonedApiReleaseIpRequest}
   */
  releaseIp = (request) => this.client.fetch({
    method: "DELETE",
    path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/ips/${marshalling.validatePathParam("ipId", request.ipId)}`
  });
  /**
   * Update an IP address. Update the reverse DNS of a Load Balancer flexible IP
   * address.
   *
   * @param request - The request {@link ZonedApiUpdateIpRequest}
   * @returns A Promise of Ip
   */
  updateIp = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiUpdateIpRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/ips/${marshalling.validatePathParam("ipId", request.ipId)}`
    },
    marshalling_gen.unmarshalIp
  );
  pageOfListBackends = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/backends`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListBackendsResponse
  );
  /**
   * List the backends of a given Load Balancer. List all the backends of a Load
   * Balancer, specified by its Load Balancer ID. By default, results are
   * returned in ascending order by the creation date of each backend. The
   * response is an array of backend objects, containing full details of each
   * one including their configuration parameters such as protocol, port and
   * forwarding algorithm.
   *
   * @param request - The request {@link ZonedApiListBackendsRequest}
   * @returns A Promise of ListBackendsResponse
   */
  listBackends = (request) => resourcePaginator.enrichForPagination("backends", this.pageOfListBackends, request);
  /**
   * Create a backend for a given Load Balancer. Create a new backend for a
   * given Load Balancer, specifying its full configuration including protocol,
   * port and forwarding algorithm.
   *
   * @param request - The request {@link ZonedApiCreateBackendRequest}
   * @returns A Promise of Backend
   */
  createBackend = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiCreateBackendRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/backends`
    },
    marshalling_gen.unmarshalBackend
  );
  /**
   * Get a backend of a given Load Balancer. Get the full details of a given
   * backend, specified by its backend ID. The response contains the backend's
   * full configuration parameters including protocol, port and forwarding
   * algorithm.
   *
   * @param request - The request {@link ZonedApiGetBackendRequest}
   * @returns A Promise of Backend
   */
  getBackend = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/backends/${marshalling.validatePathParam("backendId", request.backendId)}`
    },
    marshalling_gen.unmarshalBackend
  );
  /**
   * Update a backend of a given Load Balancer. Update a backend of a given Load
   * Balancer, specified by its backend ID. Note that the request type is PUT
   * and not PATCH. You must set all parameters.
   *
   * @param request - The request {@link ZonedApiUpdateBackendRequest}
   * @returns A Promise of Backend
   */
  updateBackend = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiUpdateBackendRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/backends/${marshalling.validatePathParam("backendId", request.backendId)}`
    },
    marshalling_gen.unmarshalBackend
  );
  /**
   * Delete a backend of a given Load Balancer. Delete a backend of a given Load
   * Balancer, specified by its backend ID. This action is irreversible and
   * cannot be undone.
   *
   * @param request - The request {@link ZonedApiDeleteBackendRequest}
   */
  deleteBackend = (request) => this.client.fetch({
    method: "DELETE",
    path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/backends/${marshalling.validatePathParam("backendId", request.backendId)}`
  });
  /**
   * Add a set of backend servers to a given backend. For a given backend
   * specified by its backend ID, add a set of backend servers (identified by
   * their IP addresses) it should forward traffic to. These will be appended to
   * any existing set of backend servers for this backend.
   *
   * @param request - The request {@link ZonedApiAddBackendServersRequest}
   * @returns A Promise of Backend
   */
  addBackendServers = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiAddBackendServersRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/backends/${marshalling.validatePathParam("backendId", request.backendId)}/servers`
    },
    marshalling_gen.unmarshalBackend
  );
  /**
   * Remove a set of servers for a given backend. For a given backend specified
   * by its backend ID, remove the specified backend servers (identified by
   * their IP addresses) so that it no longer forwards traffic to them.
   *
   * @param request - The request {@link ZonedApiRemoveBackendServersRequest}
   * @returns A Promise of Backend
   */
  removeBackendServers = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiRemoveBackendServersRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "DELETE",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/backends/${marshalling.validatePathParam("backendId", request.backendId)}/servers`
    },
    marshalling_gen.unmarshalBackend
  );
  /**
   * Define all backend servers for a given backend. For a given backend
   * specified by its backend ID, define the set of backend servers (identified
   * by their IP addresses) that it should forward traffic to. Any existing
   * backend servers configured for this backend will be removed.
   *
   * @param request - The request {@link ZonedApiSetBackendServersRequest}
   * @returns A Promise of Backend
   */
  setBackendServers = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiSetBackendServersRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/backends/${marshalling.validatePathParam("backendId", request.backendId)}/servers`
    },
    marshalling_gen.unmarshalBackend
  );
  /**
   * Update a health check for a given backend. Update the configuration of the
   * health check performed by a given backend to verify the health of its
   * backend servers, identified by its backend ID. Note that the request type
   * is PUT and not PATCH. You must set all parameters.
   *
   * @param request - The request {@link ZonedApiUpdateHealthCheckRequest}
   * @returns A Promise of HealthCheck
   */
  updateHealthCheck = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiUpdateHealthCheckRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/backends/${marshalling.validatePathParam("backendId", request.backendId)}/healthcheck`
    },
    marshalling_gen.unmarshalHealthCheck
  );
  pageOfListFrontends = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/frontends`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListFrontendsResponse
  );
  /**
   * List frontends of a given Load Balancer. List all the frontends of a Load
   * Balancer, specified by its Load Balancer ID. By default, results are
   * returned in ascending order by the creation date of each frontend. The
   * response is an array of frontend objects, containing full details of each
   * one including the port they listen on and the backend they are attached
   * to.
   *
   * @param request - The request {@link ZonedApiListFrontendsRequest}
   * @returns A Promise of ListFrontendsResponse
   */
  listFrontends = (request) => resourcePaginator.enrichForPagination("frontends", this.pageOfListFrontends, request);
  /**
   * Create a frontend in a given Load Balancer. Create a new frontend for a
   * given Load Balancer, specifying its configuration including the port it
   * should listen on and the backend to attach it to.
   *
   * @param request - The request {@link ZonedApiCreateFrontendRequest}
   * @returns A Promise of Frontend
   */
  createFrontend = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiCreateFrontendRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/frontends`
    },
    marshalling_gen.unmarshalFrontend
  );
  /**
   * Get a frontend. Get the full details of a given frontend, specified by its
   * frontend ID. The response contains the frontend's full configuration
   * parameters including the backend it is attached to, the port it listens on,
   * and any certificates it has.
   *
   * @param request - The request {@link ZonedApiGetFrontendRequest}
   * @returns A Promise of Frontend
   */
  getFrontend = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/frontends/${marshalling.validatePathParam("frontendId", request.frontendId)}`
    },
    marshalling_gen.unmarshalFrontend
  );
  /**
   * Update a frontend. Update a given frontend, specified by its frontend ID.
   * You can update configuration parameters including its name and the port it
   * listens on. Note that the request type is PUT and not PATCH. You must set
   * all parameters.
   *
   * @param request - The request {@link ZonedApiUpdateFrontendRequest}
   * @returns A Promise of Frontend
   */
  updateFrontend = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiUpdateFrontendRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/frontends/${marshalling.validatePathParam("frontendId", request.frontendId)}`
    },
    marshalling_gen.unmarshalFrontend
  );
  /**
   * Delete a frontend. Delete a given frontend, specified by its frontend ID.
   * This action is irreversible and cannot be undone.
   *
   * @param request - The request {@link ZonedApiDeleteFrontendRequest}
   */
  deleteFrontend = (request) => this.client.fetch({
    method: "DELETE",
    path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/frontends/${marshalling.validatePathParam("frontendId", request.frontendId)}`
  });
  pageOfListRoutes = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/routes`,
      urlParams: marshalling.urlParams(
        ["frontend_id", request.frontendId],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListRoutesResponse
  );
  /**
   * List all routes. List all routes for a given frontend. The response is an
   * array of routes, each one with a specified backend to direct to if a
   * certain condition is matched (based on the value of the SNI field or HTTP
   * Host header).
   *
   * @param request - The request {@link ZonedApiListRoutesRequest}
   * @returns A Promise of ListRoutesResponse
   */
  listRoutes = (request = {}) => resourcePaginator.enrichForPagination("routes", this.pageOfListRoutes, request);
  /**
   * Create a route. Create a new route on a given frontend. To configure a
   * route, specify the backend to direct to if a certain condition is matched
   * (based on the value of the SNI field or HTTP Host header).
   *
   * @param request - The request {@link ZonedApiCreateRouteRequest}
   * @returns A Promise of Route
   */
  createRoute = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiCreateRouteRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/routes`
    },
    marshalling_gen.unmarshalRoute
  );
  /**
   * Get a route. Retrieve information about an existing route, specified by its
   * route ID. Its full details, origin frontend, target backend and match
   * condition, are returned in the response object.
   *
   * @param request - The request {@link ZonedApiGetRouteRequest}
   * @returns A Promise of Route
   */
  getRoute = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/routes/${marshalling.validatePathParam("routeId", request.routeId)}`
    },
    marshalling_gen.unmarshalRoute
  );
  /**
   * Update a route. Update the configuration of an existing route, specified by
   * its route ID.
   *
   * @param request - The request {@link ZonedApiUpdateRouteRequest}
   * @returns A Promise of Route
   */
  updateRoute = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiUpdateRouteRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/routes/${marshalling.validatePathParam("routeId", request.routeId)}`
    },
    marshalling_gen.unmarshalRoute
  );
  /**
   * Delete a route. Delete an existing route, specified by its route ID.
   * Deleting a route is permanent, and cannot be undone.
   *
   * @param request - The request {@link ZonedApiDeleteRouteRequest}
   */
  deleteRoute = (request) => this.client.fetch({
    method: "DELETE",
    path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/routes/${marshalling.validatePathParam("routeId", request.routeId)}`
  });
  /**
   * Get usage statistics of a given Load Balancer.
   *
   * @deprecated
   * @param request - The request {@link ZonedApiGetLbStatsRequest}
   * @returns A Promise of LbStats
   */
  getLbStats = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/stats`,
      urlParams: marshalling.urlParams(["backend_id", request.backendId])
    },
    marshalling_gen.unmarshalLbStats
  );
  pageOfListBackendStats = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/backend-stats`,
      urlParams: marshalling.urlParams(
        ["backend_id", request.backendId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListBackendStatsResponse
  );
  /**
   * List backend server statistics. List information about your backend
   * servers, including their state and the result of their last health check.
   *
   * @param request - The request {@link ZonedApiListBackendStatsRequest}
   * @returns A Promise of ListBackendStatsResponse
   */
  listBackendStats = (request) => resourcePaginator.enrichForPagination(
    "backendServersStats",
    this.pageOfListBackendStats,
    request
  );
  pageOfListAcls = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/frontends/${marshalling.validatePathParam("frontendId", request.frontendId)}/acls`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListAclResponse
  );
  /**
   * List ACLs for a given frontend. List the ACLs for a given frontend,
   * specified by its frontend ID. The response is an array of ACL objects, each
   * one representing an ACL that denies or allows traffic based on certain
   * conditions.
   *
   * @param request - The request {@link ZonedApiListAclsRequest}
   * @returns A Promise of ListAclResponse
   */
  listAcls = (request) => resourcePaginator.enrichForPagination("acls", this.pageOfListAcls, request);
  /**
   * Create an ACL for a given frontend. Create a new ACL for a given frontend.
   * Each ACL must have a name, an action to perform (allow or deny), and a
   * match rule (the action is carried out when the incoming traffic matches the
   * rule).
   *
   * @param request - The request {@link ZonedApiCreateAclRequest}
   * @returns A Promise of Acl
   */
  createAcl = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiCreateAclRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/frontends/${marshalling.validatePathParam("frontendId", request.frontendId)}/acls`
    },
    marshalling_gen.unmarshalAcl
  );
  /**
   * Get an ACL. Get information for a particular ACL, specified by its ACL ID.
   * The response returns full details of the ACL, including its name, action,
   * match rule and frontend.
   *
   * @param request - The request {@link ZonedApiGetAclRequest}
   * @returns A Promise of Acl
   */
  getAcl = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/acls/${marshalling.validatePathParam("aclId", request.aclId)}`
    },
    marshalling_gen.unmarshalAcl
  );
  /**
   * Update an ACL. Update a particular ACL, specified by its ACL ID. You can
   * update details including its name, action and match rule.
   *
   * @param request - The request {@link ZonedApiUpdateAclRequest}
   * @returns A Promise of Acl
   */
  updateAcl = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiUpdateAclRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/acls/${marshalling.validatePathParam("aclId", request.aclId)}`
    },
    marshalling_gen.unmarshalAcl
  );
  /**
   * Delete an ACL. Delete an ACL, specified by its ACL ID. Deleting an ACL is
   * irreversible and cannot be undone.
   *
   * @param request - The request {@link ZonedApiDeleteAclRequest}
   */
  deleteAcl = (request) => this.client.fetch({
    method: "DELETE",
    path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/acls/${marshalling.validatePathParam("aclId", request.aclId)}`
  });
  /**
   * Define all ACLs for a given frontend. For a given frontend specified by its
   * frontend ID, define and add the complete set of ACLS for that frontend. Any
   * existing ACLs on this frontend will be removed.
   *
   * @param request - The request {@link ZonedApiSetAclsRequest}
   * @returns A Promise of SetAclsResponse
   */
  setAcls = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiSetAclsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/frontends/${marshalling.validatePathParam("frontendId", request.frontendId)}/acls`
    },
    marshalling_gen.unmarshalSetAclsResponse
  );
  /**
   * Create an SSL/TLS certificate. Generate a new SSL/TLS certificate for a
   * given Load Balancer. You can choose to create a Let's Encrypt certificate,
   * or import a custom certificate.
   *
   * @param request - The request {@link ZonedApiCreateCertificateRequest}
   * @returns A Promise of Certificate
   */
  createCertificate = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiCreateCertificateRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/certificates`
    },
    marshalling_gen.unmarshalCertificate
  );
  pageOfListCertificates = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/certificates`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListCertificatesResponse
  );
  /**
   * List all SSL/TLS certificates on a given Load Balancer. List all the
   * SSL/TLS certificates on a given Load Balancer. The response is an array of
   * certificate objects, which are by default listed in ascending order of
   * creation date.
   *
   * @param request - The request {@link ZonedApiListCertificatesRequest}
   * @returns A Promise of ListCertificatesResponse
   */
  listCertificates = (request) => resourcePaginator.enrichForPagination("certificates", this.pageOfListCertificates, request);
  /**
   * Get an SSL/TLS certificate. Get information for a particular SSL/TLS
   * certificate, specified by its certificate ID. The response returns full
   * details of the certificate, including its type, main domain name, and
   * alternative domain names.
   *
   * @param request - The request {@link ZonedApiGetCertificateRequest}
   * @returns A Promise of Certificate
   */
  getCertificate = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/certificates/${marshalling.validatePathParam("certificateId", request.certificateId)}`
    },
    marshalling_gen.unmarshalCertificate
  );
  /**
   * Waits for {@link Certificate} to be in a final state.
   *
   * @param request - The request {@link ZonedApiGetCertificateRequest}
   * @param options - The waiting options
   * @returns A Promise of Certificate
   */
  waitForCertificate = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(
      !content_gen.CERTIFICATE_TRANSIENT_STATUSES.includes(res.status)
    )),
    this.getCertificate,
    request,
    options
  );
  /**
   * Update an SSL/TLS certificate. Update the name of a particular SSL/TLS
   * certificate, specified by its certificate ID.
   *
   * @param request - The request {@link ZonedApiUpdateCertificateRequest}
   * @returns A Promise of Certificate
   */
  updateCertificate = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiUpdateCertificateRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/certificates/${marshalling.validatePathParam("certificateId", request.certificateId)}`
    },
    marshalling_gen.unmarshalCertificate
  );
  /**
   * Delete an SSL/TLS certificate. Delete an SSL/TLS certificate, specified by
   * its certificate ID. Deleting a certificate is irreversible and cannot be
   * undone.
   *
   * @param request - The request {@link ZonedApiDeleteCertificateRequest}
   */
  deleteCertificate = (request) => this.client.fetch({
    method: "DELETE",
    path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/certificates/${marshalling.validatePathParam("certificateId", request.certificateId)}`
  });
  pageOfListLbTypes = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/lb-types`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListLbTypesResponse
  );
  /**
   * List all Load Balancer offer types. List all the different commercial Load
   * Balancer types. The response includes an array of offer types, each with a
   * name, description, and information about its stock availability.
   *
   * @param request - The request {@link ZonedApiListLbTypesRequest}
   * @returns A Promise of ListLbTypesResponse
   */
  listLbTypes = (request = {}) => resourcePaginator.enrichForPagination("lbTypes", this.pageOfListLbTypes, request);
  /**
   * Create a subscriber. Create a new subscriber, either with an email
   * configuration or a webhook configuration, for a specified Scaleway
   * Project.
   *
   * @param request - The request {@link ZonedApiCreateSubscriberRequest}
   * @returns A Promise of Subscriber
   */
  createSubscriber = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiCreateSubscriberRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/subscribers`
    },
    marshalling_gen.unmarshalSubscriber
  );
  /**
   * Get a subscriber. Retrieve information about an existing subscriber,
   * specified by its subscriber ID. Its full details, including name and
   * email/webhook configuration, are returned in the response object.
   *
   * @param request - The request {@link ZonedApiGetSubscriberRequest}
   * @returns A Promise of Subscriber
   */
  getSubscriber = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/subscribers/${marshalling.validatePathParam("subscriberId", request.subscriberId)}`
    },
    marshalling_gen.unmarshalSubscriber
  );
  pageOfListSubscriber = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/subscribers`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListSubscriberResponse
  );
  /**
   * List all subscribers. List all subscribers to Load Balancer alerts. By
   * default, returns all subscribers to Load Balancer alerts for the
   * Organization associated with the authentication token used for the
   * request.
   *
   * @param request - The request {@link ZonedApiListSubscriberRequest}
   * @returns A Promise of ListSubscriberResponse
   */
  listSubscriber = (request = {}) => resourcePaginator.enrichForPagination("subscribers", this.pageOfListSubscriber, request);
  /**
   * Update a subscriber. Update the parameters of a given subscriber (e.g.
   * name, webhook configuration, email configuration), specified by its
   * subscriber ID.
   *
   * @param request - The request {@link ZonedApiUpdateSubscriberRequest}
   * @returns A Promise of Subscriber
   */
  updateSubscriber = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiUpdateSubscriberRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/subscribers/${marshalling.validatePathParam("subscriberId", request.subscriberId)}`
    },
    marshalling_gen.unmarshalSubscriber
  );
  /**
   * Delete a subscriber. Delete an existing subscriber, specified by its
   * subscriber ID. Deleting a subscriber is permanent, and cannot be undone.
   *
   * @param request - The request {@link ZonedApiDeleteSubscriberRequest}
   */
  deleteSubscriber = (request) => this.client.fetch({
    method: "DELETE",
    path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/lb/subscription/${marshalling.validatePathParam("subscriberId", request.subscriberId)}`
  });
  /**
   * Subscribe a subscriber to alerts for a given Load Balancer. Subscribe an
   * existing subscriber to alerts for a given Load Balancer.
   *
   * @param request - The request {@link ZonedApiSubscribeToLbRequest}
   * @returns A Promise of Lb
   */
  subscribeToLb = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiSubscribeToLbRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/lb/${marshalling.validatePathParam("lbId", request.lbId)}/subscribe`
    },
    marshalling_gen.unmarshalLb
  );
  /**
   * Unsubscribe a subscriber from alerts for a given Load Balancer. Unsubscribe
   * a subscriber from alerts for a given Load Balancer. The subscriber is not
   * deleted, and can be resubscribed in the future if necessary.
   *
   * @param request - The request {@link ZonedApiUnsubscribeFromLbRequest}
   * @returns A Promise of Lb
   */
  unsubscribeFromLb = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/lb/${marshalling.validatePathParam("lbId", request.lbId)}/unsubscribe`
    },
    marshalling_gen.unmarshalLb
  );
  pageOfListLbPrivateNetworks = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/private-networks`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListLbPrivateNetworksResponse
  );
  /**
   * List Private Networks attached to a Load Balancer. List the Private
   * Networks attached to a given Load Balancer, specified by its Load Balancer
   * ID. The response is an array of Private Network objects, giving information
   * including the status, configuration, name and creation date of each Private
   * Network.
   *
   * @param request - The request {@link ZonedApiListLbPrivateNetworksRequest}
   * @returns A Promise of ListLbPrivateNetworksResponse
   */
  listLbPrivateNetworks = (request) => resourcePaginator.enrichForPagination(
    "privateNetwork",
    this.pageOfListLbPrivateNetworks,
    request
  );
  /**
   * Attach a Load Balancer to a Private Network. Attach a specified Load
   * Balancer to a specified Private Network, defining a static or DHCP
   * configuration for the Load Balancer on the network.
   *
   * @param request - The request {@link ZonedApiAttachPrivateNetworkRequest}
   * @returns A Promise of PrivateNetwork
   */
  attachPrivateNetwork = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalZonedApiAttachPrivateNetworkRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/private-networks/${marshalling.validatePathParam("privateNetworkId", request.privateNetworkId)}/attach`
    },
    marshalling_gen.unmarshalPrivateNetwork
  );
  /**
   * Detach Load Balancer from Private Network. Detach a specified Load Balancer
   * from a specified Private Network.
   *
   * @param request - The request {@link ZonedApiDetachPrivateNetworkRequest}
   */
  detachPrivateNetwork = (request) => this.client.fetch({
    body: "{}",
    headers: jsonContentHeaders,
    method: "POST",
    path: `/lb/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/private-networks/${marshalling.validatePathParam("privateNetworkId", request.privateNetworkId)}/detach`
  });
}
class API extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par", "nl-ams", "pl-waw"];
  pageOfListLbs = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/lbs`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListLbsResponse
  );
  /**
   * List load balancers.
   *
   * @param request - The request {@link ListLbsRequest}
   * @returns A Promise of ListLbsResponse
   */
  listLbs = (request = {}) => resourcePaginator.enrichForPagination("lbs", this.pageOfListLbs, request);
  /**
   * Create a load balancer.
   *
   * @param request - The request {@link CreateLbRequest}
   * @returns A Promise of Lb
   */
  createLb = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateLbRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/lbs`
    },
    marshalling_gen.unmarshalLb
  );
  /**
   * Get a load balancer.
   *
   * @param request - The request {@link GetLbRequest}
   * @returns A Promise of Lb
   */
  getLb = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}`
    },
    marshalling_gen.unmarshalLb
  );
  /**
   * Waits for {@link Lb} to be in a final state.
   *
   * @param request - The request {@link GetLbRequest}
   * @param options - The waiting options
   * @returns A Promise of Lb
   */
  waitForLb = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.LB_TRANSIENT_STATUSES.includes(res.status))),
    this.getLb,
    request,
    options
  );
  /**
   * Update a load balancer.
   *
   * @param request - The request {@link UpdateLbRequest}
   * @returns A Promise of Lb
   */
  updateLb = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateLbRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}`
    },
    marshalling_gen.unmarshalLb
  );
  /**
   * Delete a load balancer.
   *
   * @param request - The request {@link DeleteLbRequest}
   */
  deleteLb = (request) => this.client.fetch({
    method: "DELETE",
    path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}`,
    urlParams: marshalling.urlParams(["release_ip", request.releaseIp])
  });
  /**
   * Migrate a load balancer.
   *
   * @param request - The request {@link MigrateLbRequest}
   * @returns A Promise of Lb
   */
  migrateLb = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalMigrateLbRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/migrate`
    },
    marshalling_gen.unmarshalLb
  );
  pageOfListIPs = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/ips`,
      urlParams: marshalling.urlParams(
        ["ip_address", request.ipAddress],
        ["ip_type", request.ipType],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListIpsResponse
  );
  /**
   * List IPs.
   *
   * @param request - The request {@link ListIPsRequest}
   * @returns A Promise of ListIpsResponse
   */
  listIPs = (request = {}) => resourcePaginator.enrichForPagination("ips", this.pageOfListIPs, request);
  /**
   * Create an IP.
   *
   * @param request - The request {@link CreateIpRequest}
   * @returns A Promise of Ip
   */
  createIp = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateIpRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/ips`
    },
    marshalling_gen.unmarshalIp
  );
  /**
   * Get an IP.
   *
   * @param request - The request {@link GetIpRequest}
   * @returns A Promise of Ip
   */
  getIp = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/ips/${marshalling.validatePathParam("ipId", request.ipId)}`
    },
    marshalling_gen.unmarshalIp
  );
  /**
   * Delete an IP.
   *
   * @param request - The request {@link ReleaseIpRequest}
   */
  releaseIp = (request) => this.client.fetch({
    method: "DELETE",
    path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/ips/${marshalling.validatePathParam("ipId", request.ipId)}`
  });
  /**
   * Update an IP.
   *
   * @param request - The request {@link UpdateIpRequest}
   * @returns A Promise of Ip
   */
  updateIp = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateIpRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/ips/${marshalling.validatePathParam("ipId", request.ipId)}`
    },
    marshalling_gen.unmarshalIp
  );
  pageOfListBackends = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/backends`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListBackendsResponse
  );
  /**
   * List backends in a given load balancer.
   *
   * @param request - The request {@link ListBackendsRequest}
   * @returns A Promise of ListBackendsResponse
   */
  listBackends = (request) => resourcePaginator.enrichForPagination("backends", this.pageOfListBackends, request);
  /**
   * Create a backend in a given load balancer.
   *
   * @param request - The request {@link CreateBackendRequest}
   * @returns A Promise of Backend
   */
  createBackend = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateBackendRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/backends`
    },
    marshalling_gen.unmarshalBackend
  );
  /**
   * Get a backend in a given load balancer.
   *
   * @param request - The request {@link GetBackendRequest}
   * @returns A Promise of Backend
   */
  getBackend = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backends/${marshalling.validatePathParam("backendId", request.backendId)}`
    },
    marshalling_gen.unmarshalBackend
  );
  /**
   * Update a backend in a given load balancer.
   *
   * @param request - The request {@link UpdateBackendRequest}
   * @returns A Promise of Backend
   */
  updateBackend = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateBackendRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backends/${marshalling.validatePathParam("backendId", request.backendId)}`
    },
    marshalling_gen.unmarshalBackend
  );
  /**
   * Delete a backend in a given load balancer.
   *
   * @param request - The request {@link DeleteBackendRequest}
   */
  deleteBackend = (request) => this.client.fetch({
    method: "DELETE",
    path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backends/${marshalling.validatePathParam("backendId", request.backendId)}`
  });
  /**
   * Add a set of servers in a given backend.
   *
   * @param request - The request {@link AddBackendServersRequest}
   * @returns A Promise of Backend
   */
  addBackendServers = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalAddBackendServersRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backends/${marshalling.validatePathParam("backendId", request.backendId)}/servers`
    },
    marshalling_gen.unmarshalBackend
  );
  /**
   * Remove a set of servers for a given backend.
   *
   * @param request - The request {@link RemoveBackendServersRequest}
   * @returns A Promise of Backend
   */
  removeBackendServers = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRemoveBackendServersRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "DELETE",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backends/${marshalling.validatePathParam("backendId", request.backendId)}/servers`
    },
    marshalling_gen.unmarshalBackend
  );
  /**
   * Define all servers in a given backend.
   *
   * @param request - The request {@link SetBackendServersRequest}
   * @returns A Promise of Backend
   */
  setBackendServers = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetBackendServersRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backends/${marshalling.validatePathParam("backendId", request.backendId)}/servers`
    },
    marshalling_gen.unmarshalBackend
  );
  /**
   * Update an health check for a given backend.
   *
   * @param request - The request {@link UpdateHealthCheckRequest}
   * @returns A Promise of HealthCheck
   */
  updateHealthCheck = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateHealthCheckRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backends/${marshalling.validatePathParam("backendId", request.backendId)}/healthcheck`
    },
    marshalling_gen.unmarshalHealthCheck
  );
  pageOfListFrontends = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/frontends`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListFrontendsResponse
  );
  /**
   * List frontends in a given load balancer.
   *
   * @param request - The request {@link ListFrontendsRequest}
   * @returns A Promise of ListFrontendsResponse
   */
  listFrontends = (request) => resourcePaginator.enrichForPagination("frontends", this.pageOfListFrontends, request);
  /**
   * Create a frontend in a given load balancer.
   *
   * @param request - The request {@link CreateFrontendRequest}
   * @returns A Promise of Frontend
   */
  createFrontend = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateFrontendRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/frontends`
    },
    marshalling_gen.unmarshalFrontend
  );
  /**
   * Get a frontend.
   *
   * @param request - The request {@link GetFrontendRequest}
   * @returns A Promise of Frontend
   */
  getFrontend = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/frontends/${marshalling.validatePathParam("frontendId", request.frontendId)}`
    },
    marshalling_gen.unmarshalFrontend
  );
  /**
   * Update a frontend.
   *
   * @param request - The request {@link UpdateFrontendRequest}
   * @returns A Promise of Frontend
   */
  updateFrontend = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateFrontendRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/frontends/${marshalling.validatePathParam("frontendId", request.frontendId)}`
    },
    marshalling_gen.unmarshalFrontend
  );
  /**
   * Delete a frontend.
   *
   * @param request - The request {@link DeleteFrontendRequest}
   */
  deleteFrontend = (request) => this.client.fetch({
    method: "DELETE",
    path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/frontends/${marshalling.validatePathParam("frontendId", request.frontendId)}`
  });
  pageOfListRoutes = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/routes`,
      urlParams: marshalling.urlParams(
        ["frontend_id", request.frontendId],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListRoutesResponse
  );
  /**
   * List all backend redirections.
   *
   * @param request - The request {@link ListRoutesRequest}
   * @returns A Promise of ListRoutesResponse
   */
  listRoutes = (request = {}) => resourcePaginator.enrichForPagination("routes", this.pageOfListRoutes, request);
  /**
   * Create a backend redirection.
   *
   * @param request - The request {@link CreateRouteRequest}
   * @returns A Promise of Route
   */
  createRoute = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateRouteRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/routes`
    },
    marshalling_gen.unmarshalRoute
  );
  /**
   * Get single backend redirection.
   *
   * @param request - The request {@link GetRouteRequest}
   * @returns A Promise of Route
   */
  getRoute = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/routes/${marshalling.validatePathParam("routeId", request.routeId)}`
    },
    marshalling_gen.unmarshalRoute
  );
  /**
   * Edit a backend redirection.
   *
   * @param request - The request {@link UpdateRouteRequest}
   * @returns A Promise of Route
   */
  updateRoute = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateRouteRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/routes/${marshalling.validatePathParam("routeId", request.routeId)}`
    },
    marshalling_gen.unmarshalRoute
  );
  /**
   * Delete a backend redirection.
   *
   * @param request - The request {@link DeleteRouteRequest}
   */
  deleteRoute = (request) => this.client.fetch({
    method: "DELETE",
    path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/routes/${marshalling.validatePathParam("routeId", request.routeId)}`
  });
  /**
   * Get usage statistics of a given load balancer.
   *
   * @deprecated
   * @param request - The request {@link GetLbStatsRequest}
   * @returns A Promise of LbStats
   */
  getLbStats = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/stats`,
      urlParams: marshalling.urlParams(["backend_id", request.backendId])
    },
    marshalling_gen.unmarshalLbStats
  );
  pageOfListBackendStats = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/backend-stats`,
      urlParams: marshalling.urlParams(
        ["backend_id", request.backendId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListBackendStatsResponse
  );
  /**
   * List backend server statistics.
   *
   * @param request - The request {@link ListBackendStatsRequest}
   * @returns A Promise of ListBackendStatsResponse
   */
  listBackendStats = (request) => resourcePaginator.enrichForPagination(
    "backendServersStats",
    this.pageOfListBackendStats,
    request
  );
  pageOfListAcls = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/frontends/${marshalling.validatePathParam("frontendId", request.frontendId)}/acls`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListAclResponse
  );
  /**
   * List ACL for a given frontend.
   *
   * @param request - The request {@link ListAclsRequest}
   * @returns A Promise of ListAclResponse
   */
  listAcls = (request) => resourcePaginator.enrichForPagination("acls", this.pageOfListAcls, request);
  /**
   * Create an ACL for a given frontend.
   *
   * @param request - The request {@link CreateAclRequest}
   * @returns A Promise of Acl
   */
  createAcl = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateAclRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/frontends/${marshalling.validatePathParam("frontendId", request.frontendId)}/acls`
    },
    marshalling_gen.unmarshalAcl
  );
  /**
   * Get an ACL.
   *
   * @param request - The request {@link GetAclRequest}
   * @returns A Promise of Acl
   */
  getAcl = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/acls/${marshalling.validatePathParam("aclId", request.aclId)}`
    },
    marshalling_gen.unmarshalAcl
  );
  /**
   * Update an ACL.
   *
   * @param request - The request {@link UpdateAclRequest}
   * @returns A Promise of Acl
   */
  updateAcl = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateAclRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/acls/${marshalling.validatePathParam("aclId", request.aclId)}`
    },
    marshalling_gen.unmarshalAcl
  );
  /**
   * Delete an ACL.
   *
   * @param request - The request {@link DeleteAclRequest}
   */
  deleteAcl = (request) => this.client.fetch({
    method: "DELETE",
    path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/acls/${marshalling.validatePathParam("aclId", request.aclId)}`
  });
  /**
   * Create a TLS certificate. Generate a new TLS certificate using Let's
   * Encrypt or import your certificate.
   *
   * @param request - The request {@link CreateCertificateRequest}
   * @returns A Promise of Certificate
   */
  createCertificate = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateCertificateRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/certificates`
    },
    marshalling_gen.unmarshalCertificate
  );
  pageOfListCertificates = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/certificates`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListCertificatesResponse
  );
  /**
   * List all TLS certificates on a given load balancer.
   *
   * @param request - The request {@link ListCertificatesRequest}
   * @returns A Promise of ListCertificatesResponse
   */
  listCertificates = (request) => resourcePaginator.enrichForPagination("certificates", this.pageOfListCertificates, request);
  /**
   * Get a TLS certificate.
   *
   * @param request - The request {@link GetCertificateRequest}
   * @returns A Promise of Certificate
   */
  getCertificate = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/certificates/${marshalling.validatePathParam("certificateId", request.certificateId)}`
    },
    marshalling_gen.unmarshalCertificate
  );
  /**
   * Waits for {@link Certificate} to be in a final state.
   *
   * @param request - The request {@link GetCertificateRequest}
   * @param options - The waiting options
   * @returns A Promise of Certificate
   */
  waitForCertificate = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(
      !content_gen.CERTIFICATE_TRANSIENT_STATUSES.includes(res.status)
    )),
    this.getCertificate,
    request,
    options
  );
  /**
   * Update a TLS certificate.
   *
   * @param request - The request {@link UpdateCertificateRequest}
   * @returns A Promise of Certificate
   */
  updateCertificate = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateCertificateRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/certificates/${marshalling.validatePathParam("certificateId", request.certificateId)}`
    },
    marshalling_gen.unmarshalCertificate
  );
  /**
   * Delete a TLS certificate.
   *
   * @param request - The request {@link DeleteCertificateRequest}
   */
  deleteCertificate = (request) => this.client.fetch({
    method: "DELETE",
    path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/certificates/${marshalling.validatePathParam("certificateId", request.certificateId)}`
  });
  pageOfListLbTypes = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/lb-types`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListLbTypesResponse
  );
  /**
   * List all load balancer offer type.
   *
   * @param request - The request {@link ListLbTypesRequest}
   * @returns A Promise of ListLbTypesResponse
   */
  listLbTypes = (request = {}) => resourcePaginator.enrichForPagination("lbTypes", this.pageOfListLbTypes, request);
  /**
   * Create a subscriber, webhook or email.
   *
   * @param request - The request {@link CreateSubscriberRequest}
   * @returns A Promise of Subscriber
   */
  createSubscriber = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateSubscriberRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/subscribers`
    },
    marshalling_gen.unmarshalSubscriber
  );
  /**
   * Get a subscriber.
   *
   * @param request - The request {@link GetSubscriberRequest}
   * @returns A Promise of Subscriber
   */
  getSubscriber = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/subscribers/${marshalling.validatePathParam("subscriberId", request.subscriberId)}`
    },
    marshalling_gen.unmarshalSubscriber
  );
  pageOfListSubscriber = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/subscribers`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListSubscriberResponse
  );
  /**
   * List all subscriber.
   *
   * @param request - The request {@link ListSubscriberRequest}
   * @returns A Promise of ListSubscriberResponse
   */
  listSubscriber = (request = {}) => resourcePaginator.enrichForPagination("subscribers", this.pageOfListSubscriber, request);
  /**
   * Update a subscriber.
   *
   * @param request - The request {@link UpdateSubscriberRequest}
   * @returns A Promise of Subscriber
   */
  updateSubscriber = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateSubscriberRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/subscribers/${marshalling.validatePathParam("subscriberId", request.subscriberId)}`
    },
    marshalling_gen.unmarshalSubscriber
  );
  /**
   * Delete a subscriber.
   *
   * @param request - The request {@link DeleteSubscriberRequest}
   */
  deleteSubscriber = (request) => this.client.fetch({
    method: "DELETE",
    path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/lb/subscriber/${marshalling.validatePathParam("subscriberId", request.subscriberId)}`
  });
  /**
   * Subscribe a subscriber to a given load balancer.
   *
   * @param request - The request {@link SubscribeToLbRequest}
   * @returns A Promise of Lb
   */
  subscribeToLb = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSubscribeToLbRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/lb/${marshalling.validatePathParam("lbId", request.lbId)}/subscribe`
    },
    marshalling_gen.unmarshalLb
  );
  /**
   * Unsubscribe a subscriber from a given load balancer.
   *
   * @param request - The request {@link UnsubscribeFromLbRequest}
   * @returns A Promise of Lb
   */
  unsubscribeFromLb = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/lb/${marshalling.validatePathParam("lbId", request.lbId)}/unsubscribe`
    },
    marshalling_gen.unmarshalLb
  );
  pageOfListLbPrivateNetworks = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/private-networks`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListLbPrivateNetworksResponse
  );
  /**
   * List attached private network of load balancer.
   *
   * @param request - The request {@link ListLbPrivateNetworksRequest}
   * @returns A Promise of ListLbPrivateNetworksResponse
   */
  listLbPrivateNetworks = (request) => resourcePaginator.enrichForPagination(
    "privateNetwork",
    this.pageOfListLbPrivateNetworks,
    request
  );
  /**
   * Add load balancer on instance private network.
   *
   * @param request - The request {@link AttachPrivateNetworkRequest}
   * @returns A Promise of PrivateNetwork
   */
  attachPrivateNetwork = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalAttachPrivateNetworkRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/private-networks/${marshalling.validatePathParam("privateNetworkId", request.privateNetworkId)}/attach`
    },
    marshalling_gen.unmarshalPrivateNetwork
  );
  /**
   * Remove load balancer of private network.
   *
   * @param request - The request {@link DetachPrivateNetworkRequest}
   */
  detachPrivateNetwork = (request) => this.client.fetch({
    body: "{}",
    headers: jsonContentHeaders,
    method: "POST",
    path: `/lb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam("lbId", request.lbId)}/private-networks/${marshalling.validatePathParam("privateNetworkId", request.privateNetworkId)}/detach`
  });
}
exports.API = API;
exports.ZonedAPI = ZonedAPI;


/***/ }),

/***/ 8887:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api_gen = __nccwpck_require__(1067);
const content_gen = __nccwpck_require__(2764);
class LbV1UtilsAPI extends api_gen.API {
  /**
   * Waits for all private networks of a load balancer to be in a final state.
   *
   * @param request - The request {@link WaitForLbPrivateNetworksRequest}
   * @param options - The waiting options
   * @returns A Promise of ListLbPrivateNetworksResponse
   */
  waitForLbPrivateNetworks = (request, options) => intervalRetrier.tryAtIntervals(
    async () => {
      const value = await this.listLbPrivateNetworks({
        lbId: request.lbId,
        region: request.region
      }).all().then((list) => ({
        privateNetwork: list,
        totalCount: list.length
      }));
      return {
        done: value.privateNetwork.find(
          (elt) => content_gen.PRIVATE_NETWORK_TRANSIENT_STATUSES.includes(elt.status)
        ) === void 0,
        value
      };
    },
    intervalRetrier.createExponentialBackoffStrategy(
      options?.minDelay ?? 1,
      options?.maxDelay ?? 30
    ),
    options?.timeout
  );
  /**
   * Waits for all instances of a load balancer to be in a final state.
   *
   * @param request - The request {@link GetLbRequest}
   * @param options - The waiting options
   * @returns A Promise of Lb
   */
  waitForLbInstances = (request, options) => intervalRetrier.tryAtIntervals(
    async () => {
      const value = await this.getLb(request);
      return {
        done: !content_gen.LB_TRANSIENT_STATUSES.includes(value.status) && value.instances.find(
          (elt) => content_gen.INSTANCE_TRANSIENT_STATUSES.includes(elt.status)
        ) === void 0,
        value
      };
    },
    intervalRetrier.createExponentialBackoffStrategy(
      options?.minDelay ?? 1,
      options?.maxDelay ?? 30
    ),
    options?.timeout
  );
}
class LbZonedV1UtilsAPI extends api_gen.ZonedAPI {
  /**
   * Waits for all private networks of a (zoned) load balancer to be in a final
   * state.
   *
   * @param request - The request {@link ZonedWaitForLbPrivateNetworksRequest}
   * @param options - The waiting options
   * @returns A Promise of ListLbPrivateNetworksResponse
   */
  waitForLbPrivateNetworks = (request, options) => intervalRetrier.tryAtIntervals(
    async () => {
      const value = await this.listLbPrivateNetworks({
        lbId: request.lbId,
        zone: request.zone
      }).all().then((list) => ({
        privateNetwork: list,
        totalCount: list.length
      }));
      return {
        done: value.privateNetwork.find(
          (elt) => content_gen.PRIVATE_NETWORK_TRANSIENT_STATUSES.includes(elt.status)
        ) === void 0,
        value
      };
    },
    intervalRetrier.createExponentialBackoffStrategy(
      options?.minDelay ?? 1,
      options?.maxDelay ?? 30
    ),
    options?.timeout
  );
  /**
   * Waits for all instances of a (zoned) load balancer to be in a final state.
   *
   * @param request - The request {@link GetLbRequest}
   * @param options - The waiting options
   * @returns A Promise of Lb
   */
  waitForLbInstances = (request, options) => intervalRetrier.tryAtIntervals(
    async () => {
      const value = await this.getLb(request);
      return {
        done: !content_gen.LB_TRANSIENT_STATUSES.includes(value.status) && value.instances.find(
          (elt) => content_gen.INSTANCE_TRANSIENT_STATUSES.includes(elt.status)
        ) === void 0,
        value
      };
    },
    intervalRetrier.createExponentialBackoffStrategy(
      options?.minDelay ?? 1,
      options?.maxDelay ?? 30
    ),
    options?.timeout
  );
}
exports.LbV1UtilsAPI = LbV1UtilsAPI;
exports.LbZonedV1UtilsAPI = LbZonedV1UtilsAPI;


/***/ }),

/***/ 2764:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const CERTIFICATE_TRANSIENT_STATUSES = ["pending"];
const INSTANCE_TRANSIENT_STATUSES = [
  "pending",
  "migrating"
];
const LB_TRANSIENT_STATUSES = [
  "pending",
  "migrating",
  "to_create",
  "creating",
  "to_delete",
  "deleting"
];
const PRIVATE_NETWORK_TRANSIENT_STATUSES = [
  "pending"
];
exports.CERTIFICATE_TRANSIENT_STATUSES = CERTIFICATE_TRANSIENT_STATUSES;
exports.INSTANCE_TRANSIENT_STATUSES = INSTANCE_TRANSIENT_STATUSES;
exports.LB_TRANSIENT_STATUSES = LB_TRANSIENT_STATUSES;
exports.PRIVATE_NETWORK_TRANSIENT_STATUSES = PRIVATE_NETWORK_TRANSIENT_STATUSES;


/***/ }),

/***/ 7649:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_utils = __nccwpck_require__(8887);
const content_gen = __nccwpck_require__(2764);
exports.API = api_utils.LbV1UtilsAPI;
exports.ZonedAPI = api_utils.LbZonedV1UtilsAPI;
exports.CERTIFICATE_TRANSIENT_STATUSES = content_gen.CERTIFICATE_TRANSIENT_STATUSES;
exports.INSTANCE_TRANSIENT_STATUSES = content_gen.INSTANCE_TRANSIENT_STATUSES;
exports.LB_TRANSIENT_STATUSES = content_gen.LB_TRANSIENT_STATUSES;
exports.PRIVATE_NETWORK_TRANSIENT_STATUSES = content_gen.PRIVATE_NETWORK_TRANSIENT_STATUSES;


/***/ }),

/***/ 1780:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const randomName = __nccwpck_require__(8118);
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalIp = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Ip' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    ipAddress: data.ip_address,
    lbId: data.lb_id,
    organizationId: data.organization_id,
    projectId: data.project_id,
    region: data.region,
    reverse: data.reverse,
    tags: data.tags,
    zone: data.zone
  };
};
const unmarshalSubscriberEmailConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SubscriberEmailConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    email: data.email
  };
};
const unmarshalSubscriberWebhookConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SubscriberWebhookConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    uri: data.uri
  };
};
const unmarshalSubscriber = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Subscriber' failed as data isn't a dictionary.`
    );
  }
  return {
    emailConfig: data.email_config ? unmarshalSubscriberEmailConfig(data.email_config) : void 0,
    id: data.id,
    name: data.name,
    webhookConfig: data.webhook_config ? unmarshalSubscriberWebhookConfig(data.webhook_config) : void 0
  };
};
const unmarshalHealthCheckHttpConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'HealthCheckHttpConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    code: data.code,
    hostHeader: data.host_header,
    method: data.method,
    uri: data.uri
  };
};
const unmarshalHealthCheckHttpsConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'HealthCheckHttpsConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    code: data.code,
    hostHeader: data.host_header,
    method: data.method,
    sni: data.sni,
    uri: data.uri
  };
};
const unmarshalHealthCheckLdapConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'HealthCheckLdapConfig' failed as data isn't a dictionary.`
    );
  }
  return {};
};
const unmarshalHealthCheckMysqlConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'HealthCheckMysqlConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    user: data.user
  };
};
const unmarshalHealthCheckPgsqlConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'HealthCheckPgsqlConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    user: data.user
  };
};
const unmarshalHealthCheckRedisConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'HealthCheckRedisConfig' failed as data isn't a dictionary.`
    );
  }
  return {};
};
const unmarshalHealthCheckTcpConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'HealthCheckTcpConfig' failed as data isn't a dictionary.`
    );
  }
  return {};
};
const unmarshalHealthCheck = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'HealthCheck' failed as data isn't a dictionary.`
    );
  }
  return {
    checkDelay: data.check_delay,
    checkMaxRetries: data.check_max_retries,
    checkSendProxy: data.check_send_proxy,
    checkTimeout: data.check_timeout,
    httpConfig: data.http_config ? unmarshalHealthCheckHttpConfig(data.http_config) : void 0,
    httpsConfig: data.https_config ? unmarshalHealthCheckHttpsConfig(data.https_config) : void 0,
    ldapConfig: data.ldap_config ? unmarshalHealthCheckLdapConfig(data.ldap_config) : void 0,
    mysqlConfig: data.mysql_config ? unmarshalHealthCheckMysqlConfig(data.mysql_config) : void 0,
    pgsqlConfig: data.pgsql_config ? unmarshalHealthCheckPgsqlConfig(data.pgsql_config) : void 0,
    port: data.port,
    redisConfig: data.redis_config ? unmarshalHealthCheckRedisConfig(data.redis_config) : void 0,
    tcpConfig: data.tcp_config ? unmarshalHealthCheckTcpConfig(data.tcp_config) : void 0,
    transientCheckDelay: data.transient_check_delay
  };
};
const unmarshalInstance = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Instance' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    ipAddress: data.ip_address,
    region: data.region,
    status: data.status,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    zone: data.zone
  };
};
const unmarshalLb = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Lb' failed as data isn't a dictionary.`
    );
  }
  return {
    backendCount: data.backend_count,
    createdAt: marshalling.unmarshalDate(data.created_at),
    description: data.description,
    frontendCount: data.frontend_count,
    id: data.id,
    instances: marshalling.unmarshalArrayOfObject(data.instances, unmarshalInstance),
    ip: marshalling.unmarshalArrayOfObject(data.ip, unmarshalIp),
    name: data.name,
    organizationId: data.organization_id,
    privateNetworkCount: data.private_network_count,
    projectId: data.project_id,
    region: data.region,
    routeCount: data.route_count,
    sslCompatibilityLevel: data.ssl_compatibility_level,
    status: data.status,
    subscriber: data.subscriber ? unmarshalSubscriber(data.subscriber) : void 0,
    tags: data.tags,
    type: data.type,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    zone: data.zone
  };
};
const unmarshalBackend = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Backend' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    failoverHost: data.failover_host,
    forwardPort: data.forward_port,
    forwardPortAlgorithm: data.forward_port_algorithm,
    forwardProtocol: data.forward_protocol,
    healthCheck: data.health_check ? unmarshalHealthCheck(data.health_check) : void 0,
    id: data.id,
    ignoreSslServerVerify: data.ignore_ssl_server_verify,
    lb: data.lb ? unmarshalLb(data.lb) : void 0,
    maxConnections: data.max_connections,
    maxRetries: data.max_retries,
    name: data.name,
    onMarkedDownAction: data.on_marked_down_action,
    pool: data.pool,
    proxyProtocol: data.proxy_protocol,
    redispatchAttemptCount: data.redispatch_attempt_count,
    sendProxyV2: data.send_proxy_v2,
    sslBridging: data.ssl_bridging,
    stickySessions: data.sticky_sessions,
    stickySessionsCookieName: data.sticky_sessions_cookie_name,
    timeoutConnect: data.timeout_connect,
    timeoutQueue: data.timeout_queue,
    timeoutServer: data.timeout_server,
    timeoutTunnel: data.timeout_tunnel,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalCertificate = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Certificate' failed as data isn't a dictionary.`
    );
  }
  return {
    commonName: data.common_name,
    createdAt: marshalling.unmarshalDate(data.created_at),
    fingerprint: data.fingerprint,
    id: data.id,
    lb: data.lb ? unmarshalLb(data.lb) : void 0,
    name: data.name,
    notValidAfter: marshalling.unmarshalDate(data.not_valid_after),
    notValidBefore: marshalling.unmarshalDate(data.not_valid_before),
    status: data.status,
    statusDetails: data.status_details,
    subjectAlternativeName: data.subject_alternative_name,
    type: data.type,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalFrontend = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Frontend' failed as data isn't a dictionary.`
    );
  }
  return {
    backend: data.backend ? unmarshalBackend(data.backend) : void 0,
    certificate: data.certificate ? unmarshalCertificate(data.certificate) : void 0,
    certificateIds: data.certificate_ids,
    createdAt: marshalling.unmarshalDate(data.created_at),
    enableHttp3: data.enable_http3,
    id: data.id,
    inboundPort: data.inbound_port,
    lb: data.lb ? unmarshalLb(data.lb) : void 0,
    name: data.name,
    timeoutClient: data.timeout_client,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalAclActionRedirect = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'AclActionRedirect' failed as data isn't a dictionary.`
    );
  }
  return {
    code: data.code,
    target: data.target,
    type: data.type
  };
};
const unmarshalAclAction = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'AclAction' failed as data isn't a dictionary.`
    );
  }
  return {
    redirect: data.redirect ? unmarshalAclActionRedirect(data.redirect) : void 0,
    type: data.type
  };
};
const unmarshalAclMatch = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'AclMatch' failed as data isn't a dictionary.`
    );
  }
  return {
    httpFilter: data.http_filter,
    httpFilterOption: data.http_filter_option,
    httpFilterValue: data.http_filter_value,
    invert: data.invert,
    ipSubnet: data.ip_subnet
  };
};
const unmarshalAcl = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Acl' failed as data isn't a dictionary.`
    );
  }
  return {
    action: data.action ? unmarshalAclAction(data.action) : void 0,
    createdAt: marshalling.unmarshalDate(data.created_at),
    description: data.description,
    frontend: data.frontend ? unmarshalFrontend(data.frontend) : void 0,
    id: data.id,
    index: data.index,
    match: data.match ? unmarshalAclMatch(data.match) : void 0,
    name: data.name,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalPrivateNetworkDHCPConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PrivateNetworkDHCPConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    ipId: data.ip_id
  };
};
const unmarshalPrivateNetworkIpamConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PrivateNetworkIpamConfig' failed as data isn't a dictionary.`
    );
  }
  return {};
};
const unmarshalPrivateNetworkStaticConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PrivateNetworkStaticConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    ipAddress: data.ip_address ? data.ip_address : void 0
  };
};
const unmarshalPrivateNetwork = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PrivateNetwork' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    dhcpConfig: data.dhcp_config ? unmarshalPrivateNetworkDHCPConfig(data.dhcp_config) : void 0,
    ipamConfig: data.ipam_config ? unmarshalPrivateNetworkIpamConfig(data.ipam_config) : void 0,
    ipamIds: data.ipam_ids,
    lb: data.lb ? unmarshalLb(data.lb) : void 0,
    privateNetworkId: data.private_network_id,
    staticConfig: data.static_config ? unmarshalPrivateNetworkStaticConfig(data.static_config) : void 0,
    status: data.status,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalRouteMatch = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RouteMatch' failed as data isn't a dictionary.`
    );
  }
  return {
    hostHeader: data.host_header,
    sni: data.sni
  };
};
const unmarshalRoute = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Route' failed as data isn't a dictionary.`
    );
  }
  return {
    backendId: data.backend_id,
    createdAt: marshalling.unmarshalDate(data.created_at),
    frontendId: data.frontend_id,
    id: data.id,
    match: data.match ? unmarshalRouteMatch(data.match) : void 0,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalBackendServerStats = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'BackendServerStats' failed as data isn't a dictionary.`
    );
  }
  return {
    backendId: data.backend_id,
    instanceId: data.instance_id,
    ip: data.ip,
    lastHealthCheckStatus: data.last_health_check_status,
    serverState: data.server_state,
    serverStateChangedAt: marshalling.unmarshalDate(data.server_state_changed_at)
  };
};
const unmarshalLbStats = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'LbStats' failed as data isn't a dictionary.`
    );
  }
  return {
    backendServersStats: marshalling.unmarshalArrayOfObject(
      data.backend_servers_stats,
      unmarshalBackendServerStats
    )
  };
};
const unmarshalListAclResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListAclResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    acls: marshalling.unmarshalArrayOfObject(data.acls, unmarshalAcl),
    totalCount: data.total_count
  };
};
const unmarshalListBackendStatsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListBackendStatsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    backendServersStats: marshalling.unmarshalArrayOfObject(
      data.backend_servers_stats,
      unmarshalBackendServerStats
    ),
    totalCount: data.total_count
  };
};
const unmarshalListBackendsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListBackendsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    backends: marshalling.unmarshalArrayOfObject(data.backends, unmarshalBackend),
    totalCount: data.total_count
  };
};
const unmarshalListCertificatesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListCertificatesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    certificates: marshalling.unmarshalArrayOfObject(
      data.certificates,
      unmarshalCertificate
    ),
    totalCount: data.total_count
  };
};
const unmarshalListFrontendsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListFrontendsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    frontends: marshalling.unmarshalArrayOfObject(data.frontends, unmarshalFrontend),
    totalCount: data.total_count
  };
};
const unmarshalListIpsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListIpsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    ips: marshalling.unmarshalArrayOfObject(data.ips, unmarshalIp),
    totalCount: data.total_count
  };
};
const unmarshalListLbPrivateNetworksResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListLbPrivateNetworksResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    privateNetwork: marshalling.unmarshalArrayOfObject(
      data.private_network,
      unmarshalPrivateNetwork
    ),
    totalCount: data.total_count
  };
};
const unmarshalLbType = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'LbType' failed as data isn't a dictionary.`
    );
  }
  return {
    description: data.description,
    name: data.name,
    region: data.region,
    stockStatus: data.stock_status,
    zone: data.zone
  };
};
const unmarshalListLbTypesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListLbTypesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    lbTypes: marshalling.unmarshalArrayOfObject(data.lb_types, unmarshalLbType),
    totalCount: data.total_count
  };
};
const unmarshalListLbsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListLbsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    lbs: marshalling.unmarshalArrayOfObject(data.lbs, unmarshalLb),
    totalCount: data.total_count
  };
};
const unmarshalListRoutesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListRoutesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    routes: marshalling.unmarshalArrayOfObject(data.routes, unmarshalRoute),
    totalCount: data.total_count
  };
};
const unmarshalListSubscriberResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSubscriberResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    subscribers: marshalling.unmarshalArrayOfObject(data.subscribers, unmarshalSubscriber),
    totalCount: data.total_count
  };
};
const unmarshalSetAclsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetAclsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    acls: marshalling.unmarshalArrayOfObject(data.acls, unmarshalAcl),
    totalCount: data.total_count
  };
};
const marshalAddBackendServersRequest = (request, defaults) => ({
  server_ip: request.serverIp
});
const marshalPrivateNetworkDHCPConfig = (request, defaults) => ({
  ip_id: request.ipId
});
const marshalPrivateNetworkIpamConfig = (request, defaults) => ({});
const marshalPrivateNetworkStaticConfig = (request, defaults) => ({
  ip_address: request.ipAddress
});
const marshalAttachPrivateNetworkRequest = (request, defaults) => ({
  ipam_ids: request.ipamIds,
  ...marshalling.resolveOneOf([
    {
      param: "static_config",
      value: request.staticConfig !== void 0 ? marshalPrivateNetworkStaticConfig(request.staticConfig) : void 0
    },
    {
      param: "dhcp_config",
      value: request.dhcpConfig !== void 0 ? marshalPrivateNetworkDHCPConfig(request.dhcpConfig) : void 0
    },
    {
      param: "ipam_config",
      value: request.ipamConfig !== void 0 ? marshalPrivateNetworkIpamConfig(request.ipamConfig) : void 0
    }
  ])
});
const marshalAclActionRedirect = (request, defaults) => ({
  code: request.code,
  target: request.target,
  type: request.type
});
const marshalAclAction = (request, defaults) => ({
  redirect: request.redirect !== void 0 ? marshalAclActionRedirect(request.redirect) : void 0,
  type: request.type
});
const marshalAclMatch = (request, defaults) => ({
  http_filter: request.httpFilter,
  http_filter_option: request.httpFilterOption,
  http_filter_value: request.httpFilterValue,
  invert: request.invert,
  ip_subnet: request.ipSubnet
});
const marshalCreateAclRequest = (request, defaults) => ({
  action: marshalAclAction(request.action),
  description: request.description,
  index: request.index,
  match: request.match !== void 0 ? marshalAclMatch(request.match) : void 0,
  name: request.name || randomName("acl")
});
const marshalHealthCheckHttpConfig = (request, defaults) => ({
  code: request.code,
  host_header: request.hostHeader,
  method: request.method,
  uri: request.uri
});
const marshalHealthCheckHttpsConfig = (request, defaults) => ({
  code: request.code,
  host_header: request.hostHeader,
  method: request.method,
  sni: request.sni,
  uri: request.uri
});
const marshalHealthCheckLdapConfig = (request, defaults) => ({});
const marshalHealthCheckMysqlConfig = (request, defaults) => ({
  user: request.user
});
const marshalHealthCheckPgsqlConfig = (request, defaults) => ({
  user: request.user
});
const marshalHealthCheckRedisConfig = (request, defaults) => ({});
const marshalHealthCheckTcpConfig = (request, defaults) => ({});
const marshalHealthCheck = (request, defaults) => ({
  check_delay: request.checkDelay,
  check_max_retries: request.checkMaxRetries,
  check_send_proxy: request.checkSendProxy,
  check_timeout: request.checkTimeout,
  port: request.port,
  transient_check_delay: request.transientCheckDelay,
  ...marshalling.resolveOneOf([
    {
      param: "tcp_config",
      value: request.tcpConfig !== void 0 ? marshalHealthCheckTcpConfig(request.tcpConfig) : void 0
    },
    {
      param: "mysql_config",
      value: request.mysqlConfig !== void 0 ? marshalHealthCheckMysqlConfig(request.mysqlConfig) : void 0
    },
    {
      param: "pgsql_config",
      value: request.pgsqlConfig !== void 0 ? marshalHealthCheckPgsqlConfig(request.pgsqlConfig) : void 0
    },
    {
      param: "ldap_config",
      value: request.ldapConfig !== void 0 ? marshalHealthCheckLdapConfig(request.ldapConfig) : void 0
    },
    {
      param: "redis_config",
      value: request.redisConfig !== void 0 ? marshalHealthCheckRedisConfig(request.redisConfig) : void 0
    },
    {
      param: "http_config",
      value: request.httpConfig !== void 0 ? marshalHealthCheckHttpConfig(request.httpConfig) : void 0
    },
    {
      param: "https_config",
      value: request.httpsConfig !== void 0 ? marshalHealthCheckHttpsConfig(request.httpsConfig) : void 0
    }
  ])
});
const marshalCreateBackendRequest = (request, defaults) => ({
  failover_host: request.failoverHost,
  forward_port: request.forwardPort,
  forward_port_algorithm: request.forwardPortAlgorithm,
  forward_protocol: request.forwardProtocol,
  health_check: marshalHealthCheck(request.healthCheck),
  ignore_ssl_server_verify: request.ignoreSslServerVerify,
  max_connections: request.maxConnections,
  max_retries: request.maxRetries,
  name: request.name || randomName("lbb"),
  on_marked_down_action: request.onMarkedDownAction,
  proxy_protocol: request.proxyProtocol,
  redispatch_attempt_count: request.redispatchAttemptCount,
  send_proxy_v2: request.sendProxyV2,
  server_ip: request.serverIp,
  ssl_bridging: request.sslBridging,
  sticky_sessions: request.stickySessions,
  sticky_sessions_cookie_name: request.stickySessionsCookieName,
  timeout_connect: request.timeoutConnect,
  timeout_queue: request.timeoutQueue,
  timeout_server: request.timeoutServer,
  timeout_tunnel: request.timeoutTunnel
});
const marshalCreateCertificateRequestCustomCertificate = (request, defaults) => ({
  certificate_chain: request.certificateChain
});
const marshalCreateCertificateRequestLetsencryptConfig = (request, defaults) => ({
  common_name: request.commonName,
  subject_alternative_name: request.subjectAlternativeName
});
const marshalCreateCertificateRequest = (request, defaults) => ({
  name: request.name || randomName("certificate"),
  ...marshalling.resolveOneOf([
    {
      param: "letsencrypt",
      value: request.letsencrypt !== void 0 ? marshalCreateCertificateRequestLetsencryptConfig(
        request.letsencrypt
      ) : void 0
    },
    {
      param: "custom_certificate",
      value: request.customCertificate !== void 0 ? marshalCreateCertificateRequestCustomCertificate(
        request.customCertificate
      ) : void 0
    }
  ])
});
const marshalCreateFrontendRequest = (request, defaults) => ({
  backend_id: request.backendId,
  certificate_id: request.certificateId,
  certificate_ids: request.certificateIds,
  enable_http3: request.enableHttp3,
  inbound_port: request.inboundPort,
  name: request.name || randomName("lbf"),
  timeout_client: request.timeoutClient
});
const marshalCreateIpRequest = (request, defaults) => ({
  is_ipv6: request.isIpv6,
  reverse: request.reverse,
  tags: request.tags,
  ...marshalling.resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project_id",
      value: request.projectId
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization_id",
      value: request.organizationId
    }
  ])
});
const marshalCreateLbRequest = (request, defaults) => ({
  assign_flexible_ip: request.assignFlexibleIp,
  assign_flexible_ipv6: request.assignFlexibleIpv6,
  description: request.description,
  ip_id: request.ipId,
  ip_ids: request.ipIds,
  name: request.name || randomName("lb"),
  ssl_compatibility_level: request.sslCompatibilityLevel,
  tags: request.tags,
  type: request.type,
  ...marshalling.resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project_id",
      value: request.projectId
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization_id",
      value: request.organizationId
    }
  ])
});
const marshalRouteMatch = (request, defaults) => ({
  ...marshalling.resolveOneOf([
    { param: "sni", value: request.sni },
    { param: "host_header", value: request.hostHeader }
  ])
});
const marshalCreateRouteRequest = (request, defaults) => ({
  backend_id: request.backendId,
  frontend_id: request.frontendId,
  match: request.match !== void 0 ? marshalRouteMatch(request.match) : void 0
});
const marshalSubscriberEmailConfig = (request, defaults) => ({
  email: request.email
});
const marshalSubscriberWebhookConfig = (request, defaults) => ({
  uri: request.uri
});
const marshalCreateSubscriberRequest = (request, defaults) => ({
  name: request.name,
  ...marshalling.resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project_id",
      value: request.projectId
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization_id",
      value: request.organizationId
    }
  ]),
  ...marshalling.resolveOneOf([
    {
      param: "email_config",
      value: request.emailConfig !== void 0 ? marshalSubscriberEmailConfig(request.emailConfig) : void 0
    },
    {
      param: "webhook_config",
      value: request.webhookConfig !== void 0 ? marshalSubscriberWebhookConfig(request.webhookConfig) : void 0
    }
  ])
});
const marshalMigrateLbRequest = (request, defaults) => ({
  type: request.type
});
const marshalRemoveBackendServersRequest = (request, defaults) => ({
  server_ip: request.serverIp
});
const marshalSetBackendServersRequest = (request, defaults) => ({
  server_ip: request.serverIp
});
const marshalSubscribeToLbRequest = (request, defaults) => ({
  subscriber_id: request.subscriberId
});
const marshalUpdateAclRequest = (request, defaults) => ({
  action: marshalAclAction(request.action),
  description: request.description,
  index: request.index,
  match: request.match !== void 0 ? marshalAclMatch(request.match) : void 0,
  name: request.name
});
const marshalUpdateBackendRequest = (request, defaults) => ({
  failover_host: request.failoverHost,
  forward_port: request.forwardPort,
  forward_port_algorithm: request.forwardPortAlgorithm,
  forward_protocol: request.forwardProtocol,
  ignore_ssl_server_verify: request.ignoreSslServerVerify,
  max_connections: request.maxConnections,
  max_retries: request.maxRetries,
  name: request.name,
  on_marked_down_action: request.onMarkedDownAction,
  proxy_protocol: request.proxyProtocol,
  redispatch_attempt_count: request.redispatchAttemptCount,
  send_proxy_v2: request.sendProxyV2,
  ssl_bridging: request.sslBridging,
  sticky_sessions: request.stickySessions,
  sticky_sessions_cookie_name: request.stickySessionsCookieName,
  timeout_connect: request.timeoutConnect,
  timeout_queue: request.timeoutQueue,
  timeout_server: request.timeoutServer,
  timeout_tunnel: request.timeoutTunnel
});
const marshalUpdateCertificateRequest = (request, defaults) => ({
  name: request.name
});
const marshalUpdateFrontendRequest = (request, defaults) => ({
  backend_id: request.backendId,
  certificate_id: request.certificateId,
  certificate_ids: request.certificateIds,
  enable_http3: request.enableHttp3,
  inbound_port: request.inboundPort,
  name: request.name,
  timeout_client: request.timeoutClient
});
const marshalUpdateHealthCheckRequest = (request, defaults) => ({
  check_delay: request.checkDelay,
  check_max_retries: request.checkMaxRetries,
  check_send_proxy: request.checkSendProxy,
  check_timeout: request.checkTimeout,
  port: request.port,
  transient_check_delay: request.transientCheckDelay,
  ...marshalling.resolveOneOf([
    {
      param: "tcp_config",
      value: request.tcpConfig !== void 0 ? marshalHealthCheckTcpConfig(request.tcpConfig) : void 0
    },
    {
      param: "mysql_config",
      value: request.mysqlConfig !== void 0 ? marshalHealthCheckMysqlConfig(request.mysqlConfig) : void 0
    },
    {
      param: "pgsql_config",
      value: request.pgsqlConfig !== void 0 ? marshalHealthCheckPgsqlConfig(request.pgsqlConfig) : void 0
    },
    {
      param: "ldap_config",
      value: request.ldapConfig !== void 0 ? marshalHealthCheckLdapConfig(request.ldapConfig) : void 0
    },
    {
      param: "redis_config",
      value: request.redisConfig !== void 0 ? marshalHealthCheckRedisConfig(request.redisConfig) : void 0
    },
    {
      param: "http_config",
      value: request.httpConfig !== void 0 ? marshalHealthCheckHttpConfig(request.httpConfig) : void 0
    },
    {
      param: "https_config",
      value: request.httpsConfig !== void 0 ? marshalHealthCheckHttpsConfig(request.httpsConfig) : void 0
    }
  ])
});
const marshalUpdateIpRequest = (request, defaults) => ({
  lb_id: request.lbId,
  reverse: request.reverse,
  tags: request.tags
});
const marshalUpdateLbRequest = (request, defaults) => ({
  description: request.description,
  name: request.name,
  ssl_compatibility_level: request.sslCompatibilityLevel,
  tags: request.tags
});
const marshalUpdateRouteRequest = (request, defaults) => ({
  backend_id: request.backendId,
  match: request.match !== void 0 ? marshalRouteMatch(request.match) : void 0
});
const marshalUpdateSubscriberRequest = (request, defaults) => ({
  name: request.name,
  ...marshalling.resolveOneOf([
    {
      param: "email_config",
      value: request.emailConfig !== void 0 ? marshalSubscriberEmailConfig(request.emailConfig) : void 0
    },
    {
      param: "webhook_config",
      value: request.webhookConfig !== void 0 ? marshalSubscriberWebhookConfig(request.webhookConfig) : void 0
    }
  ])
});
const marshalZonedApiAddBackendServersRequest = (request, defaults) => ({
  server_ip: request.serverIp
});
const marshalZonedApiAttachPrivateNetworkRequest = (request, defaults) => ({
  ipam_ids: request.ipamIds,
  ...marshalling.resolveOneOf([
    {
      param: "static_config",
      value: request.staticConfig !== void 0 ? marshalPrivateNetworkStaticConfig(request.staticConfig) : void 0
    },
    {
      param: "dhcp_config",
      value: request.dhcpConfig !== void 0 ? marshalPrivateNetworkDHCPConfig(request.dhcpConfig) : void 0
    },
    {
      param: "ipam_config",
      value: request.ipamConfig !== void 0 ? marshalPrivateNetworkIpamConfig(request.ipamConfig) : void 0
    }
  ])
});
const marshalZonedApiCreateAclRequest = (request, defaults) => ({
  action: marshalAclAction(request.action),
  description: request.description,
  index: request.index,
  match: request.match !== void 0 ? marshalAclMatch(request.match) : void 0,
  name: request.name || randomName("acl")
});
const marshalZonedApiCreateBackendRequest = (request, defaults) => ({
  failover_host: request.failoverHost,
  forward_port: request.forwardPort,
  forward_port_algorithm: request.forwardPortAlgorithm,
  forward_protocol: request.forwardProtocol,
  health_check: marshalHealthCheck(request.healthCheck),
  ignore_ssl_server_verify: request.ignoreSslServerVerify,
  max_connections: request.maxConnections,
  max_retries: request.maxRetries,
  name: request.name || randomName("lbb"),
  on_marked_down_action: request.onMarkedDownAction,
  proxy_protocol: request.proxyProtocol,
  redispatch_attempt_count: request.redispatchAttemptCount,
  send_proxy_v2: request.sendProxyV2,
  server_ip: request.serverIp,
  ssl_bridging: request.sslBridging,
  sticky_sessions: request.stickySessions,
  sticky_sessions_cookie_name: request.stickySessionsCookieName,
  timeout_connect: request.timeoutConnect,
  timeout_queue: request.timeoutQueue,
  timeout_server: request.timeoutServer,
  timeout_tunnel: request.timeoutTunnel
});
const marshalZonedApiCreateCertificateRequest = (request, defaults) => ({
  name: request.name || randomName("certificate"),
  ...marshalling.resolveOneOf([
    {
      param: "letsencrypt",
      value: request.letsencrypt !== void 0 ? marshalCreateCertificateRequestLetsencryptConfig(
        request.letsencrypt
      ) : void 0
    },
    {
      param: "custom_certificate",
      value: request.customCertificate !== void 0 ? marshalCreateCertificateRequestCustomCertificate(
        request.customCertificate
      ) : void 0
    }
  ])
});
const marshalZonedApiCreateFrontendRequest = (request, defaults) => ({
  backend_id: request.backendId,
  certificate_id: request.certificateId,
  certificate_ids: request.certificateIds,
  enable_http3: request.enableHttp3,
  inbound_port: request.inboundPort,
  name: request.name || randomName("lbf"),
  timeout_client: request.timeoutClient
});
const marshalZonedApiCreateIpRequest = (request, defaults) => ({
  is_ipv6: request.isIpv6,
  reverse: request.reverse,
  tags: request.tags,
  ...marshalling.resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project_id",
      value: request.projectId
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization_id",
      value: request.organizationId
    }
  ])
});
const marshalZonedApiCreateLbRequest = (request, defaults) => ({
  assign_flexible_ip: request.assignFlexibleIp,
  assign_flexible_ipv6: request.assignFlexibleIpv6,
  description: request.description,
  ip_id: request.ipId,
  ip_ids: request.ipIds,
  name: request.name || randomName("lb"),
  ssl_compatibility_level: request.sslCompatibilityLevel,
  tags: request.tags,
  type: request.type,
  ...marshalling.resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project_id",
      value: request.projectId
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization_id",
      value: request.organizationId
    }
  ])
});
const marshalZonedApiCreateRouteRequest = (request, defaults) => ({
  backend_id: request.backendId,
  frontend_id: request.frontendId,
  match: request.match !== void 0 ? marshalRouteMatch(request.match) : void 0
});
const marshalZonedApiCreateSubscriberRequest = (request, defaults) => ({
  name: request.name,
  ...marshalling.resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project_id",
      value: request.projectId
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization_id",
      value: request.organizationId
    }
  ]),
  ...marshalling.resolveOneOf([
    {
      param: "email_config",
      value: request.emailConfig !== void 0 ? marshalSubscriberEmailConfig(request.emailConfig) : void 0
    },
    {
      param: "webhook_config",
      value: request.webhookConfig !== void 0 ? marshalSubscriberWebhookConfig(request.webhookConfig) : void 0
    }
  ])
});
const marshalZonedApiMigrateLbRequest = (request, defaults) => ({
  type: request.type
});
const marshalZonedApiRemoveBackendServersRequest = (request, defaults) => ({
  server_ip: request.serverIp
});
const marshalAclSpec = (request, defaults) => ({
  action: marshalAclAction(request.action),
  description: request.description,
  index: request.index,
  match: request.match !== void 0 ? marshalAclMatch(request.match) : void 0,
  name: request.name
});
const marshalZonedApiSetAclsRequest = (request, defaults) => ({
  acls: request.acls.map((elt) => marshalAclSpec(elt))
});
const marshalZonedApiSetBackendServersRequest = (request, defaults) => ({
  server_ip: request.serverIp
});
const marshalZonedApiSubscribeToLbRequest = (request, defaults) => ({
  subscriber_id: request.subscriberId
});
const marshalZonedApiUpdateAclRequest = (request, defaults) => ({
  action: marshalAclAction(request.action),
  description: request.description,
  index: request.index,
  match: request.match !== void 0 ? marshalAclMatch(request.match) : void 0,
  name: request.name
});
const marshalZonedApiUpdateBackendRequest = (request, defaults) => ({
  failover_host: request.failoverHost,
  forward_port: request.forwardPort,
  forward_port_algorithm: request.forwardPortAlgorithm,
  forward_protocol: request.forwardProtocol,
  ignore_ssl_server_verify: request.ignoreSslServerVerify,
  max_connections: request.maxConnections,
  max_retries: request.maxRetries,
  name: request.name,
  on_marked_down_action: request.onMarkedDownAction,
  proxy_protocol: request.proxyProtocol,
  redispatch_attempt_count: request.redispatchAttemptCount,
  send_proxy_v2: request.sendProxyV2,
  ssl_bridging: request.sslBridging,
  sticky_sessions: request.stickySessions,
  sticky_sessions_cookie_name: request.stickySessionsCookieName,
  timeout_connect: request.timeoutConnect,
  timeout_queue: request.timeoutQueue,
  timeout_server: request.timeoutServer,
  timeout_tunnel: request.timeoutTunnel
});
const marshalZonedApiUpdateCertificateRequest = (request, defaults) => ({
  name: request.name
});
const marshalZonedApiUpdateFrontendRequest = (request, defaults) => ({
  backend_id: request.backendId,
  certificate_id: request.certificateId,
  certificate_ids: request.certificateIds,
  enable_http3: request.enableHttp3,
  inbound_port: request.inboundPort,
  name: request.name,
  timeout_client: request.timeoutClient
});
const marshalZonedApiUpdateHealthCheckRequest = (request, defaults) => ({
  check_delay: request.checkDelay,
  check_max_retries: request.checkMaxRetries,
  check_send_proxy: request.checkSendProxy,
  check_timeout: request.checkTimeout,
  port: request.port,
  transient_check_delay: request.transientCheckDelay,
  ...marshalling.resolveOneOf([
    {
      param: "tcp_config",
      value: request.tcpConfig !== void 0 ? marshalHealthCheckTcpConfig(request.tcpConfig) : void 0
    },
    {
      param: "mysql_config",
      value: request.mysqlConfig !== void 0 ? marshalHealthCheckMysqlConfig(request.mysqlConfig) : void 0
    },
    {
      param: "pgsql_config",
      value: request.pgsqlConfig !== void 0 ? marshalHealthCheckPgsqlConfig(request.pgsqlConfig) : void 0
    },
    {
      param: "ldap_config",
      value: request.ldapConfig !== void 0 ? marshalHealthCheckLdapConfig(request.ldapConfig) : void 0
    },
    {
      param: "redis_config",
      value: request.redisConfig !== void 0 ? marshalHealthCheckRedisConfig(request.redisConfig) : void 0
    },
    {
      param: "http_config",
      value: request.httpConfig !== void 0 ? marshalHealthCheckHttpConfig(request.httpConfig) : void 0
    },
    {
      param: "https_config",
      value: request.httpsConfig !== void 0 ? marshalHealthCheckHttpsConfig(request.httpsConfig) : void 0
    }
  ])
});
const marshalZonedApiUpdateIpRequest = (request, defaults) => ({
  lb_id: request.lbId,
  reverse: request.reverse,
  tags: request.tags
});
const marshalZonedApiUpdateLbRequest = (request, defaults) => ({
  description: request.description,
  name: request.name,
  ssl_compatibility_level: request.sslCompatibilityLevel,
  tags: request.tags
});
const marshalZonedApiUpdateRouteRequest = (request, defaults) => ({
  backend_id: request.backendId,
  match: request.match !== void 0 ? marshalRouteMatch(request.match) : void 0
});
const marshalZonedApiUpdateSubscriberRequest = (request, defaults) => ({
  name: request.name,
  ...marshalling.resolveOneOf([
    {
      param: "email_config",
      value: request.emailConfig !== void 0 ? marshalSubscriberEmailConfig(request.emailConfig) : void 0
    },
    {
      param: "webhook_config",
      value: request.webhookConfig !== void 0 ? marshalSubscriberWebhookConfig(request.webhookConfig) : void 0
    }
  ])
});
exports.marshalAddBackendServersRequest = marshalAddBackendServersRequest;
exports.marshalAttachPrivateNetworkRequest = marshalAttachPrivateNetworkRequest;
exports.marshalCreateAclRequest = marshalCreateAclRequest;
exports.marshalCreateBackendRequest = marshalCreateBackendRequest;
exports.marshalCreateCertificateRequest = marshalCreateCertificateRequest;
exports.marshalCreateFrontendRequest = marshalCreateFrontendRequest;
exports.marshalCreateIpRequest = marshalCreateIpRequest;
exports.marshalCreateLbRequest = marshalCreateLbRequest;
exports.marshalCreateRouteRequest = marshalCreateRouteRequest;
exports.marshalCreateSubscriberRequest = marshalCreateSubscriberRequest;
exports.marshalMigrateLbRequest = marshalMigrateLbRequest;
exports.marshalRemoveBackendServersRequest = marshalRemoveBackendServersRequest;
exports.marshalSetBackendServersRequest = marshalSetBackendServersRequest;
exports.marshalSubscribeToLbRequest = marshalSubscribeToLbRequest;
exports.marshalUpdateAclRequest = marshalUpdateAclRequest;
exports.marshalUpdateBackendRequest = marshalUpdateBackendRequest;
exports.marshalUpdateCertificateRequest = marshalUpdateCertificateRequest;
exports.marshalUpdateFrontendRequest = marshalUpdateFrontendRequest;
exports.marshalUpdateHealthCheckRequest = marshalUpdateHealthCheckRequest;
exports.marshalUpdateIpRequest = marshalUpdateIpRequest;
exports.marshalUpdateLbRequest = marshalUpdateLbRequest;
exports.marshalUpdateRouteRequest = marshalUpdateRouteRequest;
exports.marshalUpdateSubscriberRequest = marshalUpdateSubscriberRequest;
exports.marshalZonedApiAddBackendServersRequest = marshalZonedApiAddBackendServersRequest;
exports.marshalZonedApiAttachPrivateNetworkRequest = marshalZonedApiAttachPrivateNetworkRequest;
exports.marshalZonedApiCreateAclRequest = marshalZonedApiCreateAclRequest;
exports.marshalZonedApiCreateBackendRequest = marshalZonedApiCreateBackendRequest;
exports.marshalZonedApiCreateCertificateRequest = marshalZonedApiCreateCertificateRequest;
exports.marshalZonedApiCreateFrontendRequest = marshalZonedApiCreateFrontendRequest;
exports.marshalZonedApiCreateIpRequest = marshalZonedApiCreateIpRequest;
exports.marshalZonedApiCreateLbRequest = marshalZonedApiCreateLbRequest;
exports.marshalZonedApiCreateRouteRequest = marshalZonedApiCreateRouteRequest;
exports.marshalZonedApiCreateSubscriberRequest = marshalZonedApiCreateSubscriberRequest;
exports.marshalZonedApiMigrateLbRequest = marshalZonedApiMigrateLbRequest;
exports.marshalZonedApiRemoveBackendServersRequest = marshalZonedApiRemoveBackendServersRequest;
exports.marshalZonedApiSetAclsRequest = marshalZonedApiSetAclsRequest;
exports.marshalZonedApiSetBackendServersRequest = marshalZonedApiSetBackendServersRequest;
exports.marshalZonedApiSubscribeToLbRequest = marshalZonedApiSubscribeToLbRequest;
exports.marshalZonedApiUpdateAclRequest = marshalZonedApiUpdateAclRequest;
exports.marshalZonedApiUpdateBackendRequest = marshalZonedApiUpdateBackendRequest;
exports.marshalZonedApiUpdateCertificateRequest = marshalZonedApiUpdateCertificateRequest;
exports.marshalZonedApiUpdateFrontendRequest = marshalZonedApiUpdateFrontendRequest;
exports.marshalZonedApiUpdateHealthCheckRequest = marshalZonedApiUpdateHealthCheckRequest;
exports.marshalZonedApiUpdateIpRequest = marshalZonedApiUpdateIpRequest;
exports.marshalZonedApiUpdateLbRequest = marshalZonedApiUpdateLbRequest;
exports.marshalZonedApiUpdateRouteRequest = marshalZonedApiUpdateRouteRequest;
exports.marshalZonedApiUpdateSubscriberRequest = marshalZonedApiUpdateSubscriberRequest;
exports.unmarshalAcl = unmarshalAcl;
exports.unmarshalBackend = unmarshalBackend;
exports.unmarshalBackendServerStats = unmarshalBackendServerStats;
exports.unmarshalCertificate = unmarshalCertificate;
exports.unmarshalFrontend = unmarshalFrontend;
exports.unmarshalHealthCheck = unmarshalHealthCheck;
exports.unmarshalIp = unmarshalIp;
exports.unmarshalLb = unmarshalLb;
exports.unmarshalLbStats = unmarshalLbStats;
exports.unmarshalListAclResponse = unmarshalListAclResponse;
exports.unmarshalListBackendStatsResponse = unmarshalListBackendStatsResponse;
exports.unmarshalListBackendsResponse = unmarshalListBackendsResponse;
exports.unmarshalListCertificatesResponse = unmarshalListCertificatesResponse;
exports.unmarshalListFrontendsResponse = unmarshalListFrontendsResponse;
exports.unmarshalListIpsResponse = unmarshalListIpsResponse;
exports.unmarshalListLbPrivateNetworksResponse = unmarshalListLbPrivateNetworksResponse;
exports.unmarshalListLbTypesResponse = unmarshalListLbTypesResponse;
exports.unmarshalListLbsResponse = unmarshalListLbsResponse;
exports.unmarshalListRoutesResponse = unmarshalListRoutesResponse;
exports.unmarshalListSubscriberResponse = unmarshalListSubscriberResponse;
exports.unmarshalPrivateNetwork = unmarshalPrivateNetwork;
exports.unmarshalRoute = unmarshalRoute;
exports.unmarshalSetAclsResponse = unmarshalSetAclsResponse;
exports.unmarshalSubscriber = unmarshalSubscriber;


/***/ }),

/***/ 9859:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(8772);
exports.v1beta1 = index_gen;


/***/ }),

/***/ 7141:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const content_gen = __nccwpck_require__(4742);
const marshalling_gen = __nccwpck_require__(5929);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par"];
  pageOfListDeployments = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/deployments`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListDeploymentsResponse
  );
  /**
   * List inference deployments. List all your inference deployments.
   *
   * @param request - The request {@link ListDeploymentsRequest}
   * @returns A Promise of ListDeploymentsResponse
   */
  listDeployments = (request = {}) => resourcePaginator.enrichForPagination("deployments", this.pageOfListDeployments, request);
  /**
   * Get a deployment. Get the deployment for the given ID.
   *
   * @param request - The request {@link GetDeploymentRequest}
   * @returns A Promise of Deployment
   */
  getDeployment = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/deployments/${marshalling.validatePathParam("deploymentId", request.deploymentId)}`
    },
    marshalling_gen.unmarshalDeployment
  );
  /**
   * Waits for {@link Deployment} to be in a final state.
   *
   * @param request - The request {@link GetDeploymentRequest}
   * @param options - The waiting options
   * @returns A Promise of Deployment
   */
  waitForDeployment = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.DEPLOYMENT_TRANSIENT_STATUSES.includes(res.status))),
    this.getDeployment,
    request,
    options
  );
  /**
   * Create a deployment. Create a new inference deployment related to a
   * specific model.
   *
   * @param request - The request {@link CreateDeploymentRequest}
   * @returns A Promise of Deployment
   */
  createDeployment = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateDeploymentRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/deployments`
    },
    marshalling_gen.unmarshalDeployment
  );
  /**
   * Update a deployment. Update an existing inference deployment.
   *
   * @param request - The request {@link UpdateDeploymentRequest}
   * @returns A Promise of Deployment
   */
  updateDeployment = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateDeploymentRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/deployments/${marshalling.validatePathParam("deploymentId", request.deploymentId)}`
    },
    marshalling_gen.unmarshalDeployment
  );
  /**
   * Delete a deployment. Delete an existing inference deployment.
   *
   * @param request - The request {@link DeleteDeploymentRequest}
   * @returns A Promise of Deployment
   */
  deleteDeployment = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/deployments/${marshalling.validatePathParam("deploymentId", request.deploymentId)}`
    },
    marshalling_gen.unmarshalDeployment
  );
  /**
   * Get the CA certificate. Get the CA certificate used for the deployment of
   * private endpoints. The CA certificate will be returned as a PEM file.
   *
   * @param request - The request {@link GetDeploymentCertificateRequest}
   * @returns A Promise of Blob
   */
  getDeploymentCertificate = (request) => this.client.fetch({
    method: "GET",
    path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/deployments/${marshalling.validatePathParam("deploymentId", request.deploymentId)}/certificate`,
    urlParams: marshalling.urlParams(["dl", 1]),
    responseType: "blob"
  });
  /**
   * Create an endpoint. Create a new Endpoint related to a specific deployment.
   *
   * @param request - The request {@link CreateEndpointRequest}
   * @returns A Promise of Endpoint
   */
  createEndpoint = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateEndpointRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/endpoints`
    },
    marshalling_gen.unmarshalEndpoint
  );
  /**
   * Update an endpoint. Update an existing Endpoint.
   *
   * @param request - The request {@link UpdateEndpointRequest}
   * @returns A Promise of Endpoint
   */
  updateEndpoint = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateEndpointRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/endpoints/${marshalling.validatePathParam("endpointId", request.endpointId)}`
    },
    marshalling_gen.unmarshalEndpoint
  );
  /**
   * Delete an endpoint. Delete an existing Endpoint.
   *
   * @param request - The request {@link DeleteEndpointRequest}
   */
  deleteEndpoint = (request) => this.client.fetch({
    method: "DELETE",
    path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/endpoints/${marshalling.validatePathParam("endpointId", request.endpointId)}`
  });
  pageOfListDeploymentACLRules = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/deployments/${marshalling.validatePathParam("deploymentId", request.deploymentId)}/acls`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListDeploymentACLRulesResponse
  );
  /**
   * List your ACLs. List ACLs for a specific deployment.
   *
   * @param request - The request {@link ListDeploymentACLRulesRequest}
   * @returns A Promise of ListDeploymentACLRulesResponse
   */
  listDeploymentACLRules = (request) => resourcePaginator.enrichForPagination("rules", this.pageOfListDeploymentACLRules, request);
  /**
   * Add new ACLs. Add new ACL rules for a specific deployment.
   *
   * @param request - The request {@link AddDeploymentACLRulesRequest}
   * @returns A Promise of AddDeploymentACLRulesResponse
   */
  addDeploymentACLRules = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalAddDeploymentACLRulesRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/deployments/${marshalling.validatePathParam("deploymentId", request.deploymentId)}/acls`
    },
    marshalling_gen.unmarshalAddDeploymentACLRulesResponse
  );
  /**
   * Set new ACL. Set new ACL rules for a specific deployment.
   *
   * @param request - The request {@link SetDeploymentACLRulesRequest}
   * @returns A Promise of SetDeploymentACLRulesResponse
   */
  setDeploymentACLRules = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetDeploymentACLRulesRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/deployments/${marshalling.validatePathParam("deploymentId", request.deploymentId)}/acls`
    },
    marshalling_gen.unmarshalSetDeploymentACLRulesResponse
  );
  /**
   * Delete an exising ACL.
   *
   * @param request - The request {@link DeleteDeploymentACLRuleRequest}
   */
  deleteDeploymentACLRule = (request) => this.client.fetch({
    method: "DELETE",
    path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/acls/${marshalling.validatePathParam("aclId", request.aclId)}`
  });
  pageOfListModels = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/models`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListModelsResponse
  );
  /**
   * List models. List all available models.
   *
   * @param request - The request {@link ListModelsRequest}
   * @returns A Promise of ListModelsResponse
   */
  listModels = (request = {}) => resourcePaginator.enrichForPagination("models", this.pageOfListModels, request);
  /**
   * Get a model. Get the model for the given ID.
   *
   * @param request - The request {@link GetModelRequest}
   * @returns A Promise of Model
   */
  getModel = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/models/${marshalling.validatePathParam("modelId", request.modelId)}`
    },
    marshalling_gen.unmarshalModel
  );
  getModelEula = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/models/${marshalling.validatePathParam("modelId", request.modelId)}/eula`
    },
    marshalling_gen.unmarshalEula
  );
  pageOfListNodeTypes = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/node-types`,
      urlParams: marshalling.urlParams(
        ["include_disabled_types", request.includeDisabledTypes],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListNodeTypesResponse
  );
  /**
   * List available node types. List all available node types. By default, the
   * node types returned in the list are ordered by creation date in ascending
   * order, though this can be modified via the `order_by` field.
   *
   * @param request - The request {@link ListNodeTypesRequest}
   * @returns A Promise of ListNodeTypesResponse
   */
  listNodeTypes = (request) => resourcePaginator.enrichForPagination("nodeTypes", this.pageOfListNodeTypes, request);
}
exports.API = API;


/***/ }),

/***/ 4742:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const DEPLOYMENT_TRANSIENT_STATUSES = [
  "creating",
  "deploying",
  "deleting"
];
exports.DEPLOYMENT_TRANSIENT_STATUSES = DEPLOYMENT_TRANSIENT_STATUSES;


/***/ }),

/***/ 8772:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(7141);
const content_gen = __nccwpck_require__(4742);
const validationRules_gen = __nccwpck_require__(3358);
exports.API = api_gen.API;
exports.DEPLOYMENT_TRANSIENT_STATUSES = content_gen.DEPLOYMENT_TRANSIENT_STATUSES;
exports.ValidationRules = validationRules_gen;


/***/ }),

/***/ 5929:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const randomName = __nccwpck_require__(8118);
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalEndpointPrivateNetworkDetails = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EndpointPrivateNetworkDetails' failed as data isn't a dictionary.`
    );
  }
  return {
    privateNetworkId: data.private_network_id
  };
};
const unmarshalEndpointPublicAccessDetails = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EndpointPublicAccessDetails' failed as data isn't a dictionary.`
    );
  }
  return {};
};
const unmarshalEndpoint = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Endpoint' failed as data isn't a dictionary.`
    );
  }
  return {
    disableAuth: data.disable_auth,
    id: data.id,
    privateNetwork: data.private_network ? unmarshalEndpointPrivateNetworkDetails(data.private_network) : void 0,
    publicAccess: data.public_access ? unmarshalEndpointPublicAccessDetails(data.public_access) : void 0,
    url: data.url
  };
};
const unmarshalDeployment = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Deployment' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    endpoints: marshalling.unmarshalArrayOfObject(data.endpoints, unmarshalEndpoint),
    errorMessage: data.error_message,
    id: data.id,
    maxSize: data.max_size,
    minSize: data.min_size,
    modelName: data.model_name,
    name: data.name,
    nodeType: data.node_type,
    projectId: data.project_id,
    region: data.region,
    size: data.size,
    status: data.status,
    tags: data.tags,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalModelS3Model = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ModelS3Model' failed as data isn't a dictionary.`
    );
  }
  return {
    nodeType: data.node_type,
    pythonDependencies: data.python_dependencies,
    s3Url: data.s3_url,
    tritonServerVersion: data.triton_server_version
  };
};
const unmarshalModel = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Model' failed as data isn't a dictionary.`
    );
  }
  return {
    compatibleNodeTypes: data.compatible_node_types,
    createdAt: marshalling.unmarshalDate(data.created_at),
    description: data.description,
    hasEula: data.has_eula,
    id: data.id,
    isPublic: data.is_public,
    name: data.name,
    projectId: data.project_id,
    provider: data.provider,
    quantizationLevel: data.quantization_level,
    region: data.region,
    s3Model: data.s3_model ? unmarshalModelS3Model(data.s3_model) : void 0,
    tags: data.tags,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalACLRule = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ACLRule' failed as data isn't a dictionary.`
    );
  }
  return {
    description: data.description,
    id: data.id,
    ip: data.ip
  };
};
const unmarshalAddDeploymentACLRulesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'AddDeploymentACLRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule)
  };
};
const unmarshalEula = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Eula' failed as data isn't a dictionary.`
    );
  }
  return {
    content: data.content
  };
};
const unmarshalListDeploymentACLRulesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDeploymentACLRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule),
    totalCount: data.total_count
  };
};
const unmarshalListDeploymentsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDeploymentsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    deployments: marshalling.unmarshalArrayOfObject(data.deployments, unmarshalDeployment),
    totalCount: data.total_count
  };
};
const unmarshalListModelsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListModelsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    models: marshalling.unmarshalArrayOfObject(data.models, unmarshalModel),
    totalCount: data.total_count
  };
};
const unmarshalNodeType = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'NodeType' failed as data isn't a dictionary.`
    );
  }
  return {
    beta: data.beta,
    createdAt: marshalling.unmarshalDate(data.created_at),
    description: data.description,
    disabled: data.disabled,
    gpus: data.gpus,
    memory: data.memory,
    name: data.name,
    region: data.region,
    stockStatus: data.stock_status,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    vcpus: data.vcpus,
    vram: data.vram
  };
};
const unmarshalListNodeTypesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListNodeTypesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    nodeTypes: marshalling.unmarshalArrayOfObject(data.node_types, unmarshalNodeType),
    totalCount: data.total_count
  };
};
const unmarshalSetDeploymentACLRulesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetDeploymentACLRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule)
  };
};
const marshalACLRuleRequest = (request, defaults) => ({
  description: request.description,
  ip: request.ip
});
const marshalAddDeploymentACLRulesRequest = (request, defaults) => ({
  acls: request.acls !== void 0 ? request.acls.map((elt) => marshalACLRuleRequest(elt)) : void 0
});
const marshalEndpointSpecPrivateNetwork = (request, defaults) => ({
  private_network_id: request.privateNetworkId
});
const marshalEndpointSpecPublic = (request, defaults) => ({});
const marshalEndpointSpec = (request, defaults) => ({
  disable_auth: request.disableAuth,
  ...marshalling.resolveOneOf([
    {
      param: "public",
      value: request.public !== void 0 ? marshalEndpointSpecPublic(request.public) : void 0
    },
    {
      param: "private_network",
      value: request.privateNetwork !== void 0 ? marshalEndpointSpecPrivateNetwork(request.privateNetwork) : void 0
    }
  ])
});
const marshalCreateDeploymentRequest = (request, defaults) => ({
  accept_eula: request.acceptEula,
  endpoints: request.endpoints.map((elt) => marshalEndpointSpec(elt)),
  max_size: request.maxSize,
  min_size: request.minSize,
  model_name: request.modelName,
  name: request.name || randomName("llm"),
  node_type: request.nodeType,
  project_id: request.projectId ?? defaults.defaultProjectId,
  tags: request.tags
});
const marshalCreateEndpointRequest = (request, defaults) => ({
  deployment_id: request.deploymentId,
  endpoint: marshalEndpointSpec(request.endpoint)
});
const marshalSetDeploymentACLRulesRequest = (request, defaults) => ({
  acls: request.acls !== void 0 ? request.acls.map((elt) => marshalACLRuleRequest(elt)) : void 0
});
const marshalUpdateDeploymentRequest = (request, defaults) => ({
  max_size: request.maxSize,
  min_size: request.minSize,
  name: request.name,
  tags: request.tags
});
const marshalUpdateEndpointRequest = (request, defaults) => ({
  disable_auth: request.disableAuth
});
exports.marshalAddDeploymentACLRulesRequest = marshalAddDeploymentACLRulesRequest;
exports.marshalCreateDeploymentRequest = marshalCreateDeploymentRequest;
exports.marshalCreateEndpointRequest = marshalCreateEndpointRequest;
exports.marshalSetDeploymentACLRulesRequest = marshalSetDeploymentACLRulesRequest;
exports.marshalUpdateDeploymentRequest = marshalUpdateDeploymentRequest;
exports.marshalUpdateEndpointRequest = marshalUpdateEndpointRequest;
exports.unmarshalAddDeploymentACLRulesResponse = unmarshalAddDeploymentACLRulesResponse;
exports.unmarshalDeployment = unmarshalDeployment;
exports.unmarshalEndpoint = unmarshalEndpoint;
exports.unmarshalEula = unmarshalEula;
exports.unmarshalListDeploymentACLRulesResponse = unmarshalListDeploymentACLRulesResponse;
exports.unmarshalListDeploymentsResponse = unmarshalListDeploymentsResponse;
exports.unmarshalListModelsResponse = unmarshalListModelsResponse;
exports.unmarshalListNodeTypesResponse = unmarshalListNodeTypesResponse;
exports.unmarshalModel = unmarshalModel;
exports.unmarshalSetDeploymentACLRulesResponse = unmarshalSetDeploymentACLRulesResponse;


/***/ }),

/***/ 3358:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const CreateDeploymentRequest = {
  maxSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 50
  },
  minSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 50
  },
  modelName: {
    maxLength: 255,
    minLength: 0,
    pattern: /^[\w-_]+\/[\w-_.]+(:[\w]+)?$/
  },
  name: {
    maxLength: 255,
    minLength: 1,
    pattern: /^[A-Za-z0-9-_]+$/
  },
  nodeType: {
    maxLength: 64,
    minLength: 1
  }
};
const ListDeploymentsRequest = {
  name: {
    maxLength: 255,
    minLength: 1
  }
};
const ListModelsRequest = {
  name: {
    maxLength: 255,
    minLength: 1
  }
};
const UpdateDeploymentRequest = {
  maxSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 50
  },
  minSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 50
  },
  name: {
    maxLength: 255,
    minLength: 1
  }
};
exports.CreateDeploymentRequest = CreateDeploymentRequest;
exports.ListDeploymentsRequest = ListDeploymentsRequest;
exports.ListModelsRequest = ListModelsRequest;
exports.UpdateDeploymentRequest = UpdateDeploymentRequest;


/***/ }),

/***/ 5516:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(3995);
exports.v2 = index_gen;


/***/ }),

/***/ 476:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const marshalling_gen = __nccwpck_require__(2335);
class API extends api.API {
  pageOfListImages = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/marketplace/v2/images`,
      urlParams: marshalling.urlParams(
        ["arch", request.arch],
        ["category", request.category],
        ["include_eol", request.includeEol],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListImagesResponse
  );
  /**
   * List marketplace images. List all available images on the marketplace,
   * their UUID, CPU architecture and description.
   *
   * @param request - The request {@link ListImagesRequest}
   * @returns A Promise of ListImagesResponse
   */
  listImages = (request) => resourcePaginator.enrichForPagination("images", this.pageOfListImages, request);
  /**
   * Get a specific marketplace image. Get detailed information about a
   * marketplace image, specified by its `image_id` (UUID format).
   *
   * @param request - The request {@link GetImageRequest}
   * @returns A Promise of Image
   */
  getImage = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/marketplace/v2/images/${marshalling.validatePathParam("imageId", request.imageId)}`
    },
    marshalling_gen.unmarshalImage
  );
  pageOfListVersions = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/marketplace/v2/versions`,
      urlParams: marshalling.urlParams(
        ["image_id", request.imageId],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListVersionsResponse
  );
  /**
   * List versions of an Image. Get a list of all available version of an image,
   * specified by its `image_id` (UUID format).
   *
   * @param request - The request {@link ListVersionsRequest}
   * @returns A Promise of ListVersionsResponse
   */
  listVersions = (request) => resourcePaginator.enrichForPagination("versions", this.pageOfListVersions, request);
  /**
   * Get a specific image version. Get information such as the name, creation
   * date, last update and published date for an image version specified by its
   * `version_id` (UUID format).
   *
   * @param request - The request {@link GetVersionRequest}
   * @returns A Promise of Version
   */
  getVersion = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/marketplace/v2/versions/${marshalling.validatePathParam("versionId", request.versionId)}`
    },
    marshalling_gen.unmarshalVersion
  );
  pageOfListLocalImages = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/marketplace/v2/local-images`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["type", request.type],
        ["zone", request.zone],
        ...Object.entries(
          marshalling.resolveOneOf([
            { param: "image_id", value: request.imageId },
            { param: "version_id", value: request.versionId },
            { param: "image_label", value: request.imageLabel }
          ])
        )
      )
    },
    marshalling_gen.unmarshalListLocalImagesResponse
  );
  /**
   * List local images from a specific image or version. List information about
   * local images in a specific Availability Zone, specified by its `image_id`
   * (UUID format), `version_id` (UUID format) or `image_label`. Only one of
   * these three parameters may be set.
   *
   * @param request - The request {@link ListLocalImagesRequest}
   * @returns A Promise of ListLocalImagesResponse
   */
  listLocalImages = (request = {}) => resourcePaginator.enrichForPagination("localImages", this.pageOfListLocalImages, request);
  /**
   * Get a specific local image by ID. Get detailed information about a local
   * image, including compatible commercial types, supported architecture,
   * labels and the Availability Zone of the image, specified by its
   * `local_image_id` (UUID format).
   *
   * @param request - The request {@link GetLocalImageRequest}
   * @returns A Promise of LocalImage
   */
  getLocalImage = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/marketplace/v2/local-images/${marshalling.validatePathParam("localImageId", request.localImageId)}`
    },
    marshalling_gen.unmarshalLocalImage
  );
  pageOfListCategories = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/marketplace/v2/categories`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListCategoriesResponse
  );
  /**
   * List existing image categories. Get a list of all existing categories. The
   * output can be paginated.
   *
   * @param request - The request {@link ListCategoriesRequest}
   * @returns A Promise of ListCategoriesResponse
   */
  listCategories = (request = {}) => resourcePaginator.enrichForPagination("categories", this.pageOfListCategories, request);
  /**
   * Get a specific category. Get information about a specific category of the
   * marketplace catalog, specified by its `category_id` (UUID format).
   *
   * @param request - The request {@link GetCategoryRequest}
   * @returns A Promise of Category
   */
  getCategory = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/marketplace/v2/categories/${marshalling.validatePathParam("categoryId", request.categoryId)}`
    },
    marshalling_gen.unmarshalCategory
  );
}
exports.API = API;


/***/ }),

/***/ 3995:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(476);
exports.API = api_gen.API;


/***/ }),

/***/ 2335:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalCategory = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Category' failed as data isn't a dictionary.`
    );
  }
  return {
    description: data.description,
    id: data.id,
    name: data.name
  };
};
const unmarshalImage = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Image' failed as data isn't a dictionary.`
    );
  }
  return {
    categories: data.categories,
    createdAt: marshalling.unmarshalDate(data.created_at),
    description: data.description,
    id: data.id,
    label: data.label,
    logo: data.logo,
    name: data.name,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    validUntil: marshalling.unmarshalDate(data.valid_until)
  };
};
const unmarshalLocalImage = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'LocalImage' failed as data isn't a dictionary.`
    );
  }
  return {
    arch: data.arch,
    compatibleCommercialTypes: data.compatible_commercial_types,
    id: data.id,
    label: data.label,
    type: data.type,
    zone: data.zone
  };
};
const unmarshalVersion = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Version' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    name: data.name,
    publishedAt: marshalling.unmarshalDate(data.published_at),
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalListCategoriesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListCategoriesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    categories: marshalling.unmarshalArrayOfObject(data.categories, unmarshalCategory),
    totalCount: data.total_count
  };
};
const unmarshalListImagesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListImagesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    images: marshalling.unmarshalArrayOfObject(data.images, unmarshalImage),
    totalCount: data.total_count
  };
};
const unmarshalListLocalImagesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListLocalImagesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    localImages: marshalling.unmarshalArrayOfObject(data.local_images, unmarshalLocalImage),
    totalCount: data.total_count
  };
};
const unmarshalListVersionsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListVersionsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    versions: marshalling.unmarshalArrayOfObject(data.versions, unmarshalVersion)
  };
};
exports.unmarshalCategory = unmarshalCategory;
exports.unmarshalImage = unmarshalImage;
exports.unmarshalListCategoriesResponse = unmarshalListCategoriesResponse;
exports.unmarshalListImagesResponse = unmarshalListImagesResponse;
exports.unmarshalListLocalImagesResponse = unmarshalListLocalImagesResponse;
exports.unmarshalListVersionsResponse = unmarshalListVersionsResponse;
exports.unmarshalLocalImage = unmarshalLocalImage;
exports.unmarshalVersion = unmarshalVersion;


/***/ }),

/***/ 3036:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(3807);
exports.v1beta1 = index_gen;


/***/ }),

/***/ 5398:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const marshalling_gen = __nccwpck_require__(4778);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class NatsAPI extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par", "nl-ams"];
  /**
   * Create a NATS account. Create a NATS account associated with a Project.
   *
   * @param request - The request {@link NatsApiCreateNatsAccountRequest}
   * @returns A Promise of NatsAccount
   */
  createNatsAccount = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalNatsApiCreateNatsAccountRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/nats-accounts`
    },
    marshalling_gen.unmarshalNatsAccount
  );
  /**
   * Delete a NATS account. Delete a NATS account, specified by its NATS account
   * ID. Note that deleting a NATS account is irreversible, and any credentials,
   * streams, consumer and stored messages belonging to this NATS account will
   * also be deleted.
   *
   * @param request - The request {@link NatsApiDeleteNatsAccountRequest}
   */
  deleteNatsAccount = (request) => this.client.fetch({
    method: "DELETE",
    path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/nats-accounts/${marshalling.validatePathParam("natsAccountId", request.natsAccountId)}`
  });
  /**
   * Update the name of a NATS account. Update the name of a NATS account,
   * specified by its NATS account ID.
   *
   * @param request - The request {@link NatsApiUpdateNatsAccountRequest}
   * @returns A Promise of NatsAccount
   */
  updateNatsAccount = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalNatsApiUpdateNatsAccountRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/nats-accounts/${marshalling.validatePathParam("natsAccountId", request.natsAccountId)}`
    },
    marshalling_gen.unmarshalNatsAccount
  );
  /**
   * Get a NATS account. Retrieve information about an existing NATS account
   * identified by its NATS account ID. Its full details, including name and
   * endpoint, are returned in the response.
   *
   * @param request - The request {@link NatsApiGetNatsAccountRequest}
   * @returns A Promise of NatsAccount
   */
  getNatsAccount = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/nats-accounts/${marshalling.validatePathParam("natsAccountId", request.natsAccountId)}`
    },
    marshalling_gen.unmarshalNatsAccount
  );
  pageOfListNatsAccounts = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/nats-accounts`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListNatsAccountsResponse
  );
  /**
   * List NATS accounts. List all NATS accounts in the specified region, for a
   * Scaleway Organization or Project. By default, the NATS accounts returned in
   * the list are ordered by creation date in ascending order, though this can
   * be modified via the `order_by` field.
   *
   * @param request - The request {@link NatsApiListNatsAccountsRequest}
   * @returns A Promise of ListNatsAccountsResponse
   */
  listNatsAccounts = (request = {}) => resourcePaginator.enrichForPagination("natsAccounts", this.pageOfListNatsAccounts, request);
  /**
   * Create NATS credentials. Create a set of credentials for a NATS account,
   * specified by its NATS account ID.
   *
   * @param request - The request {@link NatsApiCreateNatsCredentialsRequest}
   * @returns A Promise of NatsCredentials
   */
  createNatsCredentials = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalNatsApiCreateNatsCredentialsRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/nats-credentials`
    },
    marshalling_gen.unmarshalNatsCredentials
  );
  /**
   * Delete NATS credentials. Delete a set of credentials, specified by their
   * credentials ID. Deleting credentials is irreversible and cannot be undone.
   * The credentials can no longer be used to access the NATS account, and
   * active connections using this credentials will be closed.
   *
   * @param request - The request {@link NatsApiDeleteNatsCredentialsRequest}
   */
  deleteNatsCredentials = (request) => this.client.fetch({
    method: "DELETE",
    path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/nats-credentials/${marshalling.validatePathParam("natsCredentialsId", request.natsCredentialsId)}`
  });
  /**
   * Get NATS credentials. Retrieve an existing set of credentials, identified
   * by the `nats_credentials_id`. The credentials themselves are NOT returned,
   * only their metadata (NATS account ID, credentials name, etc), are returned
   * in the response.
   *
   * @param request - The request {@link NatsApiGetNatsCredentialsRequest}
   * @returns A Promise of NatsCredentials
   */
  getNatsCredentials = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/nats-credentials/${marshalling.validatePathParam("natsCredentialsId", request.natsCredentialsId)}`
    },
    marshalling_gen.unmarshalNatsCredentials
  );
  pageOfListNatsCredentials = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/nats-credentials`,
      urlParams: marshalling.urlParams(
        ["nats_account_id", request.natsAccountId],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListNatsCredentialsResponse
  );
  /**
   * List NATS credentials. List existing credentials in the specified NATS
   * account. The response contains only the metadata for the credentials, not
   * the credentials themselves, which are only returned after a **Create
   * Credentials** call.
   *
   * @param request - The request {@link NatsApiListNatsCredentialsRequest}
   * @returns A Promise of ListNatsCredentialsResponse
   */
  listNatsCredentials = (request = {}) => resourcePaginator.enrichForPagination(
    "natsCredentials",
    this.pageOfListNatsCredentials,
    request
  );
}
class SnsAPI extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par", "nl-ams"];
  /**
   * Activate SNS. Activate SNS for the specified Project ID. SNS must be
   * activated before any usage. Activating SNS does not trigger any billing,
   * and you can deactivate at any time.
   *
   * @param request - The request {@link SnsApiActivateSnsRequest}
   * @returns A Promise of SnsInfo
   */
  activateSns = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSnsApiActivateSnsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/activate-sns`
    },
    marshalling_gen.unmarshalSnsInfo
  );
  /**
   * Get SNS info. Retrieve the SNS information of the specified Project ID.
   * Informations include the activation status and the SNS API endpoint URL.
   *
   * @param request - The request {@link SnsApiGetSnsInfoRequest}
   * @returns A Promise of SnsInfo
   */
  getSnsInfo = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/sns-info`,
      urlParams: marshalling.urlParams([
        "project_id",
        request.projectId ?? this.client.settings.defaultProjectId
      ])
    },
    marshalling_gen.unmarshalSnsInfo
  );
  /**
   * Deactivate SNS. Deactivate SNS for the specified Project ID.You must delete
   * all topics and credentials before this call or you need to set the
   * force_delete parameter.
   *
   * @param request - The request {@link SnsApiDeactivateSnsRequest}
   * @returns A Promise of SnsInfo
   */
  deactivateSns = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSnsApiDeactivateSnsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/deactivate-sns`
    },
    marshalling_gen.unmarshalSnsInfo
  );
  /**
   * Create SNS credentials. Create a set of credentials for SNS, specified by a
   * Project ID. Credentials give the bearer access to topics, and the level of
   * permissions can be defined granularly.
   *
   * @param request - The request {@link SnsApiCreateSnsCredentialsRequest}
   * @returns A Promise of SnsCredentials
   */
  createSnsCredentials = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSnsApiCreateSnsCredentialsRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/sns-credentials`
    },
    marshalling_gen.unmarshalSnsCredentials
  );
  /**
   * Delete SNS credentials. Delete a set of SNS credentials, specified by their
   * credentials ID. Deleting credentials is irreversible and cannot be undone.
   * The credentials can then no longer be used to access SNS.
   *
   * @param request - The request {@link SnsApiDeleteSnsCredentialsRequest}
   */
  deleteSnsCredentials = (request) => this.client.fetch({
    method: "DELETE",
    path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/sns-credentials/${marshalling.validatePathParam("snsCredentialsId", request.snsCredentialsId)}`
  });
  /**
   * Update SNS credentials. Update a set of SNS credentials. You can update the
   * credentials' name, or their permissions.
   *
   * @param request - The request {@link SnsApiUpdateSnsCredentialsRequest}
   * @returns A Promise of SnsCredentials
   */
  updateSnsCredentials = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSnsApiUpdateSnsCredentialsRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/sns-credentials/${marshalling.validatePathParam("snsCredentialsId", request.snsCredentialsId)}`
    },
    marshalling_gen.unmarshalSnsCredentials
  );
  /**
   * Get SNS credentials. Retrieve an existing set of credentials, identified by
   * the `credentials_id`. The credentials themselves, as well as their metadata
   * (name, project ID etc), are returned in the response.
   *
   * @param request - The request {@link SnsApiGetSnsCredentialsRequest}
   * @returns A Promise of SnsCredentials
   */
  getSnsCredentials = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/sns-credentials/${marshalling.validatePathParam("snsCredentialsId", request.snsCredentialsId)}`
    },
    marshalling_gen.unmarshalSnsCredentials
  );
  pageOfListSnsCredentials = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/sns-credentials`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListSnsCredentialsResponse
  );
  /**
   * List SNS credentials. List existing SNS credentials in the specified
   * region. The response contains only the metadata for the credentials, not
   * the credentials themselves.
   *
   * @param request - The request {@link SnsApiListSnsCredentialsRequest}
   * @returns A Promise of ListSnsCredentialsResponse
   */
  listSnsCredentials = (request = {}) => resourcePaginator.enrichForPagination(
    "snsCredentials",
    this.pageOfListSnsCredentials,
    request
  );
}
class SqsAPI extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par", "nl-ams"];
  /**
   * Activate SQS. Activate SQS for the specified Project ID. SQS must be
   * activated before any usage such as creating credentials and queues.
   * Activating SQS does not trigger any billing, and you can deactivate at any
   * time.
   *
   * @param request - The request {@link SqsApiActivateSqsRequest}
   * @returns A Promise of SqsInfo
   */
  activateSqs = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSqsApiActivateSqsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/activate-sqs`
    },
    marshalling_gen.unmarshalSqsInfo
  );
  /**
   * Get SQS info. Retrieve the SQS information of the specified Project ID.
   * Informations include the activation status and the SQS API endpoint URL.
   *
   * @param request - The request {@link SqsApiGetSqsInfoRequest}
   * @returns A Promise of SqsInfo
   */
  getSqsInfo = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/sqs-info`,
      urlParams: marshalling.urlParams([
        "project_id",
        request.projectId ?? this.client.settings.defaultProjectId
      ])
    },
    marshalling_gen.unmarshalSqsInfo
  );
  /**
   * Deactivate SQS. Deactivate SQS for the specified Project ID. You must
   * delete all queues and credentials before this call or you need to set the
   * force_delete parameter.
   *
   * @param request - The request {@link SqsApiDeactivateSqsRequest}
   * @returns A Promise of SqsInfo
   */
  deactivateSqs = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSqsApiDeactivateSqsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/deactivate-sqs`
    },
    marshalling_gen.unmarshalSqsInfo
  );
  /**
   * Create SQS credentials. Create a set of credentials for SQS, specified by a
   * Project ID. Credentials give the bearer access to queues, and the level of
   * permissions can be defined granularly.
   *
   * @param request - The request {@link SqsApiCreateSqsCredentialsRequest}
   * @returns A Promise of SqsCredentials
   */
  createSqsCredentials = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSqsApiCreateSqsCredentialsRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/sqs-credentials`
    },
    marshalling_gen.unmarshalSqsCredentials
  );
  /**
   * Delete SQS credentials. Delete a set of SQS credentials, specified by their
   * credentials ID. Deleting credentials is irreversible and cannot be undone.
   * The credentials can then no longer be used to access SQS.
   *
   * @param request - The request {@link SqsApiDeleteSqsCredentialsRequest}
   */
  deleteSqsCredentials = (request) => this.client.fetch({
    method: "DELETE",
    path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/sqs-credentials/${marshalling.validatePathParam("sqsCredentialsId", request.sqsCredentialsId)}`
  });
  /**
   * Update SQS credentials. Update a set of SQS credentials. You can update the
   * credentials' name, or their permissions.
   *
   * @param request - The request {@link SqsApiUpdateSqsCredentialsRequest}
   * @returns A Promise of SqsCredentials
   */
  updateSqsCredentials = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSqsApiUpdateSqsCredentialsRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/sqs-credentials/${marshalling.validatePathParam("sqsCredentialsId", request.sqsCredentialsId)}`
    },
    marshalling_gen.unmarshalSqsCredentials
  );
  /**
   * Get SQS credentials. Retrieve an existing set of credentials, identified by
   * the `credentials_id`. The credentials themselves, as well as their metadata
   * (name, project ID etc), are returned in the response.
   *
   * @param request - The request {@link SqsApiGetSqsCredentialsRequest}
   * @returns A Promise of SqsCredentials
   */
  getSqsCredentials = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/sqs-credentials/${marshalling.validatePathParam("sqsCredentialsId", request.sqsCredentialsId)}`
    },
    marshalling_gen.unmarshalSqsCredentials
  );
  pageOfListSqsCredentials = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/sqs-credentials`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListSqsCredentialsResponse
  );
  /**
   * List SQS credentials. List existing SQS credentials in the specified
   * region. The response contains only the metadata for the credentials, not
   * the credentials themselves.
   *
   * @param request - The request {@link SqsApiListSqsCredentialsRequest}
   * @returns A Promise of ListSqsCredentialsResponse
   */
  listSqsCredentials = (request = {}) => resourcePaginator.enrichForPagination(
    "sqsCredentials",
    this.pageOfListSqsCredentials,
    request
  );
}
exports.NatsAPI = NatsAPI;
exports.SnsAPI = SnsAPI;
exports.SqsAPI = SqsAPI;


/***/ }),

/***/ 3807:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(5398);
const validationRules_gen = __nccwpck_require__(4607);
exports.NatsAPI = api_gen.NatsAPI;
exports.SnsAPI = api_gen.SnsAPI;
exports.SqsAPI = api_gen.SqsAPI;
exports.ValidationRules = validationRules_gen;


/***/ }),

/***/ 4778:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const randomName = __nccwpck_require__(8118);
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalNatsAccount = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'NatsAccount' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    endpoint: data.endpoint,
    id: data.id,
    name: data.name,
    projectId: data.project_id,
    region: data.region,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalFile = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'File' failed as data isn't a dictionary.`
    );
  }
  return {
    content: data.content,
    name: data.name
  };
};
const unmarshalNatsCredentials = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'NatsCredentials' failed as data isn't a dictionary.`
    );
  }
  return {
    checksum: data.checksum,
    createdAt: marshalling.unmarshalDate(data.created_at),
    credentials: data.credentials ? unmarshalFile(data.credentials) : void 0,
    id: data.id,
    name: data.name,
    natsAccountId: data.nats_account_id,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalSnsPermissions = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SnsPermissions' failed as data isn't a dictionary.`
    );
  }
  return {
    canManage: data.can_manage,
    canPublish: data.can_publish,
    canReceive: data.can_receive
  };
};
const unmarshalSnsCredentials = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SnsCredentials' failed as data isn't a dictionary.`
    );
  }
  return {
    accessKey: data.access_key,
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    name: data.name,
    permissions: data.permissions ? unmarshalSnsPermissions(data.permissions) : void 0,
    projectId: data.project_id,
    region: data.region,
    secretChecksum: data.secret_checksum,
    secretKey: data.secret_key,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalSqsPermissions = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SqsPermissions' failed as data isn't a dictionary.`
    );
  }
  return {
    canManage: data.can_manage,
    canPublish: data.can_publish,
    canReceive: data.can_receive
  };
};
const unmarshalSqsCredentials = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SqsCredentials' failed as data isn't a dictionary.`
    );
  }
  return {
    accessKey: data.access_key,
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    name: data.name,
    permissions: data.permissions ? unmarshalSqsPermissions(data.permissions) : void 0,
    projectId: data.project_id,
    region: data.region,
    secretChecksum: data.secret_checksum,
    secretKey: data.secret_key,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalListNatsAccountsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListNatsAccountsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    natsAccounts: marshalling.unmarshalArrayOfObject(
      data.nats_accounts,
      unmarshalNatsAccount
    ),
    totalCount: data.total_count
  };
};
const unmarshalListNatsCredentialsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListNatsCredentialsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    natsCredentials: marshalling.unmarshalArrayOfObject(
      data.nats_credentials,
      unmarshalNatsCredentials
    ),
    totalCount: data.total_count
  };
};
const unmarshalListSnsCredentialsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSnsCredentialsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    snsCredentials: marshalling.unmarshalArrayOfObject(
      data.sns_credentials,
      unmarshalSnsCredentials
    ),
    totalCount: data.total_count
  };
};
const unmarshalListSqsCredentialsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSqsCredentialsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    sqsCredentials: marshalling.unmarshalArrayOfObject(
      data.sqs_credentials,
      unmarshalSqsCredentials
    ),
    totalCount: data.total_count
  };
};
const unmarshalSnsInfo = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SnsInfo' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    projectId: data.project_id,
    region: data.region,
    snsEndpointUrl: data.sns_endpoint_url,
    status: data.status,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalSqsInfo = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SqsInfo' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    projectId: data.project_id,
    region: data.region,
    sqsEndpointUrl: data.sqs_endpoint_url,
    status: data.status,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const marshalNatsApiCreateNatsAccountRequest = (request, defaults) => ({
  name: request.name || randomName("mnq"),
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalNatsApiCreateNatsCredentialsRequest = (request, defaults) => ({
  name: request.name || randomName("mnq"),
  nats_account_id: request.natsAccountId
});
const marshalNatsApiUpdateNatsAccountRequest = (request, defaults) => ({
  name: request.name
});
const marshalSnsApiActivateSnsRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalSnsPermissions = (request, defaults) => ({
  can_manage: request.canManage,
  can_publish: request.canPublish,
  can_receive: request.canReceive
});
const marshalSnsApiCreateSnsCredentialsRequest = (request, defaults) => ({
  name: request.name || randomName("mnq_sns"),
  permissions: request.permissions !== void 0 ? marshalSnsPermissions(request.permissions) : void 0,
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalSnsApiDeactivateSnsRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalSnsApiUpdateSnsCredentialsRequest = (request, defaults) => ({
  name: request.name,
  permissions: request.permissions !== void 0 ? marshalSnsPermissions(request.permissions) : void 0
});
const marshalSqsApiActivateSqsRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalSqsPermissions = (request, defaults) => ({
  can_manage: request.canManage,
  can_publish: request.canPublish,
  can_receive: request.canReceive
});
const marshalSqsApiCreateSqsCredentialsRequest = (request, defaults) => ({
  name: request.name || randomName("mnq_sqs"),
  permissions: request.permissions !== void 0 ? marshalSqsPermissions(request.permissions) : void 0,
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalSqsApiDeactivateSqsRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalSqsApiUpdateSqsCredentialsRequest = (request, defaults) => ({
  name: request.name,
  permissions: request.permissions !== void 0 ? marshalSqsPermissions(request.permissions) : void 0
});
exports.marshalNatsApiCreateNatsAccountRequest = marshalNatsApiCreateNatsAccountRequest;
exports.marshalNatsApiCreateNatsCredentialsRequest = marshalNatsApiCreateNatsCredentialsRequest;
exports.marshalNatsApiUpdateNatsAccountRequest = marshalNatsApiUpdateNatsAccountRequest;
exports.marshalSnsApiActivateSnsRequest = marshalSnsApiActivateSnsRequest;
exports.marshalSnsApiCreateSnsCredentialsRequest = marshalSnsApiCreateSnsCredentialsRequest;
exports.marshalSnsApiDeactivateSnsRequest = marshalSnsApiDeactivateSnsRequest;
exports.marshalSnsApiUpdateSnsCredentialsRequest = marshalSnsApiUpdateSnsCredentialsRequest;
exports.marshalSqsApiActivateSqsRequest = marshalSqsApiActivateSqsRequest;
exports.marshalSqsApiCreateSqsCredentialsRequest = marshalSqsApiCreateSqsCredentialsRequest;
exports.marshalSqsApiDeactivateSqsRequest = marshalSqsApiDeactivateSqsRequest;
exports.marshalSqsApiUpdateSqsCredentialsRequest = marshalSqsApiUpdateSqsCredentialsRequest;
exports.unmarshalListNatsAccountsResponse = unmarshalListNatsAccountsResponse;
exports.unmarshalListNatsCredentialsResponse = unmarshalListNatsCredentialsResponse;
exports.unmarshalListSnsCredentialsResponse = unmarshalListSnsCredentialsResponse;
exports.unmarshalListSqsCredentialsResponse = unmarshalListSqsCredentialsResponse;
exports.unmarshalNatsAccount = unmarshalNatsAccount;
exports.unmarshalNatsCredentials = unmarshalNatsCredentials;
exports.unmarshalSnsCredentials = unmarshalSnsCredentials;
exports.unmarshalSnsInfo = unmarshalSnsInfo;
exports.unmarshalSqsCredentials = unmarshalSqsCredentials;
exports.unmarshalSqsInfo = unmarshalSqsInfo;


/***/ }),

/***/ 4607:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const NatsAccount = {
  name: {
    maxLength: 64,
    minLength: 1
  }
};
const NatsApiCreateNatsAccountRequest = {
  name: {
    maxLength: 64,
    minLength: 1
  }
};
const NatsApiCreateNatsCredentialsRequest = {
  name: {
    maxLength: 500,
    minLength: 1
  }
};
const NatsApiUpdateNatsAccountRequest = {
  name: {
    maxLength: 64,
    minLength: 1
  }
};
const NatsCredentials = {
  name: {
    maxLength: 500,
    minLength: 1
  }
};
const SnsApiCreateSnsCredentialsRequest = {
  name: {
    maxLength: 500,
    minLength: 1
  }
};
const SnsApiUpdateSnsCredentialsRequest = {
  name: {
    maxLength: 500,
    minLength: 1
  }
};
const SnsCredentials = {
  accessKey: {
    minLength: 1
  },
  name: {
    maxLength: 500,
    minLength: 1
  }
};
const SqsApiCreateSqsCredentialsRequest = {
  name: {
    maxLength: 500,
    minLength: 1
  }
};
const SqsApiUpdateSqsCredentialsRequest = {
  name: {
    maxLength: 500,
    minLength: 1
  }
};
const SqsCredentials = {
  accessKey: {
    minLength: 1
  },
  name: {
    maxLength: 500,
    minLength: 1
  }
};
exports.NatsAccount = NatsAccount;
exports.NatsApiCreateNatsAccountRequest = NatsApiCreateNatsAccountRequest;
exports.NatsApiCreateNatsCredentialsRequest = NatsApiCreateNatsCredentialsRequest;
exports.NatsApiUpdateNatsAccountRequest = NatsApiUpdateNatsAccountRequest;
exports.NatsCredentials = NatsCredentials;
exports.SnsApiCreateSnsCredentialsRequest = SnsApiCreateSnsCredentialsRequest;
exports.SnsApiUpdateSnsCredentialsRequest = SnsApiUpdateSnsCredentialsRequest;
exports.SnsCredentials = SnsCredentials;
exports.SqsApiCreateSqsCredentialsRequest = SqsApiCreateSqsCredentialsRequest;
exports.SqsApiUpdateSqsCredentialsRequest = SqsApiUpdateSqsCredentialsRequest;
exports.SqsCredentials = SqsCredentials;


/***/ }),

/***/ 5064:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(521);
exports.v1 = index_gen;


/***/ }),

/***/ 3456:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const content_gen = __nccwpck_require__(9640);
const marshalling_gen = __nccwpck_require__(7017);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par", "nl-ams", "pl-waw"];
  pageOfListDatabaseEngines = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/database-engines`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["version", request.version]
      )
    },
    marshalling_gen.unmarshalListDatabaseEnginesResponse
  );
  /**
   * List available database engines. List the PostgreSQL and MySQL database
   * engines available at Scaleway.
   *
   * @param request - The request {@link ListDatabaseEnginesRequest}
   * @returns A Promise of ListDatabaseEnginesResponse
   */
  listDatabaseEngines = (request = {}) => resourcePaginator.enrichForPagination("engines", this.pageOfListDatabaseEngines, request);
  pageOfListNodeTypes = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/node-types`,
      urlParams: marshalling.urlParams(
        ["include_disabled_types", request.includeDisabledTypes],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListNodeTypesResponse
  );
  /**
   * List available node types. List all available node types. By default, the
   * node types returned in the list are ordered by creation date in ascending
   * order, though this can be modified via the `order_by` field.
   *
   * @param request - The request {@link ListNodeTypesRequest}
   * @returns A Promise of ListNodeTypesResponse
   */
  listNodeTypes = (request) => resourcePaginator.enrichForPagination("nodeTypes", this.pageOfListNodeTypes, request);
  pageOfListDatabaseBackups = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backups`,
      urlParams: marshalling.urlParams(
        ["instance_id", request.instanceId],
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListDatabaseBackupsResponse
  );
  /**
   * List database backups. List all backups in a specified region, for a given
   * Scaleway Organization or Scaleway Project. By default, the backups listed
   * are ordered by creation date in ascending order. This can be modified via
   * the `order_by` field.
   *
   * @param request - The request {@link ListDatabaseBackupsRequest}
   * @returns A Promise of ListDatabaseBackupsResponse
   */
  listDatabaseBackups = (request = {}) => resourcePaginator.enrichForPagination(
    "databaseBackups",
    this.pageOfListDatabaseBackups,
    request
  );
  /**
   * Create a database backup. Create a new backup. You must set the
   * `instance_id`, `database_name`, `name` and `expires_at` parameters.
   *
   * @param request - The request {@link CreateDatabaseBackupRequest}
   * @returns A Promise of DatabaseBackup
   */
  createDatabaseBackup = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateDatabaseBackupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backups`
    },
    marshalling_gen.unmarshalDatabaseBackup
  );
  /**
   * Get a database backup. Retrieve information about a given backup, specified
   * by its database backup ID and region. Full details about the backup, like
   * size, URL and expiration date, are returned in the response.
   *
   * @param request - The request {@link GetDatabaseBackupRequest}
   * @returns A Promise of DatabaseBackup
   */
  getDatabaseBackup = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backups/${marshalling.validatePathParam("databaseBackupId", request.databaseBackupId)}`
    },
    marshalling_gen.unmarshalDatabaseBackup
  );
  /**
   * Waits for {@link DatabaseBackup} to be in a final state.
   *
   * @param request - The request {@link GetDatabaseBackupRequest}
   * @param options - The waiting options
   * @returns A Promise of DatabaseBackup
   */
  waitForDatabaseBackup = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(
      !content_gen.DATABASE_BACKUP_TRANSIENT_STATUSES.includes(res.status)
    )),
    this.getDatabaseBackup,
    request,
    options
  );
  /**
   * Update a database backup. Update the parameters of a backup, including name
   * and expiration date.
   *
   * @param request - The request {@link UpdateDatabaseBackupRequest}
   * @returns A Promise of DatabaseBackup
   */
  updateDatabaseBackup = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateDatabaseBackupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backups/${marshalling.validatePathParam("databaseBackupId", request.databaseBackupId)}`
    },
    marshalling_gen.unmarshalDatabaseBackup
  );
  /**
   * Delete a database backup. Delete a backup, specified by its database backup
   * ID and region. Deleting a backup is permanent, and cannot be undone.
   *
   * @param request - The request {@link DeleteDatabaseBackupRequest}
   * @returns A Promise of DatabaseBackup
   */
  deleteDatabaseBackup = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backups/${marshalling.validatePathParam("databaseBackupId", request.databaseBackupId)}`
    },
    marshalling_gen.unmarshalDatabaseBackup
  );
  /**
   * Restore a database backup. Launch the process of restoring database backup.
   * You must specify the `instance_id` of the Database Instance of destination,
   * where the backup will be restored. Note that large database backups can
   * take up to several hours to restore.
   *
   * @param request - The request {@link RestoreDatabaseBackupRequest}
   * @returns A Promise of DatabaseBackup
   */
  restoreDatabaseBackup = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRestoreDatabaseBackupRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backups/${marshalling.validatePathParam("databaseBackupId", request.databaseBackupId)}/restore`
    },
    marshalling_gen.unmarshalDatabaseBackup
  );
  /**
   * Export a database backup. Export a backup, specified by the
   * `database_backup_id` and the `region` parameters. The download URL is
   * returned in the response.
   *
   * @param request - The request {@link ExportDatabaseBackupRequest}
   * @returns A Promise of DatabaseBackup
   */
  exportDatabaseBackup = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backups/${marshalling.validatePathParam("databaseBackupId", request.databaseBackupId)}/export`
    },
    marshalling_gen.unmarshalDatabaseBackup
  );
  /**
   * Upgrade a Database Instance. Upgrade your current Database Instance
   * specifications like node type, high availability, volume, or the database
   * engine version. Note that upon upgrade the `enable_ha` parameter can only
   * be set to `true`.
   *
   * @param request - The request {@link UpgradeInstanceRequest}
   * @returns A Promise of Instance
   */
  upgradeInstance = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpgradeInstanceRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/upgrade`
    },
    marshalling_gen.unmarshalInstance
  );
  pageOfListInstances = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListInstancesResponse
  );
  /**
   * List Database Instances. List all Database Instances in the specified
   * region, for a given Scaleway Organization or Scaleway Project. By default,
   * the Database Instances returned in the list are ordered by creation date in
   * ascending order, though this can be modified via the order_by field. You
   * can define additional parameters for your query, such as `tags` and `name`.
   * For the `name` parameter, the value you include will be checked against the
   * whole name string to see if it includes the string you put in the
   * parameter.
   *
   * @param request - The request {@link ListInstancesRequest}
   * @returns A Promise of ListInstancesResponse
   */
  listInstances = (request = {}) => resourcePaginator.enrichForPagination("instances", this.pageOfListInstances, request);
  /**
   * Get a Database Instance. Retrieve information about a given Database
   * Instance, specified by the `region` and `instance_id` parameters. Its full
   * details, including name, status, IP address and port, are returned in the
   * response object.
   *
   * @param request - The request {@link GetInstanceRequest}
   * @returns A Promise of Instance
   */
  getInstance = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Waits for {@link Instance} to be in a final state.
   *
   * @param request - The request {@link GetInstanceRequest}
   * @param options - The waiting options
   * @returns A Promise of Instance
   */
  waitForInstance = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.INSTANCE_TRANSIENT_STATUSES.includes(res.status))),
    this.getInstance,
    request,
    options
  );
  /**
   * Create a Database Instance. Create a new Database Instance. You must set
   * the `engine`, `user_name`, `password` and `node_type` parameters.
   * Optionally, you can specify the volume type and size.
   *
   * @param request - The request {@link CreateInstanceRequest}
   * @returns A Promise of Instance
   */
  createInstance = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateInstanceRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Update a Database Instance. Update the parameters of a Database Instance,
   * including name, tags and backup schedule details.
   *
   * @param request - The request {@link UpdateInstanceRequest}
   * @returns A Promise of Instance
   */
  updateInstance = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateInstanceRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Delete a Database Instance. Delete a given Database Instance, specified by
   * the `region` and `instance_id` parameters. Deleting a Database Instance is
   * permanent, and cannot be undone. Note that upon deletion all your data will
   * be lost.
   *
   * @param request - The request {@link DeleteInstanceRequest}
   * @returns A Promise of Instance
   */
  deleteInstance = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Clone a Database Instance. Clone a given Database Instance, specified by
   * the `region` and `instance_id` parameters. The clone feature allows you to
   * create a new Database Instance from an existing one. The clone includes all
   * existing databases, users and permissions. You can create a clone on a
   * Database Instance bigger than your current one.
   *
   * @param request - The request {@link CloneInstanceRequest}
   * @returns A Promise of Instance
   */
  cloneInstance = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCloneInstanceRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/clone`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Restart Database Instance. Restart a given Database Instance, specified by
   * the `region` and `instance_id` parameters. The status of the Database
   * Instance returned in the response.
   *
   * @param request - The request {@link RestartInstanceRequest}
   * @returns A Promise of Instance
   */
  restartInstance = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/restart`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Get the TLS certificate of a Database Instance. Retrieve information about
   * the TLS certificate of a given Database Instance. Details like name and
   * content are returned in the response.
   *
   * @param request - The request {@link GetInstanceCertificateRequest}
   * @returns A Promise of Blob
   */
  getInstanceCertificate = (request) => this.client.fetch({
    method: "GET",
    path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/certificate`,
    urlParams: marshalling.urlParams(["dl", 1]),
    responseType: "blob"
  });
  /**
   * Renew the TLS certificate of a Database Instance. Renew a TLS for a
   * Database Instance. Renewing a certificate means that you will not be able
   * to connect to your Database Instance using the previous certificate. You
   * will also need to download and update the new certificate for all database
   * clients.
   *
   * @param request - The request {@link RenewInstanceCertificateRequest}
   */
  renewInstanceCertificate = (request) => this.client.fetch({
    body: "{}",
    headers: jsonContentHeaders,
    method: "POST",
    path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/renew-certificate`
  });
  /**
   * Get Database Instance metrics. Retrieve the time series metrics of a given
   * Database Instance. You can define the period from which to retrieve metrics
   * by specifying the `start_date` and `end_date`.
   *
   * @param request - The request {@link GetInstanceMetricsRequest}
   * @returns A Promise of InstanceMetrics
   */
  getInstanceMetrics = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/metrics`,
      urlParams: marshalling.urlParams(
        ["end_date", request.endDate],
        ["metric_name", request.metricName],
        ["start_date", request.startDate]
      )
    },
    marshalling_gen.unmarshalInstanceMetrics
  );
  /**
   * Create a Read Replica. Create a new Read Replica of a Database Instance.
   * You must specify the `region` and the `instance_id`. You can only create a
   * maximum of 3 Read Replicas per Database Instance.
   *
   * @param request - The request {@link CreateReadReplicaRequest}
   * @returns A Promise of ReadReplica
   */
  createReadReplica = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateReadReplicaRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/read-replicas`
    },
    marshalling_gen.unmarshalReadReplica
  );
  /**
   * Get a Read Replica. Retrieve information about a Database Instance Read
   * Replica. Full details about the Read Replica, like `endpoints`, `status`
   * and `region` are returned in the response.
   *
   * @param request - The request {@link GetReadReplicaRequest}
   * @returns A Promise of ReadReplica
   */
  getReadReplica = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${marshalling.validatePathParam("readReplicaId", request.readReplicaId)}`
    },
    marshalling_gen.unmarshalReadReplica
  );
  /**
   * Waits for {@link ReadReplica} to be in a final state.
   *
   * @param request - The request {@link GetReadReplicaRequest}
   * @param options - The waiting options
   * @returns A Promise of ReadReplica
   */
  waitForReadReplica = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(
      !content_gen.READ_REPLICA_TRANSIENT_STATUSES.includes(res.status)
    )),
    this.getReadReplica,
    request,
    options
  );
  /**
   * Delete a Read Replica. Delete a Read Replica of a Database Instance. You
   * must specify the `region` and `read_replica_id` parameters of the Read
   * Replica you want to delete.
   *
   * @param request - The request {@link DeleteReadReplicaRequest}
   * @returns A Promise of ReadReplica
   */
  deleteReadReplica = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${marshalling.validatePathParam("readReplicaId", request.readReplicaId)}`
    },
    marshalling_gen.unmarshalReadReplica
  );
  /**
   * Resync a Read Replica. When you resync a Read Replica, first it is reset,
   * then its data is resynchronized from the primary node. Your Read Replica
   * remains unavailable during the resync process. The duration of this process
   * is proportional to the size of your Database Instance. The configured
   * endpoints do not change.
   *
   * @param request - The request {@link ResetReadReplicaRequest}
   * @returns A Promise of ReadReplica
   */
  resetReadReplica = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${marshalling.validatePathParam("readReplicaId", request.readReplicaId)}/reset`
    },
    marshalling_gen.unmarshalReadReplica
  );
  /**
   * Promote a Read Replica. Promote a Read Replica to Database Instance
   * automatically.
   *
   * @param request - The request {@link PromoteReadReplicaRequest}
   * @returns A Promise of Instance
   */
  promoteReadReplica = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${marshalling.validatePathParam("readReplicaId", request.readReplicaId)}/promote`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Create an endpoint for a Read Replica. Create a new endpoint for a Read
   * Replica. Read Replicas can have at most one direct access and one Private
   * Network endpoint.
   *
   * @param request - The request {@link CreateReadReplicaEndpointRequest}
   * @returns A Promise of ReadReplica
   */
  createReadReplicaEndpoint = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateReadReplicaEndpointRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${marshalling.validatePathParam("readReplicaId", request.readReplicaId)}/endpoints`
    },
    marshalling_gen.unmarshalReadReplica
  );
  /**
   * Prepare logs of a Database Instance. Prepare your Database Instance logs.
   * You can define the `start_date` and `end_date` parameters for your query.
   * The download URL is returned in the response. Logs are recorded from 00h00
   * to 23h59 and then aggregated in a `.log` file once a day. Therefore, even
   * if you specify a timeframe from which you want to get the logs, you will
   * receive logs from the full 24 hours.
   *
   * @param request - The request {@link PrepareInstanceLogsRequest}
   * @returns A Promise of PrepareInstanceLogsResponse
   */
  prepareInstanceLogs = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalPrepareInstanceLogsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/prepare-logs`
    },
    marshalling_gen.unmarshalPrepareInstanceLogsResponse
  );
  /**
   * List available logs of a Database Instance. List the available logs of a
   * Database Instance. By default, the logs returned in the list are ordered by
   * creation date in ascending order, though this can be modified via the
   * order_by field.
   *
   * @param request - The request {@link ListInstanceLogsRequest}
   * @returns A Promise of ListInstanceLogsResponse
   */
  listInstanceLogs = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/logs`,
      urlParams: marshalling.urlParams(["order_by", request.orderBy])
    },
    marshalling_gen.unmarshalListInstanceLogsResponse
  );
  /**
   * Get given logs of a Database Instance. Retrieve information about the logs
   * of a Database Instance. Specify the `instance_log_id` and `region` in your
   * request to get information such as `download_url`, `status`, `expires_at`
   * and `created_at` about your logs in the response.
   *
   * @param request - The request {@link GetInstanceLogRequest}
   * @returns A Promise of InstanceLog
   */
  getInstanceLog = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/logs/${marshalling.validatePathParam("instanceLogId", request.instanceLogId)}`
    },
    marshalling_gen.unmarshalInstanceLog
  );
  /**
   * Waits for {@link InstanceLog} to be in a final state.
   *
   * @param request - The request {@link GetInstanceLogRequest}
   * @param options - The waiting options
   * @returns A Promise of InstanceLog
   */
  waitForInstanceLog = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(
      !content_gen.INSTANCE_LOG_TRANSIENT_STATUSES.includes(res.status)
    )),
    this.getInstanceLog,
    request,
    options
  );
  /**
   * Purge remote Database Instance logs. Purge a given remote log from a
   * Database Instance. You can specify the `log_name` of the log you wish to
   * clean from your Database Instance.
   *
   * @param request - The request {@link PurgeInstanceLogsRequest}
   */
  purgeInstanceLogs = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalPurgeInstanceLogsRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/purge-logs`
  });
  /**
   * List remote Database Instance logs details. List remote log details. By
   * default, the details returned in the list are ordered by creation date in
   * ascending order, though this can be modified via the order_by field.
   *
   * @param request - The request {@link ListInstanceLogsDetailsRequest}
   * @returns A Promise of ListInstanceLogsDetailsResponse
   */
  listInstanceLogsDetails = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/logs-details`
    },
    marshalling_gen.unmarshalListInstanceLogsDetailsResponse
  );
  /**
   * Add Database Instance advanced settings. Add an advanced setting to a
   * Database Instance. You must set the `name` and the `value` of each
   * setting.
   *
   * @param request - The request {@link AddInstanceSettingsRequest}
   * @returns A Promise of AddInstanceSettingsResponse
   */
  addInstanceSettings = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalAddInstanceSettingsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/settings`
    },
    marshalling_gen.unmarshalAddInstanceSettingsResponse
  );
  /**
   * Delete Database Instance advanced settings. Delete an advanced setting in a
   * Database Instance. You must specify the names of the settings you want to
   * delete in the request.
   *
   * @param request - The request {@link DeleteInstanceSettingsRequest}
   * @returns A Promise of DeleteInstanceSettingsResponse
   */
  deleteInstanceSettings = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalDeleteInstanceSettingsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "DELETE",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/settings`
    },
    marshalling_gen.unmarshalDeleteInstanceSettingsResponse
  );
  /**
   * Set Database Instance advanced settings. Update an advanced setting for a
   * Database Instance. Settings added upon database engine initalization can
   * only be defined once, and cannot, therefore, be updated.
   *
   * @param request - The request {@link SetInstanceSettingsRequest}
   * @returns A Promise of SetInstanceSettingsResponse
   */
  setInstanceSettings = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetInstanceSettingsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/settings`
    },
    marshalling_gen.unmarshalSetInstanceSettingsResponse
  );
  pageOfListInstanceACLRules = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/acls`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListInstanceACLRulesResponse
  );
  /**
   * List ACL rules of a Database Instance. List the ACL rules for a given
   * Database Instance. The response is an array of ACL objects, each one
   * representing an ACL that denies, allows or redirects traffic based on
   * certain conditions.
   *
   * @param request - The request {@link ListInstanceACLRulesRequest}
   * @returns A Promise of ListInstanceACLRulesResponse
   */
  listInstanceACLRules = (request) => resourcePaginator.enrichForPagination("rules", this.pageOfListInstanceACLRules, request);
  /**
   * Add an ACL rule to a Database Instance. Add an additional ACL rule to a
   * Database Instance.
   *
   * @param request - The request {@link AddInstanceACLRulesRequest}
   * @returns A Promise of AddInstanceACLRulesResponse
   */
  addInstanceACLRules = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalAddInstanceACLRulesRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/acls`
    },
    marshalling_gen.unmarshalAddInstanceACLRulesResponse
  );
  /**
   * Set ACL rules for a Database Instance. Replace all the ACL rules of a
   * Database Instance.
   *
   * @param request - The request {@link SetInstanceACLRulesRequest}
   * @returns A Promise of SetInstanceACLRulesResponse
   */
  setInstanceACLRules = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetInstanceACLRulesRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/acls`
    },
    marshalling_gen.unmarshalSetInstanceACLRulesResponse
  );
  /**
   * Delete ACL rules of a Database Instance. Delete one or more ACL rules of a
   * Database Instance.
   *
   * @param request - The request {@link DeleteInstanceACLRulesRequest}
   * @returns A Promise of DeleteInstanceACLRulesResponse
   */
  deleteInstanceACLRules = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalDeleteInstanceACLRulesRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "DELETE",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/acls`
    },
    marshalling_gen.unmarshalDeleteInstanceACLRulesResponse
  );
  pageOfListUsers = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/users`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListUsersResponse
  );
  /**
   * List users of a Database Instance. List all users of a given Database
   * Instance. By default, the users returned in the list are ordered by
   * creation date in ascending order, though this can be modified via the
   * order_by field.
   *
   * @param request - The request {@link ListUsersRequest}
   * @returns A Promise of ListUsersResponse
   */
  listUsers = (request) => resourcePaginator.enrichForPagination("users", this.pageOfListUsers, request);
  /**
   * Create a user for a Database Instance. Create a new user for a Database
   * Instance. You must define the `name`, `password` and `is_admin`
   * parameters.
   *
   * @param request - The request {@link CreateUserRequest}
   * @returns A Promise of User
   */
  createUser = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateUserRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/users`
    },
    marshalling_gen.unmarshalUser
  );
  /**
   * Update a user on a Database Instance. Update the parameters of a user on a
   * Database Instance. You can update the `password` and `is_admin` parameters,
   * but you cannot change the name of the user.
   *
   * @param request - The request {@link UpdateUserRequest}
   * @returns A Promise of User
   */
  updateUser = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateUserRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/users/${marshalling.validatePathParam("name", request.name)}`
    },
    marshalling_gen.unmarshalUser
  );
  /**
   * Delete a user on a Database Instance. Delete a given user on a Database
   * Instance. You must specify, in the endpoint, the `region`, `instance_id`
   * and `name` parameters of the user you want to delete.
   *
   * @param request - The request {@link DeleteUserRequest}
   */
  deleteUser = (request) => this.client.fetch({
    method: "DELETE",
    path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/users/${marshalling.validatePathParam("name", request.name)}`
  });
  pageOfListDatabases = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/databases`,
      urlParams: marshalling.urlParams(
        ["managed", request.managed],
        ["name", request.name],
        ["order_by", request.orderBy],
        ["owner", request.owner],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListDatabasesResponse
  );
  /**
   * List databases in a Database Instance. List all databases of a given
   * Database Instance. By default, the databases returned in the list are
   * ordered by creation date in ascending order, though this can be modified
   * via the order_by field. You can define additional parameters for your
   * query, such as `name`, `managed` and `owner`.
   *
   * @param request - The request {@link ListDatabasesRequest}
   * @returns A Promise of ListDatabasesResponse
   */
  listDatabases = (request) => resourcePaginator.enrichForPagination("databases", this.pageOfListDatabases, request);
  /**
   * Create a database in a Database Instance. Create a new database. You must
   * define the `name` parameter in the request.
   *
   * @param request - The request {@link CreateDatabaseRequest}
   * @returns A Promise of Database
   */
  createDatabase = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateDatabaseRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/databases`
    },
    marshalling_gen.unmarshalDatabase
  );
  /**
   * Delete a database in a Database Instance. Delete a given database on a
   * Database Instance. You must specify, in the endpoint, the `region`,
   * `instance_id` and `name` parameters of the database you want to delete.
   *
   * @param request - The request {@link DeleteDatabaseRequest}
   */
  deleteDatabase = (request) => this.client.fetch({
    method: "DELETE",
    path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/databases/${marshalling.validatePathParam("name", request.name)}`
  });
  pageOfListPrivileges = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/privileges`,
      urlParams: marshalling.urlParams(
        ["database_name", request.databaseName],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["user_name", request.userName]
      )
    },
    marshalling_gen.unmarshalListPrivilegesResponse
  );
  /**
   * List user privileges for a database. List privileges of a user on a
   * database. By default, the details returned in the list are ordered by
   * creation date in ascending order, though this can be modified via the
   * order_by field. You can define additional parameters for your query, such
   * as `database_name` and `user_name`.
   *
   * @param request - The request {@link ListPrivilegesRequest}
   * @returns A Promise of ListPrivilegesResponse
   */
  listPrivileges = (request) => resourcePaginator.enrichForPagination("privileges", this.pageOfListPrivileges, request);
  /**
   * Set user privileges for a database. Set the privileges of a user on a
   * database. You must define `database_name`, `user_name` and `permission` in
   * the request body.
   *
   * @param request - The request {@link SetPrivilegeRequest}
   * @returns A Promise of Privilege
   */
  setPrivilege = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetPrivilegeRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/privileges`
    },
    marshalling_gen.unmarshalPrivilege
  );
  pageOfListSnapshots = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/snapshots`,
      urlParams: marshalling.urlParams(
        ["instance_id", request.instanceId],
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListSnapshotsResponse
  );
  /**
   * List snapshots. List snapshots. You can include the `instance_id` or
   * `project_id` in your query to get the list of snapshots for specific
   * Database Instances and/or Projects. By default, the details returned in the
   * list are ordered by creation date in ascending order, though this can be
   * modified via the `order_by` field.
   *
   * @param request - The request {@link ListSnapshotsRequest}
   * @returns A Promise of ListSnapshotsResponse
   */
  listSnapshots = (request = {}) => resourcePaginator.enrichForPagination("snapshots", this.pageOfListSnapshots, request);
  /**
   * Get a Database Instance snapshot. Retrieve information about a given
   * snapshot, specified by its `snapshot_id` and `region`. Full details about
   * the snapshot, like size and expiration date, are returned in the response.
   *
   * @param request - The request {@link GetSnapshotRequest}
   * @returns A Promise of Snapshot
   */
  getSnapshot = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/snapshots/${marshalling.validatePathParam("snapshotId", request.snapshotId)}`
    },
    marshalling_gen.unmarshalSnapshot
  );
  /**
   * Waits for {@link Snapshot} to be in a final state.
   *
   * @param request - The request {@link GetSnapshotRequest}
   * @param options - The waiting options
   * @returns A Promise of Snapshot
   */
  waitForSnapshot = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.SNAPSHOT_TRANSIENT_STATUSES.includes(res.status))),
    this.getSnapshot,
    request,
    options
  );
  /**
   * Create a Database Instance snapshot. Create a new snapshot of a Database
   * Instance. You must define the `name` parameter in the request.
   *
   * @param request - The request {@link CreateSnapshotRequest}
   * @returns A Promise of Snapshot
   */
  createSnapshot = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateSnapshotRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/snapshots`
    },
    marshalling_gen.unmarshalSnapshot
  );
  /**
   * Update a Database Instance snapshot. Update the parameters of a snapshot of
   * a Database Instance. You can update the `name` and `expires_at`
   * parameters.
   *
   * @param request - The request {@link UpdateSnapshotRequest}
   * @returns A Promise of Snapshot
   */
  updateSnapshot = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateSnapshotRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/snapshots/${marshalling.validatePathParam("snapshotId", request.snapshotId)}`
    },
    marshalling_gen.unmarshalSnapshot
  );
  /**
   * Delete a Database Instance snapshot. Delete a given snapshot of a Database
   * Instance. You must specify, in the endpoint, the `region` and `snapshot_id`
   * parameters of the snapshot you want to delete.
   *
   * @param request - The request {@link DeleteSnapshotRequest}
   * @returns A Promise of Snapshot
   */
  deleteSnapshot = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/snapshots/${marshalling.validatePathParam("snapshotId", request.snapshotId)}`
    },
    marshalling_gen.unmarshalSnapshot
  );
  /**
   * Create a new Database Instance from a snapshot. Restore a snapshot. When
   * you restore a snapshot, a new Instance is created and billed to your
   * account. Note that is possible to select a larger node type for your new
   * Database Instance. However, the Block volume size will be the same as the
   * size of the restored snapshot. All Instance settings will be restored if
   * you chose a node type with the same or more memory size than the initial
   * Instance. Settings will be reset to the default if your node type has less
   * memory.
   *
   * @param request - The request {@link CreateInstanceFromSnapshotRequest}
   * @returns A Promise of Instance
   */
  createInstanceFromSnapshot = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateInstanceFromSnapshotRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/snapshots/${marshalling.validatePathParam("snapshotId", request.snapshotId)}/create-instance`
    },
    marshalling_gen.unmarshalInstance
  );
  /**
   * Create a new Database Instance endpoint. Create a new endpoint for a
   * Database Instance. You can add `load_balancer` and `private_network`
   * specifications to the body of the request.
   *
   * @param request - The request {@link CreateEndpointRequest}
   * @returns A Promise of Endpoint
   */
  createEndpoint = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateEndpointRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/endpoints`
    },
    marshalling_gen.unmarshalEndpoint
  );
  /**
   * Delete a Database Instance endpoint. Delete the endpoint of a Database
   * Instance. You must specify the `region` and `endpoint_id` parameters of the
   * endpoint you want to delete. Note that might need to update any environment
   * configurations that point to the deleted endpoint.
   *
   * @param request - The request {@link DeleteEndpointRequest}
   */
  deleteEndpoint = (request) => this.client.fetch({
    method: "DELETE",
    path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/endpoints/${marshalling.validatePathParam("endpointId", request.endpointId)}`
  });
  /**
   * Get a Database Instance endpoint. Retrieve information about a Database
   * Instance endpoint. Full details about the endpoint, like `ip`, `port`,
   * `private_network` and `load_balancer` specifications are returned in the
   * response.
   *
   * @param request - The request {@link GetEndpointRequest}
   * @returns A Promise of Endpoint
   */
  getEndpoint = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/endpoints/${marshalling.validatePathParam("endpointId", request.endpointId)}`
    },
    marshalling_gen.unmarshalEndpoint
  );
  /**
   * Migrate an existing instance endpoint to another instance.
   *
   * @param request - The request {@link MigrateEndpointRequest}
   * @returns A Promise of Endpoint
   */
  migrateEndpoint = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalMigrateEndpointRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/endpoints/${marshalling.validatePathParam("endpointId", request.endpointId)}/migrate`
    },
    marshalling_gen.unmarshalEndpoint
  );
  /**
   * Apply Database Instance maintenance. Apply maintenance tasks to your
   * Database Instance. This will trigger pending maintenance tasks to start in
   * your Database Instance and can generate service interruption. Maintenance
   * tasks can be applied between `starts_at` and `stops_at` times, and are run
   * directly by Scaleway at `forced_at` timestamp.
   *
   * @param request - The request {@link ApplyInstanceMaintenanceRequest}
   * @returns A Promise of Maintenance
   */
  applyInstanceMaintenance = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/rdb/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam("instanceId", request.instanceId)}/apply-maintenance`
    },
    marshalling_gen.unmarshalMaintenance
  );
}
exports.API = API;


/***/ }),

/***/ 9640:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const DATABASE_BACKUP_TRANSIENT_STATUSES = [
  "creating",
  "restoring",
  "deleting",
  "exporting"
];
const INSTANCE_LOG_TRANSIENT_STATUSES = ["creating"];
const INSTANCE_TRANSIENT_STATUSES = [
  "provisioning",
  "configuring",
  "deleting",
  "autohealing",
  "initializing",
  "backuping",
  "snapshotting",
  "restarting"
];
const MAINTENANCE_TRANSIENT_STATUSES = ["ongoing"];
const READ_REPLICA_TRANSIENT_STATUSES = [
  "provisioning",
  "initializing",
  "deleting",
  "configuring",
  "promoting"
];
const SNAPSHOT_TRANSIENT_STATUSES = [
  "creating",
  "restoring",
  "deleting"
];
exports.DATABASE_BACKUP_TRANSIENT_STATUSES = DATABASE_BACKUP_TRANSIENT_STATUSES;
exports.INSTANCE_LOG_TRANSIENT_STATUSES = INSTANCE_LOG_TRANSIENT_STATUSES;
exports.INSTANCE_TRANSIENT_STATUSES = INSTANCE_TRANSIENT_STATUSES;
exports.MAINTENANCE_TRANSIENT_STATUSES = MAINTENANCE_TRANSIENT_STATUSES;
exports.READ_REPLICA_TRANSIENT_STATUSES = READ_REPLICA_TRANSIENT_STATUSES;
exports.SNAPSHOT_TRANSIENT_STATUSES = SNAPSHOT_TRANSIENT_STATUSES;


/***/ }),

/***/ 521:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(3456);
const content_gen = __nccwpck_require__(9640);
const validationRules_gen = __nccwpck_require__(3889);
exports.API = api_gen.API;
exports.DATABASE_BACKUP_TRANSIENT_STATUSES = content_gen.DATABASE_BACKUP_TRANSIENT_STATUSES;
exports.INSTANCE_LOG_TRANSIENT_STATUSES = content_gen.INSTANCE_LOG_TRANSIENT_STATUSES;
exports.INSTANCE_TRANSIENT_STATUSES = content_gen.INSTANCE_TRANSIENT_STATUSES;
exports.MAINTENANCE_TRANSIENT_STATUSES = content_gen.MAINTENANCE_TRANSIENT_STATUSES;
exports.READ_REPLICA_TRANSIENT_STATUSES = content_gen.READ_REPLICA_TRANSIENT_STATUSES;
exports.SNAPSHOT_TRANSIENT_STATUSES = content_gen.SNAPSHOT_TRANSIENT_STATUSES;
exports.ValidationRules = validationRules_gen;


/***/ }),

/***/ 7017:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const randomName = __nccwpck_require__(8118);
const json = __nccwpck_require__(2362);
const customMarshalling = __nccwpck_require__(5667);
const marshalling = __nccwpck_require__(1502);
const unmarshalEndpointDirectAccessDetails = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EndpointDirectAccessDetails' failed as data isn't a dictionary.`
    );
  }
  return {};
};
const unmarshalEndpointLoadBalancerDetails = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EndpointLoadBalancerDetails' failed as data isn't a dictionary.`
    );
  }
  return {};
};
const unmarshalEndpointPrivateNetworkDetails = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EndpointPrivateNetworkDetails' failed as data isn't a dictionary.`
    );
  }
  return {
    privateNetworkId: data.private_network_id,
    provisioningMode: data.provisioning_mode,
    serviceIp: data.service_ip,
    zone: data.zone
  };
};
const unmarshalEndpoint = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Endpoint' failed as data isn't a dictionary.`
    );
  }
  return {
    directAccess: data.direct_access ? unmarshalEndpointDirectAccessDetails(data.direct_access) : void 0,
    hostname: data.hostname,
    id: data.id,
    ip: data.ip,
    loadBalancer: data.load_balancer ? unmarshalEndpointLoadBalancerDetails(data.load_balancer) : void 0,
    name: data.name,
    port: data.port,
    privateNetwork: data.private_network ? unmarshalEndpointPrivateNetworkDetails(data.private_network) : void 0
  };
};
const unmarshalMaintenance = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Maintenance' failed as data isn't a dictionary.`
    );
  }
  return {
    closedAt: marshalling.unmarshalDate(data.closed_at),
    forcedAt: marshalling.unmarshalDate(data.forced_at),
    reason: data.reason,
    startsAt: marshalling.unmarshalDate(data.starts_at),
    status: data.status,
    stopsAt: marshalling.unmarshalDate(data.stops_at)
  };
};
const unmarshalReadReplica = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ReadReplica' failed as data isn't a dictionary.`
    );
  }
  return {
    endpoints: marshalling.unmarshalArrayOfObject(data.endpoints, unmarshalEndpoint),
    id: data.id,
    instanceId: data.instance_id,
    region: data.region,
    sameZone: data.same_zone,
    status: data.status
  };
};
const unmarshalDatabaseBackup = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DatabaseBackup' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    databaseName: data.database_name,
    downloadUrl: data.download_url,
    downloadUrlExpiresAt: marshalling.unmarshalDate(data.download_url_expires_at),
    expiresAt: marshalling.unmarshalDate(data.expires_at),
    id: data.id,
    instanceId: data.instance_id,
    instanceName: data.instance_name,
    name: data.name,
    region: data.region,
    sameRegion: data.same_region,
    size: data.size,
    status: data.status,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalDatabase = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Database' failed as data isn't a dictionary.`
    );
  }
  return {
    managed: data.managed,
    name: data.name,
    owner: data.owner,
    size: data.size
  };
};
const unmarshalInstanceLog = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'InstanceLog' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    downloadUrl: data.download_url,
    expiresAt: marshalling.unmarshalDate(data.expires_at),
    id: data.id,
    nodeName: data.node_name,
    region: data.region,
    status: data.status
  };
};
const unmarshalBackupSchedule = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'BackupSchedule' failed as data isn't a dictionary.`
    );
  }
  return {
    disabled: data.disabled,
    frequency: data.frequency,
    nextRunAt: marshalling.unmarshalDate(data.next_run_at),
    retention: data.retention
  };
};
const unmarshalEncryptionAtRest = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EncryptionAtRest' failed as data isn't a dictionary.`
    );
  }
  return {
    enabled: data.enabled
  };
};
const unmarshalInstanceSetting = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'InstanceSetting' failed as data isn't a dictionary.`
    );
  }
  return {
    name: data.name,
    value: data.value
  };
};
const unmarshalLogsPolicy = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'LogsPolicy' failed as data isn't a dictionary.`
    );
  }
  return {
    maxAgeRetention: data.max_age_retention,
    totalDiskRetention: data.total_disk_retention
  };
};
const unmarshalUpgradableVersion = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'UpgradableVersion' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    minorVersion: data.minor_version,
    name: data.name,
    version: data.version
  };
};
const unmarshalVolume = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Volume' failed as data isn't a dictionary.`
    );
  }
  return {
    class: data.class,
    size: data.size,
    type: data.type
  };
};
const unmarshalInstance = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Instance' failed as data isn't a dictionary.`
    );
  }
  return {
    backupSameRegion: data.backup_same_region,
    backupSchedule: data.backup_schedule ? unmarshalBackupSchedule(data.backup_schedule) : void 0,
    createdAt: marshalling.unmarshalDate(data.created_at),
    encryption: data.encryption ? unmarshalEncryptionAtRest(data.encryption) : void 0,
    endpoint: data.endpoint ? unmarshalEndpoint(data.endpoint) : void 0,
    endpoints: marshalling.unmarshalArrayOfObject(data.endpoints, unmarshalEndpoint),
    engine: data.engine,
    id: data.id,
    initSettings: marshalling.unmarshalArrayOfObject(
      data.init_settings,
      unmarshalInstanceSetting
    ),
    isHaCluster: data.is_ha_cluster,
    logsPolicy: data.logs_policy ? unmarshalLogsPolicy(data.logs_policy) : void 0,
    maintenances: marshalling.unmarshalArrayOfObject(
      data.maintenances,
      unmarshalMaintenance
    ),
    name: data.name,
    nodeType: data.node_type,
    organizationId: data.organization_id,
    projectId: data.project_id,
    readReplicas: marshalling.unmarshalArrayOfObject(
      data.read_replicas,
      unmarshalReadReplica
    ),
    region: data.region,
    settings: marshalling.unmarshalArrayOfObject(data.settings, unmarshalInstanceSetting),
    status: data.status,
    tags: data.tags,
    upgradableVersion: marshalling.unmarshalArrayOfObject(
      data.upgradable_version,
      unmarshalUpgradableVersion
    ),
    volume: data.volume ? unmarshalVolume(data.volume) : void 0
  };
};
const unmarshalPrivilege = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Privilege' failed as data isn't a dictionary.`
    );
  }
  return {
    databaseName: data.database_name,
    permission: data.permission,
    userName: data.user_name
  };
};
const unmarshalSnapshotVolumeType = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SnapshotVolumeType' failed as data isn't a dictionary.`
    );
  }
  return {
    class: data.class,
    type: data.type
  };
};
const unmarshalSnapshot = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Snapshot' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    expiresAt: marshalling.unmarshalDate(data.expires_at),
    id: data.id,
    instanceId: data.instance_id,
    instanceName: data.instance_name,
    name: data.name,
    nodeType: data.node_type,
    region: data.region,
    size: data.size,
    status: data.status,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    volumeType: data.volume_type ? unmarshalSnapshotVolumeType(data.volume_type) : void 0
  };
};
const unmarshalUser = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'User' failed as data isn't a dictionary.`
    );
  }
  return {
    isAdmin: data.is_admin,
    name: data.name
  };
};
const unmarshalACLRule = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ACLRule' failed as data isn't a dictionary.`
    );
  }
  return {
    action: data.action,
    description: data.description,
    direction: data.direction,
    ip: data.ip,
    port: data.port,
    protocol: data.protocol
  };
};
const unmarshalAddInstanceACLRulesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'AddInstanceACLRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule)
  };
};
const unmarshalAddInstanceSettingsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'AddInstanceSettingsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    settings: marshalling.unmarshalArrayOfObject(data.settings, unmarshalInstanceSetting)
  };
};
const unmarshalDeleteInstanceACLRulesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DeleteInstanceACLRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule)
  };
};
const unmarshalDeleteInstanceSettingsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DeleteInstanceSettingsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    settings: marshalling.unmarshalArrayOfObject(data.settings, unmarshalInstanceSetting)
  };
};
const unmarshalInstanceMetrics = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'InstanceMetrics' failed as data isn't a dictionary.`
    );
  }
  return {
    timeseries: marshalling.unmarshalArrayOfObject(data.timeseries, customMarshalling.unmarshalTimeSeries)
  };
};
const unmarshalListDatabaseBackupsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDatabaseBackupsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    databaseBackups: marshalling.unmarshalArrayOfObject(
      data.database_backups,
      unmarshalDatabaseBackup
    ),
    totalCount: data.total_count
  };
};
const unmarshalEngineSetting = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EngineSetting' failed as data isn't a dictionary.`
    );
  }
  return {
    defaultValue: data.default_value,
    description: data.description,
    floatMax: data.float_max,
    floatMin: data.float_min,
    hotConfigurable: data.hot_configurable,
    intMax: data.int_max,
    intMin: data.int_min,
    name: data.name,
    propertyType: data.property_type,
    stringConstraint: data.string_constraint,
    unit: data.unit
  };
};
const unmarshalEngineVersion = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EngineVersion' failed as data isn't a dictionary.`
    );
  }
  return {
    availableInitSettings: marshalling.unmarshalArrayOfObject(
      data.available_init_settings,
      unmarshalEngineSetting
    ),
    availableSettings: marshalling.unmarshalArrayOfObject(
      data.available_settings,
      unmarshalEngineSetting
    ),
    beta: data.beta,
    disabled: data.disabled,
    endOfLife: marshalling.unmarshalDate(data.end_of_life),
    name: data.name,
    version: data.version
  };
};
const unmarshalDatabaseEngine = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DatabaseEngine' failed as data isn't a dictionary.`
    );
  }
  return {
    logoUrl: data.logo_url,
    name: data.name,
    region: data.region,
    versions: marshalling.unmarshalArrayOfObject(data.versions, unmarshalEngineVersion)
  };
};
const unmarshalListDatabaseEnginesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDatabaseEnginesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    engines: marshalling.unmarshalArrayOfObject(data.engines, unmarshalDatabaseEngine),
    totalCount: data.total_count
  };
};
const unmarshalListDatabasesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDatabasesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    databases: marshalling.unmarshalArrayOfObject(data.databases, unmarshalDatabase),
    totalCount: data.total_count
  };
};
const unmarshalListInstanceACLRulesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListInstanceACLRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule),
    totalCount: data.total_count
  };
};
const unmarshalListInstanceLogsDetailsResponseInstanceLogDetail = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListInstanceLogsDetailsResponseInstanceLogDetail' failed as data isn't a dictionary.`
    );
  }
  return {
    logName: data.log_name,
    size: data.size
  };
};
const unmarshalListInstanceLogsDetailsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListInstanceLogsDetailsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    details: marshalling.unmarshalArrayOfObject(
      data.details,
      unmarshalListInstanceLogsDetailsResponseInstanceLogDetail
    )
  };
};
const unmarshalListInstanceLogsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListInstanceLogsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    instanceLogs: marshalling.unmarshalArrayOfObject(
      data.instance_logs,
      unmarshalInstanceLog
    )
  };
};
const unmarshalListInstancesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListInstancesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    instances: marshalling.unmarshalArrayOfObject(data.instances, unmarshalInstance),
    totalCount: data.total_count
  };
};
const unmarshalNodeTypeVolumeConstraintSizes = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'NodeTypeVolumeConstraintSizes' failed as data isn't a dictionary.`
    );
  }
  return {
    maxSize: data.max_size,
    minSize: data.min_size
  };
};
const unmarshalNodeTypeVolumeType = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'NodeTypeVolumeType' failed as data isn't a dictionary.`
    );
  }
  return {
    chunkSize: data.chunk_size,
    class: data.class,
    description: data.description,
    maxSize: data.max_size,
    minSize: data.min_size,
    type: data.type
  };
};
const unmarshalNodeType = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'NodeType' failed as data isn't a dictionary.`
    );
  }
  return {
    availableVolumeTypes: marshalling.unmarshalArrayOfObject(
      data.available_volume_types,
      unmarshalNodeTypeVolumeType
    ),
    beta: data.beta,
    description: data.description,
    disabled: data.disabled,
    generation: data.generation,
    instanceRange: data.instance_range,
    isBssdCompatible: data.is_bssd_compatible,
    isHaRequired: data.is_ha_required,
    memory: data.memory,
    name: data.name,
    region: data.region,
    stockStatus: data.stock_status,
    vcpus: data.vcpus,
    volumeConstraint: data.volume_constraint ? unmarshalNodeTypeVolumeConstraintSizes(data.volume_constraint) : void 0
  };
};
const unmarshalListNodeTypesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListNodeTypesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    nodeTypes: marshalling.unmarshalArrayOfObject(data.node_types, unmarshalNodeType),
    totalCount: data.total_count
  };
};
const unmarshalListPrivilegesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListPrivilegesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    privileges: marshalling.unmarshalArrayOfObject(data.privileges, unmarshalPrivilege),
    totalCount: data.total_count
  };
};
const unmarshalListSnapshotsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSnapshotsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    snapshots: marshalling.unmarshalArrayOfObject(data.snapshots, unmarshalSnapshot),
    totalCount: data.total_count
  };
};
const unmarshalListUsersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListUsersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    users: marshalling.unmarshalArrayOfObject(data.users, unmarshalUser)
  };
};
const unmarshalPrepareInstanceLogsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PrepareInstanceLogsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    instanceLogs: marshalling.unmarshalArrayOfObject(
      data.instance_logs,
      unmarshalInstanceLog
    )
  };
};
const unmarshalSetInstanceACLRulesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetInstanceACLRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule)
  };
};
const unmarshalSetInstanceSettingsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetInstanceSettingsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    settings: marshalling.unmarshalArrayOfObject(data.settings, unmarshalInstanceSetting)
  };
};
const marshalACLRuleRequest = (request, defaults) => ({
  description: request.description,
  ip: request.ip
});
const marshalAddInstanceACLRulesRequest = (request, defaults) => ({
  rules: request.rules.map((elt) => marshalACLRuleRequest(elt))
});
const marshalInstanceSetting = (request, defaults) => ({
  name: request.name,
  value: request.value
});
const marshalAddInstanceSettingsRequest = (request, defaults) => ({
  settings: request.settings.map((elt) => marshalInstanceSetting(elt))
});
const marshalCloneInstanceRequest = (request, defaults) => ({
  name: request.name,
  node_type: request.nodeType
});
const marshalCreateDatabaseBackupRequest = (request, defaults) => ({
  database_name: request.databaseName,
  expires_at: request.expiresAt,
  instance_id: request.instanceId,
  name: request.name || randomName("bkp")
});
const marshalCreateDatabaseRequest = (request, defaults) => ({
  name: request.name
});
const marshalEndpointSpecPrivateNetworkIpamConfig = (request, defaults) => ({});
const marshalEndpointSpecLoadBalancer = (request, defaults) => ({});
const marshalEndpointSpecPrivateNetwork = (request, defaults) => ({
  private_network_id: request.privateNetworkId,
  ...marshalling.resolveOneOf([
    { param: "service_ip", value: request.serviceIp },
    {
      param: "ipam_config",
      value: request.ipamConfig !== void 0 ? marshalEndpointSpecPrivateNetworkIpamConfig(
        request.ipamConfig
      ) : void 0
    }
  ])
});
const marshalEndpointSpec = (request, defaults) => ({
  ...marshalling.resolveOneOf([
    {
      param: "load_balancer",
      value: request.loadBalancer !== void 0 ? marshalEndpointSpecLoadBalancer(request.loadBalancer) : void 0
    },
    {
      param: "private_network",
      value: request.privateNetwork !== void 0 ? marshalEndpointSpecPrivateNetwork(request.privateNetwork) : void 0
    }
  ])
});
const marshalCreateEndpointRequest = (request, defaults) => ({
  endpoint_spec: request.endpointSpec !== void 0 ? marshalEndpointSpec(request.endpointSpec) : void 0
});
const marshalCreateInstanceFromSnapshotRequest = (request, defaults) => ({
  instance_name: request.instanceName,
  is_ha_cluster: request.isHaCluster,
  node_type: request.nodeType
});
const marshalEncryptionAtRest = (request, defaults) => ({
  enabled: request.enabled
});
const marshalCreateInstanceRequest = (request, defaults) => ({
  backup_same_region: request.backupSameRegion,
  disable_backup: request.disableBackup,
  encryption: request.encryption !== void 0 ? marshalEncryptionAtRest(request.encryption) : void 0,
  engine: request.engine,
  init_endpoints: request.initEndpoints !== void 0 ? request.initEndpoints.map((elt) => marshalEndpointSpec(elt)) : void 0,
  init_settings: request.initSettings !== void 0 ? request.initSettings.map((elt) => marshalInstanceSetting(elt)) : void 0,
  is_ha_cluster: request.isHaCluster,
  name: request.name || randomName("ins"),
  node_type: request.nodeType,
  password: request.password,
  tags: request.tags,
  user_name: request.userName,
  volume_size: request.volumeSize,
  volume_type: request.volumeType,
  ...marshalling.resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project_id",
      value: request.projectId
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization_id",
      value: request.organizationId
    }
  ])
});
const marshalReadReplicaEndpointSpecPrivateNetworkIpamConfig = (request, defaults) => ({});
const marshalReadReplicaEndpointSpecDirectAccess = (request, defaults) => ({});
const marshalReadReplicaEndpointSpecPrivateNetwork = (request, defaults) => ({
  private_network_id: request.privateNetworkId,
  ...marshalling.resolveOneOf([
    { param: "service_ip", value: request.serviceIp },
    {
      param: "ipam_config",
      value: request.ipamConfig !== void 0 ? marshalReadReplicaEndpointSpecPrivateNetworkIpamConfig(
        request.ipamConfig
      ) : void 0
    }
  ])
});
const marshalReadReplicaEndpointSpec = (request, defaults) => ({
  ...marshalling.resolveOneOf([
    {
      param: "direct_access",
      value: request.directAccess !== void 0 ? marshalReadReplicaEndpointSpecDirectAccess(
        request.directAccess
      ) : void 0
    },
    {
      param: "private_network",
      value: request.privateNetwork !== void 0 ? marshalReadReplicaEndpointSpecPrivateNetwork(
        request.privateNetwork
      ) : void 0
    }
  ])
});
const marshalCreateReadReplicaEndpointRequest = (request, defaults) => ({
  endpoint_spec: request.endpointSpec.map(
    (elt) => marshalReadReplicaEndpointSpec(elt)
  )
});
const marshalCreateReadReplicaRequest = (request, defaults) => ({
  endpoint_spec: request.endpointSpec !== void 0 ? request.endpointSpec.map(
    (elt) => marshalReadReplicaEndpointSpec(elt)
  ) : void 0,
  instance_id: request.instanceId,
  same_zone: request.sameZone
});
const marshalCreateSnapshotRequest = (request, defaults) => ({
  expires_at: request.expiresAt,
  name: request.name || randomName("snp")
});
const marshalCreateUserRequest = (request, defaults) => ({
  is_admin: request.isAdmin,
  name: request.name,
  password: request.password
});
const marshalDeleteInstanceACLRulesRequest = (request, defaults) => ({
  acl_rule_ips: request.aclRuleIps
});
const marshalDeleteInstanceSettingsRequest = (request, defaults) => ({
  setting_names: request.settingNames
});
const marshalMigrateEndpointRequest = (request, defaults) => ({
  instance_id: request.instanceId
});
const marshalPrepareInstanceLogsRequest = (request, defaults) => ({
  end_date: request.endDate,
  start_date: request.startDate
});
const marshalPurgeInstanceLogsRequest = (request, defaults) => ({
  log_name: request.logName
});
const marshalRestoreDatabaseBackupRequest = (request, defaults) => ({
  database_name: request.databaseName,
  instance_id: request.instanceId
});
const marshalSetInstanceACLRulesRequest = (request, defaults) => ({
  rules: request.rules.map((elt) => marshalACLRuleRequest(elt))
});
const marshalSetInstanceSettingsRequest = (request, defaults) => ({
  settings: request.settings.map((elt) => marshalInstanceSetting(elt))
});
const marshalSetPrivilegeRequest = (request, defaults) => ({
  database_name: request.databaseName,
  permission: request.permission,
  user_name: request.userName
});
const marshalUpdateDatabaseBackupRequest = (request, defaults) => ({
  expires_at: request.expiresAt,
  name: request.name
});
const marshalLogsPolicy = (request, defaults) => ({
  max_age_retention: request.maxAgeRetention,
  total_disk_retention: request.totalDiskRetention
});
const marshalUpdateInstanceRequest = (request, defaults) => ({
  backup_same_region: request.backupSameRegion,
  backup_schedule_frequency: request.backupScheduleFrequency,
  backup_schedule_retention: request.backupScheduleRetention,
  backup_schedule_start_hour: request.backupScheduleStartHour,
  is_backup_schedule_disabled: request.isBackupScheduleDisabled,
  logs_policy: request.logsPolicy !== void 0 ? marshalLogsPolicy(request.logsPolicy) : void 0,
  name: request.name,
  tags: request.tags
});
const marshalUpdateSnapshotRequest = (request, defaults) => ({
  expires_at: request.expiresAt,
  name: request.name
});
const marshalUpdateUserRequest = (request, defaults) => ({
  is_admin: request.isAdmin,
  password: request.password
});
const marshalUpgradeInstanceRequestMajorUpgradeWorkflow = (request, defaults) => ({
  upgradable_version_id: request.upgradableVersionId,
  with_endpoints: request.withEndpoints
});
const marshalUpgradeInstanceRequest = (request, defaults) => ({
  ...marshalling.resolveOneOf([
    { param: "node_type", value: request.nodeType },
    { param: "enable_ha", value: request.enableHa },
    { param: "volume_size", value: request.volumeSize },
    { param: "volume_type", value: request.volumeType },
    { param: "upgradable_version_id", value: request.upgradableVersionId },
    {
      param: "major_upgrade_workflow",
      value: request.majorUpgradeWorkflow !== void 0 ? marshalUpgradeInstanceRequestMajorUpgradeWorkflow(
        request.majorUpgradeWorkflow
      ) : void 0
    }
  ])
});
exports.marshalAddInstanceACLRulesRequest = marshalAddInstanceACLRulesRequest;
exports.marshalAddInstanceSettingsRequest = marshalAddInstanceSettingsRequest;
exports.marshalCloneInstanceRequest = marshalCloneInstanceRequest;
exports.marshalCreateDatabaseBackupRequest = marshalCreateDatabaseBackupRequest;
exports.marshalCreateDatabaseRequest = marshalCreateDatabaseRequest;
exports.marshalCreateEndpointRequest = marshalCreateEndpointRequest;
exports.marshalCreateInstanceFromSnapshotRequest = marshalCreateInstanceFromSnapshotRequest;
exports.marshalCreateInstanceRequest = marshalCreateInstanceRequest;
exports.marshalCreateReadReplicaEndpointRequest = marshalCreateReadReplicaEndpointRequest;
exports.marshalCreateReadReplicaRequest = marshalCreateReadReplicaRequest;
exports.marshalCreateSnapshotRequest = marshalCreateSnapshotRequest;
exports.marshalCreateUserRequest = marshalCreateUserRequest;
exports.marshalDeleteInstanceACLRulesRequest = marshalDeleteInstanceACLRulesRequest;
exports.marshalDeleteInstanceSettingsRequest = marshalDeleteInstanceSettingsRequest;
exports.marshalMigrateEndpointRequest = marshalMigrateEndpointRequest;
exports.marshalPrepareInstanceLogsRequest = marshalPrepareInstanceLogsRequest;
exports.marshalPurgeInstanceLogsRequest = marshalPurgeInstanceLogsRequest;
exports.marshalRestoreDatabaseBackupRequest = marshalRestoreDatabaseBackupRequest;
exports.marshalSetInstanceACLRulesRequest = marshalSetInstanceACLRulesRequest;
exports.marshalSetInstanceSettingsRequest = marshalSetInstanceSettingsRequest;
exports.marshalSetPrivilegeRequest = marshalSetPrivilegeRequest;
exports.marshalUpdateDatabaseBackupRequest = marshalUpdateDatabaseBackupRequest;
exports.marshalUpdateInstanceRequest = marshalUpdateInstanceRequest;
exports.marshalUpdateSnapshotRequest = marshalUpdateSnapshotRequest;
exports.marshalUpdateUserRequest = marshalUpdateUserRequest;
exports.marshalUpgradeInstanceRequest = marshalUpgradeInstanceRequest;
exports.unmarshalACLRule = unmarshalACLRule;
exports.unmarshalAddInstanceACLRulesResponse = unmarshalAddInstanceACLRulesResponse;
exports.unmarshalAddInstanceSettingsResponse = unmarshalAddInstanceSettingsResponse;
exports.unmarshalBackupSchedule = unmarshalBackupSchedule;
exports.unmarshalDatabase = unmarshalDatabase;
exports.unmarshalDatabaseBackup = unmarshalDatabaseBackup;
exports.unmarshalDeleteInstanceACLRulesResponse = unmarshalDeleteInstanceACLRulesResponse;
exports.unmarshalDeleteInstanceSettingsResponse = unmarshalDeleteInstanceSettingsResponse;
exports.unmarshalEndpoint = unmarshalEndpoint;
exports.unmarshalInstance = unmarshalInstance;
exports.unmarshalInstanceLog = unmarshalInstanceLog;
exports.unmarshalInstanceMetrics = unmarshalInstanceMetrics;
exports.unmarshalListDatabaseBackupsResponse = unmarshalListDatabaseBackupsResponse;
exports.unmarshalListDatabaseEnginesResponse = unmarshalListDatabaseEnginesResponse;
exports.unmarshalListDatabasesResponse = unmarshalListDatabasesResponse;
exports.unmarshalListInstanceACLRulesResponse = unmarshalListInstanceACLRulesResponse;
exports.unmarshalListInstanceLogsDetailsResponse = unmarshalListInstanceLogsDetailsResponse;
exports.unmarshalListInstanceLogsResponse = unmarshalListInstanceLogsResponse;
exports.unmarshalListInstancesResponse = unmarshalListInstancesResponse;
exports.unmarshalListNodeTypesResponse = unmarshalListNodeTypesResponse;
exports.unmarshalListPrivilegesResponse = unmarshalListPrivilegesResponse;
exports.unmarshalListSnapshotsResponse = unmarshalListSnapshotsResponse;
exports.unmarshalListUsersResponse = unmarshalListUsersResponse;
exports.unmarshalMaintenance = unmarshalMaintenance;
exports.unmarshalPrepareInstanceLogsResponse = unmarshalPrepareInstanceLogsResponse;
exports.unmarshalPrivilege = unmarshalPrivilege;
exports.unmarshalReadReplica = unmarshalReadReplica;
exports.unmarshalSetInstanceACLRulesResponse = unmarshalSetInstanceACLRulesResponse;
exports.unmarshalSetInstanceSettingsResponse = unmarshalSetInstanceSettingsResponse;
exports.unmarshalSnapshot = unmarshalSnapshot;
exports.unmarshalUser = unmarshalUser;


/***/ }),

/***/ 3889:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const UpdateInstanceRequest = {
  backupScheduleStartHour: {
    lessThanOrEqual: 23
  }
};
exports.UpdateInstanceRequest = UpdateInstanceRequest;


/***/ }),

/***/ 3288:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(6015);
exports.v1 = index_gen;


/***/ }),

/***/ 7146:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const content_gen = __nccwpck_require__(8369);
const marshalling_gen = __nccwpck_require__(2579);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available zones of the API. */
  static LOCALITIES = [
    "fr-par-1",
    "fr-par-2",
    "nl-ams-1",
    "nl-ams-2",
    "pl-waw-1",
    "pl-waw-2"
  ];
  /**
   * Create a Redis™ Database Instance. Create a new Redis™ Database Instance
   * (Redis™ cluster). You must set the `zone`, `project_id`, `version`,
   * `node_type`, `user_name` and `password` parameters. Optionally you can
   * define `acl_rules`, `endpoints`, `tls_enabled` and `cluster_settings`.
   *
   * @param request - The request {@link CreateClusterRequest}
   * @returns A Promise of Cluster
   */
  createCluster = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateClusterRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/redis/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/clusters`
    },
    marshalling_gen.unmarshalCluster
  );
  /**
   * Update a Redis™ Database Instance. Update the parameters of a Redis™
   * Database Instance (Redis™ cluster), including `name`, `tags`, `user_name`
   * and `password`.
   *
   * @param request - The request {@link UpdateClusterRequest}
   * @returns A Promise of Cluster
   */
  updateCluster = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateClusterRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/redis/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}`
    },
    marshalling_gen.unmarshalCluster
  );
  /**
   * Get a Redis™ Database Instance. Retrieve information about a Redis™
   * Database Instance (Redis™ cluster). Specify the `cluster_id` and `region`
   * in your request to get information such as `id`, `status`, `version`,
   * `tls_enabled`, `cluster_settings`, `upgradable_versions` and `endpoints`
   * about your cluster in the response.
   *
   * @param request - The request {@link GetClusterRequest}
   * @returns A Promise of Cluster
   */
  getCluster = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/redis/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}`
    },
    marshalling_gen.unmarshalCluster
  );
  /**
   * Waits for {@link Cluster} to be in a final state.
   *
   * @param request - The request {@link GetClusterRequest}
   * @param options - The waiting options
   * @returns A Promise of Cluster
   */
  waitForCluster = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.CLUSTER_TRANSIENT_STATUSES.includes(res.status))),
    this.getCluster,
    request,
    options
  );
  pageOfListClusters = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/redis/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/clusters`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["tags", request.tags],
        ["version", request.version]
      )
    },
    marshalling_gen.unmarshalListClustersResponse
  );
  /**
   * List Redis™ Database Instances. List all Redis™ Database Instances (Redis™
   * cluster) in the specified zone. By default, the Database Instances returned
   * in the list are ordered by creation date in ascending order, though this
   * can be modified via the order_by field. You can define additional
   * parameters for your query, such as `tags`, `name`, `organization_id` and
   * `version`.
   *
   * @param request - The request {@link ListClustersRequest}
   * @returns A Promise of ListClustersResponse
   */
  listClusters = (request = {}) => resourcePaginator.enrichForPagination("clusters", this.pageOfListClusters, request);
  /**
   * Scale up a Redis™ Database Instance. Upgrade your Redis™ Database Instance,
   * either by upgrading to a bigger node type (vertical scaling) or by adding
   * more nodes to your Database Instance to increase your number of endpoints
   * and distribute cache (horizontal scaling, available for clusters only).
   * Note that scaling horizontally your Redis™ Database Instance will not renew
   * its TLS certificate. In order to refresh the TLS certificate, you must use
   * the Renew TLS certificate endpoint.
   *
   * @param request - The request {@link MigrateClusterRequest}
   * @returns A Promise of Cluster
   */
  migrateCluster = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalMigrateClusterRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/redis/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}/migrate`
    },
    marshalling_gen.unmarshalCluster
  );
  /**
   * Delete a Redis™ Database Instance. Delete a Redis™ Database Instance
   * (Redis™ cluster), specified by the `region` and `cluster_id` parameters.
   * Deleting a Database Instance is permanent, and cannot be undone. Note that
   * upon deletion all your data will be lost.
   *
   * @param request - The request {@link DeleteClusterRequest}
   * @returns A Promise of Cluster
   */
  deleteCluster = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/redis/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}`
    },
    marshalling_gen.unmarshalCluster
  );
  /**
   * Get metrics of a Redis™ Database Instance. Retrieve the metrics of a Redis™
   * Database Instance (Redis™ cluster). You can define the period from which to
   * retrieve metrics by specifying the `start_date` and `end_date`.
   *
   * @param request - The request {@link GetClusterMetricsRequest}
   * @returns A Promise of ClusterMetricsResponse
   */
  getClusterMetrics = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/redis/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}/metrics`,
      urlParams: marshalling.urlParams(
        ["end_at", request.endAt],
        ["metric_name", request.metricName],
        ["start_at", request.startAt]
      )
    },
    marshalling_gen.unmarshalClusterMetricsResponse
  );
  pageOfListNodeTypes = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/redis/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/node-types`,
      urlParams: marshalling.urlParams(
        ["include_disabled_types", request.includeDisabledTypes],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListNodeTypesResponse
  );
  /**
   * List available node types. List all available node types. By default, the
   * node types returned in the list are ordered by creation date in ascending
   * order, though this can be modified via the `order_by` field.
   *
   * @param request - The request {@link ListNodeTypesRequest}
   * @returns A Promise of ListNodeTypesResponse
   */
  listNodeTypes = (request) => resourcePaginator.enrichForPagination("nodeTypes", this.pageOfListNodeTypes, request);
  pageOfListClusterVersions = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/redis/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/cluster-versions`,
      urlParams: marshalling.urlParams(
        ["include_beta", request.includeBeta],
        ["include_deprecated", request.includeDeprecated],
        ["include_disabled", request.includeDisabled],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["version", request.version]
      )
    },
    marshalling_gen.unmarshalListClusterVersionsResponse
  );
  /**
   * List available Redis™ versions. List the Redis™ database engine versions
   * available. You can define additional parameters for your query, such as
   * `include_disabled`, `include_beta`, `include_deprecated` and `version`.
   *
   * @param request - The request {@link ListClusterVersionsRequest}
   * @returns A Promise of ListClusterVersionsResponse
   */
  listClusterVersions = (request) => resourcePaginator.enrichForPagination("versions", this.pageOfListClusterVersions, request);
  /**
   * Get the TLS certificate of a cluster. Retrieve information about the TLS
   * certificate of a Redis™ Database Instance (Redis™ cluster). Details like
   * name and content are returned in the response.
   *
   * @param request - The request {@link GetClusterCertificateRequest}
   * @returns A Promise of Blob
   */
  getClusterCertificate = (request) => this.client.fetch({
    method: "GET",
    path: `/redis/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}/certificate`,
    urlParams: marshalling.urlParams(["dl", 1]),
    responseType: "blob"
  });
  /**
   * Renew the TLS certificate of a cluster. Renew a TLS certificate for a
   * Redis™ Database Instance (Redis™ cluster). Renewing a certificate means
   * that you will not be able to connect to your Database Instance using the
   * previous certificate. You will also need to download and update the new
   * certificate for all database clients.
   *
   * @param request - The request {@link RenewClusterCertificateRequest}
   * @returns A Promise of Cluster
   */
  renewClusterCertificate = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/redis/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}/renew-certificate`
    },
    marshalling_gen.unmarshalCluster
  );
  /**
   * Add advanced settings. Add an advanced setting to a Redis™ Database
   * Instance (Redis™ cluster). You must set the `name` and the `value` of each
   * setting.
   *
   * @param request - The request {@link AddClusterSettingsRequest}
   * @returns A Promise of ClusterSettingsResponse
   */
  addClusterSettings = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalAddClusterSettingsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/redis/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}/settings`
    },
    marshalling_gen.unmarshalClusterSettingsResponse
  );
  /**
   * Delete advanced setting. Delete an advanced setting in a Redis™ Database
   * Instance (Redis™ cluster). You must specify the names of the settings you
   * want to delete in the request body.
   *
   * @param request - The request {@link DeleteClusterSettingRequest}
   * @returns A Promise of Cluster
   */
  deleteClusterSetting = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/redis/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}/settings/${marshalling.validatePathParam("settingName", request.settingName)}`
    },
    marshalling_gen.unmarshalCluster
  );
  /**
   * Set advanced settings. Update an advanced setting for a Redis™ Database
   * Instance (Redis™ cluster). Settings added upon database engine
   * initalization can only be defined once, and cannot, therefore, be updated.
   *
   * @param request - The request {@link SetClusterSettingsRequest}
   * @returns A Promise of ClusterSettingsResponse
   */
  setClusterSettings = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetClusterSettingsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/redis/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}/settings`
    },
    marshalling_gen.unmarshalClusterSettingsResponse
  );
  /**
   * Set ACL rules for a cluster. Replace all the ACL rules of a Redis™ Database
   * Instance (Redis™ cluster).
   *
   * @param request - The request {@link SetAclRulesRequest}
   * @returns A Promise of SetAclRulesResponse
   */
  setAclRules = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetAclRulesRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/redis/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}/acls`
    },
    marshalling_gen.unmarshalSetAclRulesResponse
  );
  /**
   * Add ACL rules for a cluster. Add an additional ACL rule to a Redis™
   * Database Instance (Redis™ cluster).
   *
   * @param request - The request {@link AddAclRulesRequest}
   * @returns A Promise of AddAclRulesResponse
   */
  addAclRules = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalAddAclRulesRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/redis/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}/acls`
    },
    marshalling_gen.unmarshalAddAclRulesResponse
  );
  /**
   * Delete an ACL rule for a cluster. Delete an ACL rule of a Redis™ Database
   * Instance (Redis™ cluster). You must specify the `acl_id` of the rule you
   * want to delete in your request.
   *
   * @param request - The request {@link DeleteAclRuleRequest}
   * @returns A Promise of Cluster
   */
  deleteAclRule = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/redis/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/acls/${marshalling.validatePathParam("aclId", request.aclId)}`
    },
    marshalling_gen.unmarshalCluster
  );
  /**
   * Get an ACL rule. Retrieve information about an ACL rule of a Redis™
   * Database Instance (Redis™ cluster). You must specify the `acl_id` of the
   * rule in your request.
   *
   * @param request - The request {@link GetAclRuleRequest}
   * @returns A Promise of ACLRule
   */
  getAclRule = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/redis/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/acls/${marshalling.validatePathParam("aclId", request.aclId)}`
    },
    marshalling_gen.unmarshalACLRule
  );
  /**
   * Set endpoints for a cluster. Update an endpoint for a Redis™ Database
   * Instance (Redis™ cluster). You must specify the `cluster_id` and the
   * `endpoints` parameters in your request.
   *
   * @param request - The request {@link SetEndpointsRequest}
   * @returns A Promise of SetEndpointsResponse
   */
  setEndpoints = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetEndpointsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/redis/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}/endpoints`
    },
    marshalling_gen.unmarshalSetEndpointsResponse
  );
  /**
   * Add endpoints for a cluster. Add a new endpoint for a Redis™ Database
   * Instance (Redis™ cluster). You can add `private_network` or
   * `public_network` specifications to the body of the request.
   *
   * @param request - The request {@link AddEndpointsRequest}
   * @returns A Promise of AddEndpointsResponse
   */
  addEndpoints = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalAddEndpointsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/redis/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam("clusterId", request.clusterId)}/endpoints`
    },
    marshalling_gen.unmarshalAddEndpointsResponse
  );
  /**
   * Delete an endpoint for a cluster. Delete the endpoint of a Redis™ Database
   * Instance (Redis™ cluster). You must specify the `region` and `endpoint_id`
   * parameters of the endpoint you want to delete. Note that might need to
   * update any environment configurations that point to the deleted endpoint.
   *
   * @param request - The request {@link DeleteEndpointRequest}
   * @returns A Promise of Cluster
   */
  deleteEndpoint = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/redis/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/endpoints/${marshalling.validatePathParam("endpointId", request.endpointId)}`
    },
    marshalling_gen.unmarshalCluster
  );
  /**
   * Get an endpoint. Retrieve information about a Redis™ Database Instance
   * (Redis™ cluster) endpoint. Full details about the endpoint, like `ips`,
   * `port`, `private_network` and `public_network` specifications are returned
   * in the response.
   *
   * @param request - The request {@link GetEndpointRequest}
   * @returns A Promise of Endpoint
   */
  getEndpoint = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/redis/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/endpoints/${marshalling.validatePathParam("endpointId", request.endpointId)}`
    },
    marshalling_gen.unmarshalEndpoint
  );
  /**
   * Update an endpoint. Update information about a Redis™ Database Instance
   * (Redis™ cluster) endpoint. Full details about the endpoint, like `ips`,
   * `port`, `private_network` and `public_network` specifications are returned
   * in the response.
   *
   * @param request - The request {@link UpdateEndpointRequest}
   * @returns A Promise of Endpoint
   */
  updateEndpoint = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateEndpointRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/redis/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/endpoints/${marshalling.validatePathParam("endpointId", request.endpointId)}`
    },
    marshalling_gen.unmarshalEndpoint
  );
}
exports.API = API;


/***/ }),

/***/ 8369:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const CLUSTER_TRANSIENT_STATUSES = [
  "provisioning",
  "configuring",
  "deleting",
  "autohealing",
  "initializing"
];
exports.CLUSTER_TRANSIENT_STATUSES = CLUSTER_TRANSIENT_STATUSES;


/***/ }),

/***/ 6015:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(7146);
const content_gen = __nccwpck_require__(8369);
exports.API = api_gen.API;
exports.CLUSTER_TRANSIENT_STATUSES = content_gen.CLUSTER_TRANSIENT_STATUSES;


/***/ }),

/***/ 2579:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const randomName = __nccwpck_require__(8118);
const json = __nccwpck_require__(2362);
const customMarshalling = __nccwpck_require__(5667);
const marshalling = __nccwpck_require__(1502);
const unmarshalACLRule = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ACLRule' failed as data isn't a dictionary.`
    );
  }
  return {
    description: data.description,
    id: data.id,
    ipCidr: data.ip_cidr
  };
};
const unmarshalPrivateNetwork = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PrivateNetwork' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    provisioningMode: data.provisioning_mode,
    serviceIps: data.service_ips,
    zone: data.zone
  };
};
const unmarshalPublicNetwork = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PublicNetwork' failed as data isn't a dictionary.`
    );
  }
  return {};
};
const unmarshalEndpoint = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Endpoint' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    ips: data.ips,
    port: data.port,
    privateNetwork: data.private_network ? unmarshalPrivateNetwork(data.private_network) : void 0,
    publicNetwork: data.public_network ? unmarshalPublicNetwork(data.public_network) : void 0
  };
};
const unmarshalClusterSetting = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ClusterSetting' failed as data isn't a dictionary.`
    );
  }
  return {
    name: data.name,
    value: data.value
  };
};
const unmarshalCluster = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Cluster' failed as data isn't a dictionary.`
    );
  }
  return {
    aclRules: marshalling.unmarshalArrayOfObject(data.acl_rules, unmarshalACLRule),
    clusterSettings: marshalling.unmarshalArrayOfObject(
      data.cluster_settings,
      unmarshalClusterSetting
    ),
    clusterSize: data.cluster_size,
    createdAt: marshalling.unmarshalDate(data.created_at),
    endpoints: marshalling.unmarshalArrayOfObject(data.endpoints, unmarshalEndpoint),
    id: data.id,
    name: data.name,
    nodeType: data.node_type,
    projectId: data.project_id,
    status: data.status,
    tags: data.tags,
    tlsEnabled: data.tls_enabled,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    upgradableVersions: data.upgradable_versions,
    userName: data.user_name,
    version: data.version,
    zone: data.zone
  };
};
const unmarshalAddAclRulesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'AddAclRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    aclRules: marshalling.unmarshalArrayOfObject(data.acl_rules, unmarshalACLRule),
    totalCount: data.total_count
  };
};
const unmarshalAddEndpointsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'AddEndpointsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    endpoints: marshalling.unmarshalArrayOfObject(data.endpoints, unmarshalEndpoint),
    totalCount: data.total_count
  };
};
const unmarshalClusterMetricsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ClusterMetricsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    timeseries: marshalling.unmarshalArrayOfObject(data.timeseries, customMarshalling.unmarshalTimeSeries)
  };
};
const unmarshalClusterSettingsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ClusterSettingsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    settings: marshalling.unmarshalArrayOfObject(data.settings, unmarshalClusterSetting)
  };
};
const unmarshalAvailableClusterSetting = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'AvailableClusterSetting' failed as data isn't a dictionary.`
    );
  }
  return {
    defaultValue: data.default_value,
    deprecated: data.deprecated,
    description: data.description,
    maxValue: data.max_value,
    minValue: data.min_value,
    name: data.name,
    regex: data.regex,
    type: data.type
  };
};
const unmarshalClusterVersion = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ClusterVersion' failed as data isn't a dictionary.`
    );
  }
  return {
    availableSettings: marshalling.unmarshalArrayOfObject(
      data.available_settings,
      unmarshalAvailableClusterSetting
    ),
    endOfLifeAt: marshalling.unmarshalDate(data.end_of_life_at),
    logoUrl: data.logo_url,
    version: data.version,
    zone: data.zone
  };
};
const unmarshalListClusterVersionsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListClusterVersionsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    versions: marshalling.unmarshalArrayOfObject(data.versions, unmarshalClusterVersion)
  };
};
const unmarshalListClustersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListClustersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    clusters: marshalling.unmarshalArrayOfObject(data.clusters, unmarshalCluster),
    totalCount: data.total_count
  };
};
const unmarshalNodeType = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'NodeType' failed as data isn't a dictionary.`
    );
  }
  return {
    beta: data.beta,
    description: data.description,
    disabled: data.disabled,
    memory: data.memory,
    name: data.name,
    stockStatus: data.stock_status,
    vcpus: data.vcpus,
    zone: data.zone
  };
};
const unmarshalListNodeTypesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListNodeTypesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    nodeTypes: marshalling.unmarshalArrayOfObject(data.node_types, unmarshalNodeType),
    totalCount: data.total_count
  };
};
const unmarshalSetAclRulesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetAclRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    aclRules: marshalling.unmarshalArrayOfObject(data.acl_rules, unmarshalACLRule)
  };
};
const unmarshalSetEndpointsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetEndpointsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    endpoints: marshalling.unmarshalArrayOfObject(data.endpoints, unmarshalEndpoint)
  };
};
const marshalACLRuleSpec = (request, defaults) => ({
  description: request.description,
  ip_cidr: request.ipCidr
});
const marshalAddAclRulesRequest = (request, defaults) => ({
  acl_rules: request.aclRules.map((elt) => marshalACLRuleSpec(elt))
});
const marshalClusterSetting = (request, defaults) => ({
  name: request.name,
  value: request.value
});
const marshalAddClusterSettingsRequest = (request, defaults) => ({
  settings: request.settings.map((elt) => marshalClusterSetting(elt))
});
const marshalEndpointSpecPrivateNetworkSpecIpamConfig = (request, defaults) => ({});
const marshalEndpointSpecPrivateNetworkSpec = (request, defaults) => ({
  id: request.id,
  ipam_config: request.ipamConfig !== void 0 ? marshalEndpointSpecPrivateNetworkSpecIpamConfig(
    request.ipamConfig
  ) : void 0,
  service_ips: request.serviceIps
});
const marshalEndpointSpecPublicNetworkSpec = (request, defaults) => ({});
const marshalEndpointSpec = (request, defaults) => ({
  ...marshalling.resolveOneOf([
    {
      param: "private_network",
      value: request.privateNetwork !== void 0 ? marshalEndpointSpecPrivateNetworkSpec(
        request.privateNetwork
      ) : void 0
    },
    {
      param: "public_network",
      value: request.publicNetwork !== void 0 ? marshalEndpointSpecPublicNetworkSpec(
        request.publicNetwork
      ) : void 0
    }
  ])
});
const marshalAddEndpointsRequest = (request, defaults) => ({
  endpoints: request.endpoints.map((elt) => marshalEndpointSpec(elt))
});
const marshalCreateClusterRequest = (request, defaults) => ({
  acl_rules: request.aclRules !== void 0 ? request.aclRules.map((elt) => marshalACLRuleSpec(elt)) : void 0,
  cluster_settings: request.clusterSettings !== void 0 ? request.clusterSettings.map((elt) => marshalClusterSetting(elt)) : void 0,
  cluster_size: request.clusterSize,
  endpoints: request.endpoints !== void 0 ? request.endpoints.map((elt) => marshalEndpointSpec(elt)) : void 0,
  name: request.name || randomName("ins"),
  node_type: request.nodeType,
  password: request.password,
  project_id: request.projectId ?? defaults.defaultProjectId,
  tags: request.tags,
  tls_enabled: request.tlsEnabled,
  user_name: request.userName,
  version: request.version
});
const marshalMigrateClusterRequest = (request, defaults) => ({
  ...marshalling.resolveOneOf([
    { param: "version", value: request.version },
    { param: "node_type", value: request.nodeType },
    { param: "cluster_size", value: request.clusterSize }
  ])
});
const marshalSetAclRulesRequest = (request, defaults) => ({
  acl_rules: request.aclRules.map((elt) => marshalACLRuleSpec(elt))
});
const marshalSetClusterSettingsRequest = (request, defaults) => ({
  settings: request.settings.map((elt) => marshalClusterSetting(elt))
});
const marshalSetEndpointsRequest = (request, defaults) => ({
  endpoints: request.endpoints.map((elt) => marshalEndpointSpec(elt))
});
const marshalUpdateClusterRequest = (request, defaults) => ({
  name: request.name,
  password: request.password,
  tags: request.tags,
  user_name: request.userName
});
const marshalUpdateEndpointRequest = (request, defaults) => ({
  ...marshalling.resolveOneOf([
    {
      param: "private_network",
      value: request.privateNetwork !== void 0 ? marshalEndpointSpecPrivateNetworkSpec(
        request.privateNetwork
      ) : void 0
    },
    {
      param: "public_network",
      value: request.publicNetwork !== void 0 ? marshalEndpointSpecPublicNetworkSpec(
        request.publicNetwork
      ) : void 0
    }
  ])
});
exports.marshalAddAclRulesRequest = marshalAddAclRulesRequest;
exports.marshalAddClusterSettingsRequest = marshalAddClusterSettingsRequest;
exports.marshalAddEndpointsRequest = marshalAddEndpointsRequest;
exports.marshalCreateClusterRequest = marshalCreateClusterRequest;
exports.marshalMigrateClusterRequest = marshalMigrateClusterRequest;
exports.marshalSetAclRulesRequest = marshalSetAclRulesRequest;
exports.marshalSetClusterSettingsRequest = marshalSetClusterSettingsRequest;
exports.marshalSetEndpointsRequest = marshalSetEndpointsRequest;
exports.marshalUpdateClusterRequest = marshalUpdateClusterRequest;
exports.marshalUpdateEndpointRequest = marshalUpdateEndpointRequest;
exports.unmarshalACLRule = unmarshalACLRule;
exports.unmarshalAddAclRulesResponse = unmarshalAddAclRulesResponse;
exports.unmarshalAddEndpointsResponse = unmarshalAddEndpointsResponse;
exports.unmarshalCluster = unmarshalCluster;
exports.unmarshalClusterMetricsResponse = unmarshalClusterMetricsResponse;
exports.unmarshalClusterSettingsResponse = unmarshalClusterSettingsResponse;
exports.unmarshalEndpoint = unmarshalEndpoint;
exports.unmarshalListClusterVersionsResponse = unmarshalListClusterVersionsResponse;
exports.unmarshalListClustersResponse = unmarshalListClustersResponse;
exports.unmarshalListNodeTypesResponse = unmarshalListNodeTypesResponse;
exports.unmarshalSetAclRulesResponse = unmarshalSetAclRulesResponse;
exports.unmarshalSetEndpointsResponse = unmarshalSetEndpointsResponse;


/***/ }),

/***/ 3489:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(2468);
exports.v1 = index_gen;


/***/ }),

/***/ 6808:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const content_gen = __nccwpck_require__(6518);
const marshalling_gen = __nccwpck_require__(2562);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par", "nl-ams", "pl-waw"];
  pageOfListNamespaces = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/registry/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/namespaces`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListNamespacesResponse
  );
  /**
   * List namespaces. List all namespaces in a specified region. By default, the
   * namespaces listed are ordered by creation date in ascending order. This can
   * be modified via the order_by field. You can also define additional
   * parameters for your query, such as the `instance_id` and `project_id`
   * parameters.
   *
   * @param request - The request {@link ListNamespacesRequest}
   * @returns A Promise of ListNamespacesResponse
   */
  listNamespaces = (request = {}) => resourcePaginator.enrichForPagination("namespaces", this.pageOfListNamespaces, request);
  /**
   * Get a namespace. Retrieve information about a given namespace, specified by
   * its `namespace_id` and region. Full details about the namespace, such as
   * `description`, `project_id`, `status`, `endpoint`, `is_public`, `size`, and
   * `image_count` are returned in the response.
   *
   * @param request - The request {@link GetNamespaceRequest}
   * @returns A Promise of Namespace
   */
  getNamespace = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/registry/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/namespaces/${marshalling.validatePathParam("namespaceId", request.namespaceId)}`
    },
    marshalling_gen.unmarshalNamespace
  );
  /**
   * Waits for {@link Namespace} to be in a final state.
   *
   * @param request - The request {@link GetNamespaceRequest}
   * @param options - The waiting options
   * @returns A Promise of Namespace
   */
  waitForNamespace = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.NAMESPACE_TRANSIENT_STATUSES.includes(res.status))),
    this.getNamespace,
    request,
    options
  );
  /**
   * Create a namespace. Create a new Container Registry namespace. You must
   * specify the namespace name and region in which you want it to be created.
   * Optionally, you can specify the `project_id` and `is_public` in the request
   * payload.
   *
   * @param request - The request {@link CreateNamespaceRequest}
   * @returns A Promise of Namespace
   */
  createNamespace = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateNamespaceRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/registry/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/namespaces`
    },
    marshalling_gen.unmarshalNamespace
  );
  /**
   * Update a namespace. Update the parameters of a given namespace, specified
   * by its `namespace_id` and `region`. You can update the `description` and
   * `is_public` parameters.
   *
   * @param request - The request {@link UpdateNamespaceRequest}
   * @returns A Promise of Namespace
   */
  updateNamespace = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateNamespaceRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/registry/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/namespaces/${marshalling.validatePathParam("namespaceId", request.namespaceId)}`
    },
    marshalling_gen.unmarshalNamespace
  );
  /**
   * Delete a namespace. Delete a given namespace. You must specify, in the
   * endpoint, the `region` and `namespace_id` parameters of the namespace you
   * want to delete.
   *
   * @param request - The request {@link DeleteNamespaceRequest}
   * @returns A Promise of Namespace
   */
  deleteNamespace = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/registry/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/namespaces/${marshalling.validatePathParam("namespaceId", request.namespaceId)}`
    },
    marshalling_gen.unmarshalNamespace
  );
  pageOfListImages = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/registry/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/images`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["namespace_id", request.namespaceId],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListImagesResponse
  );
  /**
   * List images. List all images in a specified region. By default, the images
   * listed are ordered by creation date in ascending order. This can be
   * modified via the order_by field. You can also define additional parameters
   * for your query, such as the `namespace_id` and `project_id` parameters.
   *
   * @param request - The request {@link ListImagesRequest}
   * @returns A Promise of ListImagesResponse
   */
  listImages = (request = {}) => resourcePaginator.enrichForPagination("images", this.pageOfListImages, request);
  /**
   * Get an image. Retrieve information about a given container image, specified
   * by its `image_id` and region. Full details about the image, such as `name`,
   * `namespace_id`, `status`, `visibility`, and `size` are returned in the
   * response.
   *
   * @param request - The request {@link GetImageRequest}
   * @returns A Promise of Image
   */
  getImage = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/registry/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/images/${marshalling.validatePathParam("imageId", request.imageId)}`
    },
    marshalling_gen.unmarshalImage
  );
  /**
   * Waits for {@link Image} to be in a final state.
   *
   * @param request - The request {@link GetImageRequest}
   * @param options - The waiting options
   * @returns A Promise of Image
   */
  waitForImage = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.IMAGE_TRANSIENT_STATUSES.includes(res.status))),
    this.getImage,
    request,
    options
  );
  /**
   * Update an image. Update the parameters of a given image, specified by its
   * `image_id` and `region`. You can update the `visibility` parameter.
   *
   * @param request - The request {@link UpdateImageRequest}
   * @returns A Promise of Image
   */
  updateImage = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateImageRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/registry/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/images/${marshalling.validatePathParam("imageId", request.imageId)}`
    },
    marshalling_gen.unmarshalImage
  );
  /**
   * Delete an image. Delete a given image. You must specify, in the endpoint,
   * the `region` and `image_id` parameters of the image you want to delete.
   *
   * @param request - The request {@link DeleteImageRequest}
   * @returns A Promise of Image
   */
  deleteImage = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/registry/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/images/${marshalling.validatePathParam("imageId", request.imageId)}`
    },
    marshalling_gen.unmarshalImage
  );
  pageOfListTags = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/registry/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/images/${marshalling.validatePathParam("imageId", request.imageId)}/tags`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListTagsResponse
  );
  /**
   * List tags. List all tags for a given image, specified by region. By
   * default, the tags listed are ordered by creation date in ascending order.
   * This can be modified via the order_by field. You can also define additional
   * parameters for your query, such as the `name`.
   *
   * @param request - The request {@link ListTagsRequest}
   * @returns A Promise of ListTagsResponse
   */
  listTags = (request) => resourcePaginator.enrichForPagination("tags", this.pageOfListTags, request);
  /**
   * Get a tag. Retrieve information about a given image tag, specified by its
   * `tag_id` and region. Full details about the tag, such as `name`,
   * `image_id`, `status`, and `digest` are returned in the response.
   *
   * @param request - The request {@link GetTagRequest}
   * @returns A Promise of Tag
   */
  getTag = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/registry/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/tags/${marshalling.validatePathParam("tagId", request.tagId)}`
    },
    marshalling_gen.unmarshalTag
  );
  /**
   * Waits for {@link Tag} to be in a final state.
   *
   * @param request - The request {@link GetTagRequest}
   * @param options - The waiting options
   * @returns A Promise of Tag
   */
  waitForTag = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.TAG_TRANSIENT_STATUSES.includes(res.status))),
    this.getTag,
    request,
    options
  );
  /**
   * Delete a tag. Delete a given image tag. You must specify, in the endpoint,
   * the `region` and `tag_id` parameters of the tag you want to delete.
   *
   * @param request - The request {@link DeleteTagRequest}
   * @returns A Promise of Tag
   */
  deleteTag = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/registry/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/tags/${marshalling.validatePathParam("tagId", request.tagId)}`,
      urlParams: marshalling.urlParams(["force", request.force])
    },
    marshalling_gen.unmarshalTag
  );
}
exports.API = API;


/***/ }),

/***/ 6518:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const IMAGE_TRANSIENT_STATUSES = ["deleting"];
const NAMESPACE_TRANSIENT_STATUSES = ["deleting"];
const TAG_TRANSIENT_STATUSES = ["deleting"];
exports.IMAGE_TRANSIENT_STATUSES = IMAGE_TRANSIENT_STATUSES;
exports.NAMESPACE_TRANSIENT_STATUSES = NAMESPACE_TRANSIENT_STATUSES;
exports.TAG_TRANSIENT_STATUSES = TAG_TRANSIENT_STATUSES;


/***/ }),

/***/ 2468:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(6808);
const content_gen = __nccwpck_require__(6518);
exports.API = api_gen.API;
exports.IMAGE_TRANSIENT_STATUSES = content_gen.IMAGE_TRANSIENT_STATUSES;
exports.NAMESPACE_TRANSIENT_STATUSES = content_gen.NAMESPACE_TRANSIENT_STATUSES;
exports.TAG_TRANSIENT_STATUSES = content_gen.TAG_TRANSIENT_STATUSES;


/***/ }),

/***/ 2562:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const randomName = __nccwpck_require__(8118);
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalImage = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Image' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    name: data.name,
    namespaceId: data.namespace_id,
    size: data.size,
    status: data.status,
    statusMessage: data.status_message,
    tags: data.tags,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    visibility: data.visibility
  };
};
const unmarshalNamespace = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Namespace' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    description: data.description,
    endpoint: data.endpoint,
    id: data.id,
    imageCount: data.image_count,
    isPublic: data.is_public,
    name: data.name,
    organizationId: data.organization_id,
    projectId: data.project_id,
    region: data.region,
    size: data.size,
    status: data.status,
    statusMessage: data.status_message,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalTag = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Tag' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    digest: data.digest,
    id: data.id,
    imageId: data.image_id,
    name: data.name,
    status: data.status,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalListImagesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListImagesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    images: marshalling.unmarshalArrayOfObject(data.images, unmarshalImage),
    totalCount: data.total_count
  };
};
const unmarshalListNamespacesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListNamespacesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    namespaces: marshalling.unmarshalArrayOfObject(data.namespaces, unmarshalNamespace),
    totalCount: data.total_count
  };
};
const unmarshalListTagsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListTagsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    tags: marshalling.unmarshalArrayOfObject(data.tags, unmarshalTag),
    totalCount: data.total_count
  };
};
const marshalCreateNamespaceRequest = (request, defaults) => ({
  description: request.description,
  is_public: request.isPublic,
  name: request.name || randomName("ns"),
  ...marshalling.resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project_id",
      value: request.projectId
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization_id",
      value: request.organizationId
    }
  ])
});
const marshalUpdateImageRequest = (request, defaults) => ({
  visibility: request.visibility
});
const marshalUpdateNamespaceRequest = (request, defaults) => ({
  description: request.description,
  is_public: request.isPublic
});
exports.marshalCreateNamespaceRequest = marshalCreateNamespaceRequest;
exports.marshalUpdateImageRequest = marshalUpdateImageRequest;
exports.marshalUpdateNamespaceRequest = marshalUpdateNamespaceRequest;
exports.unmarshalImage = unmarshalImage;
exports.unmarshalListImagesResponse = unmarshalListImagesResponse;
exports.unmarshalListNamespacesResponse = unmarshalListNamespacesResponse;
exports.unmarshalListTagsResponse = unmarshalListTagsResponse;
exports.unmarshalNamespace = unmarshalNamespace;
exports.unmarshalTag = unmarshalTag;


/***/ }),

/***/ 1598:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(6499);
const index_gen$1 = __nccwpck_require__(2088);
exports.v1alpha1 = index_gen;
exports.v1beta1 = index_gen$1;


/***/ }),

/***/ 6891:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const marshalling_gen = __nccwpck_require__(4787);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par", "nl-ams", "pl-waw"];
  /**
   * Create a secret. You must specify the `region` to create a secret.
   *
   * @param request - The request {@link CreateSecretRequest}
   * @returns A Promise of Secret
   */
  createSecret = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateSecretRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets`
    },
    marshalling_gen.unmarshalSecret
  );
  /**
   * Create folder.
   *
   * @param request - The request {@link CreateFolderRequest}
   * @returns A Promise of Folder
   */
  createFolder = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateFolderRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/folders`
    },
    marshalling_gen.unmarshalFolder
  );
  /**
   * Get metadata using the secret's ID. Retrieve the metadata of a secret
   * specified by the `region` and `secret_id` parameters.
   *
   * @param request - The request {@link GetSecretRequest}
   * @returns A Promise of Secret
   */
  getSecret = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}`
    },
    marshalling_gen.unmarshalSecret
  );
  /**
   * Get metadata using the secret's name. Retrieve the metadata of a secret
   * specified by the `region` and `secret_name` parameters.
   *
   * GetSecretByName usage is now deprecated.
   *
   * Scaleway recommends that you use the `ListSecrets` request with the `name`
   * filter.
   *
   * @deprecated
   * @param request - The request {@link GetSecretByNameRequest}
   * @returns A Promise of Secret
   */
  getSecretByName = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets-by-name/${marshalling.validatePathParam("secretName", request.secretName)}`,
      urlParams: marshalling.urlParams(["project_id", request.projectId])
    },
    marshalling_gen.unmarshalSecret
  );
  /**
   * Update metadata of a secret. Edit a secret's metadata such as name, tag(s),
   * description and ephemeral policy. The secret to update is specified by the
   * `secret_id` and `region` parameters.
   *
   * @param request - The request {@link UpdateSecretRequest}
   * @returns A Promise of Secret
   */
  updateSecret = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateSecretRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}`
    },
    marshalling_gen.unmarshalSecret
  );
  pageOfListSecrets = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets`,
      urlParams: marshalling.urlParams(
        ["is_ephemeral", request.isEphemeral],
        ["is_managed", request.isManaged],
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["path", request.path],
        ["project_id", request.projectId],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListSecretsResponse
  );
  /**
   * List secrets. Retrieve the list of secrets created within an Organization
   * and/or Project. You must specify either the `organization_id` or the
   * `project_id` and the `region`.
   *
   * @param request - The request {@link ListSecretsRequest}
   * @returns A Promise of ListSecretsResponse
   */
  listSecrets = (request = {}) => resourcePaginator.enrichForPagination("secrets", this.pageOfListSecrets, request);
  pageOfListFolders = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/folders`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["path", request.path],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListFoldersResponse
  );
  /**
   * List folders. Retrieve the list of folders created within a Project.
   *
   * @param request - The request {@link ListFoldersRequest}
   * @returns A Promise of ListFoldersResponse
   */
  listFolders = (request = {}) => resourcePaginator.enrichForPagination("folders", this.pageOfListFolders, request);
  /**
   * Delete a secret. Delete a given secret specified by the `region` and
   * `secret_id` parameters.
   *
   * @param request - The request {@link DeleteSecretRequest}
   */
  deleteSecret = (request) => this.client.fetch({
    method: "DELETE",
    path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}`
  });
  /**
   * Delete a given folder specified by the `region` and `folder_id` parameters.
   *
   * @param request - The request {@link DeleteFolderRequest}
   */
  deleteFolder = (request) => this.client.fetch({
    method: "DELETE",
    path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/folders/${marshalling.validatePathParam("folderId", request.folderId)}`
  });
  /**
   * Protect a secret. Protect a given secret specified by the `secret_id`
   * parameter. A protected secret can be read and modified but cannot be
   * deleted.
   *
   * @param request - The request {@link ProtectSecretRequest}
   * @returns A Promise of Secret
   */
  protectSecret = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}/protect`
    },
    marshalling_gen.unmarshalSecret
  );
  /**
   * Unprotect a secret. Unprotect a given secret specified by the `secret_id`
   * parameter. An unprotected secret can be read, modified and deleted.
   *
   * @param request - The request {@link UnprotectSecretRequest}
   * @returns A Promise of Secret
   */
  unprotectSecret = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}/unprotect`
    },
    marshalling_gen.unmarshalSecret
  );
  /**
   * Allow a product to use the secret.
   *
   * @param request - The request {@link AddSecretOwnerRequest}
   */
  addSecretOwner = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalAddSecretOwnerRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}/add-owner`
  });
  /**
   * Create a version. Create a version of a given secret specified by the
   * `region` and `secret_id` parameters.
   *
   * @param request - The request {@link CreateSecretVersionRequest}
   * @returns A Promise of SecretVersion
   */
  createSecretVersion = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateSecretVersionRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}/versions`
    },
    marshalling_gen.unmarshalSecretVersion
  );
  /**
   * Generate a password in a new version. Generate a password for the given
   * secret specified by the `region` and `secret_id` parameters. This will also
   * create a new version of the secret that will store the password.
   *
   * @param request - The request {@link GeneratePasswordRequest}
   * @returns A Promise of SecretVersion
   */
  generatePassword = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalGeneratePasswordRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}/generate-password`
    },
    marshalling_gen.unmarshalSecretVersion
  );
  /**
   * Get metadata of a secret's version using the secret's ID. Retrieve the
   * metadata of a secret's given version specified by the `region`, `secret_id`
   * and `revision` parameters.
   *
   * @param request - The request {@link GetSecretVersionRequest}
   * @returns A Promise of SecretVersion
   */
  getSecretVersion = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}/versions/${marshalling.validatePathParam("revision", request.revision)}`
    },
    marshalling_gen.unmarshalSecretVersion
  );
  /**
   * Get metadata of a secret's version using the secret's name. Retrieve the
   * metadata of a secret's given version specified by the `region`,
   * `secret_name`, `revision` and `project_id` parameters.
   *
   * This method is deprecated.
   *
   * Scaleway recommends that you use the `ListSecrets` request with the `name`
   * filter to specify the secret version desired, then use the
   * `GetSecretVersion` request.
   *
   * @deprecated
   * @param request - The request {@link GetSecretVersionByNameRequest}
   * @returns A Promise of SecretVersion
   */
  getSecretVersionByName = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets-by-name/${marshalling.validatePathParam("secretName", request.secretName)}/versions/${marshalling.validatePathParam("revision", request.revision)}`,
      urlParams: marshalling.urlParams(["project_id", request.projectId])
    },
    marshalling_gen.unmarshalSecretVersion
  );
  /**
   * Update metadata of a version. Edit the metadata of a secret's given
   * version, specified by the `region`, `secret_id` and `revision` parameters.
   *
   * @param request - The request {@link UpdateSecretVersionRequest}
   * @returns A Promise of SecretVersion
   */
  updateSecretVersion = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateSecretVersionRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}/versions/${marshalling.validatePathParam("revision", request.revision)}`
    },
    marshalling_gen.unmarshalSecretVersion
  );
  pageOfListSecretVersions = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}/versions`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["status", request.status]
      )
    },
    marshalling_gen.unmarshalListSecretVersionsResponse
  );
  /**
   * List versions of a secret using the secret's ID. Retrieve the list of a
   * given secret's versions specified by the `secret_id` and `region`
   * parameters.
   *
   * @param request - The request {@link ListSecretVersionsRequest}
   * @returns A Promise of ListSecretVersionsResponse
   */
  listSecretVersions = (request) => resourcePaginator.enrichForPagination("versions", this.pageOfListSecretVersions, request);
  pageOfListSecretVersionsByName = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets-by-name/${marshalling.validatePathParam("secretName", request.secretName)}/versions`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["status", request.status]
      )
    },
    marshalling_gen.unmarshalListSecretVersionsResponse
  );
  /**
   * List versions of a secret using the secret's name. Retrieve the list of a
   * given secret's versions specified by the `secret_name`,`region` and
   * `project_id` parameters.
   *
   * This method is deprecated.
   *
   * Scaleway recommends that you use the `ListSecrets` request with the `name`
   * filter to specify the secret version desired, then use the
   * `ListSecretVersions` request.
   *
   * @deprecated
   * @param request - The request {@link ListSecretVersionsByNameRequest}
   * @returns A Promise of ListSecretVersionsResponse
   */
  listSecretVersionsByName = (request) => resourcePaginator.enrichForPagination(
    "versions",
    this.pageOfListSecretVersionsByName,
    request
  );
  /**
   * Enable a version. Make a specific version accessible. You must specify the
   * `region`, `secret_id` and `revision` parameters.
   *
   * @param request - The request {@link EnableSecretVersionRequest}
   * @returns A Promise of SecretVersion
   */
  enableSecretVersion = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}/versions/${marshalling.validatePathParam("revision", request.revision)}/enable`
    },
    marshalling_gen.unmarshalSecretVersion
  );
  /**
   * Disable a version. Make a specific version inaccessible. You must specify
   * the `region`, `secret_id` and `revision` parameters.
   *
   * @param request - The request {@link DisableSecretVersionRequest}
   * @returns A Promise of SecretVersion
   */
  disableSecretVersion = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}/versions/${marshalling.validatePathParam("revision", request.revision)}/disable`
    },
    marshalling_gen.unmarshalSecretVersion
  );
  /**
   * Access a secret's version using the secret's ID. Access sensitive data in a
   * secret's version specified by the `region`, `secret_id` and `revision`
   * parameters.
   *
   * @param request - The request {@link AccessSecretVersionRequest}
   * @returns A Promise of AccessSecretVersionResponse
   */
  accessSecretVersion = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}/versions/${marshalling.validatePathParam("revision", request.revision)}/access`
    },
    marshalling_gen.unmarshalAccessSecretVersionResponse
  );
  /**
   * Access a secret's version using the secret's name. Access sensitive data in
   * a secret's version specified by the `region`, `secret_name`, `revision` and
   * `project_id` parameters.
   *
   * This method is deprecated.
   *
   * Scaleway recommends that you use the `ListSecrets` request with the `name`
   * filter to specify the secret version desired, then use the
   * `AccessSecretVersion` request.
   *
   * @deprecated
   * @param request - The request {@link AccessSecretVersionByNameRequest}
   * @returns A Promise of AccessSecretVersionResponse
   */
  accessSecretVersionByName = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets-by-name/${marshalling.validatePathParam("secretName", request.secretName)}/versions/${marshalling.validatePathParam("revision", request.revision)}/access`,
      urlParams: marshalling.urlParams(["project_id", request.projectId])
    },
    marshalling_gen.unmarshalAccessSecretVersionResponse
  );
  /**
   * Delete a version. Delete a secret's version and the sensitive data
   * contained in it. Deleting a version is permanent and cannot be undone.
   *
   * @param request - The request {@link DestroySecretVersionRequest}
   * @returns A Promise of SecretVersion
   */
  destroySecretVersion = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}/versions/${marshalling.validatePathParam("revision", request.revision)}/destroy`
    },
    marshalling_gen.unmarshalSecretVersion
  );
  pageOfListTags = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/tags`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListTagsResponse
  );
  /**
   * List tags. List all tags associated with secrets within a given Project.
   *
   * @param request - The request {@link ListTagsRequest}
   * @returns A Promise of ListTagsResponse
   */
  listTags = (request = {}) => resourcePaginator.enrichForPagination("tags", this.pageOfListTags, request);
}
exports.API = API;


/***/ }),

/***/ 6499:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(6891);
exports.API = api_gen.API;


/***/ }),

/***/ 4787:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalFolder = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Folder' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    name: data.name,
    path: data.path,
    projectId: data.project_id,
    region: data.region
  };
};
const unmarshalEphemeralProperties = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EphemeralProperties' failed as data isn't a dictionary.`
    );
  }
  return {
    action: data.action,
    expiresAt: marshalling.unmarshalDate(data.expires_at),
    expiresOnceAccessed: data.expires_once_accessed
  };
};
const unmarshalSecretVersion = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SecretVersion' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    description: data.description,
    ephemeralProperties: data.ephemeral_properties ? unmarshalEphemeralProperties(data.ephemeral_properties) : void 0,
    isLatest: data.is_latest,
    revision: data.revision,
    secretId: data.secret_id,
    status: data.status,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalEphemeralPolicy = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EphemeralPolicy' failed as data isn't a dictionary.`
    );
  }
  return {
    action: data.action,
    expiresOnceAccessed: data.expires_once_accessed,
    timeToLive: data.time_to_live
  };
};
const unmarshalSecret = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Secret' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    description: data.description,
    ephemeralPolicy: data.ephemeral_policy ? unmarshalEphemeralPolicy(data.ephemeral_policy) : void 0,
    id: data.id,
    isManaged: data.is_managed,
    isProtected: data.is_protected,
    name: data.name,
    path: data.path,
    projectId: data.project_id,
    region: data.region,
    status: data.status,
    tags: data.tags,
    type: data.type,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    versionCount: data.version_count
  };
};
const unmarshalAccessSecretVersionResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'AccessSecretVersionResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    data: data.data,
    dataCrc32: data.data_crc32,
    revision: data.revision,
    secretId: data.secret_id
  };
};
const unmarshalListFoldersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListFoldersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    folders: marshalling.unmarshalArrayOfObject(data.folders, unmarshalFolder),
    totalCount: data.total_count
  };
};
const unmarshalListSecretVersionsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSecretVersionsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    versions: marshalling.unmarshalArrayOfObject(data.versions, unmarshalSecretVersion)
  };
};
const unmarshalListSecretsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSecretsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    secrets: marshalling.unmarshalArrayOfObject(data.secrets, unmarshalSecret),
    totalCount: data.total_count
  };
};
const unmarshalListTagsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListTagsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    tags: data.tags,
    totalCount: data.total_count
  };
};
const marshalAddSecretOwnerRequest = (request, defaults) => ({
  product: request.product,
  product_name: request.productName
});
const marshalCreateFolderRequest = (request, defaults) => ({
  name: request.name,
  path: request.path,
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalEphemeralPolicy = (request, defaults) => ({
  action: request.action,
  expires_once_accessed: request.expiresOnceAccessed,
  time_to_live: request.timeToLive
});
const marshalCreateSecretRequest = (request, defaults) => ({
  description: request.description,
  ephemeral_policy: request.ephemeralPolicy !== void 0 ? marshalEphemeralPolicy(request.ephemeralPolicy) : void 0,
  is_protected: request.isProtected,
  name: request.name,
  path: request.path,
  project_id: request.projectId ?? defaults.defaultProjectId,
  tags: request.tags,
  type: request.type
});
const marshalPasswordGenerationParams = (request, defaults) => ({
  additional_chars: request.additionalChars,
  length: request.length,
  no_digits: request.noDigits,
  no_lowercase_letters: request.noLowercaseLetters,
  no_uppercase_letters: request.noUppercaseLetters
});
const marshalCreateSecretVersionRequest = (request, defaults) => ({
  data: request.data,
  data_crc32: request.dataCrc32,
  description: request.description,
  disable_previous: request.disablePrevious,
  password_generation: request.passwordGeneration !== void 0 ? marshalPasswordGenerationParams(request.passwordGeneration) : void 0
});
const marshalGeneratePasswordRequest = (request, defaults) => ({
  additional_chars: request.additionalChars,
  description: request.description,
  disable_previous: request.disablePrevious,
  length: request.length,
  no_digits: request.noDigits,
  no_lowercase_letters: request.noLowercaseLetters,
  no_uppercase_letters: request.noUppercaseLetters
});
const marshalUpdateSecretRequest = (request, defaults) => ({
  description: request.description,
  ephemeral_policy: request.ephemeralPolicy !== void 0 ? marshalEphemeralPolicy(request.ephemeralPolicy) : void 0,
  name: request.name,
  path: request.path,
  tags: request.tags
});
const marshalEphemeralProperties = (request, defaults) => ({
  action: request.action,
  expires_at: request.expiresAt,
  expires_once_accessed: request.expiresOnceAccessed
});
const marshalUpdateSecretVersionRequest = (request, defaults) => ({
  description: request.description,
  ephemeral_properties: request.ephemeralProperties !== void 0 ? marshalEphemeralProperties(request.ephemeralProperties) : void 0
});
exports.marshalAddSecretOwnerRequest = marshalAddSecretOwnerRequest;
exports.marshalCreateFolderRequest = marshalCreateFolderRequest;
exports.marshalCreateSecretRequest = marshalCreateSecretRequest;
exports.marshalCreateSecretVersionRequest = marshalCreateSecretVersionRequest;
exports.marshalEphemeralPolicy = marshalEphemeralPolicy;
exports.marshalGeneratePasswordRequest = marshalGeneratePasswordRequest;
exports.marshalUpdateSecretRequest = marshalUpdateSecretRequest;
exports.marshalUpdateSecretVersionRequest = marshalUpdateSecretVersionRequest;
exports.unmarshalAccessSecretVersionResponse = unmarshalAccessSecretVersionResponse;
exports.unmarshalEphemeralPolicy = unmarshalEphemeralPolicy;
exports.unmarshalFolder = unmarshalFolder;
exports.unmarshalListFoldersResponse = unmarshalListFoldersResponse;
exports.unmarshalListSecretVersionsResponse = unmarshalListSecretVersionsResponse;
exports.unmarshalListSecretsResponse = unmarshalListSecretsResponse;
exports.unmarshalListTagsResponse = unmarshalListTagsResponse;
exports.unmarshalSecret = unmarshalSecret;
exports.unmarshalSecretVersion = unmarshalSecretVersion;


/***/ }),

/***/ 2125:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const marshalling_gen = __nccwpck_require__(2609);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par", "nl-ams", "pl-waw"];
  /**
   * Create a secret. Create a secret in a given region specified by the
   * `region` parameter.
   *
   * @param request - The request {@link CreateSecretRequest}
   * @returns A Promise of Secret
   */
  createSecret = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateSecretRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets`
    },
    marshalling_gen.unmarshalSecret
  );
  /**
   * Get metadata using the secret's ID. Retrieve the metadata of a secret
   * specified by the `region` and `secret_id` parameters.
   *
   * @param request - The request {@link GetSecretRequest}
   * @returns A Promise of Secret
   */
  getSecret = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}`
    },
    marshalling_gen.unmarshalSecret
  );
  /**
   * Update metadata of a secret. Edit a secret's metadata such as name, tag(s),
   * description and ephemeral policy. The secret to update is specified by the
   * `secret_id` and `region` parameters.
   *
   * @param request - The request {@link UpdateSecretRequest}
   * @returns A Promise of Secret
   */
  updateSecret = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateSecretRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}`
    },
    marshalling_gen.unmarshalSecret
  );
  /**
   * Delete a secret. Delete a given secret specified by the `region` and
   * `secret_id` parameters.
   *
   * @param request - The request {@link DeleteSecretRequest}
   */
  deleteSecret = (request) => this.client.fetch({
    method: "DELETE",
    path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}`
  });
  pageOfListSecrets = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets`,
      urlParams: marshalling.urlParams(
        ["ephemeral", request.ephemeral],
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["path", request.path],
        ["project_id", request.projectId],
        ["tags", request.tags],
        ["type", request.type]
      )
    },
    marshalling_gen.unmarshalListSecretsResponse
  );
  /**
   * List secrets. Retrieve the list of secrets created within an Organization
   * and/or Project. You must specify either the `organization_id` or the
   * `project_id` and the `region`.
   *
   * @param request - The request {@link ListSecretsRequest}
   * @returns A Promise of ListSecretsResponse
   */
  listSecrets = (request = {}) => resourcePaginator.enrichForPagination("secrets", this.pageOfListSecrets, request);
  /**
   * Browse secrets. Retrieve the list of secrets and folders for the given
   * prefix. You must specify either the `organization_id` or the `project_id`
   * and the `region`.
   *
   * @param request - The request {@link BrowseSecretsRequest}
   * @returns A Promise of BrowseSecretsResponse
   */
  browseSecrets = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/browse`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["prefix", request.prefix],
        ["project_id", request.projectId],
        ["tags", request.tags],
        ["type", request.type]
      )
    },
    marshalling_gen.unmarshalBrowseSecretsResponse
  );
  /**
   * Enable secret protection. Enable secret protection for a given secret
   * specified by the `secret_id` parameter. Enabling secret protection means
   * that your secret can be read and modified, but it cannot be deleted.
   *
   * @param request - The request {@link ProtectSecretRequest}
   * @returns A Promise of Secret
   */
  protectSecret = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}/protect`
    },
    marshalling_gen.unmarshalSecret
  );
  /**
   * Disable secret protection. Disable secret protection for a given secret
   * specified by the `secret_id` parameter. Disabling secret protection means
   * that your secret can be read, modified and deleted.
   *
   * @param request - The request {@link UnprotectSecretRequest}
   * @returns A Promise of Secret
   */
  unprotectSecret = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}/unprotect`
    },
    marshalling_gen.unmarshalSecret
  );
  /**
   * Allow a product to use the secret.
   *
   * @param request - The request {@link AddSecretOwnerRequest}
   */
  addSecretOwner = (request) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalAddSecretOwnerRequest(request, this.client.settings)
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}/add-owner`
  });
  /**
   * Create a version. Create a version of a given secret specified by the
   * `region` and `secret_id` parameters.
   *
   * @param request - The request {@link CreateSecretVersionRequest}
   * @returns A Promise of SecretVersion
   */
  createSecretVersion = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateSecretVersionRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}/versions`
    },
    marshalling_gen.unmarshalSecretVersion
  );
  /**
   * Get metadata of a secret's version using the secret's ID. Retrieve the
   * metadata of a secret's given version specified by the `region`, `secret_id`
   * and `revision` parameters.
   *
   * @param request - The request {@link GetSecretVersionRequest}
   * @returns A Promise of SecretVersion
   */
  getSecretVersion = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}/versions/${marshalling.validatePathParam("revision", request.revision)}`
    },
    marshalling_gen.unmarshalSecretVersion
  );
  /**
   * Update metadata of a version. Edit the metadata of a secret's given
   * version, specified by the `region`, `secret_id` and `revision` parameters.
   *
   * @param request - The request {@link UpdateSecretVersionRequest}
   * @returns A Promise of SecretVersion
   */
  updateSecretVersion = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateSecretVersionRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}/versions/${marshalling.validatePathParam("revision", request.revision)}`
    },
    marshalling_gen.unmarshalSecretVersion
  );
  /**
   * Delete a version. Delete a secret's version and the sensitive data
   * contained in it. Deleting a version is permanent and cannot be undone.
   *
   * @param request - The request {@link DeleteSecretVersionRequest}
   */
  deleteSecretVersion = (request) => this.client.fetch({
    method: "DELETE",
    path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}/versions/${marshalling.validatePathParam("revision", request.revision)}`
  });
  pageOfListSecretVersions = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}/versions`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["status", request.status]
      )
    },
    marshalling_gen.unmarshalListSecretVersionsResponse
  );
  /**
   * List versions of a secret using the secret's ID. Retrieve the list of a
   * given secret's versions specified by the `secret_id` and `region`
   * parameters.
   *
   * @param request - The request {@link ListSecretVersionsRequest}
   * @returns A Promise of ListSecretVersionsResponse
   */
  listSecretVersions = (request) => resourcePaginator.enrichForPagination("versions", this.pageOfListSecretVersions, request);
  /**
   * Access a secret's version using the secret's ID. Access sensitive data in a
   * secret's version specified by the `region`, `secret_id` and `revision`
   * parameters.
   *
   * @param request - The request {@link AccessSecretVersionRequest}
   * @returns A Promise of AccessSecretVersionResponse
   */
  accessSecretVersion = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}/versions/${marshalling.validatePathParam("revision", request.revision)}/access`
    },
    marshalling_gen.unmarshalAccessSecretVersionResponse
  );
  /**
   * Access a secret's version using the secret's name and path. Access
   * sensitive data in a secret's version specified by the `region`,
   * `secret_name`, `secret_path` and `revision` parameters.
   *
   * @param request - The request {@link AccessSecretVersionByPathRequest}
   * @returns A Promise of AccessSecretVersionResponse
   */
  accessSecretVersionByPath = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets-by-path/versions/${marshalling.validatePathParam("revision", request.revision)}/access`,
      urlParams: marshalling.urlParams(
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ],
        ["secret_name", request.secretName],
        ["secret_path", request.secretPath]
      )
    },
    marshalling_gen.unmarshalAccessSecretVersionResponse
  );
  /**
   * Enable a version. Make a specific version accessible. You must specify the
   * `region`, `secret_id` and `revision` parameters.
   *
   * @param request - The request {@link EnableSecretVersionRequest}
   * @returns A Promise of SecretVersion
   */
  enableSecretVersion = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}/versions/${marshalling.validatePathParam("revision", request.revision)}/enable`
    },
    marshalling_gen.unmarshalSecretVersion
  );
  /**
   * Disable a version. Make a specific version inaccessible. You must specify
   * the `region`, `secret_id` and `revision` parameters.
   *
   * @param request - The request {@link DisableSecretVersionRequest}
   * @returns A Promise of SecretVersion
   */
  disableSecretVersion = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam("secretId", request.secretId)}/versions/${marshalling.validatePathParam("revision", request.revision)}/disable`
    },
    marshalling_gen.unmarshalSecretVersion
  );
  pageOfListTags = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/tags`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ]
      )
    },
    marshalling_gen.unmarshalListTagsResponse
  );
  /**
   * List tags. List all tags associated with secrets within a given Project.
   *
   * @param request - The request {@link ListTagsRequest}
   * @returns A Promise of ListTagsResponse
   */
  listTags = (request = {}) => resourcePaginator.enrichForPagination("tags", this.pageOfListTags, request);
  pageOfListSecretTypes = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/secret-types`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ]
      )
    },
    marshalling_gen.unmarshalListSecretTypesResponse
  );
  /**
   * List secret types. List all secret types created within a given Project.
   *
   * @param request - The request {@link ListSecretTypesRequest}
   * @returns A Promise of ListSecretTypesResponse
   */
  listSecretTypes = (request = {}) => resourcePaginator.enrichForPagination("types", this.pageOfListSecretTypes, request);
}
exports.API = API;


/***/ }),

/***/ 2088:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(2125);
const validationRules_gen = __nccwpck_require__(2189);
exports.API = api_gen.API;
exports.ValidationRules = validationRules_gen;


/***/ }),

/***/ 2609:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalEphemeralProperties = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EphemeralProperties' failed as data isn't a dictionary.`
    );
  }
  return {
    action: data.action,
    expiresAt: marshalling.unmarshalDate(data.expires_at),
    expiresOnceAccessed: data.expires_once_accessed
  };
};
const unmarshalSecretVersion = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SecretVersion' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    description: data.description,
    ephemeralProperties: data.ephemeral_properties ? unmarshalEphemeralProperties(data.ephemeral_properties) : void 0,
    latest: data.latest,
    revision: data.revision,
    secretId: data.secret_id,
    status: data.status,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalEphemeralPolicy = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EphemeralPolicy' failed as data isn't a dictionary.`
    );
  }
  return {
    action: data.action,
    expiresOnceAccessed: data.expires_once_accessed,
    timeToLive: data.time_to_live
  };
};
const unmarshalSecret = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Secret' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    description: data.description,
    ephemeralPolicy: data.ephemeral_policy ? unmarshalEphemeralPolicy(data.ephemeral_policy) : void 0,
    id: data.id,
    managed: data.managed,
    name: data.name,
    path: data.path,
    projectId: data.project_id,
    protected: data.protected,
    region: data.region,
    status: data.status,
    tags: data.tags,
    type: data.type,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    usedBy: data.used_by,
    versionCount: data.version_count
  };
};
const unmarshalAccessSecretVersionResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'AccessSecretVersionResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    data: data.data,
    dataCrc32: data.data_crc32,
    revision: data.revision,
    secretId: data.secret_id,
    type: data.type
  };
};
const unmarshalBrowseSecretsResponseItemFolderDetails = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'BrowseSecretsResponseItemFolderDetails' failed as data isn't a dictionary.`
    );
  }
  return {};
};
const unmarshalBrowseSecretsResponseItemSecretDetails = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'BrowseSecretsResponseItemSecretDetails' failed as data isn't a dictionary.`
    );
  }
  return {
    ephemeralPolicy: data.ephemeral_policy ? unmarshalEphemeralPolicy(data.ephemeral_policy) : void 0,
    id: data.id,
    protected: data.protected,
    tags: data.tags,
    type: data.type,
    versionCount: data.version_count
  };
};
const unmarshalBrowseSecretsResponseItem = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'BrowseSecretsResponseItem' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    folder: data.folder ? unmarshalBrowseSecretsResponseItemFolderDetails(data.folder) : void 0,
    name: data.name,
    secret: data.secret ? unmarshalBrowseSecretsResponseItemSecretDetails(data.secret) : void 0,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalBrowseSecretsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'BrowseSecretsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    currentPath: data.current_path,
    items: marshalling.unmarshalArrayOfObject(
      data.items,
      unmarshalBrowseSecretsResponseItem
    ),
    totalCount: data.total_count
  };
};
const unmarshalListSecretTypesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSecretTypesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    types: data.types
  };
};
const unmarshalListSecretVersionsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSecretVersionsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    versions: marshalling.unmarshalArrayOfObject(data.versions, unmarshalSecretVersion)
  };
};
const unmarshalListSecretsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSecretsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    secrets: marshalling.unmarshalArrayOfObject(data.secrets, unmarshalSecret),
    totalCount: data.total_count
  };
};
const unmarshalListTagsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListTagsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    tags: data.tags,
    totalCount: data.total_count
  };
};
const marshalAddSecretOwnerRequest = (request, defaults) => ({
  product: request.product
});
const marshalEphemeralPolicy = (request, defaults) => ({
  action: request.action,
  expires_once_accessed: request.expiresOnceAccessed,
  time_to_live: request.timeToLive
});
const marshalCreateSecretRequest = (request, defaults) => ({
  description: request.description,
  ephemeral_policy: request.ephemeralPolicy !== void 0 ? marshalEphemeralPolicy(request.ephemeralPolicy) : void 0,
  name: request.name,
  path: request.path,
  project_id: request.projectId ?? defaults.defaultProjectId,
  protected: request.protected,
  tags: request.tags,
  type: request.type
});
const marshalCreateSecretVersionRequest = (request, defaults) => ({
  data: request.data,
  data_crc32: request.dataCrc32,
  description: request.description,
  disable_previous: request.disablePrevious
});
const marshalUpdateSecretRequest = (request, defaults) => ({
  description: request.description,
  ephemeral_policy: request.ephemeralPolicy !== void 0 ? marshalEphemeralPolicy(request.ephemeralPolicy) : void 0,
  name: request.name,
  path: request.path,
  tags: request.tags
});
const marshalEphemeralProperties = (request, defaults) => ({
  action: request.action,
  expires_at: request.expiresAt,
  expires_once_accessed: request.expiresOnceAccessed
});
const marshalUpdateSecretVersionRequest = (request, defaults) => ({
  description: request.description,
  ephemeral_properties: request.ephemeralProperties !== void 0 ? marshalEphemeralProperties(request.ephemeralProperties) : void 0
});
exports.marshalAddSecretOwnerRequest = marshalAddSecretOwnerRequest;
exports.marshalCreateSecretRequest = marshalCreateSecretRequest;
exports.marshalCreateSecretVersionRequest = marshalCreateSecretVersionRequest;
exports.marshalUpdateSecretRequest = marshalUpdateSecretRequest;
exports.marshalUpdateSecretVersionRequest = marshalUpdateSecretVersionRequest;
exports.unmarshalAccessSecretVersionResponse = unmarshalAccessSecretVersionResponse;
exports.unmarshalBrowseSecretsResponse = unmarshalBrowseSecretsResponse;
exports.unmarshalListSecretTypesResponse = unmarshalListSecretTypesResponse;
exports.unmarshalListSecretVersionsResponse = unmarshalListSecretVersionsResponse;
exports.unmarshalListSecretsResponse = unmarshalListSecretsResponse;
exports.unmarshalListTagsResponse = unmarshalListTagsResponse;
exports.unmarshalSecret = unmarshalSecret;
exports.unmarshalSecretVersion = unmarshalSecretVersion;


/***/ }),

/***/ 2189:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const DatabaseCredentials = {
  port: {
    pattern: /^[0-9]+$/
  }
};
exports.DatabaseCredentials = DatabaseCredentials;


/***/ }),

/***/ 6604:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(4424);
exports.v1alpha1 = index_gen;


/***/ }),

/***/ 4596:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const content_gen = __nccwpck_require__(9710);
const marshalling_gen = __nccwpck_require__(6693);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par"];
  /**
   * Create a new Serverless SQL Database. You must provide the following
   * parameters: `organization_id`, `project_id`, `name`, `cpu_min`, `cpu_max`.
   * You can also provide `from_backup_id` to create a database from a backup.
   *
   * @param request - The request {@link CreateDatabaseRequest}
   * @returns A Promise of Database
   */
  createDatabase = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateDatabaseRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/serverless-sqldb/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/databases`
    },
    marshalling_gen.unmarshalDatabase
  );
  /**
   * Get a database information. Retrieve information about your Serverless SQL
   * Database. You must provide the `database_id` parameter.
   *
   * @param request - The request {@link GetDatabaseRequest}
   * @returns A Promise of Database
   */
  getDatabase = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/serverless-sqldb/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/databases/${marshalling.validatePathParam("databaseId", request.databaseId)}`
    },
    marshalling_gen.unmarshalDatabase
  );
  /**
   * Waits for {@link Database} to be in a final state.
   *
   * @param request - The request {@link GetDatabaseRequest}
   * @param options - The waiting options
   * @returns A Promise of Database
   */
  waitForDatabase = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.DATABASE_TRANSIENT_STATUSES.includes(res.status))),
    this.getDatabase,
    request,
    options
  );
  /**
   * Delete a database. Deletes a database. You must provide the `database_id`
   * parameter. All data stored in the database will be permanently deleted.
   *
   * @param request - The request {@link DeleteDatabaseRequest}
   * @returns A Promise of Database
   */
  deleteDatabase = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/serverless-sqldb/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/databases/${marshalling.validatePathParam("databaseId", request.databaseId)}`
    },
    marshalling_gen.unmarshalDatabase
  );
  pageOfListDatabases = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/serverless-sqldb/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/databases`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        ["page_size", request.pageSize],
        [
          "project_id",
          request.projectId ?? this.client.settings.defaultProjectId
        ]
      )
    },
    marshalling_gen.unmarshalListDatabasesResponse
  );
  /**
   * List your Serverless SQL Databases. List all Serverless SQL Databases for a
   * given Scaleway Organization or Scaleway Project. By default, the databases
   * returned in the list are ordered by creation date in ascending order,
   * though this can be modified via the order_by field. For the `name`
   * parameter, the value you include will be checked against the whole name
   * string to see if it includes the string you put in the parameter.
   *
   * @param request - The request {@link ListDatabasesRequest}
   * @returns A Promise of ListDatabasesResponse
   */
  listDatabases = (request = {}) => resourcePaginator.enrichForPagination("databases", this.pageOfListDatabases, request);
  /**
   * Update database information. Update CPU limits of your Serverless SQL
   * Database. You must provide the `database_id` parameter.
   *
   * @param request - The request {@link UpdateDatabaseRequest}
   * @returns A Promise of Database
   */
  updateDatabase = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateDatabaseRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/serverless-sqldb/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/databases/${marshalling.validatePathParam("databaseId", request.databaseId)}`
    },
    marshalling_gen.unmarshalDatabase
  );
  /**
   * Restore a database from a backup. Restore a database from a backup. You
   * must provide the `backup_id` parameter.
   *
   * @param request - The request {@link RestoreDatabaseFromBackupRequest}
   * @returns A Promise of Database
   */
  restoreDatabaseFromBackup = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRestoreDatabaseFromBackupRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/serverless-sqldb/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/databases/${marshalling.validatePathParam("databaseId", request.databaseId)}/restore`
    },
    marshalling_gen.unmarshalDatabase
  );
  /**
   * Get a database backup information. Retrieve information about your
   * Serverless SQL Database backup. You must provide the `backup_id`
   * parameter.
   *
   * @param request - The request {@link GetDatabaseBackupRequest}
   * @returns A Promise of DatabaseBackup
   */
  getDatabaseBackup = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/serverless-sqldb/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backups/${marshalling.validatePathParam("backupId", request.backupId)}`
    },
    marshalling_gen.unmarshalDatabaseBackup
  );
  pageOfListDatabaseBackups = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/serverless-sqldb/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backups`,
      urlParams: marshalling.urlParams(
        ["database_id", request.databaseId],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        ["page_size", request.pageSize],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListDatabaseBackupsResponse
  );
  /**
   * List your Serverless SQL Database backups. List all Serverless SQL Database
   * backups for a given Scaleway Project or Database. By default, the backups
   * returned in the list are ordered by creation date in descending order,
   * though this can be modified via the order_by field.
   *
   * @param request - The request {@link ListDatabaseBackupsRequest}
   * @returns A Promise of ListDatabaseBackupsResponse
   */
  listDatabaseBackups = (request) => resourcePaginator.enrichForPagination("backups", this.pageOfListDatabaseBackups, request);
  /**
   * Export a database backup. Export a database backup providing a download
   * link once the export process is completed. You must provide the `backup_id`
   * parameter.
   *
   * @param request - The request {@link ExportDatabaseBackupRequest}
   * @returns A Promise of DatabaseBackup
   */
  exportDatabaseBackup = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/serverless-sqldb/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/backups/${marshalling.validatePathParam("backupId", request.backupId)}/export`
    },
    marshalling_gen.unmarshalDatabaseBackup
  );
}
exports.API = API;


/***/ }),

/***/ 9710:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const DATABASE_TRANSIENT_STATUSES = [
  "creating",
  "deleting",
  "restoring"
];
exports.DATABASE_TRANSIENT_STATUSES = DATABASE_TRANSIENT_STATUSES;


/***/ }),

/***/ 4424:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(4596);
const content_gen = __nccwpck_require__(9710);
const validationRules_gen = __nccwpck_require__(2998);
exports.API = api_gen.API;
exports.DATABASE_TRANSIENT_STATUSES = content_gen.DATABASE_TRANSIENT_STATUSES;
exports.ValidationRules = validationRules_gen;


/***/ }),

/***/ 6693:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalDatabaseBackup = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DatabaseBackup' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    databaseId: data.database_id,
    dbSize: data.db_size,
    downloadUrl: data.download_url,
    downloadUrlExpiresAt: marshalling.unmarshalDate(data.download_url_expires_at),
    expiresAt: marshalling.unmarshalDate(data.expires_at),
    id: data.id,
    organizationId: data.organization_id,
    projectId: data.project_id,
    region: data.region,
    size: data.size,
    status: data.status
  };
};
const unmarshalDatabase = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Database' failed as data isn't a dictionary.`
    );
  }
  return {
    cpuCurrent: data.cpu_current,
    cpuMax: data.cpu_max,
    cpuMin: data.cpu_min,
    createdAt: marshalling.unmarshalDate(data.created_at),
    endpoint: data.endpoint,
    engineMajorVersion: data.engine_major_version,
    id: data.id,
    name: data.name,
    organizationId: data.organization_id,
    projectId: data.project_id,
    region: data.region,
    started: data.started,
    status: data.status
  };
};
const unmarshalListDatabaseBackupsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDatabaseBackupsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    backups: marshalling.unmarshalArrayOfObject(data.backups, unmarshalDatabaseBackup),
    totalCount: data.total_count
  };
};
const unmarshalListDatabasesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDatabasesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    databases: marshalling.unmarshalArrayOfObject(data.databases, unmarshalDatabase),
    totalCount: data.total_count
  };
};
const marshalCreateDatabaseRequest = (request, defaults) => ({
  cpu_max: request.cpuMax,
  cpu_min: request.cpuMin,
  from_backup_id: request.fromBackupId,
  name: request.name,
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalRestoreDatabaseFromBackupRequest = (request, defaults) => ({
  backup_id: request.backupId
});
const marshalUpdateDatabaseRequest = (request, defaults) => ({
  cpu_max: request.cpuMax,
  cpu_min: request.cpuMin
});
exports.marshalCreateDatabaseRequest = marshalCreateDatabaseRequest;
exports.marshalRestoreDatabaseFromBackupRequest = marshalRestoreDatabaseFromBackupRequest;
exports.marshalUpdateDatabaseRequest = marshalUpdateDatabaseRequest;
exports.unmarshalDatabase = unmarshalDatabase;
exports.unmarshalDatabaseBackup = unmarshalDatabaseBackup;
exports.unmarshalListDatabaseBackupsResponse = unmarshalListDatabaseBackupsResponse;
exports.unmarshalListDatabasesResponse = unmarshalListDatabasesResponse;


/***/ }),

/***/ 2998:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const CreateDatabaseRequest = {
  cpuMax: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 15
  },
  cpuMin: {
    lessThanOrEqual: 15
  },
  fromBackupId: {
    ignoreEmpty: true
  },
  name: {
    maxLength: 63,
    minLength: 1
  }
};
const Database = {
  cpuCurrent: {
    lessThanOrEqual: 15
  },
  cpuMax: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 15
  },
  cpuMin: {
    lessThanOrEqual: 15
  }
};
const ListDatabaseBackupsRequest = {
  page: {
    greaterThanOrEqual: 1
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 1e3
  }
};
const ListDatabasesRequest = {
  page: {
    greaterThanOrEqual: 1
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 1e3
  }
};
const UpdateDatabaseRequest = {
  cpuMax: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 15
  },
  cpuMin: {
    lessThanOrEqual: 15
  }
};
exports.CreateDatabaseRequest = CreateDatabaseRequest;
exports.Database = Database;
exports.ListDatabaseBackupsRequest = ListDatabaseBackupsRequest;
exports.ListDatabasesRequest = ListDatabasesRequest;
exports.UpdateDatabaseRequest = UpdateDatabaseRequest;


/***/ }),

/***/ 6111:
/***/ (() => {




/***/ }),

/***/ 8835:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(6572);
exports.v1alpha1 = index_gen;


/***/ }),

/***/ 4645:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const content_gen = __nccwpck_require__(9141);
const marshalling_gen = __nccwpck_require__(2364);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par"];
  /**
   * Send an email. You must specify the `region`, the sender and the
   * recipient's information and the `project_id` to send an email from a
   * checked domain. The subject of the email must contain at least 6
   * characters.
   *
   * @param request - The request {@link CreateEmailRequest}
   * @returns A Promise of CreateEmailResponse
   */
  createEmail = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateEmailRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/emails`
    },
    marshalling_gen.unmarshalCreateEmailResponse
  );
  /**
   * Get an email. Retrieve information about a specific email using the
   * `email_id` and `region` parameters.
   *
   * @param request - The request {@link GetEmailRequest}
   * @returns A Promise of Email
   */
  getEmail = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/emails/${marshalling.validatePathParam("emailId", request.emailId)}`
    },
    marshalling_gen.unmarshalEmail
  );
  /**
   * Waits for {@link Email} to be in a final state.
   *
   * @param request - The request {@link GetEmailRequest}
   * @param options - The waiting options
   * @returns A Promise of Email
   */
  waitForEmail = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.EMAIL_TRANSIENT_STATUSES.includes(res.status))),
    this.getEmail,
    request,
    options
  );
  pageOfListEmails = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/emails`,
      urlParams: marshalling.urlParams(
        ["domain_id", request.domainId],
        ["flags", request.flags],
        ["mail_from", request.mailFrom],
        ["mail_rcpt", request.mailRcpt],
        ["mail_to", request.mailTo],
        ["message_id", request.messageId],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["search", request.search],
        ["since", request.since],
        ["statuses", request.statuses],
        ["subject", request.subject],
        ["until", request.until]
      )
    },
    marshalling_gen.unmarshalListEmailsResponse
  );
  /**
   * List emails. Retrieve the list of emails sent from a specific domain or for
   * a specific Project or Organization. You must specify the `region`.
   *
   * @param request - The request {@link ListEmailsRequest}
   * @returns A Promise of ListEmailsResponse
   */
  listEmails = (request = {}) => resourcePaginator.enrichForPagination("emails", this.pageOfListEmails, request);
  /**
   * Email statuses. Get information on your emails' statuses.
   *
   * @param request - The request {@link GetStatisticsRequest}
   * @returns A Promise of Statistics
   */
  getStatistics = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/statistics`,
      urlParams: marshalling.urlParams(
        ["domain_id", request.domainId],
        ["mail_from", request.mailFrom],
        ["project_id", request.projectId],
        ["since", request.since],
        ["until", request.until]
      )
    },
    marshalling_gen.unmarshalStatistics
  );
  /**
   * Cancel an email. You can cancel the sending of an email if it has not been
   * sent yet. You must specify the `region` and the `email_id` of the email you
   * want to cancel.
   *
   * @param request - The request {@link CancelEmailRequest}
   * @returns A Promise of Email
   */
  cancelEmail = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/emails/${marshalling.validatePathParam("emailId", request.emailId)}/cancel`
    },
    marshalling_gen.unmarshalEmail
  );
  /**
   * Register a domain in a project. You must specify the `region`, `project_id`
   * and `domain_name` to register a domain in a specific Project.
   *
   * @param request - The request {@link CreateDomainRequest}
   * @returns A Promise of Domain
   */
  createDomain = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateDomainRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/domains`
    },
    marshalling_gen.unmarshalDomain
  );
  /**
   * Get information about a domain. Retrieve information about a specific
   * domain using the `region` and `domain_id` parameters. Monitor your domain's
   * reputation and improve **average** and **bad** reputation statuses, using
   * your domain's **Email activity** tab on the [Scaleway
   * console](https://console.scaleway.com/transactional-email/domains) to get a
   * more detailed report. Check out our [dedicated
   * documentation](https://www.scaleway.com/en/docs/managed-services/transactional-email/reference-content/understanding-tem-reputation-score/)
   * to improve your domain's reputation.
   *
   * @param request - The request {@link GetDomainRequest}
   * @returns A Promise of Domain
   */
  getDomain = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/domains/${marshalling.validatePathParam("domainId", request.domainId)}`
    },
    marshalling_gen.unmarshalDomain
  );
  /**
   * Waits for {@link Domain} to be in a final state.
   *
   * @param request - The request {@link GetDomainRequest}
   * @param options - The waiting options
   * @returns A Promise of Domain
   */
  waitForDomain = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.DOMAIN_TRANSIENT_STATUSES.includes(res.status))),
    this.getDomain,
    request,
    options
  );
  pageOfListDomains = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/domains`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["status", request.status]
      )
    },
    marshalling_gen.unmarshalListDomainsResponse
  );
  /**
   * List domains. Retrieve domains in a specific Project or in a specific
   * Organization using the `region` parameter.
   *
   * @param request - The request {@link ListDomainsRequest}
   * @returns A Promise of ListDomainsResponse
   */
  listDomains = (request = {}) => resourcePaginator.enrichForPagination("domains", this.pageOfListDomains, request);
  /**
   * Delete a domain. You must specify the domain you want to delete by the
   * `region` and `domain_id`. Deleting a domain is permanent and cannot be
   * undone.
   *
   * @param request - The request {@link RevokeDomainRequest}
   * @returns A Promise of Domain
   */
  revokeDomain = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/domains/${marshalling.validatePathParam("domainId", request.domainId)}/revoke`
    },
    marshalling_gen.unmarshalDomain
  );
  /**
   * Domain DNS check. Perform an immediate DNS check of a domain using the
   * `region` and `domain_id` parameters.
   *
   * @param request - The request {@link CheckDomainRequest}
   * @returns A Promise of Domain
   */
  checkDomain = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/domains/${marshalling.validatePathParam("domainId", request.domainId)}/check`
    },
    marshalling_gen.unmarshalDomain
  );
  /**
   * Display SPF and DKIM records status and potential errors. Display SPF and
   * DKIM records status and potential errors, including the found records to
   * make debugging easier.
   *
   * @param request - The request {@link GetDomainLastStatusRequest}
   * @returns A Promise of DomainLastStatus
   */
  getDomainLastStatus = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/domains/${marshalling.validatePathParam("domainId", request.domainId)}/verification`
    },
    marshalling_gen.unmarshalDomainLastStatus
  );
  /**
   * Create a Webhook. Create a new Webhook triggered by a list of event types
   * and pushed to a Scaleway SNS ARN.
   *
   * @param request - The request {@link CreateWebhookRequest}
   * @returns A Promise of Webhook
   */
  createWebhook = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateWebhookRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/webhooks`
    },
    marshalling_gen.unmarshalWebhook
  );
  pageOfListWebhooks = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/webhooks`,
      urlParams: marshalling.urlParams(
        ["domain_id", request.domainId],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListWebhooksResponse
  );
  /**
   * List Webhooks. Retrieve Webhooks in a specific Project or in a specific
   * Organization using the `region` parameter.
   *
   * @param request - The request {@link ListWebhooksRequest}
   * @returns A Promise of ListWebhooksResponse
   */
  listWebhooks = (request = {}) => resourcePaginator.enrichForPagination("webhooks", this.pageOfListWebhooks, request);
  /**
   * Get information about a Webhook. Retrieve information about a specific
   * Webhook using the `webhook_id` and `region` parameters.
   *
   * @param request - The request {@link GetWebhookRequest}
   * @returns A Promise of Webhook
   */
  getWebhook = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/webhooks/${marshalling.validatePathParam("webhookId", request.webhookId)}`
    },
    marshalling_gen.unmarshalWebhook
  );
  /**
   * Update a Webhook. Update a Webhook events type, SNS ARN or name.
   *
   * @param request - The request {@link UpdateWebhookRequest}
   * @returns A Promise of Webhook
   */
  updateWebhook = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateWebhookRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/webhooks/${marshalling.validatePathParam("webhookId", request.webhookId)}`
    },
    marshalling_gen.unmarshalWebhook
  );
  /**
   * Delete a Webhook. You must specify the Webhook you want to delete by the
   * `region` and `webhook_id`. Deleting a Webhook is permanent and cannot be
   * undone.
   *
   * @param request - The request {@link DeleteWebhookRequest}
   */
  deleteWebhook = (request) => this.client.fetch({
    method: "DELETE",
    path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/webhooks/${marshalling.validatePathParam("webhookId", request.webhookId)}`
  });
  pageOfListWebhookEvents = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/webhooks/${marshalling.validatePathParam("webhookId", request.webhookId)}/events`,
      urlParams: marshalling.urlParams(
        ["domain_id", request.domainId],
        ["email_id", request.emailId],
        ["event_types", request.eventTypes],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["statuses", request.statuses]
      )
    },
    marshalling_gen.unmarshalListWebhookEventsResponse
  );
  /**
   * List Webhook triggered events. Retrieve the list of Webhook events
   * triggered from a specific Webhook or for a specific Project or
   * Organization. You must specify the `region`.
   *
   * @param request - The request {@link ListWebhookEventsRequest}
   * @returns A Promise of ListWebhookEventsResponse
   */
  listWebhookEvents = (request) => resourcePaginator.enrichForPagination("webhookEvents", this.pageOfListWebhookEvents, request);
}
exports.API = API;


/***/ }),

/***/ 9141:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const DOMAIN_TRANSIENT_STATUSES = ["pending"];
const EMAIL_TRANSIENT_STATUSES = ["new", "sending"];
exports.DOMAIN_TRANSIENT_STATUSES = DOMAIN_TRANSIENT_STATUSES;
exports.EMAIL_TRANSIENT_STATUSES = EMAIL_TRANSIENT_STATUSES;


/***/ }),

/***/ 6572:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(4645);
const content_gen = __nccwpck_require__(9141);
const validationRules_gen = __nccwpck_require__(1889);
exports.API = api_gen.API;
exports.DOMAIN_TRANSIENT_STATUSES = content_gen.DOMAIN_TRANSIENT_STATUSES;
exports.EMAIL_TRANSIENT_STATUSES = content_gen.EMAIL_TRANSIENT_STATUSES;
exports.ValidationRules = validationRules_gen;


/***/ }),

/***/ 2364:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalEmailTry = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EmailTry' failed as data isn't a dictionary.`
    );
  }
  return {
    code: data.code,
    message: data.message,
    rank: data.rank,
    triedAt: marshalling.unmarshalDate(data.tried_at)
  };
};
const unmarshalEmail = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Email' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    flags: data.flags,
    id: data.id,
    lastTries: marshalling.unmarshalArrayOfObject(data.last_tries, unmarshalEmailTry),
    mailFrom: data.mail_from,
    mailRcpt: data.mail_rcpt,
    messageId: data.message_id,
    projectId: data.project_id,
    rcptTo: data.rcpt_to,
    rcptType: data.rcpt_type,
    status: data.status,
    statusDetails: data.status_details,
    subject: data.subject,
    tryCount: data.try_count,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalDomainRecordsDMARC = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DomainRecordsDMARC' failed as data isn't a dictionary.`
    );
  }
  return {
    name: data.name,
    value: data.value
  };
};
const unmarshalDomainRecords = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DomainRecords' failed as data isn't a dictionary.`
    );
  }
  return {
    dmarc: data.dmarc ? unmarshalDomainRecordsDMARC(data.dmarc) : void 0
  };
};
const unmarshalDomainReputation = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DomainReputation' failed as data isn't a dictionary.`
    );
  }
  return {
    previousScore: data.previous_score,
    previousScoredAt: marshalling.unmarshalDate(data.previous_scored_at),
    score: data.score,
    scoredAt: marshalling.unmarshalDate(data.scored_at),
    status: data.status
  };
};
const unmarshalDomainStatistics = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DomainStatistics' failed as data isn't a dictionary.`
    );
  }
  return {
    canceledCount: data.canceled_count,
    failedCount: data.failed_count,
    sentCount: data.sent_count,
    totalCount: data.total_count
  };
};
const unmarshalDomain = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Domain' failed as data isn't a dictionary.`
    );
  }
  return {
    autoconfig: data.autoconfig,
    createdAt: marshalling.unmarshalDate(data.created_at),
    dkimConfig: data.dkim_config,
    id: data.id,
    lastError: data.last_error,
    lastValidAt: marshalling.unmarshalDate(data.last_valid_at),
    name: data.name,
    nextCheckAt: marshalling.unmarshalDate(data.next_check_at),
    organizationId: data.organization_id,
    projectId: data.project_id,
    records: data.records ? unmarshalDomainRecords(data.records) : void 0,
    region: data.region,
    reputation: data.reputation ? unmarshalDomainReputation(data.reputation) : void 0,
    revokedAt: marshalling.unmarshalDate(data.revoked_at),
    spfConfig: data.spf_config,
    statistics: data.statistics ? unmarshalDomainStatistics(data.statistics) : void 0,
    status: data.status
  };
};
const unmarshalWebhook = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Webhook' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    domainId: data.domain_id,
    eventTypes: data.event_types,
    id: data.id,
    name: data.name,
    organizationId: data.organization_id,
    projectId: data.project_id,
    snsArn: data.sns_arn,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalCreateEmailResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CreateEmailResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    emails: marshalling.unmarshalArrayOfObject(data.emails, unmarshalEmail)
  };
};
const unmarshalDomainLastStatusDkimRecord = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DomainLastStatusDkimRecord' failed as data isn't a dictionary.`
    );
  }
  return {
    error: data.error,
    lastValidAt: marshalling.unmarshalDate(data.last_valid_at),
    status: data.status
  };
};
const unmarshalDomainLastStatusDmarcRecord = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DomainLastStatusDmarcRecord' failed as data isn't a dictionary.`
    );
  }
  return {
    error: data.error,
    lastValidAt: marshalling.unmarshalDate(data.last_valid_at),
    status: data.status
  };
};
const unmarshalDomainLastStatusSpfRecord = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DomainLastStatusSpfRecord' failed as data isn't a dictionary.`
    );
  }
  return {
    error: data.error,
    lastValidAt: marshalling.unmarshalDate(data.last_valid_at),
    status: data.status
  };
};
const unmarshalDomainLastStatus = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DomainLastStatus' failed as data isn't a dictionary.`
    );
  }
  return {
    dkimRecord: data.dkim_record ? unmarshalDomainLastStatusDkimRecord(data.dkim_record) : void 0,
    dmarcRecord: data.dmarc_record ? unmarshalDomainLastStatusDmarcRecord(data.dmarc_record) : void 0,
    domainId: data.domain_id,
    domainName: data.domain_name,
    spfRecord: data.spf_record ? unmarshalDomainLastStatusSpfRecord(data.spf_record) : void 0
  };
};
const unmarshalListDomainsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDomainsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    domains: marshalling.unmarshalArrayOfObject(data.domains, unmarshalDomain),
    totalCount: data.total_count
  };
};
const unmarshalListEmailsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListEmailsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    emails: marshalling.unmarshalArrayOfObject(data.emails, unmarshalEmail),
    totalCount: data.total_count
  };
};
const unmarshalWebhookEvent = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'WebhookEvent' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    data: data.data,
    domainId: data.domain_id,
    emailId: data.email_id,
    id: data.id,
    organizationId: data.organization_id,
    projectId: data.project_id,
    status: data.status,
    type: data.type,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    webhookId: data.webhook_id
  };
};
const unmarshalListWebhookEventsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListWebhookEventsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    webhookEvents: marshalling.unmarshalArrayOfObject(
      data.webhook_events,
      unmarshalWebhookEvent
    )
  };
};
const unmarshalListWebhooksResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListWebhooksResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    webhooks: marshalling.unmarshalArrayOfObject(data.webhooks, unmarshalWebhook)
  };
};
const unmarshalStatistics = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Statistics' failed as data isn't a dictionary.`
    );
  }
  return {
    canceledCount: data.canceled_count,
    failedCount: data.failed_count,
    newCount: data.new_count,
    sendingCount: data.sending_count,
    sentCount: data.sent_count,
    totalCount: data.total_count
  };
};
const marshalCreateDomainRequest = (request, defaults) => ({
  accept_tos: request.acceptTos,
  autoconfig: request.autoconfig,
  domain_name: request.domainName,
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalCreateEmailRequestAddress = (request, defaults) => ({
  email: request.email,
  name: request.name
});
const marshalCreateEmailRequestAttachment = (request, defaults) => ({
  content: request.content,
  name: request.name,
  type: request.type
});
const marshalCreateEmailRequestHeader = (request, defaults) => ({
  key: request.key,
  value: request.value
});
const marshalCreateEmailRequest = (request, defaults) => ({
  additional_headers: request.additionalHeaders !== void 0 ? request.additionalHeaders.map(
    (elt) => marshalCreateEmailRequestHeader(elt)
  ) : void 0,
  attachments: request.attachments !== void 0 ? request.attachments.map(
    (elt) => marshalCreateEmailRequestAttachment(elt)
  ) : void 0,
  bcc: request.bcc !== void 0 ? request.bcc.map((elt) => marshalCreateEmailRequestAddress(elt)) : void 0,
  cc: request.cc !== void 0 ? request.cc.map((elt) => marshalCreateEmailRequestAddress(elt)) : void 0,
  from: marshalCreateEmailRequestAddress(request.from),
  html: request.html,
  project_id: request.projectId ?? defaults.defaultProjectId,
  send_before: request.sendBefore,
  subject: request.subject,
  text: request.text,
  to: request.to !== void 0 ? request.to.map((elt) => marshalCreateEmailRequestAddress(elt)) : void 0
});
const marshalCreateWebhookRequest = (request, defaults) => ({
  domain_id: request.domainId,
  event_types: request.eventTypes !== void 0 ? request.eventTypes : void 0,
  name: request.name,
  project_id: request.projectId ?? defaults.defaultProjectId,
  sns_arn: request.snsArn
});
const marshalUpdateWebhookRequest = (request, defaults) => ({
  event_types: request.eventTypes !== void 0 ? request.eventTypes : void 0,
  name: request.name,
  sns_arn: request.snsArn
});
exports.marshalCreateDomainRequest = marshalCreateDomainRequest;
exports.marshalCreateEmailRequest = marshalCreateEmailRequest;
exports.marshalCreateWebhookRequest = marshalCreateWebhookRequest;
exports.marshalUpdateWebhookRequest = marshalUpdateWebhookRequest;
exports.unmarshalCreateEmailResponse = unmarshalCreateEmailResponse;
exports.unmarshalDomain = unmarshalDomain;
exports.unmarshalDomainLastStatus = unmarshalDomainLastStatus;
exports.unmarshalEmail = unmarshalEmail;
exports.unmarshalListDomainsResponse = unmarshalListDomainsResponse;
exports.unmarshalListEmailsResponse = unmarshalListEmailsResponse;
exports.unmarshalListWebhookEventsResponse = unmarshalListWebhookEventsResponse;
exports.unmarshalListWebhooksResponse = unmarshalListWebhooksResponse;
exports.unmarshalStatistics = unmarshalStatistics;
exports.unmarshalWebhook = unmarshalWebhook;


/***/ }),

/***/ 1889:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const CreateDomainRequest = {
  domainName: {
    maxLength: 255,
    minLength: 1
  }
};
const CreateEmailRequest = {
  subject: {
    minLength: 6
  }
};
const CreateEmailRequestAddress = {
  email: {
    minLength: 1
  }
};
const CreateEmailRequestAttachment = {
  name: {
    minLength: 1
  },
  type: {
    minLength: 1
  }
};
const CreateEmailRequestHeader = {
  key: {
    minLength: 1
  },
  value: {
    minLength: 1
  }
};
const CreateWebhookRequest = {
  name: {
    maxLength: 127,
    minLength: 3
  },
  snsArn: {
    maxLength: 127,
    minLength: 3
  }
};
const ListDomainsRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 1e3
  }
};
const ListEmailsRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 1e3
  },
  search: {
    maxLength: 100,
    minLength: 3
  },
  subject: {
    minLength: 6
  }
};
const ListWebhookEventsRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 100
  }
};
const ListWebhooksRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThanOrEqual: 1,
    lessThanOrEqual: 100
  }
};
const UpdateWebhookRequest = {
  name: {
    maxLength: 127,
    minLength: 3
  },
  snsArn: {
    maxLength: 127,
    minLength: 3
  }
};
exports.CreateDomainRequest = CreateDomainRequest;
exports.CreateEmailRequest = CreateEmailRequest;
exports.CreateEmailRequestAddress = CreateEmailRequestAddress;
exports.CreateEmailRequestAttachment = CreateEmailRequestAttachment;
exports.CreateEmailRequestHeader = CreateEmailRequestHeader;
exports.CreateWebhookRequest = CreateWebhookRequest;
exports.ListDomainsRequest = ListDomainsRequest;
exports.ListEmailsRequest = ListEmailsRequest;
exports.ListWebhookEventsRequest = ListWebhookEventsRequest;
exports.ListWebhooksRequest = ListWebhooksRequest;
exports.UpdateWebhookRequest = UpdateWebhookRequest;


/***/ }),

/***/ 2813:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(6138);
exports.v1 = index_gen;


/***/ }),

/***/ 6121:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const content_gen = __nccwpck_require__(3527);
const marshalling_gen = __nccwpck_require__(3779);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /**
   * Register a user. Register a human and return a access-key and a secret-key
   * that must be used in all other commands.
   *
   * Hint: you can use other test commands by setting the SCW_SECRET_KEY env
   * variable.
   *
   * @param request - The request {@link RegisterRequest}
   * @returns A Promise of RegisterResponse
   */
  register = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalRegisterRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/test/v1/register`
    },
    marshalling_gen.unmarshalRegisterResponse
  );
  pageOfListHumans = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/test/v1/humans`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListHumansResponse
  );
  /**
   * List all your humans.
   *
   * @param request - The request {@link ListHumansRequest}
   * @returns A Promise of ListHumansResponse
   */
  listHumans = (request = {}) => resourcePaginator.enrichForPagination("humans", this.pageOfListHumans, request);
  /**
   * Get human details. Get the human details associated with the given id.
   *
   * @param request - The request {@link GetHumanRequest}
   * @returns A Promise of Human
   */
  getHuman = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/test/v1/humans/${marshalling.validatePathParam("humanId", request.humanId)}`
    },
    marshalling_gen.unmarshalHuman
  );
  /**
   * Waits for {@link Human} to be in a final state.
   *
   * @param request - The request {@link GetHumanRequest}
   * @param options - The waiting options
   * @returns A Promise of Human
   */
  waitForHuman = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.HUMAN_TRANSIENT_STATUSES.includes(res.status))),
    this.getHuman,
    request,
    options
  );
  /**
   * Create a new human.
   *
   * @param request - The request {@link CreateHumanRequest}
   * @returns A Promise of Human
   */
  createHuman = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateHumanRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/test/v1/humans`
    },
    marshalling_gen.unmarshalHuman
  );
  /**
   * Update an existing human. Update the human associated with the given id.
   *
   * @param request - The request {@link UpdateHumanRequest}
   * @returns A Promise of Human
   */
  updateHuman = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateHumanRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/test/v1/humans/${marshalling.validatePathParam("humanId", request.humanId)}`
    },
    marshalling_gen.unmarshalHuman
  );
  /**
   * Delete an existing human. Delete the human associated with the given id.
   *
   * @param request - The request {@link DeleteHumanRequest}
   * @returns A Promise of Human
   */
  deleteHuman = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/test/v1/humans/${marshalling.validatePathParam("humanId", request.humanId)}`
    },
    marshalling_gen.unmarshalHuman
  );
  /**
   * Start a 1h running for the given human. Start a one hour running for the
   * given human.
   *
   * @param request - The request {@link RunHumanRequest}
   * @returns A Promise of Human
   */
  runHuman = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/test/v1/humans/${marshalling.validatePathParam("humanId", request.humanId)}/run`
    },
    marshalling_gen.unmarshalHuman
  );
  /**
   * Make a human smoke.
   *
   * @deprecated
   * @param request - The request {@link SmokeHumanRequest}
   * @returns A Promise of Human
   */
  smokeHuman = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/test/v1/humans/${marshalling.validatePathParam("humanId", request.humanId)}/smoke`
    },
    marshalling_gen.unmarshalHuman
  );
}
exports.API = API;


/***/ }),

/***/ 3527:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const HUMAN_TRANSIENT_STATUSES = ["running"];
exports.HUMAN_TRANSIENT_STATUSES = HUMAN_TRANSIENT_STATUSES;


/***/ }),

/***/ 6138:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(6121);
const content_gen = __nccwpck_require__(3527);
exports.API = api_gen.API;
exports.HUMAN_TRANSIENT_STATUSES = content_gen.HUMAN_TRANSIENT_STATUSES;


/***/ }),

/***/ 3779:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalHuman = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Human' failed as data isn't a dictionary.`
    );
  }
  return {
    altitudeInMeter: data.altitude_in_meter,
    altitudeInMillimeter: data.altitude_in_millimeter,
    createdAt: marshalling.unmarshalDate(data.created_at),
    eyesColor: data.eyes_color,
    fingersCount: data.fingers_count,
    hairCount: data.hair_count,
    height: data.height,
    id: data.id,
    isHappy: data.is_happy,
    name: data.name,
    organizationId: data.organization_id,
    projectId: data.project_id,
    shoeSize: data.shoe_size,
    status: data.status,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalListHumansResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListHumansResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    humans: marshalling.unmarshalArrayOfObject(data.humans, unmarshalHuman),
    totalCount: data.total_count
  };
};
const unmarshalRegisterResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'RegisterResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    accessKey: data.access_key,
    secretKey: data.secret_key
  };
};
const marshalCreateHumanRequest = (request, defaults) => ({
  altitude_in_meter: request.altitudeInMeter,
  altitude_in_millimeter: request.altitudeInMillimeter,
  eyes_color: request.eyesColor,
  fingers_count: request.fingersCount,
  hair_count: request.hairCount,
  height: request.height,
  is_happy: request.isHappy,
  name: request.name,
  shoe_size: request.shoeSize,
  ...marshalling.resolveOneOf([
    {
      default: defaults.defaultProjectId,
      param: "project_id",
      value: request.projectId
    },
    {
      default: defaults.defaultOrganizationId,
      param: "organization_id",
      value: request.organizationId
    }
  ])
});
const marshalRegisterRequest = (request, defaults) => ({
  username: request.username
});
const marshalUpdateHumanRequest = (request, defaults) => ({
  altitude_in_meter: request.altitudeInMeter,
  altitude_in_millimeter: request.altitudeInMillimeter,
  eyes_color: request.eyesColor,
  fingers_count: request.fingersCount,
  hair_count: request.hairCount,
  height: request.height,
  is_happy: request.isHappy,
  name: request.name,
  shoe_size: request.shoeSize
});
exports.marshalCreateHumanRequest = marshalCreateHumanRequest;
exports.marshalRegisterRequest = marshalRegisterRequest;
exports.marshalUpdateHumanRequest = marshalUpdateHumanRequest;
exports.unmarshalHuman = unmarshalHuman;
exports.unmarshalListHumansResponse = unmarshalListHumansResponse;
exports.unmarshalRegisterResponse = unmarshalRegisterResponse;


/***/ }),

/***/ 7583:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(1997);
const index_gen$1 = __nccwpck_require__(680);
exports.v1 = index_gen;
exports.v2 = index_gen$1;


/***/ }),

/***/ 1356:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const marshalling_gen = __nccwpck_require__(4487);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available zones of the API. */
  static LOCALITIES = [
    "fr-par-1",
    "fr-par-2",
    "fr-par-3",
    "nl-ams-1",
    "nl-ams-2",
    "nl-ams-3",
    "pl-waw-1",
    "pl-waw-2"
  ];
  pageOfListPrivateNetworks = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/vpc/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/private-networks`,
      urlParams: marshalling.urlParams(
        ["include_regional", request.includeRegional],
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["private_network_ids", request.privateNetworkIds],
        ["project_id", request.projectId],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListPrivateNetworksResponse
  );
  /**
   * List Private Networks. List existing Private Networks in a specified
   * Availability Zone. By default, the Private Networks returned in the list
   * are ordered by creation date in ascending order, though this can be
   * modified via the order_by field.
   *
   * @param request - The request {@link ListPrivateNetworksRequest}
   * @returns A Promise of ListPrivateNetworksResponse
   */
  listPrivateNetworks = (request = {}) => resourcePaginator.enrichForPagination(
    "privateNetworks",
    this.pageOfListPrivateNetworks,
    request
  );
  /**
   * Create a Private Network. Create a new Private Network. Once created, you
   * can attach Scaleway resources in the same Availability Zone.
   *
   * @param request - The request {@link CreatePrivateNetworkRequest}
   * @returns A Promise of PrivateNetwork
   */
  createPrivateNetwork = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreatePrivateNetworkRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/vpc/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/private-networks`
    },
    marshalling_gen.unmarshalPrivateNetwork
  );
  /**
   * Get a Private Network. Retrieve information about an existing Private
   * Network, specified by its Private Network ID. Its full details are returned
   * in the response object.
   *
   * @param request - The request {@link GetPrivateNetworkRequest}
   * @returns A Promise of PrivateNetwork
   */
  getPrivateNetwork = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/vpc/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/private-networks/${marshalling.validatePathParam("privateNetworkId", request.privateNetworkId)}`
    },
    marshalling_gen.unmarshalPrivateNetwork
  );
  /**
   * Update Private Network. Update parameters (such as name or tags) of an
   * existing Private Network, specified by its Private Network ID.
   *
   * @param request - The request {@link UpdatePrivateNetworkRequest}
   * @returns A Promise of PrivateNetwork
   */
  updatePrivateNetwork = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdatePrivateNetworkRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/vpc/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/private-networks/${marshalling.validatePathParam("privateNetworkId", request.privateNetworkId)}`
    },
    marshalling_gen.unmarshalPrivateNetwork
  );
  /**
   * Delete a Private Network. Delete an existing Private Network. Note that you
   * must first detach all resources from the network, in order to delete it.
   *
   * @param request - The request {@link DeletePrivateNetworkRequest}
   */
  deletePrivateNetwork = (request) => this.client.fetch({
    method: "DELETE",
    path: `/vpc/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/private-networks/${marshalling.validatePathParam("privateNetworkId", request.privateNetworkId)}`
  });
}
exports.API = API;


/***/ }),

/***/ 1997:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(1356);
exports.API = api_gen.API;


/***/ }),

/***/ 4487:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const randomName = __nccwpck_require__(8118);
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalPrivateNetwork = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PrivateNetwork' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    name: data.name,
    organizationId: data.organization_id,
    projectId: data.project_id,
    subnets: data.subnets,
    tags: data.tags,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    zone: data.zone
  };
};
const unmarshalListPrivateNetworksResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListPrivateNetworksResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    privateNetworks: marshalling.unmarshalArrayOfObject(
      data.private_networks,
      unmarshalPrivateNetwork
    ),
    totalCount: data.total_count
  };
};
const marshalCreatePrivateNetworkRequest = (request, defaults) => ({
  name: request.name || randomName("pn"),
  project_id: request.projectId ?? defaults.defaultProjectId,
  subnets: request.subnets,
  tags: request.tags
});
const marshalUpdatePrivateNetworkRequest = (request, defaults) => ({
  name: request.name,
  subnets: request.subnets,
  tags: request.tags
});
exports.marshalCreatePrivateNetworkRequest = marshalCreatePrivateNetworkRequest;
exports.marshalUpdatePrivateNetworkRequest = marshalUpdatePrivateNetworkRequest;
exports.unmarshalListPrivateNetworksResponse = unmarshalListPrivateNetworksResponse;
exports.unmarshalPrivateNetwork = unmarshalPrivateNetwork;


/***/ }),

/***/ 9221:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const marshalling_gen = __nccwpck_require__(221);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par", "nl-ams", "pl-waw"];
  pageOfListVPCs = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/vpc/v2/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/vpcs`,
      urlParams: marshalling.urlParams(
        ["is_default", request.isDefault],
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["routing_enabled", request.routingEnabled],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListVPCsResponse
  );
  /**
   * List VPCs. List existing VPCs in the specified region.
   *
   * @param request - The request {@link ListVPCsRequest}
   * @returns A Promise of ListVPCsResponse
   */
  listVPCs = (request = {}) => resourcePaginator.enrichForPagination("vpcs", this.pageOfListVPCs, request);
  /**
   * Create a VPC. Create a new VPC in the specified region.
   *
   * @param request - The request {@link CreateVPCRequest}
   * @returns A Promise of VPC
   */
  createVPC = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateVPCRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/vpc/v2/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/vpcs`
    },
    marshalling_gen.unmarshalVPC
  );
  /**
   * Get a VPC. Retrieve details of an existing VPC, specified by its VPC ID.
   *
   * @param request - The request {@link GetVPCRequest}
   * @returns A Promise of VPC
   */
  getVPC = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/vpc/v2/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/vpcs/${marshalling.validatePathParam("vpcId", request.vpcId)}`
    },
    marshalling_gen.unmarshalVPC
  );
  /**
   * Update VPC. Update parameters including name and tags of the specified VPC.
   *
   * @param request - The request {@link UpdateVPCRequest}
   * @returns A Promise of VPC
   */
  updateVPC = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateVPCRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/vpc/v2/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/vpcs/${marshalling.validatePathParam("vpcId", request.vpcId)}`
    },
    marshalling_gen.unmarshalVPC
  );
  /**
   * Delete a VPC. Delete a VPC specified by its VPC ID.
   *
   * @param request - The request {@link DeleteVPCRequest}
   */
  deleteVPC = (request) => this.client.fetch({
    method: "DELETE",
    path: `/vpc/v2/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/vpcs/${marshalling.validatePathParam("vpcId", request.vpcId)}`
  });
  pageOfListPrivateNetworks = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/vpc/v2/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/private-networks`,
      urlParams: marshalling.urlParams(
        ["dhcp_enabled", request.dhcpEnabled],
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["private_network_ids", request.privateNetworkIds],
        ["project_id", request.projectId],
        ["tags", request.tags],
        ["vpc_id", request.vpcId]
      )
    },
    marshalling_gen.unmarshalListPrivateNetworksResponse
  );
  /**
   * List Private Networks. List existing Private Networks in the specified
   * region. By default, the Private Networks returned in the list are ordered
   * by creation date in ascending order, though this can be modified via the
   * order_by field.
   *
   * @param request - The request {@link ListPrivateNetworksRequest}
   * @returns A Promise of ListPrivateNetworksResponse
   */
  listPrivateNetworks = (request = {}) => resourcePaginator.enrichForPagination(
    "privateNetworks",
    this.pageOfListPrivateNetworks,
    request
  );
  /**
   * Create a Private Network. Create a new Private Network. Once created, you
   * can attach Scaleway resources which are in the same region.
   *
   * @param request - The request {@link CreatePrivateNetworkRequest}
   * @returns A Promise of PrivateNetwork
   */
  createPrivateNetwork = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreatePrivateNetworkRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/vpc/v2/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/private-networks`
    },
    marshalling_gen.unmarshalPrivateNetwork
  );
  /**
   * Get a Private Network. Retrieve information about an existing Private
   * Network, specified by its Private Network ID. Its full details are returned
   * in the response object.
   *
   * @param request - The request {@link GetPrivateNetworkRequest}
   * @returns A Promise of PrivateNetwork
   */
  getPrivateNetwork = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/vpc/v2/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/private-networks/${marshalling.validatePathParam("privateNetworkId", request.privateNetworkId)}`
    },
    marshalling_gen.unmarshalPrivateNetwork
  );
  /**
   * Update Private Network. Update parameters (such as name or tags) of an
   * existing Private Network, specified by its Private Network ID.
   *
   * @param request - The request {@link UpdatePrivateNetworkRequest}
   * @returns A Promise of PrivateNetwork
   */
  updatePrivateNetwork = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdatePrivateNetworkRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/vpc/v2/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/private-networks/${marshalling.validatePathParam("privateNetworkId", request.privateNetworkId)}`
    },
    marshalling_gen.unmarshalPrivateNetwork
  );
  /**
   * Delete a Private Network. Delete an existing Private Network. Note that you
   * must first detach all resources from the network, in order to delete it.
   *
   * @param request - The request {@link DeletePrivateNetworkRequest}
   */
  deletePrivateNetwork = (request) => this.client.fetch({
    method: "DELETE",
    path: `/vpc/v2/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/private-networks/${marshalling.validatePathParam("privateNetworkId", request.privateNetworkId)}`
  });
  /**
   * Migrate Private Networks from zoned to regional. Transform multiple
   * existing zoned Private Networks (scoped to a single Availability Zone) into
   * regional Private Networks, scoped to an entire region. You can transform
   * one or many Private Networks (specified by their Private Network IDs)
   * within a single Scaleway Organization or Project, with the same call.
   *
   * @param request - The request {@link MigrateZonalPrivateNetworksRequest}
   */
  migrateZonalPrivateNetworks = (request = {}) => this.client.fetch({
    body: JSON.stringify(
      marshalling_gen.marshalMigrateZonalPrivateNetworksRequest(
        request,
        this.client.settings
      )
    ),
    headers: jsonContentHeaders,
    method: "POST",
    path: `/vpc/v2/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/private-networks/migrate-zonal`
  });
  /**
   * Enable DHCP on a Private Network. Enable DHCP managed on an existing
   * Private Network. Note that you will not be able to deactivate it
   * afterwards.
   *
   * @param request - The request {@link EnableDHCPRequest}
   * @returns A Promise of PrivateNetwork
   */
  enableDHCP = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/vpc/v2/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/private-networks/${marshalling.validatePathParam("privateNetworkId", request.privateNetworkId)}/enable-dhcp`
    },
    marshalling_gen.unmarshalPrivateNetwork
  );
  /**
   * Enable routing on a VPC. Enable routing on an existing VPC. Note that you
   * will not be able to deactivate it afterwards.
   *
   * @param request - The request {@link EnableRoutingRequest}
   * @returns A Promise of VPC
   */
  enableRouting = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/vpc/v2/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/vpcs/${marshalling.validatePathParam("vpcId", request.vpcId)}/enable-routing`
    },
    marshalling_gen.unmarshalVPC
  );
  pageOfListSubnets = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/vpc/v2/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/subnets`,
      urlParams: marshalling.urlParams(
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["subnet_ids", request.subnetIds],
        ["vpc_id", request.vpcId]
      )
    },
    marshalling_gen.unmarshalListSubnetsResponse
  );
  /**
   * List subnets. List any Private Network's subnets. See ListPrivateNetworks
   * to list a specific Private Network's subnets.
   *
   * @param request - The request {@link ListSubnetsRequest}
   * @returns A Promise of ListSubnetsResponse
   */
  listSubnets = (request = {}) => resourcePaginator.enrichForPagination("subnets", this.pageOfListSubnets, request);
  /**
   * Set a Private Network's subnets. Set subnets for an existing Private
   * Network. Note that the method is PUT and not PATCH. Any existing subnets
   * will be removed in favor of the new specified set of subnets.
   *
   * @param request - The request {@link SetSubnetsRequest}
   * @returns A Promise of SetSubnetsResponse
   */
  setSubnets = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetSubnetsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/vpc/v2/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/private-networks/${marshalling.validatePathParam("privateNetworkId", request.privateNetworkId)}/subnets`
    },
    marshalling_gen.unmarshalSetSubnetsResponse
  );
  /**
   * Add subnets to a Private Network. Add new subnets to an existing Private
   * Network.
   *
   * @param request - The request {@link AddSubnetsRequest}
   * @returns A Promise of AddSubnetsResponse
   */
  addSubnets = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalAddSubnetsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/vpc/v2/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/private-networks/${marshalling.validatePathParam("privateNetworkId", request.privateNetworkId)}/subnets`
    },
    marshalling_gen.unmarshalAddSubnetsResponse
  );
  /**
   * Delete subnets from a Private Network. Delete the specified subnets from a
   * Private Network.
   *
   * @param request - The request {@link DeleteSubnetsRequest}
   * @returns A Promise of DeleteSubnetsResponse
   */
  deleteSubnets = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalDeleteSubnetsRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "DELETE",
      path: `/vpc/v2/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/private-networks/${marshalling.validatePathParam("privateNetworkId", request.privateNetworkId)}/subnets`
    },
    marshalling_gen.unmarshalDeleteSubnetsResponse
  );
  /**
   * Create a Route. Create a new custom Route.
   *
   * @param request - The request {@link CreateRouteRequest}
   * @returns A Promise of Route
   */
  createRoute = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateRouteRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/vpc/v2/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/routes`
    },
    marshalling_gen.unmarshalRoute
  );
  /**
   * Get a Route. Retrieve details of an existing Route, specified by its Route
   * ID.
   *
   * @param request - The request {@link GetRouteRequest}
   * @returns A Promise of Route
   */
  getRoute = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/vpc/v2/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/routes/${marshalling.validatePathParam("routeId", request.routeId)}`
    },
    marshalling_gen.unmarshalRoute
  );
  /**
   * Update Route. Update parameters of the specified Route.
   *
   * @param request - The request {@link UpdateRouteRequest}
   * @returns A Promise of Route
   */
  updateRoute = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateRouteRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/vpc/v2/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/routes/${marshalling.validatePathParam("routeId", request.routeId)}`
    },
    marshalling_gen.unmarshalRoute
  );
  /**
   * Delete a Route. Delete a Route specified by its Route ID.
   *
   * @param request - The request {@link DeleteRouteRequest}
   */
  deleteRoute = (request) => this.client.fetch({
    method: "DELETE",
    path: `/vpc/v2/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/routes/${marshalling.validatePathParam("routeId", request.routeId)}`
  });
}
exports.API = API;


/***/ }),

/***/ 680:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(9221);
const validationRules_gen = __nccwpck_require__(5192);
exports.API = api_gen.API;
exports.ValidationRules = validationRules_gen;


/***/ }),

/***/ 221:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const randomName = __nccwpck_require__(8118);
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalSubnet = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Subnet' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    privateNetworkId: data.private_network_id,
    projectId: data.project_id,
    subnet: data.subnet,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    vpcId: data.vpc_id
  };
};
const unmarshalPrivateNetwork = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PrivateNetwork' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    dhcpEnabled: data.dhcp_enabled,
    id: data.id,
    name: data.name,
    organizationId: data.organization_id,
    projectId: data.project_id,
    region: data.region,
    subnets: marshalling.unmarshalArrayOfObject(data.subnets, unmarshalSubnet),
    tags: data.tags,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    vpcId: data.vpc_id
  };
};
const unmarshalRoute = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Route' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    description: data.description,
    destination: data.destination,
    id: data.id,
    nexthopPrivateNetworkId: data.nexthop_private_network_id,
    nexthopResourceId: data.nexthop_resource_id,
    region: data.region,
    tags: data.tags,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    vpcId: data.vpc_id
  };
};
const unmarshalVPC = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'VPC' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    id: data.id,
    isDefault: data.is_default,
    name: data.name,
    organizationId: data.organization_id,
    privateNetworkCount: data.private_network_count,
    projectId: data.project_id,
    region: data.region,
    routingEnabled: data.routing_enabled,
    tags: data.tags,
    updatedAt: marshalling.unmarshalDate(data.updated_at)
  };
};
const unmarshalAddSubnetsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'AddSubnetsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    subnets: data.subnets
  };
};
const unmarshalDeleteSubnetsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DeleteSubnetsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    subnets: data.subnets
  };
};
const unmarshalListPrivateNetworksResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListPrivateNetworksResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    privateNetworks: marshalling.unmarshalArrayOfObject(
      data.private_networks,
      unmarshalPrivateNetwork
    ),
    totalCount: data.total_count
  };
};
const unmarshalListSubnetsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListSubnetsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    subnets: marshalling.unmarshalArrayOfObject(data.subnets, unmarshalSubnet),
    totalCount: data.total_count
  };
};
const unmarshalListVPCsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListVPCsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    totalCount: data.total_count,
    vpcs: marshalling.unmarshalArrayOfObject(data.vpcs, unmarshalVPC)
  };
};
const unmarshalSetSubnetsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetSubnetsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    subnets: data.subnets
  };
};
const marshalAddSubnetsRequest = (request, defaults) => ({
  subnets: request.subnets
});
const marshalCreatePrivateNetworkRequest = (request, defaults) => ({
  name: request.name || randomName("pn"),
  project_id: request.projectId ?? defaults.defaultProjectId,
  subnets: request.subnets,
  tags: request.tags,
  vpc_id: request.vpcId
});
const marshalCreateRouteRequest = (request, defaults) => ({
  description: request.description,
  destination: request.destination,
  nexthop_private_network_id: request.nexthopPrivateNetworkId,
  nexthop_resource_id: request.nexthopResourceId,
  tags: request.tags,
  vpc_id: request.vpcId
});
const marshalCreateVPCRequest = (request, defaults) => ({
  enable_routing: request.enableRouting,
  name: request.name || randomName("vpc"),
  project_id: request.projectId ?? defaults.defaultProjectId,
  tags: request.tags
});
const marshalDeleteSubnetsRequest = (request, defaults) => ({
  subnets: request.subnets
});
const marshalMigrateZonalPrivateNetworksRequest = (request, defaults) => ({
  private_network_ids: request.privateNetworkIds,
  ...marshalling.resolveOneOf([
    {
      default: defaults.defaultOrganizationId,
      param: "organization_id",
      value: request.organizationId
    },
    {
      default: defaults.defaultProjectId,
      param: "project_id",
      value: request.projectId
    }
  ])
});
const marshalSetSubnetsRequest = (request, defaults) => ({
  subnets: request.subnets
});
const marshalUpdatePrivateNetworkRequest = (request, defaults) => ({
  name: request.name,
  tags: request.tags
});
const marshalUpdateRouteRequest = (request, defaults) => ({
  description: request.description,
  destination: request.destination,
  nexthop_private_network_id: request.nexthopPrivateNetworkId,
  nexthop_resource_id: request.nexthopResourceId,
  tags: request.tags
});
const marshalUpdateVPCRequest = (request, defaults) => ({
  name: request.name,
  tags: request.tags
});
exports.marshalAddSubnetsRequest = marshalAddSubnetsRequest;
exports.marshalCreatePrivateNetworkRequest = marshalCreatePrivateNetworkRequest;
exports.marshalCreateRouteRequest = marshalCreateRouteRequest;
exports.marshalCreateVPCRequest = marshalCreateVPCRequest;
exports.marshalDeleteSubnetsRequest = marshalDeleteSubnetsRequest;
exports.marshalMigrateZonalPrivateNetworksRequest = marshalMigrateZonalPrivateNetworksRequest;
exports.marshalSetSubnetsRequest = marshalSetSubnetsRequest;
exports.marshalUpdatePrivateNetworkRequest = marshalUpdatePrivateNetworkRequest;
exports.marshalUpdateRouteRequest = marshalUpdateRouteRequest;
exports.marshalUpdateVPCRequest = marshalUpdateVPCRequest;
exports.unmarshalAddSubnetsResponse = unmarshalAddSubnetsResponse;
exports.unmarshalDeleteSubnetsResponse = unmarshalDeleteSubnetsResponse;
exports.unmarshalListPrivateNetworksResponse = unmarshalListPrivateNetworksResponse;
exports.unmarshalListSubnetsResponse = unmarshalListSubnetsResponse;
exports.unmarshalListVPCsResponse = unmarshalListVPCsResponse;
exports.unmarshalPrivateNetwork = unmarshalPrivateNetwork;
exports.unmarshalRoute = unmarshalRoute;
exports.unmarshalSetSubnetsResponse = unmarshalSetSubnetsResponse;
exports.unmarshalVPC = unmarshalVPC;


/***/ }),

/***/ 5192:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const Route = {
  description: {
    maxLength: 200
  }
};
exports.Route = Route;


/***/ }),

/***/ 8876:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(3977);
exports.v1 = index_gen;


/***/ }),

/***/ 1458:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const content_gen = __nccwpck_require__(9022);
const marshalling_gen = __nccwpck_require__(1438);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available zones of the API. */
  static LOCALITIES = [
    "fr-par-1",
    "fr-par-2",
    "nl-ams-1",
    "nl-ams-2",
    "nl-ams-3",
    "pl-waw-1",
    "pl-waw-2",
    "pl-waw-3"
  ];
  pageOfListGateways = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/gateways`,
      urlParams: marshalling.urlParams(
        ["name", request.name],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["private_network_id", request.privateNetworkId],
        ["project_id", request.projectId],
        ["status", request.status],
        ["tags", request.tags],
        ["type", request.type]
      )
    },
    marshalling_gen.unmarshalListGatewaysResponse
  );
  /**
   * List Public Gateways. List Public Gateways in a given Scaleway Organization
   * or Project. By default, results are displayed in ascending order of
   * creation date.
   *
   * @param request - The request {@link ListGatewaysRequest}
   * @returns A Promise of ListGatewaysResponse
   */
  listGateways = (request = {}) => resourcePaginator.enrichForPagination("gateways", this.pageOfListGateways, request);
  /**
   * Get a Public Gateway. Get details of a Public Gateway, specified by its
   * gateway ID. The response object contains full details of the gateway,
   * including its **name**, **type**, **status** and more.
   *
   * @param request - The request {@link GetGatewayRequest}
   * @returns A Promise of Gateway
   */
  getGateway = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/gateways/${marshalling.validatePathParam("gatewayId", request.gatewayId)}`
    },
    marshalling_gen.unmarshalGateway
  );
  /**
   * Waits for {@link Gateway} to be in a final state.
   *
   * @param request - The request {@link GetGatewayRequest}
   * @param options - The waiting options
   * @returns A Promise of Gateway
   */
  waitForGateway = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.GATEWAY_TRANSIENT_STATUSES.includes(res.status))),
    this.getGateway,
    request,
    options
  );
  /**
   * Create a Public Gateway. Create a new Public Gateway in the specified
   * Scaleway Project, defining its **name**, **type** and other configuration
   * details such as whether to enable SSH bastion.
   *
   * @param request - The request {@link CreateGatewayRequest}
   * @returns A Promise of Gateway
   */
  createGateway = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateGatewayRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/gateways`
    },
    marshalling_gen.unmarshalGateway
  );
  /**
   * Update a Public Gateway. Update the parameters of an existing Public
   * Gateway, for example, its **name**, **tags**, **SSH bastion
   * configuration**, and **DNS servers**.
   *
   * @param request - The request {@link UpdateGatewayRequest}
   * @returns A Promise of Gateway
   */
  updateGateway = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateGatewayRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/gateways/${marshalling.validatePathParam("gatewayId", request.gatewayId)}`
    },
    marshalling_gen.unmarshalGateway
  );
  /**
   * Delete a Public Gateway. Delete an existing Public Gateway, specified by
   * its gateway ID. This action is irreversible.
   *
   * @param request - The request {@link DeleteGatewayRequest}
   */
  deleteGateway = (request) => this.client.fetch({
    method: "DELETE",
    path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/gateways/${marshalling.validatePathParam("gatewayId", request.gatewayId)}`,
    urlParams: marshalling.urlParams(["cleanup_dhcp", request.cleanupDhcp])
  });
  /**
   * Upgrade a Public Gateway to the latest version and/or to a different
   * commercial offer type. Upgrade a given Public Gateway to the newest
   * software version or to a different commercial offer type. This applies the
   * latest bugfixes and features to your Public Gateway. Note that gateway
   * service will be interrupted during the update.
   *
   * @param request - The request {@link UpgradeGatewayRequest}
   * @returns A Promise of Gateway
   */
  upgradeGateway = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpgradeGatewayRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/gateways/${marshalling.validatePathParam("gatewayId", request.gatewayId)}/upgrade`
    },
    marshalling_gen.unmarshalGateway
  );
  /**
   * Upgrade a Public Gateway to IP mobility. Upgrade a Public Gateway to IP
   * mobility (move from NAT IP to routed IP). This is idempotent: repeated
   * calls after the first will return no error but have no effect.
   *
   * @param request - The request {@link EnableIPMobilityRequest}
   */
  enableIPMobility = (request) => this.client.fetch({
    body: "{}",
    headers: jsonContentHeaders,
    method: "POST",
    path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/gateways/${marshalling.validatePathParam("gatewayId", request.gatewayId)}/enable-ip-mobility`
  });
  pageOfListGatewayNetworks = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/gateway-networks`,
      urlParams: marshalling.urlParams(
        ["dhcp_id", request.dhcpId],
        ["enable_masquerade", request.enableMasquerade],
        ["gateway_id", request.gatewayId],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["private_network_id", request.privateNetworkId],
        ["status", request.status]
      )
    },
    marshalling_gen.unmarshalListGatewayNetworksResponse
  );
  /**
   * List Public Gateway connections to Private Networks. List the connections
   * between Public Gateways and Private Networks (a connection = a
   * GatewayNetwork). You can choose to filter by `gateway-id` to list all
   * Private Networks attached to the specified Public Gateway, or by
   * `private_network_id` to list all Public Gateways attached to the specified
   * Private Network. Other query parameters are also available. The result is
   * an array of GatewayNetwork objects, each giving details of the connection
   * between a given Public Gateway and a given Private Network.
   *
   * @param request - The request {@link ListGatewayNetworksRequest}
   * @returns A Promise of ListGatewayNetworksResponse
   */
  listGatewayNetworks = (request = {}) => resourcePaginator.enrichForPagination(
    "gatewayNetworks",
    this.pageOfListGatewayNetworks,
    request
  );
  /**
   * Get a Public Gateway connection to a Private Network. Get details of a
   * given connection between a Public Gateway and a Private Network (this
   * connection = a GatewayNetwork), specified by its `gateway_network_id`. The
   * response object contains details of the connection including the IDs of the
   * Public Gateway and Private Network, the dates the connection was
   * created/updated and its configuration settings.
   *
   * @param request - The request {@link GetGatewayNetworkRequest}
   * @returns A Promise of GatewayNetwork
   */
  getGatewayNetwork = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/gateway-networks/${marshalling.validatePathParam("gatewayNetworkId", request.gatewayNetworkId)}`
    },
    marshalling_gen.unmarshalGatewayNetwork
  );
  /**
   * Waits for {@link GatewayNetwork} to be in a final state.
   *
   * @param request - The request {@link GetGatewayNetworkRequest}
   * @param options - The waiting options
   * @returns A Promise of GatewayNetwork
   */
  waitForGatewayNetwork = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(
      !content_gen.GATEWAY_NETWORK_TRANSIENT_STATUSES.includes(res.status)
    )),
    this.getGatewayNetwork,
    request,
    options
  );
  /**
   * Attach a Public Gateway to a Private Network. Attach a specific Public
   * Gateway to a specific Private Network (create a GatewayNetwork). You can
   * configure parameters for the connection including DHCP settings, whether to
   * enable masquerade (dynamic NAT), and more.
   *
   * @param request - The request {@link CreateGatewayNetworkRequest}
   * @returns A Promise of GatewayNetwork
   */
  createGatewayNetwork = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateGatewayNetworkRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/gateway-networks`
    },
    marshalling_gen.unmarshalGatewayNetwork
  );
  /**
   * Update a Public Gateway's connection to a Private Network. Update the
   * configuration parameters of a connection between a given Public Gateway and
   * Private Network (the connection = a GatewayNetwork). Updatable parameters
   * include DHCP settings and whether to enable traffic masquerade (dynamic
   * NAT).
   *
   * @param request - The request {@link UpdateGatewayNetworkRequest}
   * @returns A Promise of GatewayNetwork
   */
  updateGatewayNetwork = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateGatewayNetworkRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/gateway-networks/${marshalling.validatePathParam("gatewayNetworkId", request.gatewayNetworkId)}`
    },
    marshalling_gen.unmarshalGatewayNetwork
  );
  /**
   * Detach a Public Gateway from a Private Network. Detach a given Public
   * Gateway from a given Private Network, i.e. delete a GatewayNetwork
   * specified by a gateway_network_id.
   *
   * @param request - The request {@link DeleteGatewayNetworkRequest}
   */
  deleteGatewayNetwork = (request) => this.client.fetch({
    method: "DELETE",
    path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/gateway-networks/${marshalling.validatePathParam("gatewayNetworkId", request.gatewayNetworkId)}`,
    urlParams: marshalling.urlParams(["cleanup_dhcp", request.cleanupDhcp])
  });
  pageOfListDHCPs = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/dhcps`,
      urlParams: marshalling.urlParams(
        ["address", request.address],
        ["has_address", request.hasAddress],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId]
      )
    },
    marshalling_gen.unmarshalListDHCPsResponse
  );
  /**
   * List DHCP configurations. List DHCP configurations, optionally filtering by
   * Organization, Project, Public Gateway IP address or more. The response is
   * an array of DHCP configuration objects, each identified by a DHCP ID and
   * containing configuration settings for the assignment of IP addresses to
   * devices on a Private Network attached to a Public Gateway. Note that the
   * response does not contain the IDs of any Private Network / Public Gateway
   * the configuration is attached to. Use the `List Public Gateway connections
   * to Private Networks` method for that purpose, filtering on DHCP ID.
   *
   * @param request - The request {@link ListDHCPsRequest}
   * @returns A Promise of ListDHCPsResponse
   */
  listDHCPs = (request = {}) => resourcePaginator.enrichForPagination("dhcps", this.pageOfListDHCPs, request);
  /**
   * Get a DHCP configuration. Get a DHCP configuration object, identified by
   * its DHCP ID. The response object contains configuration settings for the
   * assignment of IP addresses to devices on a Private Network attached to a
   * Public Gateway. Note that the response does not contain the IDs of any
   * Private Network / Public Gateway the configuration is attached to. Use the
   * `List Public Gateway connections to Private Networks` method for that
   * purpose, filtering on DHCP ID.
   *
   * @param request - The request {@link GetDHCPRequest}
   * @returns A Promise of DHCP
   */
  getDHCP = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/dhcps/${marshalling.validatePathParam("dhcpId", request.dhcpId)}`
    },
    marshalling_gen.unmarshalDHCP
  );
  /**
   * Create a DHCP configuration. Create a new DHCP configuration object,
   * containing settings for the assignment of IP addresses to devices on a
   * Private Network attached to a Public Gateway. The response object includes
   * the ID of the DHCP configuration object. You can use this ID as part of a
   * call to `Create a Public Gateway connection to a Private Network` or
   * `Update a Public Gateway connection to a Private Network` to directly apply
   * this DHCP configuration.
   *
   * @param request - The request {@link CreateDHCPRequest}
   * @returns A Promise of DHCP
   */
  createDHCP = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateDHCPRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/dhcps`
    },
    marshalling_gen.unmarshalDHCP
  );
  /**
   * Update a DHCP configuration. Update a DHCP configuration object, identified
   * by its DHCP ID.
   *
   * @param request - The request {@link UpdateDHCPRequest}
   * @returns A Promise of DHCP
   */
  updateDHCP = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateDHCPRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/dhcps/${marshalling.validatePathParam("dhcpId", request.dhcpId)}`
    },
    marshalling_gen.unmarshalDHCP
  );
  /**
   * Delete a DHCP configuration. Delete a DHCP configuration object, identified
   * by its DHCP ID. Note that you cannot delete a DHCP configuration object
   * that is currently being used by a Gateway Network.
   *
   * @param request - The request {@link DeleteDHCPRequest}
   */
  deleteDHCP = (request) => this.client.fetch({
    method: "DELETE",
    path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/dhcps/${marshalling.validatePathParam("dhcpId", request.dhcpId)}`
  });
  pageOfListDHCPEntries = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/dhcp-entries`,
      urlParams: marshalling.urlParams(
        ["gateway_network_id", request.gatewayNetworkId],
        ["hostname", request.hostname],
        ["ip_address", request.ipAddress],
        ["mac_address", request.macAddress],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["type", request.type]
      )
    },
    marshalling_gen.unmarshalListDHCPEntriesResponse
  );
  /**
   * List DHCP entries. List DHCP entries, whether dynamically assigned and/or
   * statically reserved. DHCP entries can be filtered by the Gateway Network
   * they are on, their MAC address, IP address, type or hostname.
   *
   * @param request - The request {@link ListDHCPEntriesRequest}
   * @returns A Promise of ListDHCPEntriesResponse
   */
  listDHCPEntries = (request = {}) => resourcePaginator.enrichForPagination("dhcpEntries", this.pageOfListDHCPEntries, request);
  /**
   * Get a DHCP entry. Get a DHCP entry, specified by its DHCP entry ID.
   *
   * @param request - The request {@link GetDHCPEntryRequest}
   * @returns A Promise of DHCPEntry
   */
  getDHCPEntry = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/dhcp-entries/${marshalling.validatePathParam("dhcpEntryId", request.dhcpEntryId)}`
    },
    marshalling_gen.unmarshalDHCPEntry
  );
  /**
   * Create a DHCP entry. Create a static DHCP reservation, specifying the
   * Gateway Network for the reservation, the MAC address of the target device
   * and the IP address to assign this device. The response is a DHCP entry
   * object, confirming the ID and configuration details of the static DHCP
   * reservation.
   *
   * @param request - The request {@link CreateDHCPEntryRequest}
   * @returns A Promise of DHCPEntry
   */
  createDHCPEntry = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateDHCPEntryRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/dhcp-entries`
    },
    marshalling_gen.unmarshalDHCPEntry
  );
  /**
   * Update a DHCP entry. Update the IP address for a DHCP entry, specified by
   * its DHCP entry ID. You can update an existing DHCP entry of any type
   * (`reservation` (static), `lease` (dynamic) or `unknown`), but in manually
   * updating the IP address the entry will necessarily be of type `reservation`
   * after the update.
   *
   * @param request - The request {@link UpdateDHCPEntryRequest}
   * @returns A Promise of DHCPEntry
   */
  updateDHCPEntry = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateDHCPEntryRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/dhcp-entries/${marshalling.validatePathParam("dhcpEntryId", request.dhcpEntryId)}`
    },
    marshalling_gen.unmarshalDHCPEntry
  );
  /**
   * Set all DHCP reservations on a Gateway Network. Set the list of DHCP
   * reservations attached to a Gateway Network. Reservations are identified by
   * their MAC address, and will sync the current DHCP entry list to the given
   * list, creating, updating or deleting DHCP entries accordingly.
   *
   * @param request - The request {@link SetDHCPEntriesRequest}
   * @returns A Promise of SetDHCPEntriesResponse
   */
  setDHCPEntries = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetDHCPEntriesRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/dhcp-entries`
    },
    marshalling_gen.unmarshalSetDHCPEntriesResponse
  );
  /**
   * Delete a DHCP entry. Delete a static DHCP reservation, identified by its
   * DHCP entry ID. Note that you cannot delete DHCP entries of type `lease`,
   * these are deleted automatically when their time-to-live expires.
   *
   * @param request - The request {@link DeleteDHCPEntryRequest}
   */
  deleteDHCPEntry = (request) => this.client.fetch({
    method: "DELETE",
    path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/dhcp-entries/${marshalling.validatePathParam("dhcpEntryId", request.dhcpEntryId)}`
  });
  pageOfListPATRules = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/pat-rules`,
      urlParams: marshalling.urlParams(
        ["gateway_id", request.gatewayId],
        ["order_by", request.orderBy],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["private_ip", request.privateIp],
        ["protocol", request.protocol]
      )
    },
    marshalling_gen.unmarshalListPATRulesResponse
  );
  /**
   * List PAT rules. List PAT rules. You can filter by gateway ID to list all
   * PAT rules for a particular gateway, or filter for PAT rules targeting a
   * specific IP address or using a specific protocol.
   *
   * @param request - The request {@link ListPATRulesRequest}
   * @returns A Promise of ListPATRulesResponse
   */
  listPATRules = (request = {}) => resourcePaginator.enrichForPagination("patRules", this.pageOfListPATRules, request);
  /**
   * Get a PAT rule. Get a PAT rule, specified by its PAT rule ID. The response
   * object gives full details of the PAT rule, including the Public Gateway it
   * belongs to and the configuration settings in terms of public / private
   * ports, private IP and protocol.
   *
   * @param request - The request {@link GetPATRuleRequest}
   * @returns A Promise of PATRule
   */
  getPATRule = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/pat-rules/${marshalling.validatePathParam("patRuleId", request.patRuleId)}`
    },
    marshalling_gen.unmarshalPATRule
  );
  /**
   * Create a PAT rule. Create a new PAT rule on a specified Public Gateway,
   * defining the protocol to use, public port to listen on, and private port /
   * IP address to map to.
   *
   * @param request - The request {@link CreatePATRuleRequest}
   * @returns A Promise of PATRule
   */
  createPATRule = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreatePATRuleRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/pat-rules`
    },
    marshalling_gen.unmarshalPATRule
  );
  /**
   * Update a PAT rule. Update a PAT rule, specified by its PAT rule ID.
   * Configuration settings including private/public port, private IP address
   * and protocol can all be updated.
   *
   * @param request - The request {@link UpdatePATRuleRequest}
   * @returns A Promise of PATRule
   */
  updatePATRule = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdatePATRuleRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/pat-rules/${marshalling.validatePathParam("patRuleId", request.patRuleId)}`
    },
    marshalling_gen.unmarshalPATRule
  );
  /**
   * Set all PAT rules. Set a definitive list of PAT rules attached to a Public
   * Gateway. Each rule is identified by its public port and protocol. This will
   * sync the current PAT rule list on the gateway with the new list, creating,
   * updating or deleting PAT rules accordingly.
   *
   * @param request - The request {@link SetPATRulesRequest}
   * @returns A Promise of SetPATRulesResponse
   */
  setPATRules = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalSetPATRulesRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PUT",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/pat-rules`
    },
    marshalling_gen.unmarshalSetPATRulesResponse
  );
  /**
   * Delete a PAT rule. Delete a PAT rule, identified by its PAT rule ID. This
   * action is irreversible.
   *
   * @param request - The request {@link DeletePATRuleRequest}
   */
  deletePATRule = (request) => this.client.fetch({
    method: "DELETE",
    path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/pat-rules/${marshalling.validatePathParam("patRuleId", request.patRuleId)}`
  });
  /**
   * List Public Gateway types. List the different Public Gateway commercial
   * offer types available at Scaleway. The response is an array of objects
   * describing the name and technical details of each available gateway type.
   *
   * @param request - The request {@link ListGatewayTypesRequest}
   * @returns A Promise of ListGatewayTypesResponse
   */
  listGatewayTypes = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/gateway-types`
    },
    marshalling_gen.unmarshalListGatewayTypesResponse
  );
  pageOfListIPs = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/ips`,
      urlParams: marshalling.urlParams(
        ["is_free", request.isFree],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["reverse", request.reverse],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListIPsResponse
  );
  /**
   * List IPs. List Public Gateway flexible IP addresses. A number of filter
   * options are available for limiting results in the response.
   *
   * @param request - The request {@link ListIPsRequest}
   * @returns A Promise of ListIPsResponse
   */
  listIPs = (request = {}) => resourcePaginator.enrichForPagination("ips", this.pageOfListIPs, request);
  /**
   * Get an IP. Get details of a Public Gateway flexible IP address, identified
   * by its IP ID. The response object contains information including which (if
   * any) Public Gateway using this IP address, the reverse and various other
   * metadata.
   *
   * @param request - The request {@link GetIPRequest}
   * @returns A Promise of IP
   */
  getIP = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/ips/${marshalling.validatePathParam("ipId", request.ipId)}`
    },
    marshalling_gen.unmarshalIP
  );
  /**
   * Reserve an IP. Create (reserve) a new flexible IP address that can be used
   * for a Public Gateway in a specified Scaleway Project.
   *
   * @param request - The request {@link CreateIPRequest}
   * @returns A Promise of IP
   */
  createIP = (request = {}) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateIPRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/ips`
    },
    marshalling_gen.unmarshalIP
  );
  /**
   * Update an IP. Update details of an existing flexible IP address, including
   * its tags, reverse and the Public Gateway it is assigned to.
   *
   * @param request - The request {@link UpdateIPRequest}
   * @returns A Promise of IP
   */
  updateIP = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateIPRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/ips/${marshalling.validatePathParam("ipId", request.ipId)}`
    },
    marshalling_gen.unmarshalIP
  );
  /**
   * Delete an IP. Delete a flexible IP address from your account. This action
   * is irreversible.
   *
   * @param request - The request {@link DeleteIPRequest}
   */
  deleteIP = (request) => this.client.fetch({
    method: "DELETE",
    path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/ips/${marshalling.validatePathParam("ipId", request.ipId)}`
  });
  /**
   * Refresh a Public Gateway's SSH keys. Refresh the SSH keys of a given Public
   * Gateway, specified by its gateway ID. This adds any new SSH keys in the
   * gateway's Scaleway Project to the gateway itself.
   *
   * @param request - The request {@link RefreshSSHKeysRequest}
   * @returns A Promise of Gateway
   */
  refreshSSHKeys = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam("zone", request.zone ?? this.client.settings.defaultZone)}/gateways/${marshalling.validatePathParam("gatewayId", request.gatewayId)}/refresh-ssh-keys`
    },
    marshalling_gen.unmarshalGateway
  );
}
exports.API = API;


/***/ }),

/***/ 9022:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const GATEWAY_NETWORK_TRANSIENT_STATUSES = [
  "attaching",
  "configuring",
  "detaching"
];
const GATEWAY_TRANSIENT_STATUSES = [
  "allocating",
  "configuring",
  "stopping",
  "deleting"
];
exports.GATEWAY_NETWORK_TRANSIENT_STATUSES = GATEWAY_NETWORK_TRANSIENT_STATUSES;
exports.GATEWAY_TRANSIENT_STATUSES = GATEWAY_TRANSIENT_STATUSES;


/***/ }),

/***/ 3977:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(1458);
const content_gen = __nccwpck_require__(9022);
exports.API = api_gen.API;
exports.GATEWAY_NETWORK_TRANSIENT_STATUSES = content_gen.GATEWAY_NETWORK_TRANSIENT_STATUSES;
exports.GATEWAY_TRANSIENT_STATUSES = content_gen.GATEWAY_TRANSIENT_STATUSES;


/***/ }),

/***/ 1438:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const randomName = __nccwpck_require__(8118);
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const unmarshalDHCP = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DHCP' failed as data isn't a dictionary.`
    );
  }
  return {
    address: data.address,
    createdAt: marshalling.unmarshalDate(data.created_at),
    dnsLocalName: data.dns_local_name,
    dnsSearch: data.dns_search,
    dnsServersOverride: data.dns_servers_override,
    enableDynamic: data.enable_dynamic,
    id: data.id,
    organizationId: data.organization_id,
    poolHigh: data.pool_high,
    poolLow: data.pool_low,
    projectId: data.project_id,
    pushDefaultRoute: data.push_default_route,
    pushDnsServer: data.push_dns_server,
    rebindTimer: data.rebind_timer,
    renewTimer: data.renew_timer,
    subnet: data.subnet,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    validLifetime: data.valid_lifetime,
    zone: data.zone
  };
};
const unmarshalIpamConfig = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'IpamConfig' failed as data isn't a dictionary.`
    );
  }
  return {
    ipamIpId: data.ipam_ip_id,
    pushDefaultRoute: data.push_default_route
  };
};
const unmarshalGatewayNetwork = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GatewayNetwork' failed as data isn't a dictionary.`
    );
  }
  return {
    address: data.address,
    createdAt: marshalling.unmarshalDate(data.created_at),
    dhcp: data.dhcp ? unmarshalDHCP(data.dhcp) : void 0,
    enableDhcp: data.enable_dhcp,
    enableMasquerade: data.enable_masquerade,
    gatewayId: data.gateway_id,
    id: data.id,
    ipamConfig: data.ipam_config ? unmarshalIpamConfig(data.ipam_config) : void 0,
    macAddress: data.mac_address,
    privateNetworkId: data.private_network_id,
    status: data.status,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    zone: data.zone
  };
};
const unmarshalIP = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'IP' failed as data isn't a dictionary.`
    );
  }
  return {
    address: data.address,
    createdAt: marshalling.unmarshalDate(data.created_at),
    gatewayId: data.gateway_id,
    id: data.id,
    organizationId: data.organization_id,
    projectId: data.project_id,
    reverse: data.reverse,
    tags: data.tags,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    zone: data.zone
  };
};
const unmarshalDHCPEntry = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DHCPEntry' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    gatewayNetworkId: data.gateway_network_id,
    hostname: data.hostname,
    id: data.id,
    ipAddress: data.ip_address,
    macAddress: data.mac_address,
    type: data.type,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    zone: data.zone
  };
};
const unmarshalGatewayType = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'GatewayType' failed as data isn't a dictionary.`
    );
  }
  return {
    bandwidth: data.bandwidth,
    name: data.name,
    zone: data.zone
  };
};
const unmarshalGateway = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Gateway' failed as data isn't a dictionary.`
    );
  }
  return {
    bastionEnabled: data.bastion_enabled,
    bastionPort: data.bastion_port,
    canUpgradeTo: data.can_upgrade_to,
    createdAt: marshalling.unmarshalDate(data.created_at),
    gatewayNetworks: marshalling.unmarshalArrayOfObject(
      data.gateway_networks,
      unmarshalGatewayNetwork
    ),
    id: data.id,
    ip: data.ip ? unmarshalIP(data.ip) : void 0,
    ipMobilityEnabled: data.ip_mobility_enabled,
    isLegacy: data.is_legacy,
    name: data.name,
    organizationId: data.organization_id,
    projectId: data.project_id,
    smtpEnabled: data.smtp_enabled,
    status: data.status,
    tags: data.tags,
    type: data.type ? unmarshalGatewayType(data.type) : void 0,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    upstreamDnsServers: data.upstream_dns_servers,
    version: data.version,
    zone: data.zone
  };
};
const unmarshalPATRule = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'PATRule' failed as data isn't a dictionary.`
    );
  }
  return {
    createdAt: marshalling.unmarshalDate(data.created_at),
    gatewayId: data.gateway_id,
    id: data.id,
    privateIp: data.private_ip,
    privatePort: data.private_port,
    protocol: data.protocol,
    publicPort: data.public_port,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    zone: data.zone
  };
};
const unmarshalListDHCPEntriesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDHCPEntriesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    dhcpEntries: marshalling.unmarshalArrayOfObject(data.dhcp_entries, unmarshalDHCPEntry),
    totalCount: data.total_count
  };
};
const unmarshalListDHCPsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListDHCPsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    dhcps: marshalling.unmarshalArrayOfObject(data.dhcps, unmarshalDHCP),
    totalCount: data.total_count
  };
};
const unmarshalListGatewayNetworksResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListGatewayNetworksResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    gatewayNetworks: marshalling.unmarshalArrayOfObject(
      data.gateway_networks,
      unmarshalGatewayNetwork
    ),
    totalCount: data.total_count
  };
};
const unmarshalListGatewayTypesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListGatewayTypesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    types: marshalling.unmarshalArrayOfObject(data.types, unmarshalGatewayType)
  };
};
const unmarshalListGatewaysResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListGatewaysResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    gateways: marshalling.unmarshalArrayOfObject(data.gateways, unmarshalGateway),
    totalCount: data.total_count
  };
};
const unmarshalListIPsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListIPsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    ips: marshalling.unmarshalArrayOfObject(data.ips, unmarshalIP),
    totalCount: data.total_count
  };
};
const unmarshalListPATRulesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListPATRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    patRules: marshalling.unmarshalArrayOfObject(data.pat_rules, unmarshalPATRule),
    totalCount: data.total_count
  };
};
const unmarshalSetDHCPEntriesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetDHCPEntriesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    dhcpEntries: marshalling.unmarshalArrayOfObject(data.dhcp_entries, unmarshalDHCPEntry)
  };
};
const unmarshalSetPATRulesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'SetPATRulesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    patRules: marshalling.unmarshalArrayOfObject(data.pat_rules, unmarshalPATRule)
  };
};
const marshalCreateDHCPRequest = (request, defaults) => ({
  address: request.address,
  dns_local_name: request.dnsLocalName,
  dns_search: request.dnsSearch,
  dns_servers_override: request.dnsServersOverride,
  enable_dynamic: request.enableDynamic,
  pool_high: request.poolHigh,
  pool_low: request.poolLow,
  project_id: request.projectId ?? defaults.defaultProjectId,
  push_default_route: request.pushDefaultRoute,
  push_dns_server: request.pushDnsServer,
  rebind_timer: request.rebindTimer,
  renew_timer: request.renewTimer,
  subnet: request.subnet,
  valid_lifetime: request.validLifetime
});
const marshalCreateDHCPEntryRequest = (request, defaults) => ({
  gateway_network_id: request.gatewayNetworkId,
  ip_address: request.ipAddress,
  mac_address: request.macAddress
});
const marshalCreateGatewayNetworkRequestIpamConfig = (request, defaults) => ({
  ipam_ip_id: request.ipamIpId,
  push_default_route: request.pushDefaultRoute
});
const marshalCreateGatewayNetworkRequest = (request, defaults) => ({
  enable_dhcp: request.enableDhcp,
  enable_masquerade: request.enableMasquerade,
  gateway_id: request.gatewayId,
  private_network_id: request.privateNetworkId,
  ...marshalling.resolveOneOf([
    { param: "dhcp_id", value: request.dhcpId },
    {
      param: "dhcp",
      value: request.dhcp !== void 0 ? marshalCreateDHCPRequest(request.dhcp, defaults) : void 0
    },
    { param: "address", value: request.address },
    {
      param: "ipam_config",
      value: request.ipamConfig !== void 0 ? marshalCreateGatewayNetworkRequestIpamConfig(
        request.ipamConfig
      ) : void 0
    }
  ])
});
const marshalCreateGatewayRequest = (request, defaults) => ({
  bastion_port: request.bastionPort,
  enable_bastion: request.enableBastion,
  enable_smtp: request.enableSmtp,
  ip_id: request.ipId,
  name: request.name || randomName("gw"),
  project_id: request.projectId ?? defaults.defaultProjectId,
  tags: request.tags,
  type: request.type,
  upstream_dns_servers: request.upstreamDnsServers
});
const marshalCreateIPRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId,
  tags: request.tags
});
const marshalCreatePATRuleRequest = (request, defaults) => ({
  gateway_id: request.gatewayId,
  private_ip: request.privateIp,
  private_port: request.privatePort,
  protocol: request.protocol,
  public_port: request.publicPort
});
const marshalSetDHCPEntriesRequestEntry = (request, defaults) => ({
  ip_address: request.ipAddress,
  mac_address: request.macAddress
});
const marshalSetDHCPEntriesRequest = (request, defaults) => ({
  dhcp_entries: request.dhcpEntries !== void 0 ? request.dhcpEntries.map(
    (elt) => marshalSetDHCPEntriesRequestEntry(elt)
  ) : void 0,
  gateway_network_id: request.gatewayNetworkId
});
const marshalSetPATRulesRequestRule = (request, defaults) => ({
  private_ip: request.privateIp,
  private_port: request.privatePort,
  protocol: request.protocol,
  public_port: request.publicPort
});
const marshalSetPATRulesRequest = (request, defaults) => ({
  gateway_id: request.gatewayId,
  pat_rules: request.patRules.map(
    (elt) => marshalSetPATRulesRequestRule(elt)
  )
});
const marshalUpdateDHCPEntryRequest = (request, defaults) => ({
  ip_address: request.ipAddress
});
const marshalUpdateDHCPRequest = (request, defaults) => ({
  address: request.address,
  dns_local_name: request.dnsLocalName,
  dns_search: request.dnsSearch,
  dns_servers_override: request.dnsServersOverride,
  enable_dynamic: request.enableDynamic,
  pool_high: request.poolHigh,
  pool_low: request.poolLow,
  push_default_route: request.pushDefaultRoute,
  push_dns_server: request.pushDnsServer,
  rebind_timer: request.rebindTimer,
  renew_timer: request.renewTimer,
  subnet: request.subnet,
  valid_lifetime: request.validLifetime
});
const marshalUpdateGatewayNetworkRequestIpamConfig = (request, defaults) => ({
  ipam_ip_id: request.ipamIpId,
  push_default_route: request.pushDefaultRoute
});
const marshalUpdateGatewayNetworkRequest = (request, defaults) => ({
  enable_dhcp: request.enableDhcp,
  enable_masquerade: request.enableMasquerade,
  ...marshalling.resolveOneOf([
    { param: "dhcp_id", value: request.dhcpId },
    { param: "address", value: request.address },
    {
      param: "ipam_config",
      value: request.ipamConfig !== void 0 ? marshalUpdateGatewayNetworkRequestIpamConfig(
        request.ipamConfig
      ) : void 0
    }
  ])
});
const marshalUpdateGatewayRequest = (request, defaults) => ({
  bastion_port: request.bastionPort,
  enable_bastion: request.enableBastion,
  enable_smtp: request.enableSmtp,
  name: request.name,
  tags: request.tags,
  upstream_dns_servers: request.upstreamDnsServers
});
const marshalUpdateIPRequest = (request, defaults) => ({
  gateway_id: request.gatewayId,
  reverse: request.reverse,
  tags: request.tags
});
const marshalUpdatePATRuleRequest = (request, defaults) => ({
  private_ip: request.privateIp,
  private_port: request.privatePort,
  protocol: request.protocol,
  public_port: request.publicPort
});
const marshalUpgradeGatewayRequest = (request, defaults) => ({
  type: request.type
});
exports.marshalCreateDHCPEntryRequest = marshalCreateDHCPEntryRequest;
exports.marshalCreateDHCPRequest = marshalCreateDHCPRequest;
exports.marshalCreateGatewayNetworkRequest = marshalCreateGatewayNetworkRequest;
exports.marshalCreateGatewayRequest = marshalCreateGatewayRequest;
exports.marshalCreateIPRequest = marshalCreateIPRequest;
exports.marshalCreatePATRuleRequest = marshalCreatePATRuleRequest;
exports.marshalSetDHCPEntriesRequest = marshalSetDHCPEntriesRequest;
exports.marshalSetPATRulesRequest = marshalSetPATRulesRequest;
exports.marshalUpdateDHCPEntryRequest = marshalUpdateDHCPEntryRequest;
exports.marshalUpdateDHCPRequest = marshalUpdateDHCPRequest;
exports.marshalUpdateGatewayNetworkRequest = marshalUpdateGatewayNetworkRequest;
exports.marshalUpdateGatewayRequest = marshalUpdateGatewayRequest;
exports.marshalUpdateIPRequest = marshalUpdateIPRequest;
exports.marshalUpdatePATRuleRequest = marshalUpdatePATRuleRequest;
exports.marshalUpgradeGatewayRequest = marshalUpgradeGatewayRequest;
exports.unmarshalDHCP = unmarshalDHCP;
exports.unmarshalDHCPEntry = unmarshalDHCPEntry;
exports.unmarshalGateway = unmarshalGateway;
exports.unmarshalGatewayNetwork = unmarshalGatewayNetwork;
exports.unmarshalIP = unmarshalIP;
exports.unmarshalListDHCPEntriesResponse = unmarshalListDHCPEntriesResponse;
exports.unmarshalListDHCPsResponse = unmarshalListDHCPsResponse;
exports.unmarshalListGatewayNetworksResponse = unmarshalListGatewayNetworksResponse;
exports.unmarshalListGatewayTypesResponse = unmarshalListGatewayTypesResponse;
exports.unmarshalListGatewaysResponse = unmarshalListGatewaysResponse;
exports.unmarshalListIPsResponse = unmarshalListIPsResponse;
exports.unmarshalListPATRulesResponse = unmarshalListPATRulesResponse;
exports.unmarshalPATRule = unmarshalPATRule;
exports.unmarshalSetDHCPEntriesResponse = unmarshalSetDHCPEntriesResponse;
exports.unmarshalSetPATRulesResponse = unmarshalSetPATRulesResponse;


/***/ }),

/***/ 3727:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index_gen = __nccwpck_require__(730);
exports.v1alpha1 = index_gen;


/***/ }),

/***/ 1099:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const intervalRetrier = __nccwpck_require__(9003);
const api = __nccwpck_require__(8977);
const marshalling = __nccwpck_require__(1502);
__nccwpck_require__(5604);
const resourcePaginator = __nccwpck_require__(2962);
const content_gen = __nccwpck_require__(4346);
const marshalling_gen = __nccwpck_require__(3381);
const jsonContentHeaders = {
  "Content-Type": "application/json; charset=utf-8"
};
class API extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par", "nl-ams"];
  /**
   * Order a Web Hosting plan. Order a Web Hosting plan, specifying the offer
   * type required via the `offer_id` parameter.
   *
   * @param request - The request {@link CreateHostingRequest}
   * @returns A Promise of Hosting
   */
  createHosting = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCreateHostingRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/hostings`
    },
    marshalling_gen.unmarshalHosting
  );
  pageOfListHostings = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/hostings`,
      urlParams: marshalling.urlParams(
        ["control_panels", request.controlPanels],
        ["domain", request.domain],
        ["order_by", request.orderBy],
        ["organization_id", request.organizationId],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ],
        ["project_id", request.projectId],
        ["statuses", request.statuses],
        ["tags", request.tags]
      )
    },
    marshalling_gen.unmarshalListHostingsResponse
  );
  /**
   * List all Web Hosting plans. List all of your existing Web Hosting plans.
   * Various filters are available to limit the results, including filtering by
   * domain, status, tag and Project ID.
   *
   * @param request - The request {@link ListHostingsRequest}
   * @returns A Promise of ListHostingsResponse
   */
  listHostings = (request = {}) => resourcePaginator.enrichForPagination("hostings", this.pageOfListHostings, request);
  /**
   * Get a Web Hosting plan. Get the details of one of your existing Web Hosting
   * plans, specified by its `hosting_id`.
   *
   * @param request - The request {@link GetHostingRequest}
   * @returns A Promise of Hosting
   */
  getHosting = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam("hostingId", request.hostingId)}`
    },
    marshalling_gen.unmarshalHosting
  );
  /**
   * Waits for {@link Hosting} to be in a final state.
   *
   * @param request - The request {@link GetHostingRequest}
   * @param options - The waiting options
   * @returns A Promise of Hosting
   */
  waitForHosting = (request, options) => intervalRetrier.waitForResource(
    options?.stop ?? ((res) => Promise.resolve(!content_gen.HOSTING_TRANSIENT_STATUSES.includes(res.status))),
    this.getHosting,
    request,
    options
  );
  /**
   * Update a Web Hosting plan. Update the details of one of your existing Web
   * Hosting plans, specified by its `hosting_id`. You can update parameters
   * including the contact email address, tags, options and offer.
   *
   * @param request - The request {@link UpdateHostingRequest}
   * @returns A Promise of Hosting
   */
  updateHosting = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalUpdateHostingRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam("hostingId", request.hostingId)}`
    },
    marshalling_gen.unmarshalHosting
  );
  /**
   * Delete a Web Hosting plan. Delete a Web Hosting plan, specified by its
   * `hosting_id`. Note that deletion is not immediate: it will take place at
   * the end of the calendar month, after which time your Web Hosting plan and
   * all its data (files and emails) will be irreversibly lost.
   *
   * @param request - The request {@link DeleteHostingRequest}
   * @returns A Promise of Hosting
   */
  deleteHosting = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam("hostingId", request.hostingId)}`
    },
    marshalling_gen.unmarshalHosting
  );
  /**
   * Restore a Web Hosting plan. When you [delete a Web Hosting
   * plan](#path-hostings-delete-a-hosting), definitive deletion does not take
   * place until the end of the calendar month. In the time between initiating
   * the deletion, and definitive deletion at the end of the month, you can
   * choose to **restore** the Web Hosting plan, using this endpoint and
   * specifying its `hosting_id`.
   *
   * @param request - The request {@link RestoreHostingRequest}
   * @returns A Promise of Hosting
   */
  restoreHosting = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam("hostingId", request.hostingId)}/restore`
    },
    marshalling_gen.unmarshalHosting
  );
  /**
   * Get DNS records. Get the set of DNS records of a specified domain
   * associated with a Web Hosting plan.
   *
   * @param request - The request {@link GetDomainDnsRecordsRequest}
   * @returns A Promise of DnsRecords
   */
  getDomainDnsRecords = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/domains/${marshalling.validatePathParam("domain", request.domain)}/dns-records`
    },
    marshalling_gen.unmarshalDnsRecords
  );
  /**
   * "Check whether you own this domain or not.".
   *
   * @param request - The request {@link CheckUserOwnsDomainRequest}
   * @returns A Promise of CheckUserOwnsDomainResponse
   */
  checkUserOwnsDomain = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalCheckUserOwnsDomainRequest(request, this.client.settings)
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/webhosting/v1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/domains/${marshalling.validatePathParam("domain", request.domain)}/check-ownership`
    },
    marshalling_gen.unmarshalCheckUserOwnsDomainResponse
  );
  /**
   * List all offers. List the different Web Hosting offers, and their options,
   * available to order from Scaleway.
   *
   * @param request - The request {@link ListOffersRequest}
   * @returns A Promise of ListOffersResponse
   */
  listOffers = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/offers`,
      urlParams: marshalling.urlParams(
        ["control_panels", request.controlPanels],
        ["hosting_id", request.hostingId],
        ["only_options", request.onlyOptions],
        ["order_by", request.orderBy],
        ["without_options", request.withoutOptions]
      )
    },
    marshalling_gen.unmarshalListOffersResponse
  );
  pageOfListControlPanels = (request = {}) => this.client.fetch(
    {
      method: "GET",
      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/control-panels`,
      urlParams: marshalling.urlParams(
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListControlPanelsResponse
  );
  /**
   * "List the control panels type: cpanel or plesk.".
   *
   * @param request - The request {@link ListControlPanelsRequest}
   * @returns A Promise of ListControlPanelsResponse
   */
  listControlPanels = (request = {}) => resourcePaginator.enrichForPagination("controlPanels", this.pageOfListControlPanels, request);
  /**
   * Create a user session.
   *
   * @param request - The request {@link CreateSessionRequest}
   * @returns A Promise of Session
   */
  createSession = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam("hostingId", request.hostingId)}/sessions`
    },
    marshalling_gen.unmarshalSession
  );
  resetHostingPassword = (request) => this.client.fetch(
    {
      body: "{}",
      headers: jsonContentHeaders,
      method: "POST",
      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam("hostingId", request.hostingId)}/reset-password`
    },
    marshalling_gen.unmarshalResetHostingPasswordResponse
  );
}
class ClassicMailAPI extends api.API {
  /** Lists the available regions of the API. */
  static LOCALITIES = ["fr-par", "nl-ams", "pl-waw"];
  /**
   * Create a new mailbox within your hosting plan.. Create a new mailbox within
   * your hosting plan.
   *
   * @param request - The request {@link ClassicMailApiCreateMailboxRequest}
   * @returns A Promise of Mailbox
   */
  createMailbox = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalClassicMailApiCreateMailboxRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "POST",
      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/classic-hostings/${marshalling.validatePathParam("onlineId", request.onlineId)}/mailboxes`
    },
    marshalling_gen.unmarshalMailbox
  );
  /**
   * Get a mailbox by id within your hosting plan.. Get a mailbox by id within
   * your hosting plan.
   *
   * @param request - The request {@link ClassicMailApiGetMailboxRequest}
   * @returns A Promise of Mailbox
   */
  getMailbox = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/classic-hostings/${marshalling.validatePathParam("onlineId", request.onlineId)}/mailboxes/${marshalling.validatePathParam("mailboxId", request.mailboxId)}`
    },
    marshalling_gen.unmarshalMailbox
  );
  pageOfListMailboxes = (request) => this.client.fetch(
    {
      method: "GET",
      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/classic-hostings/${marshalling.validatePathParam("onlineId", request.onlineId)}/mailboxes`,
      urlParams: marshalling.urlParams(
        ["domain", request.domain],
        ["page", request.page],
        [
          "page_size",
          request.pageSize ?? this.client.settings.defaultPageSize
        ]
      )
    },
    marshalling_gen.unmarshalListMailboxesResponse
  );
  /**
   * List all mailboxes within your hosting plan.. List all mailboxes within
   * your hosting plan.
   *
   * @param request - The request {@link ClassicMailApiListMailboxesRequest}
   * @returns A Promise of ListMailboxesResponse
   */
  listMailboxes = (request) => resourcePaginator.enrichForPagination("mailboxes", this.pageOfListMailboxes, request);
  deleteMailbox = (request) => this.client.fetch(
    {
      method: "DELETE",
      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/classic-hostings/${marshalling.validatePathParam("onlineId", request.onlineId)}/mailboxes/${marshalling.validatePathParam("mailboxId", request.mailboxId)}`
    },
    marshalling_gen.unmarshalMailbox
  );
  /**
   * Update the mailbox within your hosting plan.. Update the mailbox within
   * your hosting plan.
   *
   * @param request - The request {@link ClassicMailApiUpdateMailboxRequest}
   * @returns A Promise of Mailbox
   */
  updateMailbox = (request) => this.client.fetch(
    {
      body: JSON.stringify(
        marshalling_gen.marshalClassicMailApiUpdateMailboxRequest(
          request,
          this.client.settings
        )
      ),
      headers: jsonContentHeaders,
      method: "PATCH",
      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam("region", request.region ?? this.client.settings.defaultRegion)}/classic-hostings/${marshalling.validatePathParam("onlineId", request.onlineId)}/mailboxes/${marshalling.validatePathParam("mailboxId", request.mailboxId)}`
    },
    marshalling_gen.unmarshalMailbox
  );
}
exports.API = API;
exports.ClassicMailAPI = ClassicMailAPI;


/***/ }),

/***/ 4346:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const HOSTING_TRANSIENT_STATUSES = [
  "delivering",
  "deleting",
  "migrating"
];
exports.HOSTING_TRANSIENT_STATUSES = HOSTING_TRANSIENT_STATUSES;


/***/ }),

/***/ 730:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const api_gen = __nccwpck_require__(1099);
const content_gen = __nccwpck_require__(4346);
const validationRules_gen = __nccwpck_require__(4847);
exports.API = api_gen.API;
exports.ClassicMailAPI = api_gen.ClassicMailAPI;
exports.HOSTING_TRANSIENT_STATUSES = content_gen.HOSTING_TRANSIENT_STATUSES;
exports.ValidationRules = validationRules_gen;


/***/ }),

/***/ 3381:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const customMarshalling = __nccwpck_require__(5667);
const marshalling = __nccwpck_require__(1502);
const unmarshalHostingCpanelUrls = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'HostingCpanelUrls' failed as data isn't a dictionary.`
    );
  }
  return {
    dashboard: data.dashboard,
    webmail: data.webmail
  };
};
const unmarshalHostingOption = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'HostingOption' failed as data isn't a dictionary.`
    );
  }
  return {
    id: data.id,
    name: data.name
  };
};
const unmarshalHosting = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Hosting' failed as data isn't a dictionary.`
    );
  }
  return {
    controlPanelName: data.control_panel_name,
    cpanelUrls: data.cpanel_urls ? unmarshalHostingCpanelUrls(data.cpanel_urls) : void 0,
    createdAt: marshalling.unmarshalDate(data.created_at),
    dnsStatus: data.dns_status,
    domain: data.domain,
    id: data.id,
    ipv4: data.ipv4,
    ipv6: data.ipv6,
    offerEndOfLife: data.offer_end_of_life,
    offerId: data.offer_id,
    offerName: data.offer_name,
    oneTimePassword: data.one_time_password,
    options: marshalling.unmarshalArrayOfObject(data.options, unmarshalHostingOption),
    organizationId: data.organization_id,
    platformGroup: data.platform_group,
    platformHostname: data.platform_hostname,
    platformNumber: data.platform_number,
    projectId: data.project_id,
    protected: data.protected,
    region: data.region,
    status: data.status,
    tags: data.tags,
    updatedAt: marshalling.unmarshalDate(data.updated_at),
    username: data.username
  };
};
const unmarshalEmailAddress = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'EmailAddress' failed as data isn't a dictionary.`
    );
  }
  return {
    domain: data.domain,
    login: data.login
  };
};
const unmarshalMailbox = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Mailbox' failed as data isn't a dictionary.`
    );
  }
  return {
    email: data.email ? unmarshalEmailAddress(data.email) : void 0,
    mailboxId: data.mailbox_id
  };
};
const unmarshalCheckUserOwnsDomainResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'CheckUserOwnsDomainResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    ownsDomain: data.owns_domain
  };
};
const unmarshalDnsRecord = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DnsRecord' failed as data isn't a dictionary.`
    );
  }
  return {
    name: data.name,
    priority: data.priority,
    status: data.status,
    ttl: data.ttl,
    type: data.type,
    value: data.value
  };
};
const unmarshalNameserver = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Nameserver' failed as data isn't a dictionary.`
    );
  }
  return {
    hostname: data.hostname,
    isDefault: data.is_default,
    status: data.status
  };
};
const unmarshalDnsRecords = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'DnsRecords' failed as data isn't a dictionary.`
    );
  }
  return {
    nameServers: marshalling.unmarshalArrayOfObject(data.name_servers, unmarshalNameserver),
    records: marshalling.unmarshalArrayOfObject(data.records, unmarshalDnsRecord),
    status: data.status
  };
};
const unmarshalControlPanel = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ControlPanel' failed as data isn't a dictionary.`
    );
  }
  return {
    available: data.available,
    availableLanguages: data.available_languages,
    logoUrl: data.logo_url,
    name: data.name
  };
};
const unmarshalListControlPanelsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListControlPanelsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    controlPanels: marshalling.unmarshalArrayOfObject(
      data.control_panels,
      unmarshalControlPanel
    ),
    totalCount: data.total_count
  };
};
const unmarshalListHostingsResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListHostingsResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    hostings: marshalling.unmarshalArrayOfObject(data.hostings, unmarshalHosting),
    totalCount: data.total_count
  };
};
const unmarshalListMailboxesResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListMailboxesResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    mailboxes: marshalling.unmarshalArrayOfObject(data.mailboxes, unmarshalMailbox),
    totalCount: data.total_count
  };
};
const unmarshalOfferProduct = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'OfferProduct' failed as data isn't a dictionary.`
    );
  }
  return {
    databasesQuota: data.databases_quota,
    emailAccountsQuota: data.email_accounts_quota,
    emailStorageQuota: data.email_storage_quota,
    hostingStorageQuota: data.hosting_storage_quota,
    maxAddonDomains: data.max_addon_domains,
    name: data.name,
    option: data.option,
    ram: data.ram,
    supportIncluded: data.support_included,
    vCpu: data.v_cpu
  };
};
const unmarshalOffer = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Offer' failed as data isn't a dictionary.`
    );
  }
  return {
    available: data.available,
    billingOperationPath: data.billing_operation_path,
    controlPanelName: data.control_panel_name,
    endOfLife: data.end_of_life,
    id: data.id,
    price: data.price ? customMarshalling.unmarshalMoney(data.price) : void 0,
    product: data.product ? unmarshalOfferProduct(data.product) : void 0,
    quotaWarnings: data.quota_warnings
  };
};
const unmarshalListOffersResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ListOffersResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    offers: marshalling.unmarshalArrayOfObject(data.offers, unmarshalOffer)
  };
};
const unmarshalResetHostingPasswordResponse = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ResetHostingPasswordResponse' failed as data isn't a dictionary.`
    );
  }
  return {
    password: data.password
  };
};
const unmarshalSession = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Session' failed as data isn't a dictionary.`
    );
  }
  return {
    url: data.url
  };
};
const marshalCheckUserOwnsDomainRequest = (request, defaults) => ({
  project_id: request.projectId ?? defaults.defaultProjectId
});
const marshalEmailAddress = (request, defaults) => ({
  domain: request.domain,
  login: request.login
});
const marshalClassicMailApiCreateMailboxRequest = (request, defaults) => ({
  email: request.email !== void 0 ? marshalEmailAddress(request.email) : void 0,
  password: request.password
});
const marshalClassicMailApiUpdateMailboxRequest = (request, defaults) => ({
  password: request.password
});
const marshalCreateHostingRequestDomainConfiguration = (request, defaults) => ({
  update_all_records: request.updateAllRecords,
  update_mail_record: request.updateMailRecord,
  update_nameservers: request.updateNameservers,
  update_web_record: request.updateWebRecord
});
const marshalCreateHostingRequest = (request, defaults) => ({
  domain: request.domain,
  domain_configuration: request.domainConfiguration !== void 0 ? marshalCreateHostingRequestDomainConfiguration(
    request.domainConfiguration
  ) : void 0,
  email: request.email,
  language: request.language,
  offer_id: request.offerId,
  option_ids: request.optionIds,
  project_id: request.projectId ?? defaults.defaultProjectId,
  tags: request.tags
});
const marshalUpdateHostingRequest = (request, defaults) => ({
  email: request.email,
  offer_id: request.offerId,
  option_ids: request.optionIds,
  protected: request.protected,
  tags: request.tags
});
exports.marshalCheckUserOwnsDomainRequest = marshalCheckUserOwnsDomainRequest;
exports.marshalClassicMailApiCreateMailboxRequest = marshalClassicMailApiCreateMailboxRequest;
exports.marshalClassicMailApiUpdateMailboxRequest = marshalClassicMailApiUpdateMailboxRequest;
exports.marshalCreateHostingRequest = marshalCreateHostingRequest;
exports.marshalUpdateHostingRequest = marshalUpdateHostingRequest;
exports.unmarshalCheckUserOwnsDomainResponse = unmarshalCheckUserOwnsDomainResponse;
exports.unmarshalDnsRecords = unmarshalDnsRecords;
exports.unmarshalHosting = unmarshalHosting;
exports.unmarshalListControlPanelsResponse = unmarshalListControlPanelsResponse;
exports.unmarshalListHostingsResponse = unmarshalListHostingsResponse;
exports.unmarshalListMailboxesResponse = unmarshalListMailboxesResponse;
exports.unmarshalListOffersResponse = unmarshalListOffersResponse;
exports.unmarshalMailbox = unmarshalMailbox;
exports.unmarshalResetHostingPasswordResponse = unmarshalResetHostingPasswordResponse;
exports.unmarshalSession = unmarshalSession;


/***/ }),

/***/ 4847:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const ClassicMailApiListMailboxesRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const ListControlPanelsRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
const ListHostingsRequest = {
  page: {
    greaterThan: 0
  },
  pageSize: {
    greaterThan: 0,
    lessThanOrEqual: 100
  }
};
exports.ClassicMailApiListMailboxesRequest = ClassicMailApiListMailboxesRequest;
exports.ListControlPanelsRequest = ListControlPanelsRequest;
exports.ListHostingsRequest = ListHostingsRequest;


/***/ }),

/***/ 9858:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const isBrowser = () => (
  // eslint-disable-next-line @typescript-eslint/prefer-optional-chain
  typeof window !== "undefined" && typeof window.document !== "undefined"
);
exports.isBrowser = isBrowser;


/***/ }),

/***/ 3227:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const isResponse = (obj) => obj !== null && obj !== void 0 && typeof obj === "object" && "status" in obj && typeof obj.status === "number" && "statusText" in obj && typeof obj.statusText === "string" && "headers" in obj && typeof obj.headers === "object" && "body" in obj && typeof obj.body !== "undefined";
exports.isResponse = isResponse;


/***/ }),

/***/ 2362:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const isJSONObject = (obj) => {
  const objT = typeof obj;
  return obj !== void 0 && obj !== null && objT !== "string" && objT !== "number" && objT !== "boolean" && !Array.isArray(obj) && objT === "object";
};
exports.isJSONObject = isJSONObject;


/***/ }),

/***/ 1502:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
function validatePathParam(name, param) {
  if (typeof param === "string" && param.length > 0) return param;
  if (typeof param === "number") return param.toString();
  throw new TypeError(`param ${name} cannot be empty in request`);
}
const resolveOneOf = (list, isRequired = false) => {
  const elt = list.find((obj) => obj.value !== void 0) ?? list.find((obj) => obj.default !== void 0);
  const value = elt?.value ?? elt?.default;
  if (elt && value !== void 0) {
    return { [elt.param]: value };
  }
  if (isRequired) {
    const keyList = list.map((obj) => obj.param).join(" or ");
    throw new TypeError(`one of ${keyList} must be indicated in the request`);
  }
  return {};
};
const urlParams = (...paramTuples) => {
  const params = new URLSearchParams();
  for (const [key, value] of paramTuples) {
    if (typeof key === "string" && value != null) {
      if (Array.isArray(value)) {
        for (const innerValue of value) {
          if (innerValue !== null) {
            params.append(
              key,
              innerValue instanceof Date ? innerValue.toISOString() : innerValue.toString()
            );
          }
        }
      } else {
        params.append(
          key,
          value instanceof Date ? value.toISOString() : value.toString()
        );
      }
    }
  }
  return params;
};
const unmarshalDate = (data) => {
  if (typeof data !== "string") {
    return void 0;
  }
  const date = new Date(data);
  if (Number.isNaN(date.getTime())) {
    return void 0;
  }
  return date;
};
const unmarshalArrayOfObject = (data, unmarshaller, emptyFallback = true) => {
  if (!Array.isArray(data)) {
    return emptyFallback ? [] : void 0;
  }
  return data.map((elt) => unmarshaller(elt));
};
const unmarshalMapOfObject = (data, unmarshaller, emptyFallback = true) => {
  if (!data || typeof data !== "object" || !(data instanceof Object) || Array.isArray(data)) {
    return emptyFallback ? {} : void 0;
  }
  return Object.entries(data).reduce(
    (acc, [key, value]) => ({
      ...acc,
      [key]: unmarshaller(value)
    }),
    {}
  );
};
exports.resolveOneOf = resolveOneOf;
exports.unmarshalArrayOfObject = unmarshalArrayOfObject;
exports.unmarshalDate = unmarshalDate;
exports.unmarshalMapOfObject = unmarshalMapOfObject;
exports.urlParams = urlParams;
exports.validatePathParam = validatePathParam;


/***/ }),

/***/ 5701:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index = __nccwpck_require__(2191);
const client = __nccwpck_require__(6745);
const clientIniFactory = __nccwpck_require__(5275);
const customTypes = __nccwpck_require__(759);
const index$1 = __nccwpck_require__(9945);
const json = __nccwpck_require__(2362);
const intervalRetrier = __nccwpck_require__(9003);
const helpers = __nccwpck_require__(7185);
const api = __nccwpck_require__(8977);
const auth = __nccwpck_require__(2475);
const customMarshalling = __nccwpck_require__(5667);
const marshalling = __nccwpck_require__(1502);
const resourcePaginator = __nccwpck_require__(2962);
const index$2 = __nccwpck_require__(9370);
const index$3 = __nccwpck_require__(7224);
const index$4 = __nccwpck_require__(4230);
const index$5 = __nccwpck_require__(2515);
const index$6 = __nccwpck_require__(8332);
const index$7 = __nccwpck_require__(1028);
const index$8 = __nccwpck_require__(6210);
const index$9 = __nccwpck_require__(3411);
const index$a = __nccwpck_require__(1392);
const index$b = __nccwpck_require__(2584);
const index$c = __nccwpck_require__(9687);
const index$d = __nccwpck_require__(6424);
const index$e = __nccwpck_require__(6703);
const index$f = __nccwpck_require__(4815);
const index$g = __nccwpck_require__(4872);
const index$h = __nccwpck_require__(147);
const index$i = __nccwpck_require__(6318);
const index$j = __nccwpck_require__(4844);
const index$k = __nccwpck_require__(314);
const index$l = __nccwpck_require__(144);
const index$m = __nccwpck_require__(6419);
const index$n = __nccwpck_require__(9859);
const index$o = __nccwpck_require__(5516);
const index$p = __nccwpck_require__(3036);
const index$q = __nccwpck_require__(5064);
const index$r = __nccwpck_require__(3288);
const index$s = __nccwpck_require__(3489);
const index$t = __nccwpck_require__(1598);
const index$u = __nccwpck_require__(6604);
const index_gen = __nccwpck_require__(6111);
const index$v = __nccwpck_require__(2813);
const index$w = __nccwpck_require__(8835);
const index$x = __nccwpck_require__(7583);
const index$y = __nccwpck_require__(8876);
const index$z = __nccwpck_require__(3727);
exports.enableConsoleLogger = index.enableConsoleLogger;
exports.setLogger = index.setLogger;
exports.createAdvancedClient = client.createAdvancedClient;
exports.createClient = client.createClient;
exports.withAdditionalInterceptors = clientIniFactory.withAdditionalInterceptors;
exports.withDefaultPageSize = clientIniFactory.withDefaultPageSize;
exports.withHTTPClient = clientIniFactory.withHTTPClient;
exports.withProfile = clientIniFactory.withProfile;
exports.withUserAgent = clientIniFactory.withUserAgent;
exports.withUserAgentSuffix = clientIniFactory.withUserAgentSuffix;
exports.Decimal = customTypes.Decimal;
exports.Errors = index$1;
exports.isJSONObject = json.isJSONObject;
exports.createExponentialBackoffStrategy = intervalRetrier.createExponentialBackoffStrategy;
exports.tryAtIntervals = intervalRetrier.tryAtIntervals;
exports.waitForResource = intervalRetrier.waitForResource;
exports.addAsyncHeaderInterceptor = helpers.addAsyncHeaderInterceptor;
exports.API = api.API;
exports.authenticateWithSessionToken = auth.authenticateWithSessionToken;
exports.marshalBlobToScwFile = customMarshalling.marshalBlobToScwFile;
exports.marshalDecimal = customMarshalling.marshalDecimal;
exports.marshalMoney = customMarshalling.marshalMoney;
exports.marshalScwFile = customMarshalling.marshalScwFile;
exports.marshalTimeSeries = customMarshalling.marshalTimeSeries;
exports.unmarshalDecimal = customMarshalling.unmarshalDecimal;
exports.unmarshalMoney = customMarshalling.unmarshalMoney;
exports.unmarshalScwFile = customMarshalling.unmarshalScwFile;
exports.unmarshalServiceInfo = customMarshalling.unmarshalServiceInfo;
exports.unmarshalTimeSeries = customMarshalling.unmarshalTimeSeries;
exports.unmarshalTimeSeriesPoint = customMarshalling.unmarshalTimeSeriesPoint;
exports.resolveOneOf = marshalling.resolveOneOf;
exports.unmarshalArrayOfObject = marshalling.unmarshalArrayOfObject;
exports.unmarshalDate = marshalling.unmarshalDate;
exports.unmarshalMapOfObject = marshalling.unmarshalMapOfObject;
exports.urlParams = marshalling.urlParams;
exports.validatePathParam = marshalling.validatePathParam;
exports.enrichForPagination = resourcePaginator.enrichForPagination;
exports.Account = index$2;
exports.AppleSilicon = index$3;
exports.BareMetal = index$4;
exports.Billing = index$5;
exports.Block = index$6;
exports.Cockpit = index$7;
exports.Container = index$8;
exports.Dedibox = index$9;
exports.DocumentDB = index$a;
exports.Domain = index$b;
exports.FlexibleIP = index$c;
exports.Function = index$d;
exports.IAM = index$e;
exports.Instance = index$f;
exports.IOT = index$g;
exports.IPAM = index$h;
exports.IPFS = index$i;
exports.Jobs = index$j;
exports.K8S = index$k;
exports.KeyManager = index$l;
exports.LB = index$m;
exports.LLMInference = index$n;
exports.Marketplace = index$o;
exports.MNQ = index$p;
exports.RDB = index$q;
exports.Redis = index$r;
exports.Registry = index$s;
exports.Secret = index$t;
exports.ServerlessSQLDB = index$u;
exports.Std = index_gen;
exports.Test = index$v;
exports.TransactionalEmail = index$w;
exports.VPC = index$x;
exports.VPCGW = index$y;
exports.Webhosting = index$z;


/***/ }),

/***/ 9003:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const sleep = __nccwpck_require__(9410);
const DEFAULT_TIMEOUT_SECONDS = 300;
const DEFAULT_MIN_DELAY_SECONDS = 1;
const DEFAULT_MAX_DELAY_SECONDS = 30;
function* createExponentialBackoffStrategy(minDelay, maxDelay) {
  if (minDelay < 1 || maxDelay < 1 || minDelay > maxDelay) {
    throw new Error(
      "Waiter: minDelay must be >= 1 and maxDelay must be >= minDelay"
    );
  }
  let attempt = 1;
  const ceiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
  const randomInRange = (min, max) => min + Math.random() * (max - min);
  while (true) {
    if (attempt > ceiling) {
      yield maxDelay;
    } else {
      yield randomInRange(minDelay, minDelay * 2 ** (attempt - 1));
    }
    attempt += 1;
  }
}
const tryAtIntervals = async (retry, strategy, timeout = DEFAULT_TIMEOUT_SECONDS) => {
  const timeoutTimestamp = Date.now() + timeout * 1e3;
  let retryCount = 0;
  while (Date.now() <= timeoutTimestamp) {
    const delay = strategy.next(retryCount += 1).value * 1e3;
    if (timeoutTimestamp <= Date.now() + delay) break;
    await sleep.sleep(delay);
    const { value, done } = await retry();
    if (done) return value;
  }
  throw new Error(`Timeout after ${timeout}s`);
};
const waitForResource = (stop, fetcher, request, options, strategy = createExponentialBackoffStrategy(
  options?.minDelay ?? DEFAULT_MIN_DELAY_SECONDS,
  options?.maxDelay ?? DEFAULT_MAX_DELAY_SECONDS
)) => tryAtIntervals(
  async () => {
    const value = await fetcher(request);
    return {
      done: await stop(value),
      value
    };
  },
  strategy,
  options?.timeout
);
exports.createExponentialBackoffStrategy = createExponentialBackoffStrategy;
exports.tryAtIntervals = tryAtIntervals;
exports.waitForResource = waitForResource;


/***/ }),

/***/ 9410:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const sleep = (ms) => new Promise((resolve) => {
  setTimeout(resolve, ms);
});
exports.sleep = sleep;


/***/ }),

/***/ 5714:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const composeRequestInterceptors = (interceptors) => async (request) => interceptors.reduce(
  async (asyncResult, interceptor) => interceptor({ request: await asyncResult }),
  Promise.resolve(request)
);
const composeResponseInterceptors = (interceptors) => async (response) => interceptors.reduce(
  async (asyncResult, interceptor) => interceptor({ response: await asyncResult }),
  Promise.resolve(response)
);
const composeResponseErrorInterceptors = (interceptors) => async (request, error) => {
  let prevError = error;
  for (const interceptor of interceptors) {
    try {
      const res = await interceptor({ request, error: prevError });
      return res;
    } catch (err) {
      prevError = err;
    }
  }
  throw prevError;
};
exports.composeRequestInterceptors = composeRequestInterceptors;
exports.composeResponseErrorInterceptors = composeResponseErrorInterceptors;
exports.composeResponseInterceptors = composeResponseInterceptors;


/***/ }),

/***/ 7185:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const addHeaderInterceptor = (key, value) => ({ request }) => {
  const clone = request.clone();
  if (value !== void 0) {
    clone.headers.append(key, value);
  }
  return clone;
};
const addAsyncHeaderInterceptor = (key, getter) => async (request) => addHeaderInterceptor(key, await getter())(request);
exports.addAsyncHeaderInterceptor = addAsyncHeaderInterceptor;
exports.addHeaderInterceptor = addHeaderInterceptor;


/***/ }),

/***/ 1174:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const levelResolver = __nccwpck_require__(3758);
class ConsoleLogger {
  constructor(logLevel, prefix = "", output = console) {
    this.logLevel = logLevel;
    this.prefix = prefix;
    this.output = output;
    this.level = levelResolver.LevelResolver[this.logLevel];
  }
  level;
  makeMethod(method) {
    return (message) => {
      if (levelResolver.shouldLog(this.level, method)) {
        this.output[method](this.prefix ? `${this.prefix} ${message}` : message);
      }
    };
  }
  debug = this.makeMethod("debug");
  error = this.makeMethod("error");
  info = this.makeMethod("info");
  warn = this.makeMethod("warn");
}
exports.ConsoleLogger = ConsoleLogger;


/***/ }),

/***/ 2191:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const consoleLogger = __nccwpck_require__(1174);
let sdkLogger = new consoleLogger.ConsoleLogger("silent");
const setLogger = (logger) => {
  sdkLogger = logger;
};
const enableConsoleLogger = (logLevel = "warn", prefix = "scaleway-sdk-js:") => setLogger(new consoleLogger.ConsoleLogger(logLevel, prefix));
const getLogger = () => sdkLogger;
exports.enableConsoleLogger = enableConsoleLogger;
exports.getLogger = getLogger;
exports.setLogger = setLogger;


/***/ }),

/***/ 3758:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
var LevelResolver = /* @__PURE__ */ ((LevelResolver2) => {
  LevelResolver2[LevelResolver2["silent"] = 0] = "silent";
  LevelResolver2[LevelResolver2["error"] = 1] = "error";
  LevelResolver2[LevelResolver2["warn"] = 2] = "warn";
  LevelResolver2[LevelResolver2["info"] = 3] = "info";
  LevelResolver2[LevelResolver2["debug"] = 4] = "debug";
  return LevelResolver2;
})(LevelResolver || {});
const shouldLog = (currentLevel, level) => LevelResolver[level] <= currentLevel;
exports.LevelResolver = LevelResolver;
exports.shouldLog = shouldLog;


/***/ }),

/***/ 5411:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const isAccessKeyRegex = /^SCW[A-Z0-9]{17}$/i;
const isRegionRegex = /^[a-z]{2}-[a-z]{3}$/i;
const isUUIDRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;
const isZoneRegex = /^[a-z]{2}-[a-z]{3}-[1-9]$/i;
const isUUID = (str) => isUUIDRegex.test(str);
const isAccessKey = (str) => isAccessKeyRegex.test(str);
const isSecretKey = (str) => isUUID(str);
const isOrganizationId = (str) => isUUID(str);
const isProjectId = (str) => isUUID(str);
const isRegion = (str) => isRegionRegex.test(str);
const isZone = (str) => isZoneRegex.test(str);
const isURL = (str) => {
  let url;
  try {
    url = new URL(str);
  } catch {
    return false;
  }
  return url.protocol === "http:" || url.protocol === "https:";
};
exports.isAccessKey = isAccessKey;
exports.isOrganizationId = isOrganizationId;
exports.isProjectId = isProjectId;
exports.isRegion = isRegion;
exports.isSecretKey = isSecretKey;
exports.isURL = isURL;
exports.isUUID = isUUID;
exports.isZone = isZone;


/***/ }),

/***/ 8977:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
let API$1 = class API {
  constructor(client) {
    this.client = client;
  }
};
exports.API = API$1;


/***/ }),

/***/ 2475:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const helpers = __nccwpck_require__(7185);
const clientIniProfile = __nccwpck_require__(643);
const SESSION_HEADER_KEY = "x-session-token";
const AUTH_HEADER_KEY = "x-auth-token";
const authenticateWithSessionToken = (getToken) => helpers.addAsyncHeaderInterceptor(SESSION_HEADER_KEY, getToken);
const authenticateWithSecrets = (secrets) => {
  clientIniProfile.assertValidAuthenticationSecrets(secrets);
  return helpers.addHeaderInterceptor(AUTH_HEADER_KEY, secrets.secretKey);
};
const obfuscateToken = (key) => `${key.substring(0, 5)}xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`;
const obfuscateUUID = (key) => `${key.substring(0, 8)}-xxxx-xxxx-xxxx-xxxxxxxxxxxx`;
const obfuscateAuthHeadersEntry = ([
  name,
  value
]) => {
  if (name === SESSION_HEADER_KEY) return [name, obfuscateToken(value)];
  if (name === AUTH_HEADER_KEY) return [name, obfuscateUUID(value)];
  return [name, value];
};
exports.authenticateWithSecrets = authenticateWithSecrets;
exports.authenticateWithSessionToken = authenticateWithSessionToken;
exports.obfuscateAuthHeadersEntry = obfuscateAuthHeadersEntry;
exports.obfuscateToken = obfuscateToken;
exports.obfuscateUUID = obfuscateUUID;


/***/ }),

/***/ 5275:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const auth = __nccwpck_require__(2475);
const clientIniProfile = __nccwpck_require__(643);
const withProfile = (profile) => (settings) => {
  const newSettings = { ...settings };
  if (profile.apiURL) {
    newSettings.apiURL = profile.apiURL;
  }
  if (profile.defaultOrganizationId) {
    newSettings.defaultOrganizationId = profile.defaultOrganizationId;
  }
  if (profile.defaultProjectId) {
    newSettings.defaultProjectId = profile.defaultProjectId;
  }
  if (profile.defaultRegion) {
    newSettings.defaultRegion = profile.defaultRegion;
  }
  if (profile.defaultZone) {
    newSettings.defaultZone = profile.defaultZone;
  }
  if (clientIniProfile.hasAuthenticationSecrets(profile)) {
    newSettings.interceptors = [
      {
        request: auth.authenticateWithSecrets(profile)
      },
      ...newSettings.interceptors
    ];
  }
  return newSettings;
};
const withHTTPClient = (httpClient) => (settings) => ({ ...settings, httpClient });
const withDefaultPageSize = (defaultPageSize) => (settings) => ({ ...settings, defaultPageSize });
const withUserAgent = (userAgent) => (settings) => ({ ...settings, userAgent });
const withUserAgentSuffix = (userAgent) => (settings) => ({
  ...settings,
  userAgent: settings.userAgent ? `${settings.userAgent} ${userAgent}` : userAgent
});
const withAdditionalInterceptors = (interceptors) => (settings) => ({
  ...settings,
  interceptors: settings.interceptors.concat(interceptors)
});
const withLegacyInterceptors = () => (settings) => {
  if (!settings.requestInterceptors && !settings.responseInterceptors) {
    return settings;
  }
  const allInterceptors = settings.interceptors.concat(
    (settings.requestInterceptors ?? []).map((obj) => ({
      request: obj
    })),
    (settings.responseInterceptors ?? []).map((obj) => ({
      response: obj
    }))
  );
  return {
    ...settings,
    interceptors: allInterceptors
  };
};
exports.withAdditionalInterceptors = withAdditionalInterceptors;
exports.withDefaultPageSize = withDefaultPageSize;
exports.withHTTPClient = withHTTPClient;
exports.withLegacyInterceptors = withLegacyInterceptors;
exports.withProfile = withProfile;
exports.withUserAgent = withUserAgent;
exports.withUserAgentSuffix = withUserAgentSuffix;


/***/ }),

/***/ 643:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const stringValidation = __nccwpck_require__(5411);
const hasAuthenticationSecrets = (obj) => typeof obj.accessKey === "string" && obj.accessKey !== "" && typeof obj.secretKey === "string" && obj.secretKey !== "";
function assertValidAuthenticationSecrets(obj) {
  if (!(obj.accessKey && obj.secretKey)) {
    throw new Error(
      `Invalid secrets, accessKey & secretKey must be defined. See https://www.scaleway.com/en/docs/identity-and-access-management/iam/how-to/create-api-keys/`
    );
  }
  if (!stringValidation.isAccessKey(obj.accessKey)) {
    throw new Error(
      `Invalid access key format '${obj.accessKey}', expected SCWXXXXXXXXXXXXXXXXX format. See https://www.scaleway.com/en/docs/identity-and-access-management/iam/how-to/create-api-keys/`
    );
  }
  if (!stringValidation.isSecretKey(obj.secretKey)) {
    throw new Error(
      `Invalid secret key format '${obj.secretKey}', expected a UUID: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx. See https://www.scaleway.com/en/docs/identity-and-access-management/iam/how-to/create-api-keys/`
    );
  }
}
exports.assertValidAuthenticationSecrets = assertValidAuthenticationSecrets;
exports.hasAuthenticationSecrets = hasAuthenticationSecrets;


/***/ }),

/***/ 4944:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const stringValidation = __nccwpck_require__(5411);
const assertValidSettings = (obj) => {
  if (obj.defaultOrganizationId !== void 0) {
    if (typeof obj.defaultOrganizationId !== "string" || obj.defaultOrganizationId.length === 0) {
      throw new Error("Default organization ID cannot be empty");
    }
    if (!stringValidation.isOrganizationId(obj.defaultOrganizationId)) {
      throw new Error(
        `Invalid organization ID format '${obj.defaultOrganizationId}', expected a UUID: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`
      );
    }
  }
  if (obj.defaultProjectId !== void 0) {
    if (typeof obj.defaultProjectId !== "string" || obj.defaultProjectId.length === 0) {
      throw new Error("Default project ID cannot be empty");
    }
    if (!stringValidation.isProjectId(obj.defaultProjectId)) {
      throw new Error(
        `Invalid project ID format '${obj.defaultProjectId}', expected a UUID: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`
      );
    }
  }
  if (obj.defaultRegion && !stringValidation.isRegion(obj.defaultRegion)) {
    throw new Error(`Invalid default region format '${obj.defaultRegion}'`);
  }
  if (obj.defaultZone && !stringValidation.isZone(obj.defaultZone)) {
    throw new Error(`Invalid default zone format '${obj.defaultZone}'`);
  }
  if (!stringValidation.isURL(obj.apiURL)) {
    throw new Error(`Invalid URL ${obj.apiURL}`);
  }
  if (obj.apiURL.endsWith("/")) {
    throw new Error(
      `Invalid URL ${obj.apiURL}: it should not have a trailing slash`
    );
  }
  if (typeof obj.httpClient !== typeof fetch) {
    throw new Error(`Invalid HTTP Client`);
  }
  if (obj.defaultPageSize !== void 0 && (typeof obj.defaultPageSize !== "number" || Number.isNaN(obj.defaultPageSize) || obj.defaultPageSize <= 0)) {
    throw new Error(
      `Invalid defaultPageSize ${obj.defaultPageSize}: it should be a number above 0`
    );
  }
  if (typeof obj.userAgent !== "string") {
    throw new Error(`Invalid User-Agent`);
  }
};
exports.assertValidSettings = assertValidSettings;


/***/ }),

/***/ 6745:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index = __nccwpck_require__(2191);
const clientIniFactory = __nccwpck_require__(5275);
const clientSettings = __nccwpck_require__(4944);
const constants = __nccwpck_require__(512);
const buildFetcher = __nccwpck_require__(5704);
const DEFAULT_SETTINGS = {
  apiURL: "https://api.scaleway.com",
  httpClient: fetch,
  interceptors: [],
  userAgent: constants.userAgent
};
const createAdvancedClient = (...configs) => {
  const settings = configs.concat([clientIniFactory.withLegacyInterceptors()]).reduce(
    (currentSettings, config) => config(currentSettings),
    DEFAULT_SETTINGS
  );
  clientSettings.assertValidSettings(settings);
  index.getLogger().info(`init Scaleway SDK version ${constants.version}`);
  return {
    fetch: buildFetcher.buildFetcher(settings, settings.httpClient),
    settings
  };
};
const createClient = (profile = {}) => createAdvancedClient(clientIniFactory.withProfile(profile));
exports.createAdvancedClient = createAdvancedClient;
exports.createClient = createClient;


/***/ }),

/***/ 512:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const version = "v2.43.0";
const userAgent = `scaleway-sdk-js/${version}`;
exports.userAgent = userAgent;
exports.version = version;


/***/ }),

/***/ 5667:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const marshalling = __nccwpck_require__(1502);
const index = __nccwpck_require__(5604);
const customTypes = __nccwpck_require__(759);
const unmarshalMoney = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'Money' failed as data isn't a dictionary.`
    );
  }
  return {
    currencyCode: data.currency_code,
    nanos: data.nanos,
    units: data.units
  };
};
const unmarshalServiceInfo = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ServiceInfo' failed as data isn't a dictionary.`
    );
  }
  return {
    description: data.description,
    documentationUrl: data.documentation_url,
    name: data.name,
    version: data.version
  };
};
const unmarshalScwFile = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'ScwFile' failed as data isn't a dictionary.`
    );
  }
  return {
    content: data.content,
    contentType: data.content_type,
    name: data.name
  };
};
const unmarshalTimeSeriesPoint = (data) => {
  if (!Array.isArray(data)) {
    throw new TypeError(
      `Unmarshalling the type 'TimeSeriesPoint' failed as data isn't an array.`
    );
  }
  return {
    timestamp: marshalling.unmarshalDate(data[0]),
    value: data[1]
  };
};
const unmarshalTimeSeries = (data) => {
  if (!json.isJSONObject(data)) {
    throw new TypeError(
      `Unmarshalling the type 'TimeSeries' failed as data isn't a dictionary.`
    );
  }
  return {
    metadata: data.metadata,
    name: data.name,
    points: marshalling.unmarshalArrayOfObject(data.points, unmarshalTimeSeriesPoint)
  };
};
const unmarshalDecimal = (data) => {
  if (!(typeof data === "string")) {
    throw new TypeError(
      `Unmarshalling the type 'Decimal' failed as data isn't a string.`
    );
  }
  return new customTypes.Decimal(data);
};
const marshalScwFile = (obj) => ({
  content: obj.content,
  content_type: obj.contentType,
  name: obj.name
});
const marshalBlobToScwFile = async (blob) => ({
  content: index.fromByteArray(new Uint8Array(await blob.arrayBuffer())),
  content_type: blob.type,
  name: "file"
});
const marshalMoney = (obj) => ({
  currency_code: obj.currencyCode,
  nanos: obj.nanos,
  units: obj.units
});
const marshalTimeSeriesPoint = (obj) => ({
  timestamp: obj.timestamp?.toISOString(),
  value: obj.value
});
const marshalTimeSeries = (obj) => ({
  metadata: obj.metadata,
  name: obj.name,
  points: obj.points.map((elt) => marshalTimeSeriesPoint(elt))
});
const marshalDecimal = (obj) => obj.toString();
exports.marshalBlobToScwFile = marshalBlobToScwFile;
exports.marshalDecimal = marshalDecimal;
exports.marshalMoney = marshalMoney;
exports.marshalScwFile = marshalScwFile;
exports.marshalTimeSeries = marshalTimeSeries;
exports.marshalTimeSeriesPoint = marshalTimeSeriesPoint;
exports.unmarshalDecimal = unmarshalDecimal;
exports.unmarshalMoney = unmarshalMoney;
exports.unmarshalScwFile = unmarshalScwFile;
exports.unmarshalServiceInfo = unmarshalServiceInfo;
exports.unmarshalTimeSeries = unmarshalTimeSeries;
exports.unmarshalTimeSeriesPoint = unmarshalTimeSeriesPoint;


/***/ }),

/***/ 759:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
class Decimal {
  str;
  constructor(v) {
    this.str = v;
  }
  toString = () => this.str;
}
exports.Decimal = Decimal;


/***/ }),

/***/ 4292:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const invalidRequestMapper = __nccwpck_require__(3491);
const unknownResourceMapper = __nccwpck_require__(2558);
const scwError = __nccwpck_require__(1668);
const alreadyExistsError = __nccwpck_require__(3698);
const deniedAuthenticationError = __nccwpck_require__(8648);
const invalidArgumentsError = __nccwpck_require__(4604);
const outOfStockError = __nccwpck_require__(1294);
const permissionsDeniedError = __nccwpck_require__(1507);
const preconditionFailedError = __nccwpck_require__(1537);
const quotasExceededError = __nccwpck_require__(7093);
const resourceExpiredError = __nccwpck_require__(5037);
const resourceLockedError = __nccwpck_require__(625);
const resourceNotFoundError = __nccwpck_require__(7825);
const tooManyRequestsError = __nccwpck_require__(2582);
const transientStateError = __nccwpck_require__(8416);
const unmarshalStandardError = (type, status, body) => {
  let error;
  switch (type) {
    case "denied_authentication":
      error = deniedAuthenticationError.DeniedAuthenticationError;
      break;
    case "invalid_arguments":
      error = invalidArgumentsError.InvalidArgumentsError;
      break;
    case "out_of_stock":
      error = outOfStockError.OutOfStockError;
      break;
    case "permissions_denied":
      error = permissionsDeniedError.PermissionsDeniedError;
      break;
    case "precondition_failed":
      error = preconditionFailedError.PreconditionFailedError;
      break;
    case "quotas_exceeded":
      error = quotasExceededError.QuotasExceededError;
      break;
    case "expired":
      error = resourceExpiredError.ResourceExpiredError;
      break;
    case "not_found":
      error = resourceNotFoundError.ResourceNotFoundError;
      break;
    case "locked":
      error = resourceLockedError.ResourceLockedError;
      break;
    case "transient_state":
      error = transientStateError.TransientStateError;
      break;
    case "already_exists":
      error = alreadyExistsError.AlreadyExistsError;
      break;
    case "too_many_requests":
      error = tooManyRequestsError.TooManyRequestsError;
      break;
    default:
      return null;
  }
  return error.fromJSON(status, body);
};
const unmarshalNonStandardError = (type, status, body) => {
  switch (type) {
    case "unknown_resource":
      return unknownResourceMapper.UnknownResourceMapper.fromJSON(status, body);
    case "invalid_request_error":
      return invalidRequestMapper.InvalidRequestMapper.fromJSON(status, body);
    default:
      return null;
  }
};
const parseScalewayError = (status, body) => {
  const parsableError = typeof body.type === "string" && (unmarshalStandardError(body.type, status, body) ?? unmarshalNonStandardError(body.type, status, body));
  return parsableError || new scwError.ScalewayError(status, body);
};
exports.parseScalewayError = parseScalewayError;


/***/ }),

/***/ 3491:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const scwError = __nccwpck_require__(1668);
const invalidArgumentsError = __nccwpck_require__(4604);
const quotasExceededError = __nccwpck_require__(7093);
const types = __nccwpck_require__(6037);
class InvalidRequestMapper {
  static fromJSON(status, obj) {
    if (typeof obj.message === "string" && obj.message.toLowerCase().includes("quota exceeded for this resource")) {
      return new quotasExceededError.QuotasExceededError(status, obj, [
        {
          current: 0,
          quota: 0,
          resource: typeof obj.resource === "string" ? obj.resource : ""
        }
      ]);
    }
    const fields = obj.fields && types.isRecordOfStringArray(obj.fields) ? obj.fields : {};
    const fieldsMessages = Object.entries(fields);
    if (fieldsMessages.length) {
      return new invalidArgumentsError.InvalidArgumentsError(
        status,
        obj,
        fieldsMessages.map(
          ([argumentName, messages]) => messages.map((helpMessage) => ({
            argumentName,
            helpMessage,
            reason: "constraint"
          }))
        ).flat()
      );
    }
    return new scwError.ScalewayError(status, obj);
  }
}
exports.InvalidRequestMapper = InvalidRequestMapper;


/***/ }),

/***/ 2558:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const stringValidation = __nccwpck_require__(5411);
const scwError = __nccwpck_require__(1668);
const resourceNotFoundError = __nccwpck_require__(7825);
class UnknownResourceMapper {
  static fromJSON(status, obj) {
    const messageParts = typeof obj.message === "string" ? obj.message.split(/"|'/) : [];
    if (messageParts.length === 3 && stringValidation.isUUID(messageParts[1])) {
      return new resourceNotFoundError.ResourceNotFoundError(
        status,
        obj,
        // transform `Security group ` to `security_group`
        // `.replaceAll()` may be too recent to use yet.
        // that's why we're using `.split(' ').join('_')` for now.
        messageParts[0].trim().toLowerCase().split(" ").join("_"),
        messageParts[1]
      );
    }
    return new scwError.ScalewayError(status, obj);
  }
}
exports.UnknownResourceMapper = UnknownResourceMapper;


/***/ }),

/***/ 1668:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const types = __nccwpck_require__(6037);
const buildDefaultMessage = (status, body) => {
  const message = [`http error ${status}`];
  if (typeof body === "string") {
    message.push(body);
  } else if (json.isJSONObject(body)) {
    if (typeof body.resource === "string") {
      message.push(`resource ${body.resource}`);
    }
    if (typeof body.message === "string") {
      message.push(body.message);
    }
    if (body.fields && types.isRecordOfStringArray(body.fields)) {
      message.push(
        Object.entries(body.fields).map(([name, list]) => `${name} (${list.join(", ")})`).join(", ")
      );
    }
  }
  return message.join(": ");
};
class ScalewayError extends Error {
  constructor(status, body, message = buildDefaultMessage(status, body)) {
    super(message);
    this.status = status;
    this.body = body;
    this.message = message;
    this.name = "ScalewayError";
    this.rawMessage = typeof body === "object" && typeof body.message === "string" ? body.message : void 0;
    Object.setPrototypeOf(this, new.target.prototype);
  }
  /** The message originating from the payload. */
  rawMessage;
  static fromJSON(status, obj) {
    return new ScalewayError(status, obj);
  }
  toString() {
    return `${this.name}: ${this.message}`;
  }
}
exports.ScalewayError = ScalewayError;


/***/ }),

/***/ 3698:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const scwError = __nccwpck_require__(1668);
class AlreadyExistsError extends scwError.ScalewayError {
  constructor(status, body, resource, resourceId, helpMessage) {
    super(
      status,
      body,
      `resource ${resource} with ID ${resourceId} already exists: ${helpMessage}`
    );
    this.status = status;
    this.body = body;
    this.resource = resource;
    this.resourceId = resourceId;
    this.helpMessage = helpMessage;
    this.name = "AlreadyExistsError";
  }
  static fromJSON(status, obj) {
    if (typeof obj.resource !== "string" || typeof obj.resource_id !== "string" || typeof obj.help_message !== "string") {
      return null;
    }
    return new AlreadyExistsError(
      status,
      obj,
      obj.resource,
      obj.resource_id,
      obj.help_message
    );
  }
}
exports.AlreadyExistsError = AlreadyExistsError;


/***/ }),

/***/ 8648:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const scwError = __nccwpck_require__(1668);
const buildMessage = (method, reason) => {
  let reasonDesc;
  switch (reason) {
    case "invalid_argument":
      reasonDesc = `invalid ${method} format or empty value`;
      break;
    case "not_found":
      reasonDesc = `${method} does not exist`;
      break;
    case "expired":
      reasonDesc = `${method} is expired`;
      break;
    default:
      reasonDesc = `unknown reason for ${method}`;
  }
  return `denied authentication: ${reasonDesc}`;
};
class DeniedAuthenticationError extends scwError.ScalewayError {
  constructor(status, body, method, reason) {
    super(status, body, buildMessage(method, reason));
    this.status = status;
    this.body = body;
    this.method = method;
    this.reason = reason;
    this.name = "DeniedAuthenticationError";
  }
  static fromJSON(status, obj) {
    if (typeof obj.method !== "string" || typeof obj.reason !== "string") {
      return null;
    }
    return new DeniedAuthenticationError(status, obj, obj.method, obj.reason);
  }
}
exports.DeniedAuthenticationError = DeniedAuthenticationError;


/***/ }),

/***/ 9945:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const scwError = __nccwpck_require__(1668);
const alreadyExistsError = __nccwpck_require__(3698);
const deniedAuthenticationError = __nccwpck_require__(8648);
const invalidArgumentsError = __nccwpck_require__(4604);
const outOfStockError = __nccwpck_require__(1294);
const permissionsDeniedError = __nccwpck_require__(1507);
const preconditionFailedError = __nccwpck_require__(1537);
const quotasExceededError = __nccwpck_require__(7093);
const resourceExpiredError = __nccwpck_require__(5037);
const resourceLockedError = __nccwpck_require__(625);
const resourceNotFoundError = __nccwpck_require__(7825);
const tooManyRequestsError = __nccwpck_require__(2582);
const transientStateError = __nccwpck_require__(8416);
exports.ScalewayError = scwError.ScalewayError;
exports.AlreadyExistsError = alreadyExistsError.AlreadyExistsError;
exports.DeniedAuthenticationError = deniedAuthenticationError.DeniedAuthenticationError;
exports.InvalidArgumentsError = invalidArgumentsError.InvalidArgumentsError;
exports.OutOfStockError = outOfStockError.OutOfStockError;
exports.PermissionsDeniedError = permissionsDeniedError.PermissionsDeniedError;
exports.PreconditionFailedError = preconditionFailedError.PreconditionFailedError;
exports.QuotasExceededError = quotasExceededError.QuotasExceededError;
exports.ResourceExpiredError = resourceExpiredError.ResourceExpiredError;
exports.ResourceLockedError = resourceLockedError.ResourceLockedError;
exports.ResourceNotFoundError = resourceNotFoundError.ResourceNotFoundError;
exports.TooManyRequestsError = tooManyRequestsError.TooManyRequestsError;
exports.TransientStateError = transientStateError.TransientStateError;


/***/ }),

/***/ 4604:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const scwError = __nccwpck_require__(1668);
const buildMessage = (list) => {
  const invalidArgs = list.reduce((acc, details) => {
    let readableReason = "";
    switch (details.reason) {
      case "required":
        readableReason = `is required`;
        break;
      case "format":
        readableReason = `is wrongly formatted`;
        break;
      case "constraint":
        readableReason = `does not respect constraint`;
        break;
      default:
        readableReason = `is invalid for unexpected reason`;
        break;
    }
    if (details.helpMessage && details.helpMessage.length > 0) {
      readableReason = readableReason.concat(`, `, details.helpMessage);
    }
    acc.push(`${details.argumentName} ${readableReason}`);
    return acc;
  }, []);
  return `invalid argument(s): ${invalidArgs.join("; ")}`;
};
class InvalidArgumentsError extends scwError.ScalewayError {
  constructor(status, body, details) {
    super(status, body, buildMessage(details));
    this.status = status;
    this.body = body;
    this.details = details;
    this.name = "InvalidArgumentsError";
  }
  static fromJSON(status, obj) {
    if (!Array.isArray(obj.details)) return null;
    return new InvalidArgumentsError(
      status,
      obj,
      obj.details.reduce(
        (list, detail) => json.isJSONObject(detail) && typeof detail.argument_name === "string" && typeof detail.reason === "string" ? list.concat({
          argumentName: detail.argument_name,
          helpMessage: typeof detail.help_message === "string" ? detail.help_message : void 0,
          reason: detail.reason
        }) : list,
        []
      )
    );
  }
}
exports.InvalidArgumentsError = InvalidArgumentsError;


/***/ }),

/***/ 1294:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const scwError = __nccwpck_require__(1668);
class OutOfStockError extends scwError.ScalewayError {
  constructor(status, body, resource) {
    super(status, body, `resource ${resource} is out of stock`);
    this.status = status;
    this.body = body;
    this.resource = resource;
    this.name = "OutOfStockError";
  }
  static fromJSON(status, obj) {
    if (typeof obj.resource !== "string") return null;
    return new OutOfStockError(status, obj, obj.resource);
  }
}
exports.OutOfStockError = OutOfStockError;


/***/ }),

/***/ 1507:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const scwError = __nccwpck_require__(1668);
const buildMessage = (list) => `insufficient permissions: ${list.map(({ action, resource }) => `${action} ${resource}`).join("; ")}`;
class PermissionsDeniedError extends scwError.ScalewayError {
  constructor(status, body, list) {
    super(status, body, buildMessage(list));
    this.status = status;
    this.body = body;
    this.list = list;
    this.name = "PermissionsDeniedError";
  }
  static fromJSON(status, obj) {
    if (!Array.isArray(obj.details)) return null;
    return new PermissionsDeniedError(
      status,
      obj,
      obj.details.reduce(
        (list, detail) => json.isJSONObject(detail) && typeof detail.resource === "string" && typeof detail.action === "string" ? list.concat({
          action: detail.action,
          resource: detail.resource
        }) : list,
        []
      )
    );
  }
}
exports.PermissionsDeniedError = PermissionsDeniedError;


/***/ }),

/***/ 1537:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const scwError = __nccwpck_require__(1668);
const buildMessage = (precondition, helpMessage) => {
  let message = `precondition failed: ${precondition}`;
  if (typeof helpMessage === "string" && helpMessage.length > 0) {
    message = message.concat(", ", helpMessage);
  }
  return message;
};
class PreconditionFailedError extends scwError.ScalewayError {
  constructor(status, body, precondition, helpMessage) {
    super(status, body, buildMessage(precondition, helpMessage));
    this.status = status;
    this.body = body;
    this.precondition = precondition;
    this.helpMessage = helpMessage;
    this.name = "PreconditionFailedError";
  }
  static fromJSON(status, obj) {
    if (typeof obj.precondition !== "string" || typeof obj.help_message !== "string") {
      return null;
    }
    return new PreconditionFailedError(
      status,
      obj,
      obj.precondition,
      obj.help_message
    );
  }
}
exports.PreconditionFailedError = PreconditionFailedError;


/***/ }),

/***/ 7093:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const scwError = __nccwpck_require__(1668);
const buildMessage = (list) => `quota(s) exceeded: ${list.map((details) => {
  const message = `${details.resource} has reached its quota (${details.current}/${details.quota})`;
  return details.scope ? `${message} for ${details.scope.kind} '${details.scope.id}'` : message;
}).join("; ")}`;
const buildScope = (detail) => {
  if (typeof detail.organization_id === "string" && detail.organization_id.length) {
    return { id: detail.organization_id, kind: "organization" };
  }
  if (typeof detail.project_id === "string" && detail.project_id.length) {
    return { id: detail.project_id, kind: "project" };
  }
  return void 0;
};
class QuotasExceededError extends scwError.ScalewayError {
  constructor(status, body, list) {
    super(status, body, buildMessage(list));
    this.status = status;
    this.body = body;
    this.list = list;
    this.name = "QuotasExceededError";
  }
  static fromJSON(status, obj) {
    if (!Array.isArray(obj.details)) return null;
    return new QuotasExceededError(
      status,
      obj,
      obj.details.reduce(
        (list, detail) => json.isJSONObject(detail) && typeof detail.resource === "string" && typeof detail.quota === "number" && typeof detail.current === "number" ? list.concat({
          current: detail.current,
          quota: detail.quota,
          resource: detail.resource,
          scope: buildScope(detail)
        }) : list,
        []
      )
    );
  }
}
exports.QuotasExceededError = QuotasExceededError;


/***/ }),

/***/ 5037:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const scwError = __nccwpck_require__(1668);
class ResourceExpiredError extends scwError.ScalewayError {
  constructor(status, body, resource, resourceId, expiredSince) {
    super(
      status,
      body,
      `resource ${resource} with ID ${resourceId} expired since ${expiredSince.toISOString()}`
    );
    this.status = status;
    this.body = body;
    this.resource = resource;
    this.resourceId = resourceId;
    this.expiredSince = expiredSince;
    this.name = "ResourceExpiredError";
  }
  static fromJSON(status, obj) {
    if (typeof obj.resource !== "string" || typeof obj.resource_id !== "string" || typeof obj.expired_since !== "string") {
      return null;
    }
    return new ResourceExpiredError(
      status,
      obj,
      obj.resource,
      obj.resource_id,
      new Date(obj.expired_since)
    );
  }
}
exports.ResourceExpiredError = ResourceExpiredError;


/***/ }),

/***/ 625:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const scwError = __nccwpck_require__(1668);
class ResourceLockedError extends scwError.ScalewayError {
  constructor(status, body, resource, resourceId) {
    super(status, body, `resource ${resource} with ID ${resourceId} is locked`);
    this.status = status;
    this.body = body;
    this.resource = resource;
    this.resourceId = resourceId;
    this.name = "ResourceLockedError";
  }
  static fromJSON(status, obj) {
    if (typeof obj.resource !== "string" || typeof obj.resource_id !== "string") {
      return null;
    }
    return new ResourceLockedError(status, obj, obj.resource, obj.resource_id);
  }
}
exports.ResourceLockedError = ResourceLockedError;


/***/ }),

/***/ 7825:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const scwError = __nccwpck_require__(1668);
class ResourceNotFoundError extends scwError.ScalewayError {
  constructor(status, body, resource, resourceId) {
    super(
      status,
      body,
      `resource ${resource} with ID ${resourceId} is not found`
    );
    this.status = status;
    this.body = body;
    this.resource = resource;
    this.resourceId = resourceId;
    this.name = "ResourceNotFoundError";
  }
  static fromJSON(status, obj) {
    if (typeof obj.resource !== "string" || typeof obj.resource_id !== "string") {
      return null;
    }
    return new ResourceNotFoundError(status, obj, obj.resource, obj.resource_id);
  }
}
exports.ResourceNotFoundError = ResourceNotFoundError;


/***/ }),

/***/ 2582:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const scwError = __nccwpck_require__(1668);
const buildMessage = (helpMessage, limit, resetSeconds, resetAt) => {
  const details = [];
  if (limit) {
    if (limit.windowSeconds) {
      details.push(`quota is ${limit.quota} for ${limit.windowSeconds}s`);
    } else {
      details.push(`quota is ${limit.quota}`);
    }
  }
  if (resetSeconds) {
    details.push(`resets in ${resetSeconds}s`);
  } else if (resetAt) {
    details.push(`resets at ${resetAt.toISOString()}`);
  }
  let output = `too many requests`;
  if (details.length > 0) {
    output += ` (${details.join(", ")})`;
  }
  if (helpMessage.length > 0) {
    output += `: ${helpMessage}`;
  }
  return output;
};
class TooManyRequestsError extends scwError.ScalewayError {
  constructor(status, body, helpMessage, limit, resetSeconds, resetAt) {
    super(status, body, buildMessage(helpMessage, limit, resetSeconds, resetAt));
    this.status = status;
    this.body = body;
    this.helpMessage = helpMessage;
    this.limit = limit;
    this.resetSeconds = resetSeconds;
    this.resetAt = resetAt;
    this.name = "TooManyRequestsError";
  }
  static fromJSON(status, obj) {
    if (typeof obj.help_message !== "string") return null;
    let limit;
    if (json.isJSONObject(obj.limit) && typeof obj.limit.quota === "number") {
      limit = {
        quota: obj.limit.quota,
        windowSeconds: typeof obj.limit.window_seconds === "number" ? obj.limit.window_seconds : void 0
      };
    }
    return new TooManyRequestsError(
      status,
      obj,
      obj.help_message,
      limit,
      typeof obj.reset_seconds === "number" ? obj.reset_seconds : void 0,
      typeof obj.reset_at === "string" ? new Date(obj.reset_at) : void 0
    );
  }
}
exports.TooManyRequestsError = TooManyRequestsError;


/***/ }),

/***/ 8416:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const scwError = __nccwpck_require__(1668);
class TransientStateError extends scwError.ScalewayError {
  constructor(status, body, resource, resourceId, currentState) {
    super(
      status,
      body,
      `resource ${resource} with ID ${resourceId} is in a transient state: ${currentState}`
    );
    this.status = status;
    this.body = body;
    this.resource = resource;
    this.resourceId = resourceId;
    this.currentState = currentState;
    this.name = "TransientStateError";
  }
  static fromJSON(status, obj) {
    if (typeof obj.resource !== "string" || typeof obj.resource_id !== "string" || typeof obj.current_state !== "string") {
      return null;
    }
    return new TransientStateError(
      status,
      obj,
      obj.resource,
      obj.resource_id,
      obj.current_state
    );
  }
}
exports.TransientStateError = TransientStateError;


/***/ }),

/***/ 6037:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const json = __nccwpck_require__(2362);
const isRecordOfStringArray = (obj) => {
  if (!json.isJSONObject(obj)) {
    return false;
  }
  for (const elt of Object.values(obj)) {
    if (!Array.isArray(elt) || Object.values(elt).find((x) => typeof x !== "string") !== void 0) {
      return false;
    }
  }
  return true;
};
exports.isRecordOfStringArray = isRecordOfStringArray;


/***/ }),

/***/ 5704:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const isBrowser = __nccwpck_require__(9858);
const composer = __nccwpck_require__(5714);
const auth = __nccwpck_require__(2475);
const httpInterceptors = __nccwpck_require__(5107);
const responseParser = __nccwpck_require__(5267);
const buildRequest = (request, settings) => {
  let { path } = request;
  if (request.urlParams instanceof URLSearchParams) {
    path = path.concat(`?${request.urlParams.toString()}`);
  }
  return new Request(`${settings.apiURL}${path}`, {
    body: request.body,
    headers: {
      Accept: "application/json",
      .../* istanbul ignore next */
      !isBrowser.isBrowser() ? { "User-Agent": settings.userAgent } : {},
      ...request.headers
    },
    method: request.method
  });
};
const asIs = (response) => response;
const buildFetcher = (settings, httpClient) => {
  let requestNumber = 0;
  const prepareRequest = (requestId) => composer.composeRequestInterceptors([
    ...settings.interceptors.map((obj) => obj.request).filter((obj) => obj),
    httpInterceptors.logRequest(requestId, httpInterceptors.obfuscateInterceptor(auth.obfuscateAuthHeadersEntry))
  ]);
  const prepareResponse = (requestId) => composer.composeResponseInterceptors([
    ...settings.interceptors.map((obj) => obj.response).filter((obj) => obj),
    httpInterceptors.logResponse(requestId)
  ]);
  const prepareResponseErrors = () => composer.composeResponseErrorInterceptors(
    settings.interceptors.map((obj) => obj.responseError).filter((obj) => obj)
  );
  return async (request, unwrapper = asIs) => {
    const requestId = `${requestNumber += 1}`;
    const reqInterceptors = prepareRequest(requestId);
    const finalRequest = await reqInterceptors(buildRequest(request, settings));
    try {
      const response = await httpClient(finalRequest);
      const resInterceptors = prepareResponse(requestId);
      const finalResponse = await resInterceptors(response);
      const resUnmarshaller = responseParser.responseParser(
        unwrapper,
        request.responseType ?? "json"
      );
      const unmarshaledResponse = await resUnmarshaller(finalResponse);
      return unmarshaledResponse;
    } catch (err) {
      const resErrorInterceptors = prepareResponseErrors();
      const handledError = await resErrorInterceptors(finalRequest, err);
      return unwrapper(handledError);
    }
  };
};
exports.buildFetcher = buildFetcher;
exports.buildRequest = buildRequest;


/***/ }),

/***/ 9373:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const toPascalCase = (str) => str.replace(
  /\w+/g,
  (word) => `${word[0].toUpperCase()}${word.slice(1).toLowerCase()}`
);
const serializeHeadersEntry = ([name, value]) => `${toPascalCase(name)}: ${value}`;
const serializeHeaders = (headers) => Array.from(headers.entries(), serializeHeadersEntry);
const dumpRequest = async (request) => [
  `${request.method.toUpperCase()}: ${request.url}`,
  ...serializeHeaders(request.headers),
  await request.clone().text()
].join("\r\n");
const dumpResponse = async (response) => [
  `HTTP ${response.status} ${response.ok ? "OK" : "NOK"}`,
  ...serializeHeaders(response.headers),
  await response.clone().text()
].join("\r\n");
exports.dumpRequest = dumpRequest;
exports.dumpResponse = dumpResponse;


/***/ }),

/***/ 5107:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index = __nccwpck_require__(2191);
const levelResolver = __nccwpck_require__(3758);
const httpDumper = __nccwpck_require__(9373);
class ObfuscatedRequest extends Request {
  constructor(request, obfuscate) {
    super(request);
    this.request = request;
    this.obfuscate = obfuscate;
  }
  get headers() {
    return new Headers(Array.from(this.request.headers, this.obfuscate));
  }
  clone() {
    return new ObfuscatedRequest(this.request, this.obfuscate);
  }
}
const obfuscateInterceptor = (obfuscate) => ({ request }) => new ObfuscatedRequest(request, obfuscate);
const identity = ({ request }) => request;
const logRequest = (identifier, obfuscate = identity) => async ({ request }) => {
  if (levelResolver.shouldLog(levelResolver.LevelResolver[index.getLogger().logLevel], "debug")) {
    index.getLogger().debug(
      `--------------- Scaleway SDK REQUEST ${identifier} ---------------
${await httpDumper.dumpRequest(await obfuscate({ request }))}
---------------------------------------------------------`
    );
  }
  return request;
};
const logResponse = (identifier) => async ({ response }) => {
  if (levelResolver.shouldLog(levelResolver.LevelResolver[index.getLogger().logLevel], "debug")) {
    index.getLogger().debug(
      `--------------- Scaleway SDK RESPONSE ${identifier} ---------------
${await httpDumper.dumpResponse(response)}
---------------------------------------------------------`
    );
  }
  return response;
};
exports.logRequest = logRequest;
exports.logResponse = logResponse;
exports.obfuscateInterceptor = obfuscateInterceptor;


/***/ }),

/***/ 2962:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const extract = (key) => (result) => result[key];
function* pages(key, fetcher, request, firstPage) {
  if (!Array.isArray(firstPage[key])) {
    throw new Error(`Property ${key} is not a list in paginated result`);
  }
  const getList = extract(key);
  let page = request.page || 1;
  if (page === 1) {
    yield Promise.resolve(getList(firstPage));
    page += 1;
  }
  const { length } = firstPage[key];
  if (!length) return;
  const { totalCount } = firstPage;
  while (page <= Math.floor((totalCount + length - 1) / length)) {
    yield fetcher({ ...request, page }).then(getList);
    page += 1;
  }
}
async function* fetchPaginated(key, fetcher, request, initial = fetcher(request)) {
  yield* pages(key, fetcher, request, await initial);
}
const fetchAll = async (key, fetcher, request, initial = fetcher(request)) => (await Promise.all(Array.from(pages(key, fetcher, request, await initial)))).flat();
const enrichForPagination = (key, fetcher, request) => {
  const firstPage = fetcher(request);
  return Object.assign(firstPage, {
    all: () => fetchAll(key, fetcher, request, firstPage),
    [Symbol.asyncIterator]: () => fetchPaginated(key, fetcher, request, firstPage)
  });
};
exports.enrichForPagination = enrichForPagination;
exports.extract = extract;
exports.fetchAll = fetchAll;
exports.fetchPaginated = fetchPaginated;


/***/ }),

/***/ 5267:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const isResponse = __nccwpck_require__(3227);
const json = __nccwpck_require__(2362);
const errorParser = __nccwpck_require__(4292);
const scwError = __nccwpck_require__(1668);
const X_TOTAL_COUNT_HEADER_KEY = "x-total-count";
const TOTAL_COUNT_RES_KEY = "total_count";
const fixLegacyTotalCount = (obj, headers) => {
  const headerVal = headers.get(X_TOTAL_COUNT_HEADER_KEY);
  if (!headerVal) {
    return obj;
  }
  const totalCount = parseInt(headerVal, 10);
  if (Number.isNaN(totalCount)) {
    return obj;
  }
  if (json.isJSONObject(obj) && !(TOTAL_COUNT_RES_KEY in obj)) {
    return Object.assign(obj, { [TOTAL_COUNT_RES_KEY]: totalCount });
  }
  return obj;
};
const responseParser = (unmarshaller, responseType) => async (response) => {
  if (!isResponse.isResponse(response)) {
    throw new TypeError("Invalid response object");
  }
  if (response.ok) {
    if (response.status === 204) return unmarshaller(void 0);
    const contentType = response.headers.get("Content-Type");
    try {
      if (responseType === "json" && contentType === "application/json") {
        return unmarshaller(
          fixLegacyTotalCount(await response.json(), response.headers)
        );
      }
      if (responseType === "blob") {
        return unmarshaller(await response.blob());
      }
      return unmarshaller(await response.text());
    } catch (err) {
      throw new scwError.ScalewayError(
        response.status,
        `could not parse '${contentType ?? ""}' response${err instanceof Error ? `: ${err.message}` : ""}`
      );
    }
  }
  const error = await response.clone().json().catch(() => response.text());
  if (json.isJSONObject(error)) throw errorParser.parseScalewayError(response.status, error);
  throw new scwError.ScalewayError(
    response.status,
    typeof error === "string" ? error : "cannot read error response body"
  );
};
exports.fixLegacyTotalCount = fixLegacyTotalCount;
exports.responseParser = responseParser;


/***/ }),

/***/ 5604:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
var lookup = [];
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
}
function tripletToBase64(num) {
  return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
}
function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (uint8[i + 2] & 255);
    output.push(tripletToBase64(tmp));
  }
  return output.join("");
}
function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3;
  var parts = [];
  var maxChunkLength = 16383;
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(
      lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
    );
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(
      lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
    );
  }
  return parts.join("");
}
exports.fromByteArray = fromByteArray;


/***/ }),

/***/ 8118:
/***/ ((module) => {


const ADJECTIVES = [
  "admiring",
  "adoring",
  "affectionate",
  "agitated",
  "amazing",
  "angry",
  "awesome",
  "beautiful",
  "blissful",
  "bold",
  "boring",
  "brave",
  "busy",
  "charming",
  "clever",
  "cool",
  "compassionate",
  "competent",
  "condescending",
  "confident",
  "cranky",
  "crazy",
  "dazzling",
  "determined",
  "distracted",
  "dreamy",
  "eager",
  "ecstatic",
  "elastic",
  "elated",
  "elegant",
  "eloquent",
  "epic",
  "exciting",
  "fervent",
  "festive",
  "flamboyant",
  "focused",
  "friendly",
  "frosty",
  "funny",
  "gallant",
  "gifted",
  "goofy",
  "gracious",
  "great",
  "happy",
  "hardcore",
  "heuristic",
  "hopeful",
  "hungry",
  "infallible",
  "inspiring",
  "interesting",
  "intelligent",
  "jolly",
  "jovial",
  "keen",
  "kind",
  "laughing",
  "loving",
  "lucid",
  "magical",
  "mystifying",
  "modest",
  "musing",
  "naughty",
  "nervous",
  "nice",
  "nifty",
  "nostalgic",
  "objective",
  "optimistic",
  "peaceful",
  "pedantic",
  "pensive",
  "practical",
  "priceless",
  "quirky",
  "quizzical",
  "recursing",
  "relaxed",
  "reverent",
  "romantic",
  "sad",
  "serene",
  "sharp",
  "silly",
  "sleepy",
  "stoic",
  "strange",
  "stupefied",
  "suspicious",
  "sweet",
  "tender",
  "thirsty",
  "trusting",
  "unruffled",
  "upbeat",
  "vibrant",
  "vigilant",
  "vigorous",
  "wizardly",
  "wonderful",
  "xenodochial",
  "youthful",
  "zealous",
  "zen"
];
const NAMES = [
  // Muhammad ibn Jābir al-Ḥarrānī al-Battānī was a founding father of astronomy. https://en.wikipedia.org/wiki/Mu%E1%B8%A5ammad_ibn_J%C4%81bir_al-%E1%B8%A4arr%C4%81n%C4%AB_al-Batt%C4%81n%C4%AB
  "albattani",
  // Frances E. Allen, became the first female IBM Fellow in 1989. In 2006, she became the first female recipient of the ACM's Turing Award. https://en.wikipedia.org/wiki/Frances_E._Allen
  "allen",
  // June Almeida - Scottish virologist who took the first pictures of the rubella virus - https://en.wikipedia.org/wiki/June_Almeida
  "almeida",
  // Kathleen Antonelli, American computer programmer and one of the six original programmers of the ENIAC - https://en.wikipedia.org/wiki/Kathleen_Antonelli
  "antonelli",
  // Maria Gaetana Agnesi - Italian mathematician, philosopher, theologian and humanitarian. She was the first woman to write a mathematics handbook and the first woman appointed as a Mathematics Professor at a University. https://en.wikipedia.org/wiki/Maria_Gaetana_Agnesi
  "agnesi",
  // Archimedes was a physicist, engineer and mathematician who invented too many things to list them here. https://en.wikipedia.org/wiki/Archimedes
  "archimedes",
  // Maria Ardinghelli - Italian translator, mathematician and physicist - https://en.wikipedia.org/wiki/Maria_Ardinghelli
  "ardinghelli",
  // Aryabhata - Ancient Indian mathematician-astronomer during 476-550 CE https://en.wikipedia.org/wiki/Aryabhata
  "aryabhata",
  // Wanda Austin - Wanda Austin is the President and CEO of The Aerospace Corporation, a leading architect for the US security space programs. https://en.wikipedia.org/wiki/Wanda_Austin
  "austin",
  // Charles Babbage invented the concept of a programmable computer. https://en.wikipedia.org/wiki/Charles_Babbage.
  "babbage",
  // Stefan Banach - Polish mathematician, was one of the founders of modern functional analysis. https://en.wikipedia.org/wiki/Stefan_Banach
  "banach",
  // Buckaroo Banzai and his mentor Dr. Hikita perfected the "oscillation overthruster", a device that allows one to pass through solid matter. - https://en.wikipedia.org/wiki/The_Adventures_of_Buckaroo_Banzai_Across_the_8th_Dimension
  "banzai",
  // John Bardeen co-invented the transistor - https://en.wikipedia.org/wiki/John_Bardeen
  "bardeen",
  // Jean Bartik, born Betty Jean Jennings, was one of the original programmers for the ENIAC computer. https://en.wikipedia.org/wiki/Jean_Bartik
  "bartik",
  // Laura Bassi, the world's first female professor https://en.wikipedia.org/wiki/Laura_Bassi
  "bassi",
  // Hugh Beaver, British engineer, founder of the Guinness Book of World Records https://en.wikipedia.org/wiki/Hugh_Beaver
  "beaver",
  // Alexander Graham Bell - an eminent Scottish-born scientist, inventor, engineer and innovator who is credited with inventing the first practical telephone - https://en.wikipedia.org/wiki/Alexander_Graham_Bell
  "bell",
  // Karl Friedrich Benz - a German automobile engineer. Inventor of the first practical motorcar. https://en.wikipedia.org/wiki/Karl_Benz
  "benz",
  // Homi J Bhabha - was an Indian nuclear physicist, founding director, and professor of physics at the Tata Institute of Fundamental Research. Colloquially known as "father of Indian nuclear programme"- https://en.wikipedia.org/wiki/Homi_J._Bhabha
  "bhabha",
  // Bhaskara II - Ancient Indian mathematician-astronomer whose work on calculus predates Newton and Leibniz by over half a millennium - https://en.wikipedia.org/wiki/Bh%C4%81skara_II#Calculus
  "bhaskara",
  // Sue Black - British computer scientist and campaigner. She has been instrumental in saving Bletchley Park, the site of World War II codebreaking - https://en.wikipedia.org/wiki/Sue_Black_(computer_scientist)
  "black",
  // Elizabeth Helen Blackburn - Australian-American Nobel laureate; best known for co-discovering telomerase. https://en.wikipedia.org/wiki/Elizabeth_Blackburn
  "blackburn",
  // Elizabeth Blackwell - American doctor and first American woman to receive a medical degree - https://en.wikipedia.org/wiki/Elizabeth_Blackwell
  "blackwell",
  // Niels Bohr is the father of quantum theory. https://en.wikipedia.org/wiki/Niels_Bohr.
  "bohr",
  // Kathleen Booth, she's credited with writing the first assembly language. https://en.wikipedia.org/wiki/Kathleen_Booth
  "booth",
  // Anita Borg - Anita Borg was the founding director of the Institute for Women and Technology (IWT). https://en.wikipedia.org/wiki/Anita_Borg
  "borg",
  // Satyendra Nath Bose - He provided the foundation for Bose–Einstein statistics and the theory of the Bose–Einstein condensate. - https://en.wikipedia.org/wiki/Satyendra_Nath_Bose
  "bose",
  // Katherine Louise Bouman is an imaging scientist and Assistant Professor of Computer Science at the California Institute of Technology. She researches computational methods for imaging, and developed an algorithm that made possible the picture first visualization of a black hole using the Event Horizon Telescope. - https://en.wikipedia.org/wiki/Katie_Bouman
  "bouman",
  // Evelyn Boyd Granville - She was one of the first African-American woman to receive a Ph.D. in mathematics; she earned it in 1949 from Yale University. https://en.wikipedia.org/wiki/Evelyn_Boyd_Granville
  "boyd",
  // Brahmagupta - Ancient Indian mathematician during 598-670 CE who gave rules to compute with zero - https://en.wikipedia.org/wiki/Brahmagupta#Zero
  "brahmagupta",
  // Walter Houser Brattain co-invented the transistor - https://en.wikipedia.org/wiki/Walter_Houser_Brattain
  "brattain",
  // Emmett Brown invented time travel. https://en.wikipedia.org/wiki/Emmett_Brown (thanks Brian Goff)
  "brown",
  // Linda Brown Buck - American biologist and Nobel laureate best known for her genetic and molecular analyses of the mechanisms of smell. https://en.wikipedia.org/wiki/Linda_B._Buck
  "buck",
  // Dame Susan Jocelyn Bell Burnell - Northern Irish astrophysicist who discovered radio pulsars and was the first to analyse them. https://en.wikipedia.org/wiki/Jocelyn_Bell_Burnell
  "burnell",
  // Annie Jump Cannon - pioneering female astronomer who classified hundreds of thousands of stars and created the system we use to understand stars today. https://en.wikipedia.org/wiki/Annie_Jump_Cannon
  "cannon",
  // Rachel Carson - American marine biologist and conservationist, her book Silent Spring and other writings are credited with advancing the global environmental movement. https://en.wikipedia.org/wiki/Rachel_Carson
  "carson",
  // Dame Mary Lucy Cartwright - British mathematician who was one of the first to study what is now known as chaos theory. Also known for Cartwright's theorem which finds applications in signal processing. https://en.wikipedia.org/wiki/Mary_Cartwright
  "cartwright",
  // George Washington Carver - American agricultural scientist and inventor. He was the most prominent black scientist of the early 20th century. https://en.wikipedia.org/wiki/George_Washington_Carver
  "carver",
  // Vinton Gray Cerf - American Internet pioneer, recognised as one of "the fathers of the Internet". With Robert Elliot Kahn, he designed TCP and IP, the primary data communication protocols of the Internet and other computer networks. https://en.wikipedia.org/wiki/Vint_Cerf
  "cerf",
  // Subrahmanyan Chandrasekhar - Astrophysicist known for his mathematical theory on different stages and evolution in structures of the stars. He has won nobel prize for physics - https://en.wikipedia.org/wiki/Subrahmanyan_Chandrasekhar
  "chandrasekhar",
  // Sergey Alexeyevich Chaplygin (Russian: Серге́й Алексе́евич Чаплы́гин; April 5, 1869 – October 8, 1942) was a Russian and Soviet physicist, mathematician, and mechanical engineer. He is known for mathematical formulas such as Chaplygin's equation and for a hypothetical substance in cosmology called Chaplygin gas, named after him. https://en.wikipedia.org/wiki/Sergey_Chaplygin
  "chaplygin",
  // Émilie du Châtelet - French natural philosopher, mathematician, physicist, and author during the early 1730s, known for her translation of and commentary on Isaac Newton's book Principia containing basic laws of physics. https://en.wikipedia.org/wiki/%C3%89milie_du_Ch%C3%A2telet
  "chatelet",
  // Asima Chatterjee was an Indian organic chemist noted for her research on vinca alkaloids, development of drugs for treatment of epilepsy and malaria - https://en.wikipedia.org/wiki/Asima_Chatterjee
  "chatterjee",
  // Pafnuty Chebyshev - Russian mathematician. He is known fo his works on probability, statistics, mechanics, analytical geometry and number theory https://en.wikipedia.org/wiki/Pafnuty_Chebyshev
  "chebyshev",
  // Bram Cohen - American computer programmer and author of the BitTorrent peer-to-peer protocol. https://en.wikipedia.org/wiki/Bram_Cohen
  "cohen",
  // David Lee Chaum - American computer scientist and cryptographer. Known for his seminal contributions in the field of anonymous communication. https://en.wikipedia.org/wiki/David_Chaum
  "chaum",
  // Joan Clarke - Bletchley Park code breaker during the Second World War who pioneered techniques that remained top secret for decades. Also an accomplished numismatist https://en.wikipedia.org/wiki/Joan_Clarke
  "clarke",
  // Jane Colden - American botanist widely considered the first female American botanist - https://en.wikipedia.org/wiki/Jane_Colden
  "colden",
  // Gerty Theresa Cori - American biochemist who became the third woman—and first American woman—to win a Nobel Prize in science, and the first woman to be awarded the Nobel Prize in Physiology or Medicine. Cori was born in Prague. https://en.wikipedia.org/wiki/Gerty_Cori
  "cori",
  // Seymour Roger Cray was an American electrical engineer and supercomputer architect who designed a series of computers that were the fastest in the world for decades. https://en.wikipedia.org/wiki/Seymour_Cray
  "cray",
  // This entry reflects a husband and wife team who worked together:
  // Joan Curran was a Welsh scientist who developed radar and invented chaff, a radar countermeasure. https://en.wikipedia.org/wiki/Joan_Curran
  // Samuel Curran was an Irish physicist who worked alongside his wife during WWII and invented the proximity fuse. https://en.wikipedia.org/wiki/Samuel_Curran
  "curran",
  // Marie Curie discovered radioactivity. https://en.wikipedia.org/wiki/Marie_Curie.
  "curie",
  // Charles Darwin established the principles of natural evolution. https://en.wikipedia.org/wiki/Charles_Darwin.
  "darwin",
  // Leonardo Da Vinci invented too many things to list here. https://en.wikipedia.org/wiki/Leonardo_da_Vinci.
  "davinci",
  // A. K. (Alexander Keewatin) Dewdney, Canadian mathematician, computer scientist, author and filmmaker. Contributor to Scientific American's "Computer Recreations" from 1984 to 1991. Author of Core War (program), The Planiverse, The Armchair Universe, The Magic Machine, The New Turing Omnibus, and more. https://en.wikipedia.org/wiki/Alexander_Dewdney
  "dewdney",
  // Satish Dhawan - Indian mathematician and aerospace engineer, known for leading the successful and indigenous development of the Indian space programme. https://en.wikipedia.org/wiki/Satish_Dhawan
  "dhawan",
  // Bailey Whitfield Diffie - American cryptographer and one of the pioneers of public-key cryptography. https://en.wikipedia.org/wiki/Whitfield_Diffie
  "diffie",
  // Edsger Wybe Dijkstra was a Dutch computer scientist and mathematical scientist. https://en.wikipedia.org/wiki/Edsger_W._Dijkstra.
  "dijkstra",
  // Paul Adrien Maurice Dirac - English theoretical physicist who made fundamental contributions to the early development of both quantum mechanics and quantum electrodynamics. https://en.wikipedia.org/wiki/Paul_Dirac
  "dirac",
  // Agnes Meyer Driscoll - American cryptanalyst during World Wars I and II who successfully cryptanalysed a number of Japanese ciphers. She was also the co-developer of one of the cipher machines of the US Navy, the CM. https://en.wikipedia.org/wiki/Agnes_Meyer_Driscoll
  "driscoll",
  // Donna Dubinsky - played an integral role in the development of personal digital assistants (PDAs) serving as CEO of Palm, Inc. and co-founding Handspring. https://en.wikipedia.org/wiki/Donna_Dubinsky
  "dubinsky",
  // Annie Easley - She was a leading member of the team which developed software for the Centaur rocket stage and one of the first African-Americans in her field. https://en.wikipedia.org/wiki/Annie_Easley
  "easley",
  // Thomas Alva Edison, prolific inventor https://en.wikipedia.org/wiki/Thomas_Edison
  "edison",
  // Albert Einstein invented the general theory of relativity. https://en.wikipedia.org/wiki/Albert_Einstein
  "einstein",
  // Alexandra Asanovna Elbakyan (Russian: Алекса́ндра Аса́новна Элбакя́н) is a Kazakhstani graduate student, computer programmer, internet pirate in hiding, and the creator of the site Sci-Hub. Nature has listed her in 2016 in the top ten people that mattered in science, and Ars Technica has compared her to Aaron Swartz. - https://en.wikipedia.org/wiki/Alexandra_Elbakyan
  "elbakyan",
  // Taher A. ElGamal - Egyptian cryptographer best known for the ElGamal discrete log cryptosystem and the ElGamal digital signature scheme. https://en.wikipedia.org/wiki/Taher_Elgamal
  "elgamal",
  // Gertrude Elion - American biochemist, pharmacologist and the 1988 recipient of the Nobel Prize in Medicine - https://en.wikipedia.org/wiki/Gertrude_Elion
  "elion",
  // James Henry Ellis - British engineer and cryptographer employed by the GCHQ. Best known for conceiving for the first time, the idea of public-key cryptography. https://en.wikipedia.org/wiki/James_H._Ellis
  "ellis",
  // Douglas Engelbart gave the mother of all demos: https://en.wikipedia.org/wiki/Douglas_Engelbart
  "engelbart",
  // Euclid invented geometry. https://en.wikipedia.org/wiki/Euclid
  "euclid",
  // Leonhard Euler invented large parts of modern mathematics. https://de.wikipedia.org/wiki/Leonhard_Euler
  "euler",
  // Michael Faraday - British scientist who contributed to the study of electromagnetism and electrochemistry. https://en.wikipedia.org/wiki/Michael_Faraday
  "faraday",
  // Horst Feistel - German-born American cryptographer who was one of the earliest non-government researchers to study the design and theory of block ciphers. Co-developer of DES and Lucifer. Feistel networks, a symmetric structure used in the construction of block ciphers are named after him. https://en.wikipedia.org/wiki/Horst_Feistel
  "feistel",
  // Pierre de Fermat pioneered several aspects of modern mathematics. https://en.wikipedia.org/wiki/Pierre_de_Fermat
  "fermat",
  // Enrico Fermi invented the first nuclear reactor. https://en.wikipedia.org/wiki/Enrico_Fermi.
  "fermi",
  // Richard Feynman was a key contributor to quantum mechanics and particle physics. https://en.wikipedia.org/wiki/Richard_Feynman
  "feynman",
  // Benjamin Franklin is famous for his experiments in electricity and the invention of the lightning rod.
  "franklin",
  // Yuri Alekseyevich Gagarin - Soviet pilot and cosmonaut, best known as the first human to journey into outer space. https://en.wikipedia.org/wiki/Yuri_Gagarin
  "gagarin",
  // Galileo was a founding father of modern astronomy, and faced politics and obscurantism to establish scientific truth.  https://en.wikipedia.org/wiki/Galileo_Galilei
  "galileo",
  // Évariste Galois - French mathematician whose work laid the foundations of Galois theory and group theory, two major branches of abstract algebra, and the subfield of Galois connections, all while still in his late teens. https://en.wikipedia.org/wiki/%C3%89variste_Galois
  "galois",
  // Kadambini Ganguly - Indian physician, known for being the first South Asian female physician, trained in western medicine, to graduate in South Asia. https://en.wikipedia.org/wiki/Kadambini_Ganguly
  "ganguly",
  // William Henry "Bill" Gates III is an American business magnate, philanthropist, investor, computer programmer, and inventor. https://en.wikipedia.org/wiki/Bill_Gates
  "gates",
  // Johann Carl Friedrich Gauss - German mathematician who made significant contributions to many fields, including number theory, algebra, statistics, analysis, differential geometry, geodesy, geophysics, mechanics, electrostatics, magnetic fields, astronomy, matrix theory, and optics. https://en.wikipedia.org/wiki/Carl_Friedrich_Gauss
  "gauss",
  // Marie-Sophie Germain - French mathematician, physicist and philosopher. Known for her work on elasticity theory, number theory and philosophy. https://en.wikipedia.org/wiki/Sophie_Germain
  "germain",
  // Adele Goldberg, was one of the designers and developers of the Smalltalk language. https://en.wikipedia.org/wiki/Adele_Goldberg_(computer_scientist)
  "goldberg",
  // Adele Goldstine, born Adele Katz, wrote the complete technical description for the first electronic digital computer, ENIAC. https://en.wikipedia.org/wiki/Adele_Goldstine
  "goldstine",
  // Shafi Goldwasser is a computer scientist known for creating theoretical foundations of modern cryptography. Winner of 2012 ACM Turing Award. https://en.wikipedia.org/wiki/Shafi_Goldwasser
  "goldwasser",
  // James Golick, all around gangster.
  "golick",
  // Jane Goodall - British primatologist, ethologist, and anthropologist who is considered to be the world's foremost expert on chimpanzees - https://en.wikipedia.org/wiki/Jane_Goodall
  "goodall",
  // Stephen Jay Gould was was an American paleontologist, evolutionary biologist, and historian of science. He is most famous for the theory of punctuated equilibrium - https://en.wikipedia.org/wiki/Stephen_Jay_Gould
  "gould",
  // Carolyn Widney Greider - American molecular biologist and joint winner of the 2009 Nobel Prize for Physiology or Medicine for the discovery of telomerase. https://en.wikipedia.org/wiki/Carol_W._Greider
  "greider",
  // Alexander Grothendieck - German-born French mathematician who became a leading figure in the creation of modern algebraic geometry. https://en.wikipedia.org/wiki/Alexander_Grothendieck
  "grothendieck",
  // Lois Haibt - American computer scientist, part of the team at IBM that developed FORTRAN - https://en.wikipedia.org/wiki/Lois_Haibt
  "haibt",
  // Margaret Hamilton - Director of the Software Engineering Division of the MIT Instrumentation Laboratory, which developed on-board flight software for the Apollo space program. https://en.wikipedia.org/wiki/Margaret_Hamilton_(scientist)
  "hamilton",
  // Caroline Harriet Haslett - English electrical engineer, electricity industry administrator and champion of women's rights. Co-author of British Standard 1363 that specifies AC power plugs and sockets used across the United Kingdom (which is widely considered as one of the safest designs). https://en.wikipedia.org/wiki/Caroline_Haslett
  "haslett",
  // Stephen Hawking pioneered the field of cosmology by combining general relativity and quantum mechanics. https://en.wikipedia.org/wiki/Stephen_Hawking
  "hawking",
  // Martin Edward Hellman - American cryptologist, best known for his invention of public-key cryptography in co-operation with Whitfield Diffie and Ralph Merkle. https://en.wikipedia.org/wiki/Martin_Hellman
  "hellman",
  // Werner Heisenberg was a founding father of quantum mechanics. https://en.wikipedia.org/wiki/Werner_Heisenberg
  "heisenberg",
  // Grete Hermann was a German philosopher noted for her philosophical work on the foundations of quantum mechanics. https://en.wikipedia.org/wiki/Grete_Hermann
  "hermann",
  // Caroline Lucretia Herschel - German astronomer and discoverer of several comets. https://en.wikipedia.org/wiki/Caroline_Herschel
  "herschel",
  // Heinrich Rudolf Hertz - German physicist who first conclusively proved the existence of the electromagnetic waves. https://en.wikipedia.org/wiki/Heinrich_Hertz
  "hertz",
  // Jaroslav Heyrovský was the inventor of the polarographic method, father of the electroanalytical method, and recipient of the Nobel Prize in 1959. His main field of work was polarography. https://en.wikipedia.org/wiki/Jaroslav_Heyrovsk%C3%BD
  "heyrovsky",
  // Dorothy Hodgkin was a British biochemist, credited with the development of protein crystallography. She was awarded the Nobel Prize in Chemistry in 1964. https://en.wikipedia.org/wiki/Dorothy_Hodgkin
  "hodgkin",
  // Douglas R. Hofstadter is an American professor of cognitive science and author of the Pulitzer Prize and American Book Award-winning work Goedel, Escher, Bach: An Eternal Golden Braid in 1979. A mind-bending work which coined Hofstadter's Law: "It always takes longer than you expect, even when you take into account Hofstadter's Law." https://en.wikipedia.org/wiki/Douglas_Hofstadter
  "hofstadter",
  // Erna Schneider Hoover revolutionized modern communication by inventing a computerized telephone switching method. https://en.wikipedia.org/wiki/Erna_Schneider_Hoover
  "hoover",
  // Grace Hopper developed the first compiler for a computer programming language and  is credited with popularizing the term "debugging" for fixing computer glitches. https://en.wikipedia.org/wiki/Grace_Hopper
  "hopper",
  // Frances Hugle, she was an American scientist, engineer, and inventor who contributed to the understanding of semiconductors, integrated circuitry, and the unique electrical principles of microscopic materials. https://en.wikipedia.org/wiki/Frances_Hugle
  "hugle",
  // Hypatia - Greek Alexandrine Neoplatonist philosopher in Egypt who was one of the earliest mothers of mathematics - https://en.wikipedia.org/wiki/Hypatia
  "hypatia",
  // Teruko Ishizaka - Japanese scientist and immunologist who co-discovered the antibody class Immunoglobulin E. https://en.wikipedia.org/wiki/Teruko_Ishizaka
  "ishizaka",
  // Mary Jackson, American mathematician and aerospace engineer who earned the highest title within NASA's engineering department - https://en.wikipedia.org/wiki/Mary_Jackson_(engineer)
  "jackson",
  // Yeong-Sil Jang was a Korean scientist and astronomer during the Joseon Dynasty; he invented the first metal printing press and water gauge. https://en.wikipedia.org/wiki/Jang_Yeong-sil
  "jang",
  // Mae Carol Jemison -  is an American engineer, physician, and former NASA astronaut. She became the first black woman to travel in space when she served as a mission specialist aboard the Space Shuttle Endeavour - https://en.wikipedia.org/wiki/Mae_Jemison
  "jemison",
  // Betty Jennings - one of the original programmers of the ENIAC. https://en.wikipedia.org/wiki/ENIAC - https://en.wikipedia.org/wiki/Jean_Bartik
  "jennings",
  // Mary Lou Jepsen, was the founder and chief technology officer of One Laptop Per Child (OLPC), and the founder of Pixel Qi. https://en.wikipedia.org/wiki/Mary_Lou_Jepsen
  "jepsen",
  // Katherine Coleman Goble Johnson - American physicist and mathematician contributed to the NASA. https://en.wikipedia.org/wiki/Katherine_Johnson
  "johnson",
  // Irène Joliot-Curie - French scientist who was awarded the Nobel Prize for Chemistry in 1935. Daughter of Marie and Pierre Curie. https://en.wikipedia.org/wiki/Ir%C3%A8ne_Joliot-Curie
  "joliot",
  // Karen Spärck Jones came up with the concept of inverse document frequency, which is used in most search engines today. https://en.wikipedia.org/wiki/Karen_Sp%C3%A4rck_Jones
  "jones",
  // A. P. J. Abdul Kalam - is an Indian scientist aka Missile Man of India for his work on the development of ballistic missile and launch vehicle technology - https://en.wikipedia.org/wiki/A._P._J._Abdul_Kalam
  "kalam",
  // Sergey Petrovich Kapitsa (Russian: Серге́й Петро́вич Капи́ца; 14 February 1928 – 14 August 2012) was a Russian physicist and demographer. He was best known as host of the popular and long-running Russian scientific TV show, Evident, but Incredible. His father was the Nobel laureate Soviet-era physicist Pyotr Kapitsa, and his brother was the geographer and Antarctic explorer Andrey Kapitsa. - https://en.wikipedia.org/wiki/Sergey_Kapitsa
  "kapitsa",
  // Susan Kare, created the icons and many of the interface elements for the original Apple Macintosh in the 1980s, and was an original employee of NeXT, working as the Creative Director. https://en.wikipedia.org/wiki/Susan_Kare
  "kare",
  // Mstislav Keldysh - a Soviet scientist in the field of mathematics and mechanics, academician of the USSR Academy of Sciences (1946), President of the USSR Academy of Sciences (1961–1975), three times Hero of Socialist Labor (1956, 1961, 1971), fellow of the Royal Society of Edinburgh (1968). https://en.wikipedia.org/wiki/Mstislav_Keldysh
  "keldysh",
  // Mary Kenneth Keller, Sister Mary Kenneth Keller became the first American woman to earn a PhD in Computer Science in 1965. https://en.wikipedia.org/wiki/Mary_Kenneth_Keller
  "keller",
  // Johannes Kepler, German astronomer known for his three laws of planetary motion - https://en.wikipedia.org/wiki/Johannes_Kepler
  "kepler",
  // Omar Khayyam - Persian mathematician, astronomer and poet. Known for his work on the classification and solution of cubic equations, for his contribution to the understanding of Euclid's fifth postulate and for computing the length of a year very accurately. https://en.wikipedia.org/wiki/Omar_Khayyam
  "khayyam",
  // Har Gobind Khorana - Indian-American biochemist who shared the 1968 Nobel Prize for Physiology - https://en.wikipedia.org/wiki/Har_Gobind_Khorana
  "khorana",
  // Jack Kilby invented silicon integrated circuits and gave Silicon Valley its name. - https://en.wikipedia.org/wiki/Jack_Kilby
  "kilby",
  // Maria Kirch - German astronomer and first woman to discover a comet - https://en.wikipedia.org/wiki/Maria_Margarethe_Kirch
  "kirch",
  // Donald Knuth - American computer scientist, author of "The Art of Computer Programming" and creator of the TeX typesetting system. https://en.wikipedia.org/wiki/Donald_Knuth
  "knuth",
  // Sophie Kowalevski - Russian mathematician responsible for important original contributions to analysis, differential equations and mechanics - https://en.wikipedia.org/wiki/Sofia_Kovalevskaya
  "kowalevski",
  // Marie-Jeanne de Lalande - French astronomer, mathematician and cataloguer of stars - https://en.wikipedia.org/wiki/Marie-Jeanne_de_Lalande
  "lalande",
  // Hedy Lamarr - Actress and inventor. The principles of her work are now incorporated into modern Wi-Fi, CDMA and Bluetooth technology. https://en.wikipedia.org/wiki/Hedy_Lamarr
  "lamarr",
  // Leslie B. Lamport - American computer scientist. Lamport is best known for his seminal work in distributed systems and was the winner of the 2013 Turing Award. https://en.wikipedia.org/wiki/Leslie_Lamport
  "lamport",
  // Mary Leakey - British paleoanthropologist who discovered the first fossilized Proconsul skull - https://en.wikipedia.org/wiki/Mary_Leakey
  "leakey",
  // Henrietta Swan Leavitt - she was an American astronomer who discovered the relation between the luminosity and the period of Cepheid variable stars. https://en.wikipedia.org/wiki/Henrietta_Swan_Leavitt
  "leavitt",
  // Esther Miriam Zimmer Lederberg - American microbiologist and a pioneer of bacterial genetics. https://en.wikipedia.org/wiki/Esther_Lederberg
  "lederberg",
  // Inge Lehmann - Danish seismologist and geophysicist. Known for discovering in 1936 that the Earth has a solid inner core inside a molten outer core. https://en.wikipedia.org/wiki/Inge_Lehmann
  "lehmann",
  // Daniel Lewin - Mathematician, Akamai co-founder, soldier, 9/11 victim-- Developed optimization techniques for routing traffic on the internet. Died attempting to stop the 9-11 hijackers. https://en.wikipedia.org/wiki/Daniel_Lewin
  "lewin",
  // Ruth Lichterman - one of the original programmers of the ENIAC. https://en.wikipedia.org/wiki/ENIAC - https://en.wikipedia.org/wiki/Ruth_Teitelbaum
  "lichterman",
  // Barbara Liskov - co-developed the Liskov substitution principle. Liskov was also the winner of the Turing Prize in 2008. - https://en.wikipedia.org/wiki/Barbara_Liskov
  "liskov",
  // Ada Lovelace invented the first algorithm. https://en.wikipedia.org/wiki/Ada_Lovelace (thanks James Turnbull)
  "lovelace",
  // Auguste and Louis Lumière - the first filmmakers in history - https://en.wikipedia.org/wiki/Auguste_and_Louis_Lumi%C3%A8re
  "lumiere",
  // Mahavira - Ancient Indian mathematician during 9th century AD who discovered basic algebraic identities - https://en.wikipedia.org/wiki/Mah%C4%81v%C4%ABra_(mathematician)
  "mahavira",
  // Lynn Margulis (b. Lynn Petra Alexander) - an American evolutionary theorist and biologist, science author, educator, and popularizer, and was the primary modern proponent for the significance of symbiosis in evolution. - https://en.wikipedia.org/wiki/Lynn_Margulis
  "margulis",
  // Yukihiro Matsumoto - Japanese computer scientist and software programmer best known as the chief designer of the Ruby programming language. https://en.wikipedia.org/wiki/Yukihiro_Matsumoto
  "matsumoto",
  // James Clerk Maxwell - Scottish physicist, best known for his formulation of electromagnetic theory. https://en.wikipedia.org/wiki/James_Clerk_Maxwell
  "maxwell",
  // Maria Mayer - American theoretical physicist and Nobel laureate in Physics for proposing the nuclear shell model of the atomic nucleus - https://en.wikipedia.org/wiki/Maria_Mayer
  "mayer",
  // John McCarthy invented LISP: https://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)
  "mccarthy",
  // Barbara McClintock - a distinguished American cytogeneticist, 1983 Nobel Laureate in Physiology or Medicine for discovering transposons. https://en.wikipedia.org/wiki/Barbara_McClintock
  "mcclintock",
  // Anne Laura Dorinthea McLaren - British developmental biologist whose work helped lead to human in-vitro fertilisation. https://en.wikipedia.org/wiki/Anne_McLaren
  "mclaren",
  // Malcolm McLean invented the modern shipping container: https://en.wikipedia.org/wiki/Malcom_McLean
  "mclean",
  // Kay McNulty - one of the original programmers of the ENIAC. https://en.wikipedia.org/wiki/ENIAC - https://en.wikipedia.org/wiki/Kathleen_Antonelli
  "mcnulty",
  // Gregor Johann Mendel - Czech scientist and founder of genetics. https://en.wikipedia.org/wiki/Gregor_Mendel
  "mendel",
  // Dmitri Mendeleev - a chemist and inventor. He formulated the Periodic Law, created a farsighted version of the periodic table of elements, and used it to correct the properties of some already discovered elements and also to predict the properties of eight elements yet to be discovered. https://en.wikipedia.org/wiki/Dmitri_Mendeleev
  "mendeleev",
  // Lise Meitner - Austrian/Swedish physicist who was involved in the discovery of nuclear fission. The element meitnerium is named after her - https://en.wikipedia.org/wiki/Lise_Meitner
  "meitner",
  // Carla Meninsky, was the game designer and programmer for Atari 2600 games Dodge 'Em and Warlords. https://en.wikipedia.org/wiki/Carla_Meninsky
  "meninsky",
  // Ralph C. Merkle - American computer scientist, known for devising Merkle's puzzles - one of the very first schemes for public-key cryptography. Also, inventor of Merkle trees and co-inventor of the Merkle-Damgård construction for building collision-resistant cryptographic hash functions and the Merkle-Hellman knapsack cryptosystem. https://en.wikipedia.org/wiki/Ralph_Merkle
  "merkle",
  // Johanna Mestorf - German prehistoric archaeologist and first female museum director in Germany - https://en.wikipedia.org/wiki/Johanna_Mestorf
  "mestorf",
  // Maryam Mirzakhani - an Iranian mathematician and the first woman to win the Fields Medal. https://en.wikipedia.org/wiki/Maryam_Mirzakhani
  "mirzakhani",
  // Rita Levi-Montalcini - Won Nobel Prize in Physiology or Medicine jointly with colleague Stanley Cohen for the discovery of nerve growth factor (https://en.wikipedia.org/wiki/Rita_Levi-Montalcini)
  "montalcini",
  // Gordon Earle Moore - American engineer, Silicon Valley founding father, author of Moore's law. https://en.wikipedia.org/wiki/Gordon_Moore
  "moore",
  // Samuel Morse - contributed to the invention of a single-wire telegraph system based on European telegraphs and was a co-developer of the Morse code - https://en.wikipedia.org/wiki/Samuel_Morse
  "morse",
  // Ian Murdock - founder of the Debian project - https://en.wikipedia.org/wiki/Ian_Murdock
  "murdock",
  // May-Britt Moser - Nobel prize winner neuroscientist who contributed to the discovery of grid cells in the brain. https://en.wikipedia.org/wiki/May-Britt_Moser
  "moser",
  // John Napier of Merchiston - Scottish landowner known as an astronomer, mathematician and physicist. Best known for his discovery of logarithms. https://en.wikipedia.org/wiki/John_Napier
  "napier",
  // John Forbes Nash, Jr. - American mathematician who made fundamental contributions to game theory, differential geometry, and the study of partial differential equations. https://en.wikipedia.org/wiki/John_Forbes_Nash_Jr.
  "nash",
  // John von Neumann - todays computer architectures are based on the von Neumann architecture. https://en.wikipedia.org/wiki/Von_Neumann_architecture
  "neumann",
  // Isaac Newton invented classic mechanics and modern optics. https://en.wikipedia.org/wiki/Isaac_Newton
  "newton",
  // Xavier Niel - ;) https://en.wikipedia.org/wiki/Xavier_Niel
  "niel",
  // Florence Nightingale, more prominently known as a nurse, was also the first female member of the Royal Statistical Society and a pioneer in statistical graphics https://en.wikipedia.org/wiki/Florence_Nightingale#Statistics_and_sanitary_reform
  "nightingale",
  // Alfred Nobel - a Swedish chemist, engineer, innovator, and armaments manufacturer (inventor of dynamite) - https://en.wikipedia.org/wiki/Alfred_Nobel
  "nobel",
  // Emmy Noether, German mathematician. Noether's Theorem is named after her. https://en.wikipedia.org/wiki/Emmy_Noether
  "noether",
  // Poppy Northcutt. Poppy Northcutt was the first woman to work as part of NASA’s Mission Control. http://www.businessinsider.com/poppy-northcutt-helped-apollo-astronauts-2014-12?op=1
  "northcutt",
  // Robert Noyce invented silicon integrated circuits and gave Silicon Valley its name. - https://en.wikipedia.org/wiki/Robert_Noyce
  "noyce",
  // Panini - Ancient Indian linguist and grammarian from 4th century CE who worked on the world's first formal system - https://en.wikipedia.org/wiki/P%C4%81%E1%B9%87ini#Comparison_with_modern_formal_systems
  "panini",
  // Ambroise Pare invented modern surgery. https://en.wikipedia.org/wiki/Ambroise_Par%C3%A9
  "pare",
  // Blaise Pascal, French mathematician, physicist, and inventor - https://en.wikipedia.org/wiki/Blaise_Pascal
  "pascal",
  // Louis Pasteur discovered vaccination, fermentation and pasteurization. https://en.wikipedia.org/wiki/Louis_Pasteur.
  "pasteur",
  // Cecilia Payne-Gaposchkin was an astronomer and astrophysicist who, in 1925, proposed in her Ph.D. thesis an explanation for the composition of stars in terms of the relative abundances of hydrogen and helium. https://en.wikipedia.org/wiki/Cecilia_Payne-Gaposchkin
  "payne",
  // Radia Perlman is a software designer and network engineer and most famous for her invention of the spanning-tree protocol (STP). https://en.wikipedia.org/wiki/Radia_Perlman
  "perlman",
  // Rob Pike was a key contributor to Unix, Plan 9, the X graphic system, utf-8, and the Go programming language. https://en.wikipedia.org/wiki/Rob_Pike
  "pike",
  // Henri Poincaré made fundamental contributions in several fields of mathematics. https://en.wikipedia.org/wiki/Henri_Poincar%C3%A9
  "poincare",
  // Laura Poitras is a director and producer whose work, made possible by open source crypto tools, advances the causes of truth and freedom of information by reporting disclosures by whistleblowers such as Edward Snowden. https://en.wikipedia.org/wiki/Laura_Poitras
  "poitras",
  // Tat’yana Avenirovna Proskuriakova (Russian: Татья́на Авени́ровна Проскуряко́ва) (January 23 [O.S. January 10] 1909 – August 30, 1985) was a Russian-American Mayanist scholar and archaeologist who contributed significantly to the deciphering of Maya hieroglyphs, the writing system of the pre-Columbian Maya civilization of Mesoamerica. https://en.wikipedia.org/wiki/Tatiana_Proskouriakoff
  "proskuriakova",
  // Claudius Ptolemy - a Greco-Egyptian writer of Alexandria, known as a mathematician, astronomer, geographer, astrologer, and poet of a single epigram in the Greek Anthology - https://en.wikipedia.org/wiki/Ptolemy
  "ptolemy",
  // C. V. Raman - Indian physicist who won the Nobel Prize in 1930 for proposing the Raman effect. - https://en.wikipedia.org/wiki/C._V._Raman
  "raman",
  // Srinivasa Ramanujan - Indian mathematician and autodidact who made extraordinary contributions to mathematical analysis, number theory, infinite series, and continued fractions. - https://en.wikipedia.org/wiki/Srinivasa_Ramanujan
  "ramanujan",
  // Sally Kristen Ride was an American physicist and astronaut. She was the first American woman in space, and the youngest American astronaut. https://en.wikipedia.org/wiki/Sally_Ride
  "ride",
  // Dennis Ritchie - co-creator of UNIX and the C programming language. - https://en.wikipedia.org/wiki/Dennis_Ritchie
  "ritchie",
  // Ida Rhodes - American pioneer in computer programming, designed the first computer used for Social Security. https://en.wikipedia.org/wiki/Ida_Rhodes
  "rhodes",
  // Julia Hall Bowman Robinson - American mathematician renowned for her contributions to the fields of computability theory and computational complexity theory. https://en.wikipedia.org/wiki/Julia_Robinson
  "robinson",
  // Wilhelm Conrad Röntgen - German physicist who was awarded the first Nobel Prize in Physics in 1901 for the discovery of X-rays (Röntgen rays). https://en.wikipedia.org/wiki/Wilhelm_R%C3%B6ntgen
  "roentgen",
  // Rosalind Franklin - British biophysicist and X-ray crystallographer whose research was critical to the understanding of DNA - https://en.wikipedia.org/wiki/Rosalind_Franklin
  "rosalind",
  // Vera Rubin - American astronomer who pioneered work on galaxy rotation rates. https://en.wikipedia.org/wiki/Vera_Rubin
  "rubin",
  // Meghnad Saha - Indian astrophysicist best known for his development of the Saha equation, used to describe chemical and physical conditions in stars - https://en.wikipedia.org/wiki/Meghnad_Saha
  "saha",
  // Jean E. Sammet developed FORMAC, the first widely used computer language for symbolic manipulation of mathematical formulas. https://en.wikipedia.org/wiki/Jean_E._Sammet
  "sammet",
  // Mildred Sanderson - American mathematician best known for Sanderson's theorem concerning modular invariants. https://en.wikipedia.org/wiki/Mildred_Sanderson
  "sanderson",
  // Satoshi Nakamoto is the name used by the unknown person or group of people who developed bitcoin, authored the bitcoin white paper, and created and deployed bitcoin's original reference implementation. https://en.wikipedia.org/wiki/Satoshi_Nakamoto
  "satoshi",
  // Adi Shamir - Israeli cryptographer whose numerous inventions and contributions to cryptography include the Ferge Fiat Shamir identification scheme, the Rivest Shamir Adleman (RSA) public-key cryptosystem, the Shamir's secret sharing scheme, the breaking of the Merkle-Hellman cryptosystem, the TWINKLE and TWIRL factoring devices and the discovery of differential cryptanalysis (with Eli Biham). https://en.wikipedia.org/wiki/Adi_Shamir
  "shamir",
  // Claude Shannon - The father of information theory and founder of digital circuit design theory. (https://en.wikipedia.org/wiki/Claude_Shannon)
  "shannon",
  // Carol Shaw - Originally an Atari employee, Carol Shaw is said to be the first female video game designer. https://en.wikipedia.org/wiki/Carol_Shaw_(video_game_designer)
  "shaw",
  // Dame Stephanie "Steve" Shirley - Founded a software company in 1962 employing women working from home. https://en.wikipedia.org/wiki/Steve_Shirley
  "shirley",
  // William Shockley co-invented the transistor - https://en.wikipedia.org/wiki/William_Shockley
  "shockley",
  // Lina Solomonovna Stern (or Shtern; Russian: Лина Соломоновна Штерн; 26 August 1878 – 7 March 1968) was a Soviet biochemist, physiologist and humanist whose medical discoveries saved thousands of lives at the fronts of World War II. She is best known for her pioneering work on blood–brain barrier, which she described as hemato-encephalic barrier in 1921. https://en.wikipedia.org/wiki/Lina_Stern
  "shtern",
  // Françoise Barré-Sinoussi - French virologist and Nobel Prize Laureate in Physiology or Medicine; her work was fundamental in identifying HIV as the cause of AIDS. https://en.wikipedia.org/wiki/Fran%C3%A7oise_Barr%C3%A9-Sinoussi
  "sinoussi",
  // Betty Snyder - one of the original programmers of the ENIAC. https://en.wikipedia.org/wiki/ENIAC - https://en.wikipedia.org/wiki/Betty_Holberton
  "snyder",
  // Cynthia Solomon - Pioneer in the fields of artificial intelligence, computer science and educational computing. Known for creation of Logo, an educational programming language.  https://en.wikipedia.org/wiki/Cynthia_Solomon
  "solomon",
  // Frances Spence - one of the original programmers of the ENIAC. https://en.wikipedia.org/wiki/ENIAC - https://en.wikipedia.org/wiki/Frances_Spence
  "spence",
  // Michael Stonebraker is a database research pioneer and architect of Ingres, Postgres, VoltDB and SciDB. Winner of 2014 ACM Turing Award. https://en.wikipedia.org/wiki/Michael_Stonebraker
  "stonebraker",
  // Ivan Edward Sutherland - American computer scientist and Internet pioneer, widely regarded as the father of computer graphics. https://en.wikipedia.org/wiki/Ivan_Sutherland
  "sutherland",
  // Janese Swanson (with others) developed the first of the Carmen Sandiego games. She went on to found Girl Tech. https://en.wikipedia.org/wiki/Janese_Swanson
  "swanson",
  // Aaron Swartz was influential in creating RSS, Markdown, Creative Commons, Reddit, and much of the internet as we know it today. He was devoted to freedom of information on the web. https://en.wikiquote.org/wiki/Aaron_Swartz
  "swartz",
  // Bertha Swirles was a theoretical physicist who made a number of contributions to early quantum theory. https://en.wikipedia.org/wiki/Bertha_Swirles
  "swirles",
  // Helen Brooke Taussig - American cardiologist and founder of the field of paediatric cardiology. https://en.wikipedia.org/wiki/Helen_B._Taussig
  "taussig",
  // Valentina Tereshkova is a Russian engineer, cosmonaut and politician. She was the first woman to fly to space in 1963. In 2013, at the age of 76, she offered to go on a one-way mission to Mars. https://en.wikipedia.org/wiki/Valentina_Tereshkova
  "tereshkova",
  // Nikola Tesla invented the AC electric system and every gadget ever used by a James Bond villain. https://en.wikipedia.org/wiki/Nikola_Tesla
  "tesla",
  // Marie Tharp - American geologist and oceanic cartographer who co-created the first scientific map of the Atlantic Ocean floor. Her work led to the acceptance of the theories of plate tectonics and continental drift. https://en.wikipedia.org/wiki/Marie_Tharp
  "tharp",
  // Ken Thompson - co-creator of UNIX and the C programming language - https://en.wikipedia.org/wiki/Ken_Thompson
  "thompson",
  // Linus Torvalds invented Linux and Git. https://en.wikipedia.org/wiki/Linus_Torvalds
  "torvalds",
  // Youyou Tu - Chinese pharmaceutical chemist and educator known for discovering artemisinin and dihydroartemisinin, used to treat malaria, which has saved millions of lives. Joint winner of the 2015 Nobel Prize in Physiology or Medicine. https://en.wikipedia.org/wiki/Tu_Youyou
  "tu",
  // Alan Turing was a founding father of computer science. https://en.wikipedia.org/wiki/Alan_Turing.
  "turing",
  // Varahamihira - Ancient Indian mathematician who discovered trigonometric formulae during 505-587 CE - https://en.wikipedia.org/wiki/Var%C4%81hamihira#Contributions
  "varahamihira",
  // Dorothy Vaughan was a NASA mathematician and computer programmer on the SCOUT launch vehicle program that put America's first satellites into space - https://en.wikipedia.org/wiki/Dorothy_Vaughan
  "vaughan",
  // Sir Mokshagundam Visvesvaraya - is a notable Indian engineer.  He is a recipient of the Indian Republic's highest honour, the Bharat Ratna, in 1955. On his birthday, 15 September is celebrated as Engineer's Day in India in his memory - https://en.wikipedia.org/wiki/Visvesvaraya
  "visvesvaraya",
  // Christiane Nüsslein-Volhard - German biologist, won Nobel Prize in Physiology or Medicine in 1995 for research on the genetic control of embryonic development. https://en.wikipedia.org/wiki/Christiane_N%C3%BCsslein-Volhard
  "volhard",
  // Cédric Villani - French mathematician, won Fields Medal, Fermat Prize and Poincaré Price for his work in differential geometry and statistical mechanics. https://en.wikipedia.org/wiki/C%C3%A9dric_Villani
  "villani",
  // Marlyn Wescoff - one of the original programmers of the ENIAC. https://en.wikipedia.org/wiki/ENIAC - https://en.wikipedia.org/wiki/Marlyn_Meltzer
  "wescoff",
  // Sylvia B. Wilbur - British computer scientist who helped develop the ARPANET, was one of the first to exchange email in the UK and a leading researcher in computer-supported collaborative work. https://en.wikipedia.org/wiki/Sylvia_Wilbur
  "wilbur",
  // Andrew Wiles - Notable British mathematician who proved the enigmatic Fermat's Last Theorem - https://en.wikipedia.org/wiki/Andrew_Wiles
  "wiles",
  // Roberta Williams, did pioneering work in graphical adventure games for personal computers, particularly the King's Quest series. https://en.wikipedia.org/wiki/Roberta_Williams
  "williams",
  // Malcolm John Williamson - British mathematician and cryptographer employed by the GCHQ. Developed in 1974 what is now known as Diffie-Hellman key exchange (Diffie and Hellman first published the scheme in 1976). https://en.wikipedia.org/wiki/Malcolm_J._Williamson
  "williamson",
  // Sophie Wilson designed the first Acorn Micro-Computer and the instruction set for ARM processors. https://en.wikipedia.org/wiki/Sophie_Wilson
  "wilson",
  // Jeannette Wing - co-developed the Liskov substitution principle. - https://en.wikipedia.org/wiki/Jeannette_Wing
  "wing",
  // Steve Wozniak invented the Apple I and Apple II. https://en.wikipedia.org/wiki/Steve_Wozniak
  "wozniak",
  // The Wright brothers, Orville and Wilbur - credited with inventing and building the world's first successful airplane and making the first controlled, powered and sustained heavier-than-air human flight - https://en.wikipedia.org/wiki/Wright_brothers
  "wright",
  // Chien-Shiung Wu - Chinese-American experimental physicist who made significant contributions to nuclear physics. https://en.wikipedia.org/wiki/Chien-Shiung_Wu
  "wu",
  // Rosalyn Sussman Yalow - Rosalyn Sussman Yalow was an American medical physicist, and a co-winner of the 1977 Nobel Prize in Physiology or Medicine for development of the radioimmunoassay technique. https://en.wikipedia.org/wiki/Rosalyn_Sussman_Yalow
  "yalow",
  // Ada Yonath - an Israeli crystallographer, the first woman from the Middle East to win a Nobel prize in the sciences. https://en.wikipedia.org/wiki/Ada_Yonath
  "yonath",
  // Nikolay Yegorovich Zhukovsky (Russian: Никола́й Его́рович Жуко́вский, January 17 1847 – March 17, 1921) was a Russian scientist, mathematician and engineer, and a founding father of modern aero- and hydrodynamics. Whereas contemporary scientists scoffed at the idea of human flight, Zhukovsky was the first to undertake the study of airflow. He is often called the Father of Russian Aviation. https://en.wikipedia.org/wiki/Nikolay_Yegorovich_Zhukovsky
  "zhukovsky"
];
const randomName = (prefix = "", separator = "-") => {
  const name = `${ADJECTIVES[Math.floor(Math.random() * ADJECTIVES.length)] ?? ""}${separator}${NAMES[Math.floor(Math.random() * NAMES.length)] ?? ""}`;
  if (name === `boring${separator}wozniak`) {
    return randomName(prefix, separator);
  }
  return prefix.length > 0 ? `${prefix}${separator}${name}` : name;
};
module.exports = randomName;


/***/ }),

/***/ 5735:
/***/ ((__webpack_module__, __unused_webpack___webpack_exports__, __nccwpck_require__) => {

__nccwpck_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
/* harmony import */ var _actions_core__WEBPACK_IMPORTED_MODULE_0__ = __nccwpck_require__(2186);
/* harmony import */ var _scaleway_sdk__WEBPACK_IMPORTED_MODULE_1__ = __nccwpck_require__(5701);



const providers = ['scaleway'];

try {
  const dirsToScan = _actions_core__WEBPACK_IMPORTED_MODULE_0__.getInput('dirs_to_scan');
  const openaiApiKey = _actions_core__WEBPACK_IMPORTED_MODULE_0__.getInput('openai_api_key');
  const openaiModelTypeInference = _actions_core__WEBPACK_IMPORTED_MODULE_0__.getInput('openai_model_type_inference');
  const openaiModelTypeEmbedding = _actions_core__WEBPACK_IMPORTED_MODULE_0__.getInput('openai_model_type_embedding');
  const cloudProvider = _actions_core__WEBPACK_IMPORTED_MODULE_0__.getInput('cloud_provider');
  const providerKeyId = _actions_core__WEBPACK_IMPORTED_MODULE_0__.getInput('provider_key_id');
  const providerKeySecret = _actions_core__WEBPACK_IMPORTED_MODULE_0__.getInput('provider_key_secret');
  const providerProjectId = _actions_core__WEBPACK_IMPORTED_MODULE_0__.getInput('provider_project_id');
  const providerDefaultRegion = _actions_core__WEBPACK_IMPORTED_MODULE_0__.getInput('provider_default_region');
  const providerDefaultZone = _actions_core__WEBPACK_IMPORTED_MODULE_0__.getInput('provider_default_zone');

  // Check required parameters
  if (!dirsToScan) {
    throw new Error('dirs_to_scan is required');
  }
  if (!openaiApiKey) {
    throw new Error('openai_api_key is required');
  }
  if (!providerKeyId) {
    throw new Error('provider_key_id is required');
  }
  if (!providerKeySecret) {
    throw new Error('provider_key_secret is required');
  }

  console.log(`Directories to scan: ${dirsToScan}`);
  console.log(`OpenAI API Key: ${openaiApiKey.substring(0, 5)}...`);
  console.log(`OpenAI Model Type Inference: ${openaiModelTypeInference}`);
  console.log(`OpenAI Model Type Embedding: ${openaiModelTypeEmbedding}`);
  console.log(`Cloud Provider: ${cloudProvider}`);
  console.log(`Provider Key ID: ${providerKeyId.substring(0, 3)}...`);
  console.log(`Provider Key Secret: ${providerKeySecret.substring(0, 5)}...`);


  // Check if the provider is supported
  if (!providers.includes(cloudProvider)) {
    throw new Error(`Unsupported cloud provider: ${cloudProvider}`);
  }

  // Initialize Scaleway API object if the provider is Scaleway
  if (cloudProvider === 'scaleway') {
    if (!providerProjectId) {
      throw new Error('provider_project_id is required');
    }
    if (!providerDefaultRegion) {
      throw new Error('provider_default_region is required');
    }
    if (!providerDefaultZone) {
      throw new Error('provider_default_zone is required');
    }
    console.log(`Provider Project ID: ${providerProjectId.substring(0, 4)}...`);
    console.log(`Provider Default Region: ${providerDefaultRegion}`);
    console.log(`Provider Default Zone: ${providerDefaultZone}`);

    const client = (0,_scaleway_sdk__WEBPACK_IMPORTED_MODULE_1__.createClient)({
      accessKey: providerKeyId,
      secretKey: providerKeySecret,
      defaultProjectId: providerProjectId,
      defaultRegion: providerDefaultRegion,
      defaultZone: providerDefaultZone,
    });

    const containerImage = "ghcr.io/flavienbwk/repochat-action:latest";
    const containerNamespace = `gh-action-${process.env.GITHUB_REPOSITORY.split('/')[1]}`;
    const containerName = `gh-action-${process.env.GITHUB_REPOSITORY.split('/')[1]}`;
    const containerApi = new _scaleway_sdk__WEBPACK_IMPORTED_MODULE_1__.Container.v1beta1.API(client);

    let namespace;
    try {
      namespace = await containerApi.createNamespace({
        name: containerNamespace,
        description: 'Namespace for GitHub Action',
      });
      console.log('Namespace created:', namespace.id);
    } catch (error) {
      if (error.status && error.status === 409) {
        console.log('Namespace already exists, retrieving existing namespace');
        const namespaces = await containerApi.listNamespaces();
        namespace = namespaces.namespaces.find(ns => ns.name === containerNamespace);
        console.log('Retrieved existing namespace:', namespace.id);
      } else {
        console.error('Error creating/retrieving namespace:', error);
        throw error;
      }
    }

    const containerConfig = {
      name: containerName,
      namespaceId: namespace.id,
      registryImage: containerImage,
      port: 80,
      cpuLimit: 1000,
      memoryLimit: 1024,
      minScale: 0,
      maxScale: 2,
      description: 'Repochat Action repochat',
      environmentVariables: {
        OPENAI_API_KEY: openaiApiKey,
        MODEL_TYPE_INFERENCE: openaiModelTypeInference,
        MODEL_TYPE_EMBEDDING: openaiModelTypeEmbedding,
        REPO_NAME: process.env.GITHUB_REPOSITORY,
        REPO_URL: `https://github.com/${process.env.GITHUB_REPOSITORY}`,
        MODE: 'api'
      }
    };

    try {
      let container;
      try {
        // Try to create the container
        container = await containerApi.createContainer(containerConfig);
        console.log('Container created:', container.id);
      } catch (error) {
        if (error.status && error.status === 409) {
          console.log('Container already exists, retrieving existing container');
          const containers = await containerApi.listContainers({ namespaceId: namespace.id });
          container = containers.containers.find(c => c.name === containerName);
          console.log('Retrieved existing container:', container.id);
          
          // Update the existing container with new configuration
          container = await containerApi.updateContainer({
            containerId: container.id,
            ...containerConfig
          });
          console.log('Container updated:', container.id);
        } else {
          throw error;
        }
      }

      // Deploy the container
      const deployedContainer = await containerApi.deployContainer({
        containerId: container.id,
      });
      console.log('Container deployed:', container.id);
      console.log('Deployed at:', container.domainName);

      // Now, retrieve container's endpoint, wait until it's ready with a timeout
      let containerEndpoint;
      try {
        containerEndpoint = await new Promise((resolve, reject) => {
          const startTime = Date.now();
          const timeout = 120000; // 2 minutes timeout
          const interval = setInterval(async () => {
            try {
              // Update container variable with current status
              container = await containerApi.getContainer(container.id);
              console.log('Checking container status every 5 seconds...', container.status);
              if (container.status === 'running') {
                clearInterval(interval);
                resolve(container.domainName);
              }
              if (Date.now() - startTime > timeout) {
                clearInterval(interval);
                reject(new Error('Container deployment timed out after 1 minute'));
              }
            } catch (error) {
              clearInterval(interval);
              reject(error);
            }
          }, 5000);
        });
        console.log('Container endpoint ready!', containerEndpoint);
      } catch (error) {
        console.error('Error while waiting for container endpoint:', error);
        _actions_core__WEBPACK_IMPORTED_MODULE_0__.setFailed(`Action failed: ${error.message}`);
      }

      // Feed RepoChat with repo data
    } catch (error) {
      console.error('Error deploying container:', error);
    }
    
  }
} catch (error) {
  _actions_core__WEBPACK_IMPORTED_MODULE_0__.setFailed(error.message);
}

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } }, 1);

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __nccwpck_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	var threw = true;
/******/ 	try {
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nccwpck_require__);
/******/ 		threw = false;
/******/ 	} finally {
/******/ 		if(threw) delete __webpack_module_cache__[moduleId];
/******/ 	}
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/async module */
/******/ (() => {
/******/ 	var webpackQueues = typeof Symbol === "function" ? Symbol("webpack queues") : "__webpack_queues__";
/******/ 	var webpackExports = typeof Symbol === "function" ? Symbol("webpack exports") : "__webpack_exports__";
/******/ 	var webpackError = typeof Symbol === "function" ? Symbol("webpack error") : "__webpack_error__";
/******/ 	var resolveQueue = (queue) => {
/******/ 		if(queue && !queue.d) {
/******/ 			queue.d = 1;
/******/ 			queue.forEach((fn) => (fn.r--));
/******/ 			queue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));
/******/ 		}
/******/ 	}
/******/ 	var wrapDeps = (deps) => (deps.map((dep) => {
/******/ 		if(dep !== null && typeof dep === "object") {
/******/ 			if(dep[webpackQueues]) return dep;
/******/ 			if(dep.then) {
/******/ 				var queue = [];
/******/ 				queue.d = 0;
/******/ 				dep.then((r) => {
/******/ 					obj[webpackExports] = r;
/******/ 					resolveQueue(queue);
/******/ 				}, (e) => {
/******/ 					obj[webpackError] = e;
/******/ 					resolveQueue(queue);
/******/ 				});
/******/ 				var obj = {};
/******/ 				obj[webpackQueues] = (fn) => (fn(queue));
/******/ 				return obj;
/******/ 			}
/******/ 		}
/******/ 		var ret = {};
/******/ 		ret[webpackQueues] = x => {};
/******/ 		ret[webpackExports] = dep;
/******/ 		return ret;
/******/ 	}));
/******/ 	__nccwpck_require__.a = (module, body, hasAwait) => {
/******/ 		var queue;
/******/ 		hasAwait && ((queue = []).d = 1);
/******/ 		var depQueues = new Set();
/******/ 		var exports = module.exports;
/******/ 		var currentDeps;
/******/ 		var outerResolve;
/******/ 		var reject;
/******/ 		var promise = new Promise((resolve, rej) => {
/******/ 			reject = rej;
/******/ 			outerResolve = resolve;
/******/ 		});
/******/ 		promise[webpackExports] = exports;
/******/ 		promise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise["catch"](x => {}));
/******/ 		module.exports = promise;
/******/ 		body((deps) => {
/******/ 			currentDeps = wrapDeps(deps);
/******/ 			var fn;
/******/ 			var getResult = () => (currentDeps.map((d) => {
/******/ 				if(d[webpackError]) throw d[webpackError];
/******/ 				return d[webpackExports];
/******/ 			}))
/******/ 			var promise = new Promise((resolve) => {
/******/ 				fn = () => (resolve(getResult));
/******/ 				fn.r = 0;
/******/ 				var fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));
/******/ 				currentDeps.map((dep) => (dep[webpackQueues](fnQueue)));
/******/ 			});
/******/ 			return fn.r ? promise : getResult();
/******/ 		}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));
/******/ 		queue && (queue.d = 0);
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/compat */
/******/ 
/******/ if (typeof __nccwpck_require__ !== 'undefined') __nccwpck_require__.ab = new URL('.', import.meta.url).pathname.slice(import.meta.url.match(/^file:\/\/\/\w:/) ? 1 : 0, -1) + "/";
/******/ 
/************************************************************************/
/******/ 
/******/ // startup
/******/ // Load entry module and return exports
/******/ // This entry module used 'module' so it can't be inlined
/******/ var __webpack_exports__ = __nccwpck_require__(5735);
/******/ __webpack_exports__ = await __webpack_exports__;
/******/ 
